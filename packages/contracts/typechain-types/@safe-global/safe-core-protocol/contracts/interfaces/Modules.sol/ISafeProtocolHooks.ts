/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export type SafeProtocolActionStruct = {
  to: AddressLike;
  value: BigNumberish;
  data: BytesLike;
};

export type SafeProtocolActionStructOutput = [
  to: string,
  value: bigint,
  data: string
] & { to: string; value: bigint; data: string };

export type SafeTransactionStruct = {
  actions: SafeProtocolActionStruct[];
  nonce: BigNumberish;
  metadataHash: BytesLike;
};

export type SafeTransactionStructOutput = [
  actions: SafeProtocolActionStructOutput[],
  nonce: bigint,
  metadataHash: string
] & {
  actions: SafeProtocolActionStructOutput[];
  nonce: bigint;
  metadataHash: string;
};

export type SafeRootAccessStruct = {
  action: SafeProtocolActionStruct;
  nonce: BigNumberish;
  metadataHash: BytesLike;
};

export type SafeRootAccessStructOutput = [
  action: SafeProtocolActionStructOutput,
  nonce: bigint,
  metadataHash: string
] & {
  action: SafeProtocolActionStructOutput;
  nonce: bigint;
  metadataHash: string;
};

export interface ISafeProtocolHooksInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "postCheck"
      | "preCheck"
      | "preCheckRootAccess"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "postCheck",
    values: [AddressLike, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "preCheck",
    values: [AddressLike, SafeTransactionStruct, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "preCheckRootAccess",
    values: [AddressLike, SafeRootAccessStruct, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "postCheck", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "preCheck", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "preCheckRootAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export interface ISafeProtocolHooks extends BaseContract {
  connect(runner?: ContractRunner | null): ISafeProtocolHooks;
  waitForDeployment(): Promise<this>;

  interface: ISafeProtocolHooksInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  postCheck: TypedContractMethod<
    [safe: AddressLike, success: boolean, preCheckData: BytesLike],
    [void],
    "nonpayable"
  >;

  preCheck: TypedContractMethod<
    [
      safe: AddressLike,
      tx: SafeTransactionStruct,
      executionType: BigNumberish,
      executionMeta: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  preCheckRootAccess: TypedContractMethod<
    [
      safe: AddressLike,
      rootAccess: SafeRootAccessStruct,
      executionType: BigNumberish,
      executionMeta: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "postCheck"
  ): TypedContractMethod<
    [safe: AddressLike, success: boolean, preCheckData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "preCheck"
  ): TypedContractMethod<
    [
      safe: AddressLike,
      tx: SafeTransactionStruct,
      executionType: BigNumberish,
      executionMeta: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "preCheckRootAccess"
  ): TypedContractMethod<
    [
      safe: AddressLike,
      rootAccess: SafeRootAccessStruct,
      executionType: BigNumberish,
      executionMeta: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  filters: {};
}
