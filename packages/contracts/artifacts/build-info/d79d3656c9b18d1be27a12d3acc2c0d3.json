{"id":"d79d3656c9b18d1be27a12d3acc2c0d3","_format":"hh-sol-build-info-1","solcVersion":"0.8.23","solcLongVersion":"0.8.23+commit.f704f362","input":{"language":"Solidity","sources":{"@account-abstraction/contracts/core/Helpers.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n/* solhint-disable no-inline-assembly */\n\n/**\n * returned data from validateUserOp.\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\n * @param aggregator - address(0) - the account validated the signature by itself.\n *              address(1) - the account failed to validate the signature.\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\n * @param validAfter - this UserOp is valid only after this timestamp.\n * @param validaUntil - this UserOp is valid only up to this timestamp.\n */\n    struct ValidationData {\n        address aggregator;\n        uint48 validAfter;\n        uint48 validUntil;\n    }\n\n//extract sigFailed, validAfter, validUntil.\n// also convert zero validUntil to type(uint48).max\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\n        address aggregator = address(uint160(validationData));\n        uint48 validUntil = uint48(validationData >> 160);\n        if (validUntil == 0) {\n            validUntil = type(uint48).max;\n        }\n        uint48 validAfter = uint48(validationData >> (48 + 160));\n        return ValidationData(aggregator, validAfter, validUntil);\n    }\n\n// intersect account and paymaster ranges.\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\n        address aggregator = accountValidationData.aggregator;\n        if (aggregator == address(0)) {\n            aggregator = pmValidationData.aggregator;\n        }\n        uint48 validAfter = accountValidationData.validAfter;\n        uint48 validUntil = accountValidationData.validUntil;\n        uint48 pmValidAfter = pmValidationData.validAfter;\n        uint48 pmValidUntil = pmValidationData.validUntil;\n\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\n        return ValidationData(aggregator, validAfter, validUntil);\n    }\n\n/**\n * helper to pack the return value for validateUserOp\n * @param data - the ValidationData to pack\n */\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\n    }\n\n/**\n * helper to pack the return value for validateUserOp, when not using an aggregator\n * @param sigFailed - true for signature failure, false for success\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\n * @param validAfter first timestamp this UserOperation is valid\n */\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\n    }\n\n/**\n * keccak function over calldata.\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\n */\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\n        assembly {\n            let mem := mload(0x40)\n            let len := data.length\n            calldatacopy(mem, data.offset, len)\n            ret := keccak256(mem, len)\n        }\n    }\n\n"},"@account-abstraction/contracts/interfaces/IAccount.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\nimport \"./UserOperation.sol\";\n\ninterface IAccount {\n\n    /**\n     * Validate user's signature and nonce\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\n     * This allows making a \"simulation call\" without a valid signature\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\n     *\n     * @dev Must validate caller is the entryPoint.\n     *      Must validate the signature and nonce\n     * @param userOp the operation that is about to be executed.\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\n     *      The excess is left as a deposit in the entrypoint, for future calls.\n     *      can be withdrawn anytime using \"entryPoint.withdrawTo()\"\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\n     *         otherwise, an address of an \"authorizer\" contract.\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"\n     *      <6-byte> validAfter - first timestamp this operation is valid\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\n     */\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\n    external returns (uint256 validationData);\n}\n"},"@account-abstraction/contracts/interfaces/UserOperation.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n/* solhint-disable no-inline-assembly */\n\nimport {calldataKeccak} from \"../core/Helpers.sol\";\n\n/**\n * User Operation struct\n * @param sender the sender account of this request.\n     * @param nonce unique value the sender uses to verify it is not a replay.\n     * @param initCode if set, the account contract will be created by this constructor/\n     * @param callData the method call to execute on this account.\n     * @param callGasLimit the gas limit passed to the callData method call.\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\n     */\n    struct UserOperation {\n\n        address sender;\n        uint256 nonce;\n        bytes initCode;\n        bytes callData;\n        uint256 callGasLimit;\n        uint256 verificationGasLimit;\n        uint256 preVerificationGas;\n        uint256 maxFeePerGas;\n        uint256 maxPriorityFeePerGas;\n        bytes paymasterAndData;\n        bytes signature;\n    }\n\n/**\n * Utility functions helpful when working with UserOperation structs.\n */\nlibrary UserOperationLib {\n\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\n        address data;\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\n        assembly {data := calldataload(userOp)}\n        return address(uint160(data));\n    }\n\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\n    // pay above what he signed for.\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\n    unchecked {\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\n        if (maxFeePerGas == maxPriorityFeePerGas) {\n            //legacy mode (for networks that don't support basefee opcode)\n            return maxFeePerGas;\n        }\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\n    }\n    }\n\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\n        address sender = getSender(userOp);\n        uint256 nonce = userOp.nonce;\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\n        uint256 callGasLimit = userOp.callGasLimit;\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\n        uint256 preVerificationGas = userOp.preVerificationGas;\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\n\n        return abi.encode(\n            sender, nonce,\n            hashInitCode, hashCallData,\n            callGasLimit, verificationGasLimit, preVerificationGas,\n            maxFeePerGas, maxPriorityFeePerGas,\n            hashPaymasterAndData\n        );\n    }\n\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\n        return keccak256(pack(userOp));\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n"},"@across-protocol/contracts-v2/contracts/interfaces/V3SpokePoolInterface.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\n// Contains structs and functions used by SpokePool contracts to facilitate universal settlement.\ninterface V3SpokePoolInterface {\n    /**************************************\n     *              ENUMS                 *\n     **************************************/\n\n    // Fill status tracks on-chain state of deposit, uniquely identified by relayHash.\n    enum FillStatus {\n        Unfilled,\n        RequestedSlowFill,\n        Filled\n    }\n    // Fill type is emitted in the FilledRelay event to assist Dataworker with determining which types of\n    // fills to refund (e.g. only fast fills) and whether a fast fill created a sow fill excess.\n    enum FillType {\n        FastFill,\n        // Fast fills are normal fills that do not replace a slow fill request.\n        ReplacedSlowFill,\n        // Replaced slow fills are fast fills that replace a slow fill request. This type is used by the Dataworker\n        // to know when to send excess funds from the SpokePool to the HubPool because they can no longer be used\n        // for a slow fill execution.\n        SlowFill\n        // Slow fills are requested via requestSlowFill and executed by executeSlowRelayLeaf after a bundle containing\n        // the slow fill is validated.\n    }\n\n    /**************************************\n     *              STRUCTS               *\n     **************************************/\n\n    // This struct represents the data to fully specify a **unique** relay submitted on this chain.\n    // This data is hashed with the chainId() and saved by the SpokePool to prevent collisions and protect against\n    // replay attacks on other chains. If any portion of this data differs, the relay is considered to be\n    // completely distinct.\n    struct V3RelayData {\n        // The address that made the deposit on the origin chain.\n        address depositor;\n        // The recipient address on the destination chain.\n        address recipient;\n        // This is the exclusive relayer who can fill the deposit before the exclusivity deadline.\n        address exclusiveRelayer;\n        // Token that is deposited on origin chain by depositor.\n        address inputToken;\n        // Token that is received on destination chain by recipient.\n        address outputToken;\n        // The amount of input token deposited by depositor.\n        uint256 inputAmount;\n        // The amount of output token to be received by recipient.\n        uint256 outputAmount;\n        // Origin chain id.\n        uint256 originChainId;\n        // The id uniquely identifying this deposit on the origin chain.\n        uint32 depositId;\n        // The timestamp on the destination chain after which this deposit can no longer be filled.\n        uint32 fillDeadline;\n        // The timestamp on the destination chain after which any relayer can fill the deposit.\n        uint32 exclusivityDeadline;\n        // Data that is forwarded to the recipient.\n        bytes message;\n    }\n\n    // Contains parameters passed in by someone who wants to execute a slow relay leaf.\n    struct V3SlowFill {\n        V3RelayData relayData;\n        uint256 chainId;\n        uint256 updatedOutputAmount;\n    }\n\n    // Contains information about a relay to be sent along with additional information that is not unique to the\n    // relay itself but is required to know how to process the relay. For example, \"updatedX\" fields can be used\n    // by the relayer to modify fields of the relay with the depositor's permission, and \"repaymentChainId\" is specified\n    // by the relayer to determine where to take a relayer refund, but doesn't affect the uniqueness of the relay.\n    struct V3RelayExecutionParams {\n        V3RelayData relay;\n        bytes32 relayHash;\n        uint256 updatedOutputAmount;\n        address updatedRecipient;\n        bytes updatedMessage;\n        uint256 repaymentChainId;\n    }\n\n    // Packs together parameters emitted in FilledV3Relay because there are too many emitted otherwise.\n    // Similar to V3RelayExecutionParams, these parameters are not used to uniquely identify the deposit being\n    // filled so they don't have to be unpacked by all clients.\n    struct V3RelayExecutionEventInfo {\n        address updatedRecipient;\n        bytes updatedMessage;\n        uint256 updatedOutputAmount;\n        FillType fillType;\n    }\n\n    /**************************************\n     *              EVENTS                *\n     **************************************/\n\n    event V3FundsDeposited(\n        address inputToken,\n        address outputToken,\n        uint256 inputAmount,\n        uint256 outputAmount,\n        uint256 indexed destinationChainId,\n        uint32 indexed depositId,\n        uint32 quoteTimestamp,\n        uint32 fillDeadline,\n        uint32 exclusivityDeadline,\n        address indexed depositor,\n        address recipient,\n        address exclusiveRelayer,\n        bytes message\n    );\n\n    event RequestedSpeedUpV3Deposit(\n        uint256 updatedOutputAmount,\n        uint32 indexed depositId,\n        address indexed depositor,\n        address updatedRecipient,\n        bytes updatedMessage,\n        bytes depositorSignature\n    );\n\n    event FilledV3Relay(\n        address inputToken,\n        address outputToken,\n        uint256 inputAmount,\n        uint256 outputAmount,\n        uint256 repaymentChainId,\n        uint256 indexed originChainId,\n        uint32 indexed depositId,\n        uint32 fillDeadline,\n        uint32 exclusivityDeadline,\n        address exclusiveRelayer,\n        address indexed relayer,\n        address depositor,\n        address recipient,\n        bytes message,\n        V3RelayExecutionEventInfo relayExecutionInfo\n    );\n\n    event RequestedV3SlowFill(\n        address inputToken,\n        address outputToken,\n        uint256 inputAmount,\n        uint256 outputAmount,\n        uint256 indexed originChainId,\n        uint32 indexed depositId,\n        uint32 fillDeadline,\n        uint32 exclusivityDeadline,\n        address exclusiveRelayer,\n        address depositor,\n        address recipient,\n        bytes message\n    );\n\n    /**************************************\n     *              FUNCTIONS             *\n     **************************************/\n\n    function depositV3(\n        address depositor,\n        address recipient,\n        address inputToken,\n        address outputToken,\n        uint256 inputAmount,\n        uint256 outputAmount,\n        uint256 destinationChainId,\n        address exclusiveRelayer,\n        uint32 quoteTimestamp,\n        uint32 fillDeadline,\n        uint32 exclusivityDeadline,\n        bytes calldata message\n    ) external payable;\n\n    function speedUpV3Deposit(\n        address depositor,\n        uint32 depositId,\n        uint256 updatedOutputAmount,\n        address updatedRecipient,\n        bytes calldata updatedMessage,\n        bytes calldata depositorSignature\n    ) external;\n\n    function fillV3Relay(V3RelayData calldata relayData, uint256 repaymentChainId) external;\n\n    function fillV3RelayWithUpdatedDeposit(\n        V3RelayData calldata relayData,\n        uint256 repaymentChainId,\n        uint256 updatedOutputAmount,\n        address updatedRecipient,\n        bytes calldata updatedMessage,\n        bytes calldata depositorSignature\n    ) external;\n\n    function requestV3SlowFill(V3RelayData calldata relayData) external;\n\n    function executeV3SlowRelayLeaf(\n        V3SlowFill calldata slowFillLeaf,\n        uint32 rootBundleId,\n        bytes32[] calldata proof\n    ) external;\n\n    /**************************************\n     *              ERRORS                *\n     **************************************/\n\n    error DisabledRoute();\n    error InvalidQuoteTimestamp();\n    error InvalidFillDeadline();\n    error InvalidExclusiveRelayer();\n    error InvalidExclusivityDeadline();\n    error MsgValueDoesNotMatchInputAmount();\n    error NotExclusiveRelayer();\n    error NoSlowFillsInExclusivityWindow();\n    error RelayFilled();\n    error InvalidSlowFillRequest();\n    error ExpiredFillDeadline();\n    error InvalidMerkleProof();\n    error InvalidChainId();\n    error InvalidMerkleLeaf();\n    error ClaimedMerkleLeaf();\n    error InvalidPayoutAdjustmentPct();\n}\n"},"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IAny2EVMMessageReceiver} from \"../interfaces/IAny2EVMMessageReceiver.sol\";\n\nimport {Client} from \"../libraries/Client.sol\";\n\nimport {IERC165} from \"../../vendor/openzeppelin-solidity/v4.8.0/contracts/utils/introspection/IERC165.sol\";\n\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\n  address internal immutable i_router;\n\n  constructor(address router) {\n    if (router == address(0)) revert InvalidRouter(address(0));\n    i_router = router;\n  }\n\n  /// @notice IERC165 supports an interfaceId\n  /// @param interfaceId The interfaceId to check\n  /// @return true if the interfaceId is supported\n  /// @dev Should indicate whether the contract implements IAny2EVMMessageReceiver\n  /// e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId\n  /// This allows CCIP to check if ccipReceive is available before calling it.\n  /// If this returns false or reverts, only tokens are transferred to the receiver.\n  /// If this returns true, tokens are transferred and ccipReceive is called atomically.\n  /// Additionally, if the receiver address does not have code associated with\n  /// it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\n  function supportsInterface(bytes4 interfaceId) public pure virtual override returns (bool) {\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\n  }\n\n  /// @inheritdoc IAny2EVMMessageReceiver\n  function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\n    _ccipReceive(message);\n  }\n\n  /// @notice Override this function in your implementation.\n  /// @param message Any2EVMMessage\n  function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\n\n  /////////////////////////////////////////////////////////////////////\n  // Plumbing\n  /////////////////////////////////////////////////////////////////////\n\n  /// @notice Return the current router\n  /// @return i_router address\n  function getRouter() public view returns (address) {\n    return address(i_router);\n  }\n\n  error InvalidRouter(address router);\n\n  /// @dev only calls from the set router are accepted.\n  modifier onlyRouter() {\n    if (msg.sender != address(i_router)) revert InvalidRouter(msg.sender);\n    _;\n  }\n}\n"},"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Client} from \"../libraries/Client.sol\";\n\n/// @notice Application contracts that intend to receive messages from\n/// the router should implement this interface.\ninterface IAny2EVMMessageReceiver {\n  /// @notice Called by the Router to deliver a message.\n  /// If this reverts, any token transfers also revert. The message\n  /// will move to a FAILED state and become available for manual execution.\n  /// @param message CCIP Message\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\n}\n"},"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// End consumer library.\nlibrary Client {\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\n  struct EVMTokenAmount {\n    address token; // token address on the local chain.\n    uint256 amount; // Amount of tokens.\n  }\n\n  struct Any2EVMMessage {\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\n    uint64 sourceChainSelector; // Source chain selector.\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\n    bytes data; // payload sent in original message.\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\n  }\n\n  // If extraArgs is empty bytes, the default is 200k gas limit.\n  struct EVM2AnyMessage {\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\n    bytes data; // Data payload\n    EVMTokenAmount[] tokenAmounts; // Token transfers\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\n  }\n\n  // bytes4(keccak256(\"CCIP EVMExtraArgsV1\"));\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\n  struct EVMExtraArgsV1 {\n    uint256 gasLimit;\n  }\n\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\n  }\n}\n"},"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}"},"@safe-global/safe-contracts/contracts/base/Executor.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport \"../common/Enum.sol\";\n\n/**\n * @title Executor - A contract that can execute transactions\n * @author Richard Meissner - @rmeissner\n */\nabstract contract Executor {\n    /**\n     * @notice Executes either a delegatecall or a call with provided parameters.\n     * @dev This method doesn't perform any sanity check of the transaction, such as:\n     *      - if the contract at `to` address has code or not\n     *      It is the responsibility of the caller to perform such checks.\n     * @param to Destination address.\n     * @param value Ether value.\n     * @param data Data payload.\n     * @param operation Operation type.\n     * @return success boolean flag indicating if the call succeeded.\n     */\n    function execute(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        uint256 txGas\n    ) internal returns (bool success) {\n        if (operation == Enum.Operation.DelegateCall) {\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\n            }\n        } else {\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\n            }\n        }\n    }\n}\n"},"@safe-global/safe-contracts/contracts/base/FallbackManager.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"../common/SelfAuthorized.sol\";\n\n/**\n * @title Fallback Manager - A contract managing fallback calls made to this contract\n * @author Richard Meissner - @rmeissner\n */\nabstract contract FallbackManager is SelfAuthorized {\n    event ChangedFallbackHandler(address indexed handler);\n\n    // keccak256(\"fallback_manager.handler.address\")\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\n\n    /**\n     *  @notice Internal function to set the fallback handler.\n     *  @param handler contract to handle fallback calls.\n     */\n    function internalSetFallbackHandler(address handler) internal {\n        /*\n            If a fallback handler is set to self, then the following attack vector is opened:\n            Imagine we have a function like this:\n            function withdraw() internal authorized {\n                withdrawalAddress.call.value(address(this).balance)(\"\");\n            }\n\n            If the fallback method is triggered, the fallback handler appends the msg.sender address to the calldata and calls the fallback handler.\n            A potential attacker could call a Safe with the 3 bytes signature of a withdraw function. Since 3 bytes do not create a valid signature,\n            the call would end in a fallback handler. Since it appends the msg.sender address to the calldata, the attacker could craft an address \n            where the first 3 bytes of the previous calldata + the first byte of the address make up a valid function signature. The subsequent call would result in unsanctioned access to Safe's internal protected methods.\n            For some reason, solidity matches the first 4 bytes of the calldata to a function signature, regardless if more data follow these 4 bytes.\n        */\n        require(handler != address(this), \"GS400\");\n\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sstore(slot, handler)\n        }\n    }\n\n    /**\n     * @notice Set Fallback Handler to `handler` for the Safe.\n     * @dev Only fallback calls without value and with data will be forwarded.\n     *      This can only be done via a Safe transaction.\n     *      Cannot be set to the Safe itself.\n     * @param handler contract to handle fallback calls.\n     */\n    function setFallbackHandler(address handler) public authorized {\n        internalSetFallbackHandler(handler);\n        emit ChangedFallbackHandler(handler);\n    }\n\n    // @notice Forwards all calls to the fallback handler if set. Returns 0 if no handler is set.\n    // @dev Appends the non-padded caller address to the calldata to be optionally used in the handler\n    //      The handler can make us of `HandlerContext.sol` to extract the address.\n    //      This is done because in the next call frame the `msg.sender` will be FallbackManager's address\n    //      and having the original caller address may enable additional verification scenarios.\n    // solhint-disable-next-line payable-fallback,no-complex-fallback\n    fallback() external {\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let handler := sload(slot)\n            if iszero(handler) {\n                return(0, 0)\n            }\n            calldatacopy(0, 0, calldatasize())\n            // The msg.sender address is shifted to the left by 12 bytes to remove the padding\n            // Then the address without padding is stored right after the calldata\n            mstore(calldatasize(), shl(96, caller()))\n            // Add 20 bytes for the address appended add the end\n            let success := call(gas(), handler, 0, 0, add(calldatasize(), 20), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n            if iszero(success) {\n                revert(0, returndatasize())\n            }\n            return(0, returndatasize())\n        }\n    }\n}\n"},"@safe-global/safe-contracts/contracts/base/GuardManager.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"../common/Enum.sol\";\nimport \"../common/SelfAuthorized.sol\";\nimport \"../interfaces/IERC165.sol\";\n\ninterface Guard is IERC165 {\n    function checkTransaction(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes memory signatures,\n        address msgSender\n    ) external;\n\n    function checkAfterExecution(bytes32 txHash, bool success) external;\n}\n\nabstract contract BaseGuard is Guard {\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\n        return\n            interfaceId == type(Guard).interfaceId || // 0xe6d7a83a\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\n    }\n}\n\n/**\n * @title Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.\n * @author Richard Meissner - @rmeissner\n */\nabstract contract GuardManager is SelfAuthorized {\n    event ChangedGuard(address indexed guard);\n\n    // keccak256(\"guard_manager.guard.address\")\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\n\n    /**\n     * @dev Set a guard that checks transactions before execution\n     *      This can only be done via a Safe transaction.\n     *      ⚠️ IMPORTANT: Since a guard has full power to block Safe transaction execution,\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\n     *        audit the guard code and design recovery mechanisms.\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\n     */\n    function setGuard(address guard) external authorized {\n        if (guard != address(0)) {\n            require(Guard(guard).supportsInterface(type(Guard).interfaceId), \"GS300\");\n        }\n        bytes32 slot = GUARD_STORAGE_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sstore(slot, guard)\n        }\n        emit ChangedGuard(guard);\n    }\n\n    /**\n     * @dev Internal method to retrieve the current guard\n     *      We do not have a public method because we're short on bytecode size limit,\n     *      to retrieve the guard address, one can use `getStorageAt` from `StorageAccessible` contract\n     *      with the slot `GUARD_STORAGE_SLOT`\n     * @return guard The address of the guard\n     */\n    function getGuard() internal view returns (address guard) {\n        bytes32 slot = GUARD_STORAGE_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            guard := sload(slot)\n        }\n    }\n}\n"},"@safe-global/safe-contracts/contracts/base/ModuleManager.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport \"../common/Enum.sol\";\nimport \"../common/SelfAuthorized.sol\";\nimport \"./Executor.sol\";\n\n/**\n * @title Module Manager - A contract managing Safe modules\n * @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\n           ⚠️ WARNING: Modules are a security risk since they can execute arbitrary transactions, \n           so only trusted and audited modules should be added to a Safe. A malicious module can\n           completely takeover a Safe.\n * @author Stefan George - @Georgi87\n * @author Richard Meissner - @rmeissner\n */\nabstract contract ModuleManager is SelfAuthorized, Executor {\n    event EnabledModule(address indexed module);\n    event DisabledModule(address indexed module);\n    event ExecutionFromModuleSuccess(address indexed module);\n    event ExecutionFromModuleFailure(address indexed module);\n\n    address internal constant SENTINEL_MODULES = address(0x1);\n\n    mapping(address => address) internal modules;\n\n    /**\n     * @notice Setup function sets the initial storage of the contract.\n     *         Optionally executes a delegate call to another contract to setup the modules.\n     * @param to Optional destination address of call to execute.\n     * @param data Optional data of call to execute.\n     */\n    function setupModules(address to, bytes memory data) internal {\n        require(modules[SENTINEL_MODULES] == address(0), \"GS100\");\n        modules[SENTINEL_MODULES] = SENTINEL_MODULES;\n        if (to != address(0)) {\n            require(isContract(to), \"GS002\");\n            // Setup has to complete successfully or transaction fails.\n            require(execute(to, 0, data, Enum.Operation.DelegateCall, type(uint256).max), \"GS000\");\n        }\n    }\n\n    /**\n     * @notice Enables the module `module` for the Safe.\n     * @dev This can only be done via a Safe transaction.\n     * @param module Module to be whitelisted.\n     */\n    function enableModule(address module) public authorized {\n        // Module address cannot be null or sentinel.\n        require(module != address(0) && module != SENTINEL_MODULES, \"GS101\");\n        // Module cannot be added twice.\n        require(modules[module] == address(0), \"GS102\");\n        modules[module] = modules[SENTINEL_MODULES];\n        modules[SENTINEL_MODULES] = module;\n        emit EnabledModule(module);\n    }\n\n    /**\n     * @notice Disables the module `module` for the Safe.\n     * @dev This can only be done via a Safe transaction.\n     * @param prevModule Previous module in the modules linked list.\n     * @param module Module to be removed.\n     */\n    function disableModule(address prevModule, address module) public authorized {\n        // Validate module address and check that it corresponds to module index.\n        require(module != address(0) && module != SENTINEL_MODULES, \"GS101\");\n        require(modules[prevModule] == module, \"GS103\");\n        modules[prevModule] = modules[module];\n        modules[module] = address(0);\n        emit DisabledModule(module);\n    }\n\n    /**\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\n     * @dev Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\n     * @param to Destination address of module transaction.\n     * @param value Ether value of module transaction.\n     * @param data Data payload of module transaction.\n     * @param operation Operation type of module transaction.\n     * @return success Boolean flag indicating if the call succeeded.\n     */\n    function execTransactionFromModule(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) public virtual returns (bool success) {\n        // Only whitelisted modules are allowed.\n        require(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0), \"GS104\");\n        // Execute transaction without further confirmations.\n        success = execute(to, value, data, operation, type(uint256).max);\n        if (success) emit ExecutionFromModuleSuccess(msg.sender);\n        else emit ExecutionFromModuleFailure(msg.sender);\n    }\n\n    /**\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\n     * @param to Destination address of module transaction.\n     * @param value Ether value of module transaction.\n     * @param data Data payload of module transaction.\n     * @param operation Operation type of module transaction.\n     * @return success Boolean flag indicating if the call succeeded.\n     * @return returnData Data returned by the call.\n     */\n    function execTransactionFromModuleReturnData(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) public returns (bool success, bytes memory returnData) {\n        success = execTransactionFromModule(to, value, data, operation);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Load free memory location\n            let ptr := mload(0x40)\n            // We allocate memory for the return data by setting the free memory location to\n            // current free memory location + data size + 32 bytes for data size value\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\n            // Store the size\n            mstore(ptr, returndatasize())\n            // Store the data\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\n            // Point the return data to the correct memory location\n            returnData := ptr\n        }\n    }\n\n    /**\n     * @notice Returns if an module is enabled\n     * @return True if the module is enabled\n     */\n    function isModuleEnabled(address module) public view returns (bool) {\n        return SENTINEL_MODULES != module && modules[module] != address(0);\n    }\n\n    /**\n     * @notice Returns an array of modules.\n     *         If all entries fit into a single page, the next pointer will be 0x1.\n     *         If another page is present, next will be the last element of the returned array.\n     * @param start Start of the page. Has to be a module or start pointer (0x1 address)\n     * @param pageSize Maximum number of modules that should be returned. Has to be > 0\n     * @return array Array of modules.\n     * @return next Start of the next page.\n     */\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next) {\n        require(start == SENTINEL_MODULES || isModuleEnabled(start), \"GS105\");\n        require(pageSize > 0, \"GS106\");\n        // Init array with max page size\n        array = new address[](pageSize);\n\n        // Populate return array\n        uint256 moduleCount = 0;\n        next = modules[start];\n        while (next != address(0) && next != SENTINEL_MODULES && moduleCount < pageSize) {\n            array[moduleCount] = next;\n            next = modules[next];\n            moduleCount++;\n        }\n\n        /**\n          Because of the argument validation, we can assume that the loop will always iterate over the valid module list values\n          and the `next` variable will either be an enabled module or a sentinel address (signalling the end). \n          \n          If we haven't reached the end inside the loop, we need to set the next pointer to the last element of the modules array\n          because the `next` variable (which is a module by itself) acting as a pointer to the start of the next page is neither \n          included to the current page, nor will it be included in the next one if you pass it as a start.\n        */\n        if (next != SENTINEL_MODULES) {\n            next = array[moduleCount - 1];\n        }\n        // Set correct size of returned array\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            mstore(array, moduleCount)\n        }\n    }\n\n    /**\n     * @notice Returns true if `account` is a contract.\n     * @dev This function will return false if invoked during the constructor of a contract,\n     *      as the code is not actually created until after the constructor finishes.\n     * @param account The address being queried\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n}\n"},"@safe-global/safe-contracts/contracts/base/OwnerManager.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport \"../common/SelfAuthorized.sol\";\n\n/**\n * @title OwnerManager - Manages Safe owners and a threshold to authorize transactions.\n * @dev Uses a linked list to store the owners because the code generate by the solidity compiler\n *      is more efficient than using a dynamic array.\n * @author Stefan George - @Georgi87\n * @author Richard Meissner - @rmeissner\n */\nabstract contract OwnerManager is SelfAuthorized {\n    event AddedOwner(address indexed owner);\n    event RemovedOwner(address indexed owner);\n    event ChangedThreshold(uint256 threshold);\n\n    address internal constant SENTINEL_OWNERS = address(0x1);\n\n    mapping(address => address) internal owners;\n    uint256 internal ownerCount;\n    uint256 internal threshold;\n\n    /**\n     * @notice Sets the initial storage of the contract.\n     * @param _owners List of Safe owners.\n     * @param _threshold Number of required confirmations for a Safe transaction.\n     */\n    function setupOwners(address[] memory _owners, uint256 _threshold) internal {\n        // Threshold can only be 0 at initialization.\n        // Check ensures that setup function can only be called once.\n        require(threshold == 0, \"GS200\");\n        // Validate that threshold is smaller than number of added owners.\n        require(_threshold <= _owners.length, \"GS201\");\n        // There has to be at least one Safe owner.\n        require(_threshold >= 1, \"GS202\");\n        // Initializing Safe owners.\n        address currentOwner = SENTINEL_OWNERS;\n        for (uint256 i = 0; i < _owners.length; i++) {\n            // Owner address cannot be null.\n            address owner = _owners[i];\n            require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this) && currentOwner != owner, \"GS203\");\n            // No duplicate owners allowed.\n            require(owners[owner] == address(0), \"GS204\");\n            owners[currentOwner] = owner;\n            currentOwner = owner;\n        }\n        owners[currentOwner] = SENTINEL_OWNERS;\n        ownerCount = _owners.length;\n        threshold = _threshold;\n    }\n\n    /**\n     * @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\n     * @dev This can only be done via a Safe transaction.\n     * @param owner New owner address.\n     * @param _threshold New threshold.\n     */\n    function addOwnerWithThreshold(address owner, uint256 _threshold) public authorized {\n        // Owner address cannot be null, the sentinel or the Safe itself.\n        require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this), \"GS203\");\n        // No duplicate owners allowed.\n        require(owners[owner] == address(0), \"GS204\");\n        owners[owner] = owners[SENTINEL_OWNERS];\n        owners[SENTINEL_OWNERS] = owner;\n        ownerCount++;\n        emit AddedOwner(owner);\n        // Change threshold if threshold was changed.\n        if (threshold != _threshold) changeThreshold(_threshold);\n    }\n\n    /**\n     * @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\n     * @dev This can only be done via a Safe transaction.\n     * @param prevOwner Owner that pointed to the owner to be removed in the linked list\n     * @param owner Owner address to be removed.\n     * @param _threshold New threshold.\n     */\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) public authorized {\n        // Only allow to remove an owner, if threshold can still be reached.\n        require(ownerCount - 1 >= _threshold, \"GS201\");\n        // Validate owner address and check that it corresponds to owner index.\n        require(owner != address(0) && owner != SENTINEL_OWNERS, \"GS203\");\n        require(owners[prevOwner] == owner, \"GS205\");\n        owners[prevOwner] = owners[owner];\n        owners[owner] = address(0);\n        ownerCount--;\n        emit RemovedOwner(owner);\n        // Change threshold if threshold was changed.\n        if (threshold != _threshold) changeThreshold(_threshold);\n    }\n\n    /**\n     * @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\n     * @dev This can only be done via a Safe transaction.\n     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list\n     * @param oldOwner Owner address to be replaced.\n     * @param newOwner New owner address.\n     */\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) public authorized {\n        // Owner address cannot be null, the sentinel or the Safe itself.\n        require(newOwner != address(0) && newOwner != SENTINEL_OWNERS && newOwner != address(this), \"GS203\");\n        // No duplicate owners allowed.\n        require(owners[newOwner] == address(0), \"GS204\");\n        // Validate oldOwner address and check that it corresponds to owner index.\n        require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, \"GS203\");\n        require(owners[prevOwner] == oldOwner, \"GS205\");\n        owners[newOwner] = owners[oldOwner];\n        owners[prevOwner] = newOwner;\n        owners[oldOwner] = address(0);\n        emit RemovedOwner(oldOwner);\n        emit AddedOwner(newOwner);\n    }\n\n    /**\n     * @notice Changes the threshold of the Safe to `_threshold`.\n     * @dev This can only be done via a Safe transaction.\n     * @param _threshold New threshold.\n     */\n    function changeThreshold(uint256 _threshold) public authorized {\n        // Validate that threshold is smaller than number of owners.\n        require(_threshold <= ownerCount, \"GS201\");\n        // There has to be at least one Safe owner.\n        require(_threshold >= 1, \"GS202\");\n        threshold = _threshold;\n        emit ChangedThreshold(threshold);\n    }\n\n    /**\n     * @notice Returns the number of required confirmations for a Safe transaction aka the threshold.\n     * @return Threshold number.\n     */\n    function getThreshold() public view returns (uint256) {\n        return threshold;\n    }\n\n    /**\n     * @notice Returns if `owner` is an owner of the Safe.\n     * @return Boolean if owner is an owner of the Safe.\n     */\n    function isOwner(address owner) public view returns (bool) {\n        return owner != SENTINEL_OWNERS && owners[owner] != address(0);\n    }\n\n    /**\n     * @notice Returns a list of Safe owners.\n     * @return Array of Safe owners.\n     */\n    function getOwners() public view returns (address[] memory) {\n        address[] memory array = new address[](ownerCount);\n\n        // populate return array\n        uint256 index = 0;\n        address currentOwner = owners[SENTINEL_OWNERS];\n        while (currentOwner != SENTINEL_OWNERS) {\n            array[index] = currentOwner;\n            currentOwner = owners[currentOwner];\n            index++;\n        }\n        return array;\n    }\n}\n"},"@safe-global/safe-contracts/contracts/common/Enum.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title Enum - Collection of enums used in Safe contracts.\n * @author Richard Meissner - @rmeissner\n */\nabstract contract Enum {\n    enum Operation {\n        Call,\n        DelegateCall\n    }\n}\n"},"@safe-global/safe-contracts/contracts/common/NativeCurrencyPaymentFallback.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title NativeCurrencyPaymentFallback - A contract that has a fallback to accept native currency payments.\n * @author Richard Meissner - @rmeissner\n */\nabstract contract NativeCurrencyPaymentFallback {\n    event SafeReceived(address indexed sender, uint256 value);\n\n    /**\n     * @notice Receive function accepts native currency transactions.\n     * @dev Emits an event with sender and received value.\n     */\n    receive() external payable {\n        emit SafeReceived(msg.sender, msg.value);\n    }\n}\n"},"@safe-global/safe-contracts/contracts/common/SecuredTokenTransfer.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title SecuredTokenTransfer - Secure token transfer.\n * @author Richard Meissner - @rmeissner\n */\nabstract contract SecuredTokenTransfer {\n    /**\n     * @notice Transfers a token and returns a boolean if it was a success\n     * @dev It checks the return data of the transfer call and returns true if the transfer was successful.\n     *      It doesn't check if the `token` address is a contract or not.\n     * @param token Token that should be transferred\n     * @param receiver Receiver to whom the token should be transferred\n     * @param amount The amount of tokens that should be transferred\n     * @return transferred Returns true if the transfer was successful\n     */\n    function transferToken(address token, address receiver, uint256 amount) internal returns (bool transferred) {\n        // 0xa9059cbb - keccack(\"transfer(address,uint256)\")\n        bytes memory data = abi.encodeWithSelector(0xa9059cbb, receiver, amount);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We write the return value to scratch space.\n            // See https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory\n            let success := call(sub(gas(), 10000), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            switch returndatasize()\n            case 0 {\n                transferred := success\n            }\n            case 0x20 {\n                transferred := iszero(or(iszero(success), iszero(mload(0))))\n            }\n            default {\n                transferred := 0\n            }\n        }\n    }\n}\n"},"@safe-global/safe-contracts/contracts/common/SelfAuthorized.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\n * @author Richard Meissner - @rmeissner\n */\nabstract contract SelfAuthorized {\n    function requireSelfCall() private view {\n        require(msg.sender == address(this), \"GS031\");\n    }\n\n    modifier authorized() {\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\n        requireSelfCall();\n        _;\n    }\n}\n"},"@safe-global/safe-contracts/contracts/common/SignatureDecoder.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title SignatureDecoder - Decodes signatures encoded as bytes\n * @author Richard Meissner - @rmeissner\n */\nabstract contract SignatureDecoder {\n    /**\n     * @notice Splits signature bytes into `uint8 v, bytes32 r, bytes32 s`.\n     * @dev Make sure to perform a bounds check for @param pos, to avoid out of bounds access on @param signatures\n     *      The signature format is a compact form of {bytes32 r}{bytes32 s}{uint8 v}\n     *      Compact means uint8 is not padded to 32 bytes.\n     * @param pos Which signature to read.\n     *            A prior bounds check of this parameter should be performed, to avoid out of bounds access.\n     * @param signatures Concatenated {r, s, v} signatures.\n     * @return v Recovery ID or Safe signature type.\n     * @return r Output value r of the signature.\n     * @return s Output value s of the signature.\n     */\n    function signatureSplit(bytes memory signatures, uint256 pos) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let signaturePos := mul(0x41, pos)\n            r := mload(add(signatures, add(signaturePos, 0x20)))\n            s := mload(add(signatures, add(signaturePos, 0x40)))\n            /**\n             * Here we are loading the last 32 bytes, including 31 bytes\n             * of 's'. There is no 'mload8' to do this.\n             * 'byte' is not working due to the Solidity parser, so lets\n             * use the second best option, 'and'\n             */\n            v := and(mload(add(signatures, add(signaturePos, 0x41))), 0xff)\n        }\n    }\n}\n"},"@safe-global/safe-contracts/contracts/common/Singleton.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title Singleton - Base for singleton contracts (should always be the first super contract)\n *        This contract is tightly coupled to our proxy contract (see `proxies/SafeProxy.sol`)\n * @author Richard Meissner - @rmeissner\n */\nabstract contract Singleton {\n    // singleton always has to be the first declared variable to ensure the same location as in the Proxy contract.\n    // It should also always be ensured the address is stored alone (uses a full word)\n    address private singleton;\n}\n"},"@safe-global/safe-contracts/contracts/common/StorageAccessible.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title StorageAccessible - A generic base contract that allows callers to access all internal storage.\n * @notice See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\n *         It removes a method from the original contract not needed for the Safe contracts.\n * @author Gnosis Developers\n */\nabstract contract StorageAccessible {\n    /**\n     * @notice Reads `length` bytes of storage in the currents contract\n     * @param offset - the offset in the current contract's storage in words to start reading from\n     * @param length - the number of words (32 bytes) of data to read\n     * @return the bytes that were read.\n     */\n    function getStorageAt(uint256 offset, uint256 length) public view returns (bytes memory) {\n        bytes memory result = new bytes(length * 32);\n        for (uint256 index = 0; index < length; index++) {\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                let word := sload(add(offset, index))\n                mstore(add(add(result, 0x20), mul(index, 0x20)), word)\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Performs a delegatecall on a targetContract in the context of self.\n     * Internally reverts execution to avoid side effects (making it static).\n     *\n     * This method reverts with data equal to `abi.encode(bool(success), bytes(response))`.\n     * Specifically, the `returndata` after a call to this method will be:\n     * `success:bool || response.length:uint256 || response:bytes`.\n     *\n     * @param targetContract Address of the contract containing the code to execute.\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\n     */\n    function simulateAndRevert(address targetContract, bytes memory calldataPayload) external {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let success := delegatecall(gas(), targetContract, add(calldataPayload, 0x20), mload(calldataPayload), 0, 0)\n\n            mstore(0x00, success)\n            mstore(0x20, returndatasize())\n            returndatacopy(0x40, 0, returndatasize())\n            revert(0, add(returndatasize(), 0x40))\n        }\n    }\n}\n"},"@safe-global/safe-contracts/contracts/external/SafeMath.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title SafeMath\n * @notice Math operations with safety checks that revert on error (overflow/underflow)\n */\nlibrary SafeMath {\n    /**\n     * @notice Multiplies two numbers, reverts on overflow.\n     * @param a First number\n     * @param b Second number\n     * @return Product of a and b\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @notice Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     * @param a First number\n     * @param b Second number\n     * @return Difference of a and b\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @notice Adds two numbers, reverts on overflow.\n     * @param a First number\n     * @param b Second number\n     * @return Sum of a and b\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @notice Returns the largest of two numbers.\n     * @param a First number\n     * @param b Second number\n     * @return Largest of a and b\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n}\n"},"@safe-global/safe-contracts/contracts/handler/CompatibilityFallbackHandler.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"./TokenCallbackHandler.sol\";\nimport \"../interfaces/ISignatureValidator.sol\";\nimport \"../Safe.sol\";\n\n/**\n * @title Compatibility Fallback Handler - Provides compatibility between pre 1.3.0 and 1.3.0+ Safe contracts.\n * @author Richard Meissner - @rmeissner\n */\ncontract CompatibilityFallbackHandler is TokenCallbackHandler, ISignatureValidator {\n    // keccak256(\"SafeMessage(bytes message)\");\n    bytes32 private constant SAFE_MSG_TYPEHASH = 0x60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca;\n\n    bytes4 internal constant SIMULATE_SELECTOR = bytes4(keccak256(\"simulate(address,bytes)\"));\n\n    address internal constant SENTINEL_MODULES = address(0x1);\n    bytes4 internal constant UPDATED_MAGIC_VALUE = 0x1626ba7e;\n\n    /**\n     * @notice Legacy EIP-1271 signature validation method.\n     * @dev Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)\n     * @param _data Arbitrary length data signed on the behalf of address(msg.sender).\n     * @param _signature Signature byte array associated with _data.\n     * @return The EIP-1271 magic value.\n     */\n    function isValidSignature(bytes memory _data, bytes memory _signature) public view override returns (bytes4) {\n        // Caller should be a Safe\n        Safe safe = Safe(payable(msg.sender));\n        bytes memory messageData = encodeMessageDataForSafe(safe, _data);\n        bytes32 messageHash = keccak256(messageData);\n        if (_signature.length == 0) {\n            require(safe.signedMessages(messageHash) != 0, \"Hash not approved\");\n        } else {\n            safe.checkSignatures(messageHash, messageData, _signature);\n        }\n        return EIP1271_MAGIC_VALUE;\n    }\n\n    /**\n     * @dev Returns the hash of a message to be signed by owners.\n     * @param message Raw message bytes.\n     * @return Message hash.\n     */\n    function getMessageHash(bytes memory message) public view returns (bytes32) {\n        return getMessageHashForSafe(Safe(payable(msg.sender)), message);\n    }\n\n    /**\n     * @dev Returns the pre-image of the message hash (see getMessageHashForSafe).\n     * @param safe Safe to which the message is targeted.\n     * @param message Message that should be encoded.\n     * @return Encoded message.\n     */\n    function encodeMessageDataForSafe(Safe safe, bytes memory message) public view returns (bytes memory) {\n        bytes32 safeMessageHash = keccak256(abi.encode(SAFE_MSG_TYPEHASH, keccak256(message)));\n        return abi.encodePacked(bytes1(0x19), bytes1(0x01), safe.domainSeparator(), safeMessageHash);\n    }\n\n    /**\n     * @dev Returns hash of a message that can be signed by owners.\n     * @param safe Safe to which the message is targeted.\n     * @param message Message that should be hashed.\n     * @return Message hash.\n     */\n    function getMessageHashForSafe(Safe safe, bytes memory message) public view returns (bytes32) {\n        return keccak256(encodeMessageDataForSafe(safe, message));\n    }\n\n    /**\n     * @notice Implementation of updated EIP-1271 signature validation method.\n     * @param _dataHash Hash of the data signed on the behalf of address(msg.sender)\n     * @param _signature Signature byte array associated with _dataHash\n     * @return Updated EIP1271 magic value if signature is valid, otherwise 0x0\n     */\n    function isValidSignature(bytes32 _dataHash, bytes calldata _signature) external view returns (bytes4) {\n        ISignatureValidator validator = ISignatureValidator(msg.sender);\n        bytes4 value = validator.isValidSignature(abi.encode(_dataHash), _signature);\n        return (value == EIP1271_MAGIC_VALUE) ? UPDATED_MAGIC_VALUE : bytes4(0);\n    }\n\n    /**\n     * @dev Returns array of first 10 modules.\n     * @return Array of modules.\n     */\n    function getModules() external view returns (address[] memory) {\n        // Caller should be a Safe\n        Safe safe = Safe(payable(msg.sender));\n        (address[] memory array, ) = safe.getModulesPaginated(SENTINEL_MODULES, 10);\n        return array;\n    }\n\n    /**\n     * @dev Performs a delegatecall on a targetContract in the context of self.\n     * Internally reverts execution to avoid side effects (making it static). Catches revert and returns encoded result as bytes.\n     * @dev Inspired by https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\n     * @param targetContract Address of the contract containing the code to execute.\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\n     */\n    function simulate(address targetContract, bytes calldata calldataPayload) external returns (bytes memory response) {\n        /**\n         * Suppress compiler warnings about not using parameters, while allowing\n         * parameters to keep names for documentation purposes. This does not\n         * generate code.\n         */\n        targetContract;\n        calldataPayload;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let internalCalldata := mload(0x40)\n            /**\n             * Store `simulateAndRevert.selector`.\n             * String representation is used to force right padding\n             */\n            mstore(internalCalldata, \"\\xb4\\xfa\\xba\\x09\")\n            /**\n             * Abuse the fact that both this and the internal methods have the\n             * same signature, and differ only in symbol name (and therefore,\n             * selector) and copy calldata directly. This saves us approximately\n             * 250 bytes of code and 300 gas at runtime over the\n             * `abi.encodeWithSelector` builtin.\n             */\n            calldatacopy(add(internalCalldata, 0x04), 0x04, sub(calldatasize(), 0x04))\n\n            /**\n             * `pop` is required here by the compiler, as top level expressions\n             * can't have return values in inline assembly. `call` typically\n             * returns a 0 or 1 value indicated whether or not it reverted, but\n             * since we know it will always revert, we can safely ignore it.\n             */\n            pop(\n                call(\n                    gas(),\n                    // address() has been changed to caller() to use the implementation of the Safe\n                    caller(),\n                    0,\n                    internalCalldata,\n                    calldatasize(),\n                    /**\n                     * The `simulateAndRevert` call always reverts, and\n                     * instead encodes whether or not it was successful in the return\n                     * data. The first 32-byte word of the return data contains the\n                     * `success` value, so write it to memory address 0x00 (which is\n                     * reserved Solidity scratch space and OK to use).\n                     */\n                    0x00,\n                    0x20\n                )\n            )\n\n            /**\n             * Allocate and copy the response bytes, making sure to increment\n             * the free memory pointer accordingly (in case this method is\n             * called as an internal function). The remaining `returndata[0x20:]`\n             * contains the ABI encoded response bytes, so we can just write it\n             * as is to memory.\n             */\n            let responseSize := sub(returndatasize(), 0x20)\n            response := mload(0x40)\n            mstore(0x40, add(response, responseSize))\n            returndatacopy(response, 0x20, responseSize)\n\n            if iszero(mload(0x00)) {\n                revert(add(response, 0x20), mload(response))\n            }\n        }\n    }\n}\n"},"@safe-global/safe-contracts/contracts/handler/HandlerContext.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title Handler Context - Allows the fallback handler to extract addition context from the calldata\n * @dev The fallback manager appends the following context to the calldata:\n *      1. Fallback manager caller address (non-padded)\n * based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/f8cc8b844a9f92f63dc55aa581f7d643a1bc5ac1/contracts/metatx/ERC2771Context.sol\n * @author Richard Meissner - @rmeissner\n */\nabstract contract HandlerContext {\n    /**\n     * @notice Allows fetching the original caller address.\n     * @dev This is only reliable in combination with a FallbackManager that supports this (e.g. Safe contract >=1.3.0).\n     *      When using this functionality make sure that the linked _manager (aka msg.sender) supports this.\n     *      This function does not rely on a trusted forwarder. Use the returned value only to\n     *      check information against the calling manager.\n     * @return sender Original caller address.\n     */\n    function _msgSender() internal pure returns (address sender) {\n        // The assembly code is more direct than the Solidity version using `abi.decode`.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n\n    /**\n     * @notice Returns the FallbackManager address\n     * @return Fallback manager address\n     */\n    function _manager() internal view returns (address) {\n        return msg.sender;\n    }\n}\n"},"@safe-global/safe-contracts/contracts/handler/TokenCallbackHandler.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"../interfaces/ERC1155TokenReceiver.sol\";\nimport \"../interfaces/ERC721TokenReceiver.sol\";\nimport \"../interfaces/ERC777TokensRecipient.sol\";\nimport \"../interfaces/IERC165.sol\";\n\n/**\n * @title Default Callback Handler - Handles supported tokens' callbacks, allowing Safes receiving these tokens.\n * @author Richard Meissner - @rmeissner\n */\ncontract TokenCallbackHandler is ERC1155TokenReceiver, ERC777TokensRecipient, ERC721TokenReceiver, IERC165 {\n    /**\n     * @notice Handles ERC1155 Token callback.\n     * return Standardized onERC1155Received return value.\n     */\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external pure override returns (bytes4) {\n        return 0xf23a6e61;\n    }\n\n    /**\n     * @notice Handles ERC1155 Token batch callback.\n     * return Standardized onERC1155BatchReceived return value.\n     */\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] calldata,\n        uint256[] calldata,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return 0xbc197c81;\n    }\n\n    /**\n     * @notice Handles ERC721 Token callback.\n     *  return Standardized onERC721Received return value.\n     */\n    function onERC721Received(address, address, uint256, bytes calldata) external pure override returns (bytes4) {\n        return 0x150b7a02;\n    }\n\n    /**\n     * @notice Handles ERC777 Token callback.\n     * return nothing (not standardized)\n     */\n    function tokensReceived(address, address, address, uint256, bytes calldata, bytes calldata) external pure override {\n        // We implement this for completeness, doesn't really have any value\n    }\n\n    /**\n     * @notice Implements ERC165 interface support for ERC1155TokenReceiver, ERC721TokenReceiver and IERC165.\n     * @param interfaceId Id of the interface.\n     * @return if the interface is supported.\n     */\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\n        return\n            interfaceId == type(ERC1155TokenReceiver).interfaceId ||\n            interfaceId == type(ERC721TokenReceiver).interfaceId ||\n            interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@safe-global/safe-contracts/contracts/interfaces/ERC1155TokenReceiver.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n// Note: The ERC-165 identifier for this interface is 0x4e2312e0.\ninterface ERC1155TokenReceiver {\n    /**\n     * @notice Handle the receipt of a single ERC1155 token type.\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\n     *      This function MUST return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\n     *      This function MUST revert if it rejects the transfer.\n     *      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n     * @param _operator  The address which initiated the transfer (i.e. msg.sender).\n     * @param _from      The address which previously owned the token.\n     * @param _id        The ID of the token being transferred.\n     * @param _value     The amount of tokens being transferred.\n     * @param _data      Additional data with no specified format.\n     * @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`.\n     */\n    function onERC1155Received(\n        address _operator,\n        address _from,\n        uint256 _id,\n        uint256 _value,\n        bytes calldata _data\n    ) external returns (bytes4);\n\n    /**\n     * @notice Handle the receipt of multiple ERC1155 token types.\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\n     *      This function MUST return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\n     *      This function MUST revert if it rejects the transfer(s).\n     *      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n     * @param _operator  The address which initiated the batch transfer (i.e. msg.sender).\n     * @param _from      The address which previously owned the token.\n     * @param _ids       An array containing ids of each token being transferred (order and length must match _values array).\n     * @param _values    An array containing amounts of each token being transferred (order and length must match _ids array).\n     * @param _data      Additional data with no specified format.\n     * @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`.\n     */\n    function onERC1155BatchReceived(\n        address _operator,\n        address _from,\n        uint256[] calldata _ids,\n        uint256[] calldata _values,\n        bytes calldata _data\n    ) external returns (bytes4);\n}\n"},"@safe-global/safe-contracts/contracts/interfaces/ERC721TokenReceiver.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\ninterface ERC721TokenReceiver {\n    /**\n     * @notice Handle the receipt of an NFT\n     * @dev The ERC721 smart contract calls this function on the recipient\n     *  after a `transfer`. This function MAY throw to revert and reject the\n     *  transfer. Return of other than the magic value MUST result in the\n     *  transaction being reverted.\n     *  Note: the contract address is always the message sender.\n     * @param _operator The address which called `safeTransferFrom` function.\n     * @param _from The address which previously owned the token.\n     * @param _tokenId The NFT identifier which is being transferred.\n     * @param _data Additional data with no specified format.\n     * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n     *  unless throwing\n     */\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns (bytes4);\n}\n"},"@safe-global/safe-contracts/contracts/interfaces/ERC777TokensRecipient.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title ERC777TokensRecipient\n * @dev Interface for contracts that will be called with the ERC777 token's `tokensReceived` method.\n * The contract receiving the tokens must implement this interface in order to receive the tokens.\n */\ninterface ERC777TokensRecipient {\n    /**\n     * @dev Called by the ERC777 token contract after a successful transfer or a minting operation.\n     * @param operator The address of the operator performing the transfer or minting operation.\n     * @param from The address of the sender.\n     * @param to The address of the recipient.\n     * @param amount The amount of tokens that were transferred or minted.\n     * @param data Additional data that was passed during the transfer or minting operation.\n     * @param operatorData Additional data that was passed by the operator during the transfer or minting operation.\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n}\n"},"@safe-global/safe-contracts/contracts/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by `interfaceId`.\n     * See the corresponding EIP section\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@safe-global/safe-contracts/contracts/interfaces/ISignatureValidator.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\ncontract ISignatureValidatorConstants {\n    // bytes4(keccak256(\"isValidSignature(bytes,bytes)\")\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x20c13b0b;\n}\n\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\n    /**\n     * @notice Legacy EIP1271 method to validate a signature.\n     * @param _data Arbitrary length data signed on the behalf of address(this).\n     * @param _signature Signature byte array associated with _data.\n     *\n     * MUST return the bytes4 magic value 0x20c13b0b when function passes.\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n     * MUST allow external calls\n     */\n    function isValidSignature(bytes memory _data, bytes memory _signature) public view virtual returns (bytes4);\n}\n"},"@safe-global/safe-contracts/contracts/Safe.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"./base/ModuleManager.sol\";\nimport \"./base/OwnerManager.sol\";\nimport \"./base/FallbackManager.sol\";\nimport \"./base/GuardManager.sol\";\nimport \"./common/NativeCurrencyPaymentFallback.sol\";\nimport \"./common/Singleton.sol\";\nimport \"./common/SignatureDecoder.sol\";\nimport \"./common/SecuredTokenTransfer.sol\";\nimport \"./common/StorageAccessible.sol\";\nimport \"./interfaces/ISignatureValidator.sol\";\nimport \"./external/SafeMath.sol\";\n\n/**\n * @title Safe - A multisignature wallet with support for confirmations using signed messages based on EIP-712.\n * @dev Most important concepts:\n *      - Threshold: Number of required confirmations for a Safe transaction.\n *      - Owners: List of addresses that control the Safe. They are the only ones that can add/remove owners, change the threshold and\n *        approve transactions. Managed in `OwnerManager`.\n *      - Transaction Hash: Hash of a transaction is calculated using the EIP-712 typed structured data hashing scheme.\n *      - Nonce: Each transaction should have a different nonce to prevent replay attacks.\n *      - Signature: A valid signature of an owner of the Safe for a transaction hash.\n *      - Guard: Guard is a contract that can execute pre- and post- transaction checks. Managed in `GuardManager`.\n *      - Modules: Modules are contracts that can be used to extend the write functionality of a Safe. Managed in `ModuleManager`.\n *      - Fallback: Fallback handler is a contract that can provide additional read-only functional for Safe. Managed in `FallbackManager`.\n *      Note: This version of the implementation contract doesn't emit events for the sake of gas efficiency and therefore requires a tracing node for indexing/\n *      For the events-based implementation see `SafeL2.sol`.\n * @author Stefan George - @Georgi87\n * @author Richard Meissner - @rmeissner\n */\ncontract Safe is\n    Singleton,\n    NativeCurrencyPaymentFallback,\n    ModuleManager,\n    OwnerManager,\n    SignatureDecoder,\n    SecuredTokenTransfer,\n    ISignatureValidatorConstants,\n    FallbackManager,\n    StorageAccessible,\n    GuardManager\n{\n    using SafeMath for uint256;\n\n    string public constant VERSION = \"1.4.1\";\n\n    // keccak256(\n    //     \"EIP712Domain(uint256 chainId,address verifyingContract)\"\n    // );\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH = 0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\n\n    // keccak256(\n    //     \"SafeTx(address to,uint256 value,bytes data,uint8 operation,uint256 safeTxGas,uint256 baseGas,uint256 gasPrice,address gasToken,address refundReceiver,uint256 nonce)\"\n    // );\n    bytes32 private constant SAFE_TX_TYPEHASH = 0xbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d8;\n\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\n    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\n    event SignMsg(bytes32 indexed msgHash);\n    event ExecutionFailure(bytes32 indexed txHash, uint256 payment);\n    event ExecutionSuccess(bytes32 indexed txHash, uint256 payment);\n\n    uint256 public nonce;\n    bytes32 private _deprecatedDomainSeparator;\n    // Mapping to keep track of all message hashes that have been approved by ALL REQUIRED owners\n    mapping(bytes32 => uint256) public signedMessages;\n    // Mapping to keep track of all hashes (message or transaction) that have been approved by ANY owners\n    mapping(address => mapping(bytes32 => uint256)) public approvedHashes;\n\n    // This constructor ensures that this contract can only be used as a singleton for Proxy contracts\n    constructor() {\n        /**\n         * By setting the threshold it is not possible to call setup anymore,\n         * so we create a Safe with 0 owners and threshold 1.\n         * This is an unusable Safe, perfect for the singleton\n         */\n        threshold = 1;\n    }\n\n    /**\n     * @notice Sets an initial storage of the Safe contract.\n     * @dev This method can only be called once.\n     *      If a proxy was created without setting up, anyone can call setup and claim the proxy.\n     * @param _owners List of Safe owners.\n     * @param _threshold Number of required confirmations for a Safe transaction.\n     * @param to Contract address for optional delegate call.\n     * @param data Data payload for optional delegate call.\n     * @param fallbackHandler Handler for fallback calls to this contract\n     * @param paymentToken Token that should be used for the payment (0 is ETH)\n     * @param payment Value that should be paid\n     * @param paymentReceiver Address that should receive the payment (or 0 if tx.origin)\n     */\n    function setup(\n        address[] calldata _owners,\n        uint256 _threshold,\n        address to,\n        bytes calldata data,\n        address fallbackHandler,\n        address paymentToken,\n        uint256 payment,\n        address payable paymentReceiver\n    ) external {\n        // setupOwners checks if the Threshold is already set, therefore preventing that this method is called twice\n        setupOwners(_owners, _threshold);\n        if (fallbackHandler != address(0)) internalSetFallbackHandler(fallbackHandler);\n        // As setupOwners can only be called if the contract has not been initialized we don't need a check for setupModules\n        setupModules(to, data);\n\n        if (payment > 0) {\n            // To avoid running into issues with EIP-170 we reuse the handlePayment function (to avoid adjusting code of that has been verified we do not adjust the method itself)\n            // baseGas = 0, gasPrice = 1 and gas = payment => amount = (payment + 0) * 1 = payment\n            handlePayment(payment, 0, 1, paymentToken, paymentReceiver);\n        }\n        emit SafeSetup(msg.sender, _owners, _threshold, to, fallbackHandler);\n    }\n\n    /** @notice Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)\n     *          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`.\n     * @dev The fees are always transferred, even if the user transaction fails.\n     *      This method doesn't perform any sanity check of the transaction, such as:\n     *      - if the contract at `to` address has code or not\n     *      - if the `gasToken` is a contract or not\n     *      It is the responsibility of the caller to perform such checks.\n     * @param to Destination address of Safe transaction.\n     * @param value Ether value of Safe transaction.\n     * @param data Data payload of Safe transaction.\n     * @param operation Operation type of Safe transaction.\n     * @param safeTxGas Gas that should be used for the Safe transaction.\n     * @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\n     * @param gasPrice Gas price that should be used for the payment calculation.\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n     * @param signatures Signature data that should be verified.\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\n     * @return success Boolean indicating transaction's success.\n     */\n    function execTransaction(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes memory signatures\n    ) public payable virtual returns (bool success) {\n        bytes32 txHash;\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\n        {\n            bytes memory txHashData = encodeTransactionData(\n                // Transaction info\n                to,\n                value,\n                data,\n                operation,\n                safeTxGas,\n                // Payment info\n                baseGas,\n                gasPrice,\n                gasToken,\n                refundReceiver,\n                // Signature info\n                nonce\n            );\n            // Increase nonce and execute transaction.\n            nonce++;\n            txHash = keccak256(txHashData);\n            checkSignatures(txHash, txHashData, signatures);\n        }\n        address guard = getGuard();\n        {\n            if (guard != address(0)) {\n                Guard(guard).checkTransaction(\n                    // Transaction info\n                    to,\n                    value,\n                    data,\n                    operation,\n                    safeTxGas,\n                    // Payment info\n                    baseGas,\n                    gasPrice,\n                    gasToken,\n                    refundReceiver,\n                    // Signature info\n                    signatures,\n                    msg.sender\n                );\n            }\n        }\n        // We require some gas to emit the events (at least 2500) after the execution and some to perform code until the execution (500)\n        // We also include the 1/64 in the check that is not send along with a call to counteract potential shortings because of EIP-150\n        require(gasleft() >= ((safeTxGas * 64) / 63).max(safeTxGas + 2500) + 500, \"GS010\");\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\n        {\n            uint256 gasUsed = gasleft();\n            // If the gasPrice is 0 we assume that nearly all available gas can be used (it is always more than safeTxGas)\n            // We only substract 2500 (compared to the 3000 before) to ensure that the amount passed is still higher than safeTxGas\n            success = execute(to, value, data, operation, gasPrice == 0 ? (gasleft() - 2500) : safeTxGas);\n            gasUsed = gasUsed.sub(gasleft());\n            // If no safeTxGas and no gasPrice was set (e.g. both are 0), then the internal tx is required to be successful\n            // This makes it possible to use `estimateGas` without issues, as it searches for the minimum gas where the tx doesn't revert\n            require(success || safeTxGas != 0 || gasPrice != 0, \"GS013\");\n            // We transfer the calculated tx costs to the tx.origin to avoid sending it to intermediate contracts that have made calls\n            uint256 payment = 0;\n            if (gasPrice > 0) {\n                payment = handlePayment(gasUsed, baseGas, gasPrice, gasToken, refundReceiver);\n            }\n            if (success) emit ExecutionSuccess(txHash, payment);\n            else emit ExecutionFailure(txHash, payment);\n        }\n        {\n            if (guard != address(0)) {\n                Guard(guard).checkAfterExecution(txHash, success);\n            }\n        }\n    }\n\n    /**\n     * @notice Handles the payment for a Safe transaction.\n     * @param gasUsed Gas used by the Safe transaction.\n     * @param baseGas Gas costs that are independent of the transaction execution (e.g. base transaction fee, signature check, payment of the refund).\n     * @param gasPrice Gas price that should be used for the payment calculation.\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\n     * @return payment The amount of payment made in the specified token.\n     */\n    function handlePayment(\n        uint256 gasUsed,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver\n    ) private returns (uint256 payment) {\n        // solhint-disable-next-line avoid-tx-origin\n        address payable receiver = refundReceiver == address(0) ? payable(tx.origin) : refundReceiver;\n        if (gasToken == address(0)) {\n            // For ETH we will only adjust the gas price to not be higher than the actual used gas price\n            payment = gasUsed.add(baseGas).mul(gasPrice < tx.gasprice ? gasPrice : tx.gasprice);\n            require(receiver.send(payment), \"GS011\");\n        } else {\n            payment = gasUsed.add(baseGas).mul(gasPrice);\n            require(transferToken(gasToken, receiver, payment), \"GS012\");\n        }\n    }\n\n    /**\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\n     * @param data That should be signed (this is passed to an external validator contract)\n     * @param signatures Signature data that should be verified.\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\n     */\n    function checkSignatures(bytes32 dataHash, bytes memory data, bytes memory signatures) public view {\n        // Load threshold to avoid multiple storage loads\n        uint256 _threshold = threshold;\n        // Check that a threshold is set\n        require(_threshold > 0, \"GS001\");\n        checkNSignatures(dataHash, data, signatures, _threshold);\n    }\n\n    /**\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\n     * @dev Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\n     * @param data That should be signed (this is passed to an external validator contract)\n     * @param signatures Signature data that should be verified.\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\n     * @param requiredSignatures Amount of required valid signatures.\n     */\n    function checkNSignatures(bytes32 dataHash, bytes memory data, bytes memory signatures, uint256 requiredSignatures) public view {\n        // Check that the provided signature data is not too short\n        require(signatures.length >= requiredSignatures.mul(65), \"GS020\");\n        // There cannot be an owner with address 0.\n        address lastOwner = address(0);\n        address currentOwner;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        uint256 i;\n        for (i = 0; i < requiredSignatures; i++) {\n            (v, r, s) = signatureSplit(signatures, i);\n            if (v == 0) {\n                require(keccak256(data) == dataHash, \"GS027\");\n                // If v is 0 then it is a contract signature\n                // When handling contract signatures the address of the contract is encoded into r\n                currentOwner = address(uint160(uint256(r)));\n\n                // Check that signature data pointer (s) is not pointing inside the static part of the signatures bytes\n                // This check is not completely accurate, since it is possible that more signatures than the threshold are send.\n                // Here we only check that the pointer is not pointing inside the part that is being processed\n                require(uint256(s) >= requiredSignatures.mul(65), \"GS021\");\n\n                // Check that signature data pointer (s) is in bounds (points to the length of data -> 32 bytes)\n                require(uint256(s).add(32) <= signatures.length, \"GS022\");\n\n                // Check if the contract signature is in bounds: start of data is s + 32 and end is start + signature length\n                uint256 contractSignatureLen;\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    contractSignatureLen := mload(add(add(signatures, s), 0x20))\n                }\n                require(uint256(s).add(32).add(contractSignatureLen) <= signatures.length, \"GS023\");\n\n                // Check signature\n                bytes memory contractSignature;\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    // The signature data for contract signatures is appended to the concatenated signatures and the offset is stored in s\n                    contractSignature := add(add(signatures, s), 0x20)\n                }\n                require(ISignatureValidator(currentOwner).isValidSignature(data, contractSignature) == EIP1271_MAGIC_VALUE, \"GS024\");\n            } else if (v == 1) {\n                // If v is 1 then it is an approved hash\n                // When handling approved hashes the address of the approver is encoded into r\n                currentOwner = address(uint160(uint256(r)));\n                // Hashes are automatically approved by the sender of the message or when they have been pre-approved via a separate transaction\n                require(msg.sender == currentOwner || approvedHashes[currentOwner][dataHash] != 0, \"GS025\");\n            } else if (v > 30) {\n                // If v > 30 then default va (27,28) has been adjusted for eth_sign flow\n                // To support eth_sign and similar we adjust v and hash the messageHash with the Ethereum message prefix before applying ecrecover\n                currentOwner = ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", dataHash)), v - 4, r, s);\n            } else {\n                // Default is the ecrecover flow with the provided data hash\n                // Use ecrecover with the messageHash for EOA signatures\n                currentOwner = ecrecover(dataHash, v, r, s);\n            }\n            require(currentOwner > lastOwner && owners[currentOwner] != address(0) && currentOwner != SENTINEL_OWNERS, \"GS026\");\n            lastOwner = currentOwner;\n        }\n    }\n\n    /**\n     * @notice Marks hash `hashToApprove` as approved.\n     * @dev This can be used with a pre-approved hash transaction signature.\n     *      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures\n     * @param hashToApprove The hash to mark as approved for signatures that are verified by this contract.\n     */\n    function approveHash(bytes32 hashToApprove) external {\n        require(owners[msg.sender] != address(0), \"GS030\");\n        approvedHashes[msg.sender][hashToApprove] = 1;\n        emit ApproveHash(hashToApprove, msg.sender);\n    }\n\n    /**\n     * @notice Returns the ID of the chain the contract is currently deployed on.\n     * @return The ID of the current chain as a uint256.\n     */\n    function getChainId() public view returns (uint256) {\n        uint256 id;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            id := chainid()\n        }\n        return id;\n    }\n\n    /**\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\n     * @return bytes32 The domain separator hash.\n     */\n    function domainSeparator() public view returns (bytes32) {\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, getChainId(), this));\n    }\n\n    /**\n     * @notice Returns the pre-image of the transaction hash (see getTransactionHash).\n     * @param to Destination address.\n     * @param value Ether value.\n     * @param data Data payload.\n     * @param operation Operation type.\n     * @param safeTxGas Gas that should be used for the safe transaction.\n     * @param baseGas Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\n     * @param gasPrice Maximum gas price that should be used for this transaction.\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n     * @param _nonce Transaction nonce.\n     * @return Transaction hash bytes.\n     */\n    function encodeTransactionData(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address refundReceiver,\n        uint256 _nonce\n    ) public view returns (bytes memory) {\n        bytes32 safeTxHash = keccak256(\n            abi.encode(\n                SAFE_TX_TYPEHASH,\n                to,\n                value,\n                keccak256(data),\n                operation,\n                safeTxGas,\n                baseGas,\n                gasPrice,\n                gasToken,\n                refundReceiver,\n                _nonce\n            )\n        );\n        return abi.encodePacked(bytes1(0x19), bytes1(0x01), domainSeparator(), safeTxHash);\n    }\n\n    /**\n     * @notice Returns transaction hash to be signed by owners.\n     * @param to Destination address.\n     * @param value Ether value.\n     * @param data Data payload.\n     * @param operation Operation type.\n     * @param safeTxGas Fas that should be used for the safe transaction.\n     * @param baseGas Gas costs for data used to trigger the safe transaction.\n     * @param gasPrice Maximum gas price that should be used for this transaction.\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n     * @param _nonce Transaction nonce.\n     * @return Transaction hash.\n     */\n    function getTransactionHash(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address refundReceiver,\n        uint256 _nonce\n    ) public view returns (bytes32) {\n        return keccak256(encodeTransactionData(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce));\n    }\n}\n"},"contracts/bridge/AcrossHookReceiver.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport {BridgeReceiver} from \"./BridgeReceiver.sol\";\nimport {IAcrossMessageHandler} from \"../interfaces/IAcrossMessageHandler.sol\";\nimport {HandlerContext} from \"@safe-global/safe-contracts/contracts/handler/HandlerContext.sol\";\nimport {OmnaccountErrors as Errors} from \"../interfaces/Errors.sol\";\n\n/**\n * @title AcrossHookReceiver\n * @author KDon.eth\n * @notice Parses inbound Across (bridge) transfers and authenticates messages.\n * @dev This contract is expected to be inherited by any contract that handle executing arbitrary message logic\n */\nabstract contract AcrossHookReceiver is BridgeReceiver, IAcrossMessageHandler, HandlerContext {\n\n    address public immutable ACROSS_BRIDGE;\n\n    constructor(address bridge) {\n        if (bridge == address(0x0)) revert Errors.InvalidBridge();\n\n        ACROSS_BRIDGE = bridge;\n    }\n\n    //  ─────────────────────────────────────────────────────────────────────────────\n    //  Across Message Handling\n    //  ─────────────────────────────────────────────────────────────────────────────\n\n    function handleAcrossMessage(\n        address tokenSent,\n        uint256 amount,\n        bool fillCompleted,\n        address relayer,\n        bytes memory message\n    ) external onlyBridge {\n        _afterTokensBridged(tokenSent, amount, message);\n    }\n\n    function handleV3AcrossMessage(\n        address tokenSent,\n        uint256 amount,\n        address relayer,\n        bytes memory message\n    ) external onlyBridge {\n        _afterTokensBridged(tokenSent, amount, message);\n    }\n\n    //  ─────────────────────────────────────────────────────────────────────────────\n    //  Internal Utilities\n    //  ─────────────────────────────────────────────────────────────────────────────\n\n    function _isBridge(address bridge) internal view returns (bool) {\n        return bridge == ACROSS_BRIDGE;\n    }\n\n    modifier onlyBridge() {\n        if (!_isBridge(_msgSender())) revert Errors.InvalidBridge();\n\n        _;\n    }\n}\n"},"contracts/bridge/BridgeReceiver.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\n/**\n * @title BridgeReceiver\n * @author KDon.eth\n * @notice General abstract contract for bridge receivers to implement to standardize internal hooks\n */\nabstract contract BridgeReceiver {\n\n    //  ─────────────────────────────────────────────────────────────────────────────\n    //  Bridge Hook\n    //  ─────────────────────────────────────────────────────────────────────────────\n\n    /**\n     * @dev Internal hook called on implementing contracts to execute logic\n     * @param token Address of tokens received\n     * @param amount Number of tokens received\n     * @param message Unauthenticated calldata to parse, validate then execute\n     */\n    function _afterTokensBridged(\n        address token,\n        uint256 amount,\n        bytes memory message\n    ) internal virtual;\n}\n"},"contracts/bridge/CCIPHookReceiver.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport {BridgeReceiver} from \"./BridgeReceiver.sol\";\nimport {CCIPReceiver} from \"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\";\nimport {Client} from \"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\";\n\n/**\n * @title CCIPHookReceiver\n * @notice Standardized internal hooks for CCIP messages\n * @dev This is demo of how CCIP could be handled and is not yet implemented\n */\nabstract contract CCIPHookReceiver is BridgeReceiver, CCIPReceiver {\n\n    constructor(address ccipRouter) CCIPReceiver(ccipRouter) {\n    }\n\n    /*\n    Client.Any2EVMMessage = {\n        bytes32 messageId; // MessageId corresponding to ccipSend on source.\n        uint64 sourceChainSelector; // Source chain selector.\n        bytes sender; // abi.decode(sender) if coming from an EVM chain.\n        bytes data; // payload sent in original message.\n        EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\n    }\n    */\n    function _ccipReceive(\n        Client.Any2EVMMessage memory message\n    ) internal override {\n        address sender = abi.decode(message.sender, (address));\n\n        // QUESTION: How would we standardize bridge hooks when across sends one but CCIP send many tokens?...\n        for (uint256 i = 0; i < message.destTokenAmounts.length; i++) {\n            Client.EVMTokenAmount memory tokenAmount = message.destTokenAmounts[i];\n            _afterTokensBridged(\n                tokenAmount.token,\n                tokenAmount.amount,\n                message.data\n            );\n        }\n    }\n}\n"},"contracts/interfaces/Errors.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\n/**\n * @title OmnaccountErrors\n * @author KDon.eth\n * @notice Standard interface for Omnaccount error codes\n */\ninterface OmnaccountErrors {\n\n    /// @notice Reverted if attempting to execute userOp from invalid sender\n    error InvalidEntryPoint();\n\n    /// @notice Reverted if address is not bridge\n    error InvalidBridge();\n\n}\n"},"contracts/interfaces/IAcrossMessageHandler.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\n\n// This interface is expected to be implemented by any contract that expects to receive messages from the SpokePool.\ninterface IAcrossMessageHandler {\n    /// @custom:audit FOLLOWING FUNCTION TO BE DEPRECATED\n    function handleAcrossMessage(\n        address tokenSent,\n        uint256 amount,\n        bool fillCompleted,\n        address relayer,\n        bytes memory message\n    ) external;\n\n    // New function interface to be used with V3 functions since fillCompleted no longer has any\n    // meaning now that partial fills are impossible.\n    function handleV3AcrossMessage(\n        address tokenSent,\n        uint256 amount,\n        address relayer,\n        bytes memory message\n    ) external;\n}\n"},"contracts/interfaces/ISafe.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\ninterface ISafe {\n    /**\n     * @dev Allows a Module to execute a Safe transaction without any further confirmations.\n     * @param to Destination address of module transaction.\n     * @param value Ether value of module transaction.\n     * @param data Data payload of module transaction.\n     * @param operation Operation type of module transaction.\n     */\n    function execTransactionFromModule(address to, uint256 value, bytes memory data, uint8 operation) external returns (bool success);\n\n    /**\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\n     * @param to Destination address of module transaction.\n     * @param value Ether value of module transaction.\n     * @param data Data payload of module transaction.\n     * @param operation Operation type of module transaction.\n     * @return success Boolean flag indicating if the call succeeded.\n     * @return returnData Data returned by the call.\n     */\n    function execTransactionFromModuleReturnData(\n        address to,\n        uint256 value,\n        bytes memory data,\n        uint8 operation\n    ) external returns (bool success, bytes memory returnData);\n\n    /**\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\n     * @param data That should be signed (this is passed to an external validator contract)\n     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\n     */\n    function checkSignatures(bytes32 dataHash, bytes memory data, bytes memory signatures) external view;\n\n    /**\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\n     * @return bytes32 The domain separator hash.\n     */\n    function domainSeparator() external view returns (bytes32);\n\n    /**\n     * @dev Returns array of modules.\n     * @param start Start of the page.\n     * @param pageSize Maximum number of modules that should be returned.\n     * @return array Array of modules.\n     * @return next Start of the next page.\n     */\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next);\n\n    /**\n     * @notice Enables the module `module` for the Safe.\n     * @dev This can only be done via a Safe transaction.\n     * @param module Module to be enabled.\n     */\n    function enableModule(address module) external;\n}"},"contracts/Lock.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\nimport {V3SpokePoolInterface} from \"@across-protocol/contracts-v2/contracts/interfaces/V3SpokePoolInterface.sol\";\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract Lock {\n    uint public unlockTime;\n    address payable public owner;\n\n    event Withdrawal(uint amount, uint when);\n\n    constructor(uint _unlockTime) payable {\n        require(\n            block.timestamp < _unlockTime,\n            \"Unlock time should be in the future\"\n        );\n\n        unlockTime = _unlockTime;\n        owner = payable(msg.sender);\n    }\n\n    function withdraw() public {\n        // Uncomment this line, and the import of \"hardhat/console.sol\", to print a log in your terminal\n        // console.log(\"Unlock time is %o and block timestamp is %o\", unlockTime, block.timestamp);\n\n        require(block.timestamp >= unlockTime, \"You can't withdraw yet\");\n        require(msg.sender == owner, \"You aren't the owner\");\n\n        emit Withdrawal(address(this).balance, block.timestamp);\n\n        owner.transfer(address(this).balance);\n    }\n}\n"},"contracts/OmnaccountModule.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.23;\n\nimport {BaseModule} from \"./safe/BaseModule.sol\";\nimport {AcrossHookReceiver} from \"./bridge/AcrossHookReceiver.sol\";\nimport {CCIPHookReceiver} from \"./bridge/CCIPHookReceiver.sol\";\nimport {OmnaccountErrors as Errors} from \"./interfaces/Errors.sol\";\nimport {HandlerContext} from \"@safe-global/safe-contracts/contracts/handler/HandlerContext.sol\";\nimport {CompatibilityFallbackHandler} from \"@safe-global/safe-contracts/contracts/handler/CompatibilityFallbackHandler.sol\";\nimport {IAccount} from \"@account-abstraction/contracts/interfaces/IAccount.sol\";\nimport {UserOperation} from \"@account-abstraction/contracts/interfaces/UserOperation.sol\";\nimport {_packValidationData} from \"@account-abstraction/contracts/core/Helpers.sol\";\n\n\n/**\n * @title OmnaccountModule\n * @author KDon.eth\n * @notice ERC-4337 abstract account module enabling cross-chain userOp execution powered by Across V3 Bridge and Safe\n */\ncontract OmnaccountModule \n//is\n    // BaseModule,\n    // CompatibilityFallbackHandler,\n    // Errors,\n    // AcrossHookReceiver\n    //, CCIPHookReceiver // TODO: Enable CCIP\n{\n    constructor(\n        address entrypoint,\n        address spokePool\n    ) \n    // BaseModule(entrypoint) AcrossHookReceiver(spokePool) \n    {\n        // no-op\n    }\n}\n"},"contracts/safe/AccountEntry.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport {HandlerContext} from \"@safe-global/safe-contracts/contracts/handler/HandlerContext.sol\";\nimport {OmnaccountErrors as Errors} from \"../interfaces/Errors.sol\";\n\nabstract contract AccountEntry is HandlerContext {\n    /**\n     * @notice The address of the EntryPoint contract supported by this module.\n     */\n    address public immutable SUPPORTED_ENTRYPOINT;\n\n    constructor(address entryPoint) {\n        if (entryPoint == address(0x0)) revert Errors.InvalidEntryPoint();\n\n        SUPPORTED_ENTRYPOINT = entryPoint;\n    }\n\n    /// @notice Checks if a given address is a valid entry point for the abstract account.\n    function _isSupportedEntryPoint(address entryPoint) internal virtual view returns (bool) {\n        return entryPoint == SUPPORTED_ENTRYPOINT;\n    }\n\n    /**\n     * @notice Validates the call is initiated by a valid entry point.\n     */\n    modifier onlySupportedEntryPoint() {\n        if (!_isSupportedEntryPoint(_msgSender())) revert Errors.InvalidEntryPoint();\n\n        _;\n    }\n}\n"},"contracts/safe/BaseModule.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport {IAccount} from \"@account-abstraction/contracts/interfaces/IAccount.sol\";\nimport {BridgeReceiver} from \"../bridge/BridgeReceiver.sol\";\nimport {OmnaccountErrors as Errors} from \"../interfaces/Errors.sol\";\nimport {AccountEntry} from \"./AccountEntry.sol\";\nimport {ISafe} from \"../interfaces/ISafe.sol\";\nimport {UserOperation} from \"@account-abstraction/contracts/interfaces/UserOperation.sol\";\nimport {_packValidationData} from \"@account-abstraction/contracts/core/Helpers.sol\";\n\n\nabstract contract BaseModule is IAccount, BridgeReceiver, AccountEntry {\n\n    //  ─────────────────────────────────────────────────────────────────────────────\n    //  Structs\n    //  ─────────────────────────────────────────────────────────────────────────────\n\n    struct BridgeFallback {\n        address target;\n        bytes4 selector;\n        bytes data;\n        uint96 addressIndex;\n        uint96 amountIndex;\n    }\n\n    //  ─────────────────────────────────────────────────────────────────────────────\n    //  Events\n    //  ─────────────────────────────────────────────────────────────────────────────\n\n    event TokensBridged(address indexed token, uint256 amount);\n\n    //  ─────────────────────────────────────────────────────────────────────────────\n    //  Fields\n    //  ─────────────────────────────────────────────────────────────────────────────\n\n    /// @notice Maps token address to default fallback behavior\n    mapping(address token => BridgeFallback fallbackData) public bridgeFallbacks;\n\n    //  ─────────────────────────────────────────────────────────────────────────────\n    //  Constructor\n    //  ─────────────────────────────────────────────────────────────────────────────\n\n    constructor(address entryPoint) AccountEntry(entryPoint) {\n        // no-op\n    }\n\n    //  ─────────────────────────────────────────────────────────────────────────────\n    //  Bridge Receiver Implementation\n    //  ─────────────────────────────────────────────────────────────────────────────\n\n    function _afterTokensBridged(\n        address token,\n        uint256 amount,\n        bytes memory message\n    ) internal override virtual {\n        // 1. Validate the message\n\n        // 2. Execute the message's calldata\n\n        emit TokensBridged(token, amount);\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["storageLayout","abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","evm.gasEstimates"],"":["ast"]}},"evmVersion":"paris","metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/safe/BaseModule.sol:55:9:\n   |\n55 |         bytes memory message\n   |         ^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":3703,"file":"contracts/safe/BaseModule.sol","start":3683},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/bridge/AcrossHookReceiver.sol:32:9:\n   |\n32 |         bool fillCompleted,\n   |         ^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":1520,"file":"contracts/bridge/AcrossHookReceiver.sol","start":1502},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/bridge/AcrossHookReceiver.sol:33:9:\n   |\n33 |         address relayer,\n   |         ^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":1545,"file":"contracts/bridge/AcrossHookReceiver.sol","start":1530},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/bridge/AcrossHookReceiver.sol:42:9:\n   |\n42 |         address relayer,\n   |         ^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":1778,"file":"contracts/bridge/AcrossHookReceiver.sol","start":1763},"type":"Warning"},{"component":"general","errorCode":"2072","formattedMessage":"Warning: Unused local variable.\n  --> contracts/bridge/CCIPHookReceiver.sol:30:9:\n   |\n30 |         address sender = abi.decode(message.sender, (address));\n   |         ^^^^^^^^^^^^^^\n\n","message":"Unused local variable.","severity":"warning","sourceLocation":{"end":1166,"file":"contracts/bridge/CCIPHookReceiver.sol","start":1152},"type":"Warning"}],"sources":{"@account-abstraction/contracts/core/Helpers.sol":{"ast":{"absolutePath":"@account-abstraction/contracts/core/Helpers.sol","exportedSymbols":{"ValidationData":[9],"_intersectTimeRange":[153],"_packValidationData":[190,228],"_parseValidationData":[68],"calldataKeccak":[238]},"id":239,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"36:24:0"},{"canonicalName":"ValidationData","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"104:581:0","text":" returned data from validateUserOp.\n validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\n @param aggregator - address(0) - the account validated the signature by itself.\n              address(1) - the account failed to validate the signature.\n              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\n @param validAfter - this UserOp is valid only after this timestamp.\n @param validaUntil - this UserOp is valid only up to this timestamp."},"id":9,"members":[{"constant":false,"id":4,"mutability":"mutable","name":"aggregator","nameLocation":"730:10:0","nodeType":"VariableDeclaration","scope":9,"src":"722:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3,"name":"address","nodeType":"ElementaryTypeName","src":"722:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6,"mutability":"mutable","name":"validAfter","nameLocation":"757:10:0","nodeType":"VariableDeclaration","scope":9,"src":"750:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":5,"name":"uint48","nodeType":"ElementaryTypeName","src":"750:6:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":8,"mutability":"mutable","name":"validUntil","nameLocation":"784:10:0","nodeType":"VariableDeclaration","scope":9,"src":"777:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":7,"name":"uint48","nodeType":"ElementaryTypeName","src":"777:6:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"name":"ValidationData","nameLocation":"697:14:0","nodeType":"StructDefinition","scope":239,"src":"690:111:0","visibility":"public"},{"body":{"id":67,"nodeType":"Block","src":"997:346:0","statements":[{"assignments":[18],"declarations":[{"constant":false,"id":18,"mutability":"mutable","name":"aggregator","nameLocation":"1015:10:0","nodeType":"VariableDeclaration","scope":67,"src":"1007:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":17,"name":"address","nodeType":"ElementaryTypeName","src":"1007:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":26,"initialValue":{"arguments":[{"arguments":[{"id":23,"name":"validationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"1044:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":22,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1036:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":21,"name":"uint160","nodeType":"ElementaryTypeName","src":"1036:7:0","typeDescriptions":{}}},"id":24,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1036:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":20,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1028:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":19,"name":"address","nodeType":"ElementaryTypeName","src":"1028:7:0","typeDescriptions":{}}},"id":25,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1028:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1007:53:0"},{"assignments":[28],"declarations":[{"constant":false,"id":28,"mutability":"mutable","name":"validUntil","nameLocation":"1077:10:0","nodeType":"VariableDeclaration","scope":67,"src":"1070:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":27,"name":"uint48","nodeType":"ElementaryTypeName","src":"1070:6:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":35,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":33,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":31,"name":"validationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"1097:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313630","id":32,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1115:3:0","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"src":"1097:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":30,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1090:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":29,"name":"uint48","nodeType":"ElementaryTypeName","src":"1090:6:0","typeDescriptions":{}}},"id":34,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1090:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"1070:49:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":38,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":36,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"1133:10:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":37,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1147:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1133:15:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":48,"nodeType":"IfStatement","src":"1129:75:0","trueBody":{"id":47,"nodeType":"Block","src":"1150:54:0","statements":[{"expression":{"id":45,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":39,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"1164:10:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":42,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1182:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":41,"name":"uint48","nodeType":"ElementaryTypeName","src":"1182:6:0","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"}],"id":40,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1177:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":43,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1177:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint48","typeString":"type(uint48)"}},"id":44,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1190:3:0","memberName":"max","nodeType":"MemberAccess","src":"1177:16:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"1164:29:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"id":46,"nodeType":"ExpressionStatement","src":"1164:29:0"}]}},{"assignments":[50],"declarations":[{"constant":false,"id":50,"mutability":"mutable","name":"validAfter","nameLocation":"1220:10:0","nodeType":"VariableDeclaration","scope":67,"src":"1213:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":49,"name":"uint48","nodeType":"ElementaryTypeName","src":"1213:6:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":60,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":58,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":53,"name":"validationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"1240:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"id":56,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3438","id":54,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1259:2:0","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"313630","id":55,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1264:3:0","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"src":"1259:8:0","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"}}],"id":57,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1258:10:0","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"}},"src":"1240:28:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":52,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1233:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":51,"name":"uint48","nodeType":"ElementaryTypeName","src":"1233:6:0","typeDescriptions":{}}},"id":59,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1233:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"1213:56:0"},{"expression":{"arguments":[{"id":62,"name":"aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"1301:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":63,"name":"validAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":50,"src":"1313:10:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"id":64,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"1325:10:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint48","typeString":"uint48"},{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":61,"name":"ValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9,"src":"1286:14:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ValidationData_$9_storage_ptr_$","typeString":"type(struct ValidationData storage pointer)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1286:50:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$9_memory_ptr","typeString":"struct ValidationData memory"}},"functionReturnParameters":16,"id":66,"nodeType":"Return","src":"1279:57:0"}]},"id":68,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"_parseValidationData","nameLocation":"913:20:0","nodeType":"FunctionDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11,"mutability":"mutable","name":"validationData","nameLocation":"939:14:0","nodeType":"VariableDeclaration","scope":68,"src":"934:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":10,"name":"uint","nodeType":"ElementaryTypeName","src":"934:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"933:21:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[{"constant":false,"id":15,"mutability":"mutable","name":"data","nameLocation":"991:4:0","nodeType":"VariableDeclaration","scope":68,"src":"969:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$9_memory_ptr","typeString":"struct ValidationData"},"typeName":{"id":14,"nodeType":"UserDefinedTypeName","pathNode":{"id":13,"name":"ValidationData","nameLocations":["969:14:0"],"nodeType":"IdentifierPath","referencedDeclaration":9,"src":"969:14:0"},"referencedDeclaration":9,"src":"969:14:0","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$9_storage_ptr","typeString":"struct ValidationData"}},"visibility":"internal"}],"src":"968:28:0"},"scope":239,"src":"904:439:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":152,"nodeType":"Block","src":"1515:804:0","statements":[{"assignments":[80],"declarations":[{"constant":false,"id":80,"mutability":"mutable","name":"accountValidationData","nameLocation":"1547:21:0","nodeType":"VariableDeclaration","scope":152,"src":"1525:43:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$9_memory_ptr","typeString":"struct ValidationData"},"typeName":{"id":79,"nodeType":"UserDefinedTypeName","pathNode":{"id":78,"name":"ValidationData","nameLocations":["1525:14:0"],"nodeType":"IdentifierPath","referencedDeclaration":9,"src":"1525:14:0"},"referencedDeclaration":9,"src":"1525:14:0","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$9_storage_ptr","typeString":"struct ValidationData"}},"visibility":"internal"}],"id":84,"initialValue":{"arguments":[{"id":82,"name":"validationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":70,"src":"1592:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":81,"name":"_parseValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"1571:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_ValidationData_$9_memory_ptr_$","typeString":"function (uint256) pure returns (struct ValidationData memory)"}},"id":83,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1571:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$9_memory_ptr","typeString":"struct ValidationData memory"}},"nodeType":"VariableDeclarationStatement","src":"1525:82:0"},{"assignments":[87],"declarations":[{"constant":false,"id":87,"mutability":"mutable","name":"pmValidationData","nameLocation":"1639:16:0","nodeType":"VariableDeclaration","scope":152,"src":"1617:38:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$9_memory_ptr","typeString":"struct ValidationData"},"typeName":{"id":86,"nodeType":"UserDefinedTypeName","pathNode":{"id":85,"name":"ValidationData","nameLocations":["1617:14:0"],"nodeType":"IdentifierPath","referencedDeclaration":9,"src":"1617:14:0"},"referencedDeclaration":9,"src":"1617:14:0","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$9_storage_ptr","typeString":"struct ValidationData"}},"visibility":"internal"}],"id":91,"initialValue":{"arguments":[{"id":89,"name":"paymasterValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":72,"src":"1679:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":88,"name":"_parseValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"1658:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_ValidationData_$9_memory_ptr_$","typeString":"function (uint256) pure returns (struct ValidationData memory)"}},"id":90,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1658:45:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$9_memory_ptr","typeString":"struct ValidationData memory"}},"nodeType":"VariableDeclarationStatement","src":"1617:86:0"},{"assignments":[93],"declarations":[{"constant":false,"id":93,"mutability":"mutable","name":"aggregator","nameLocation":"1721:10:0","nodeType":"VariableDeclaration","scope":152,"src":"1713:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":92,"name":"address","nodeType":"ElementaryTypeName","src":"1713:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":96,"initialValue":{"expression":{"id":94,"name":"accountValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"1734:21:0","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$9_memory_ptr","typeString":"struct ValidationData memory"}},"id":95,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1756:10:0","memberName":"aggregator","nodeType":"MemberAccess","referencedDeclaration":4,"src":"1734:32:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1713:53:0"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":97,"name":"aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"1780:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1802:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":99,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1794:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":98,"name":"address","nodeType":"ElementaryTypeName","src":"1794:7:0","typeDescriptions":{}}},"id":101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1794:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1780:24:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":109,"nodeType":"IfStatement","src":"1776:95:0","trueBody":{"id":108,"nodeType":"Block","src":"1806:65:0","statements":[{"expression":{"id":106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":103,"name":"aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"1820:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":104,"name":"pmValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"1833:16:0","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$9_memory_ptr","typeString":"struct ValidationData memory"}},"id":105,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1850:10:0","memberName":"aggregator","nodeType":"MemberAccess","referencedDeclaration":4,"src":"1833:27:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1820:40:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":107,"nodeType":"ExpressionStatement","src":"1820:40:0"}]}},{"assignments":[111],"declarations":[{"constant":false,"id":111,"mutability":"mutable","name":"validAfter","nameLocation":"1887:10:0","nodeType":"VariableDeclaration","scope":152,"src":"1880:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":110,"name":"uint48","nodeType":"ElementaryTypeName","src":"1880:6:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":114,"initialValue":{"expression":{"id":112,"name":"accountValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"1900:21:0","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$9_memory_ptr","typeString":"struct ValidationData memory"}},"id":113,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1922:10:0","memberName":"validAfter","nodeType":"MemberAccess","referencedDeclaration":6,"src":"1900:32:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"1880:52:0"},{"assignments":[116],"declarations":[{"constant":false,"id":116,"mutability":"mutable","name":"validUntil","nameLocation":"1949:10:0","nodeType":"VariableDeclaration","scope":152,"src":"1942:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":115,"name":"uint48","nodeType":"ElementaryTypeName","src":"1942:6:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":119,"initialValue":{"expression":{"id":117,"name":"accountValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"1962:21:0","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$9_memory_ptr","typeString":"struct ValidationData memory"}},"id":118,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1984:10:0","memberName":"validUntil","nodeType":"MemberAccess","referencedDeclaration":8,"src":"1962:32:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"1942:52:0"},{"assignments":[121],"declarations":[{"constant":false,"id":121,"mutability":"mutable","name":"pmValidAfter","nameLocation":"2011:12:0","nodeType":"VariableDeclaration","scope":152,"src":"2004:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":120,"name":"uint48","nodeType":"ElementaryTypeName","src":"2004:6:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":124,"initialValue":{"expression":{"id":122,"name":"pmValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"2026:16:0","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$9_memory_ptr","typeString":"struct ValidationData memory"}},"id":123,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2043:10:0","memberName":"validAfter","nodeType":"MemberAccess","referencedDeclaration":6,"src":"2026:27:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"2004:49:0"},{"assignments":[126],"declarations":[{"constant":false,"id":126,"mutability":"mutable","name":"pmValidUntil","nameLocation":"2070:12:0","nodeType":"VariableDeclaration","scope":152,"src":"2063:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":125,"name":"uint48","nodeType":"ElementaryTypeName","src":"2063:6:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":129,"initialValue":{"expression":{"id":127,"name":"pmValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"2085:16:0","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$9_memory_ptr","typeString":"struct ValidationData memory"}},"id":128,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2102:10:0","memberName":"validUntil","nodeType":"MemberAccess","referencedDeclaration":8,"src":"2085:27:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"2063:49:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":130,"name":"validAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"2127:10:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":131,"name":"pmValidAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":121,"src":"2140:12:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"2127:25:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":137,"nodeType":"IfStatement","src":"2123:56:0","trueBody":{"expression":{"id":135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":133,"name":"validAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"2154:10:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":134,"name":"pmValidAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":121,"src":"2167:12:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"2154:25:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"id":136,"nodeType":"ExpressionStatement","src":"2154:25:0"}},{"condition":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":138,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"2193:10:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":139,"name":"pmValidUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"2206:12:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"2193:25:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":145,"nodeType":"IfStatement","src":"2189:56:0","trueBody":{"expression":{"id":143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":141,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"2220:10:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":142,"name":"pmValidUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"2233:12:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"2220:25:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"id":144,"nodeType":"ExpressionStatement","src":"2220:25:0"}},{"expression":{"arguments":[{"id":147,"name":"aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":93,"src":"2277:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":148,"name":"validAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"2289:10:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"id":149,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"2301:10:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint48","typeString":"uint48"},{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":146,"name":"ValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9,"src":"2262:14:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ValidationData_$9_storage_ptr_$","typeString":"type(struct ValidationData storage pointer)"}},"id":150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2262:50:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$9_memory_ptr","typeString":"struct ValidationData memory"}},"functionReturnParameters":77,"id":151,"nodeType":"Return","src":"2255:57:0"}]},"id":153,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"_intersectTimeRange","nameLocation":"1401:19:0","nodeType":"FunctionDefinition","parameters":{"id":73,"nodeType":"ParameterList","parameters":[{"constant":false,"id":70,"mutability":"mutable","name":"validationData","nameLocation":"1429:14:0","nodeType":"VariableDeclaration","scope":153,"src":"1421:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":69,"name":"uint256","nodeType":"ElementaryTypeName","src":"1421:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":72,"mutability":"mutable","name":"paymasterValidationData","nameLocation":"1453:23:0","nodeType":"VariableDeclaration","scope":153,"src":"1445:31:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":71,"name":"uint256","nodeType":"ElementaryTypeName","src":"1445:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1420:57:0"},"returnParameters":{"id":77,"nodeType":"ParameterList","parameters":[{"constant":false,"id":76,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":153,"src":"1492:21:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$9_memory_ptr","typeString":"struct ValidationData"},"typeName":{"id":75,"nodeType":"UserDefinedTypeName","pathNode":{"id":74,"name":"ValidationData","nameLocations":["1492:14:0"],"nodeType":"IdentifierPath","referencedDeclaration":9,"src":"1492:14:0"},"referencedDeclaration":9,"src":"1492:14:0","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$9_storage_ptr","typeString":"struct ValidationData"}},"visibility":"internal"}],"src":"1491:23:0"},"scope":239,"src":"1392:927:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":189,"nodeType":"Block","src":"2511:127:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":164,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":157,"src":"2536:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$9_memory_ptr","typeString":"struct ValidationData memory"}},"id":165,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2541:10:0","memberName":"aggregator","nodeType":"MemberAccess","referencedDeclaration":4,"src":"2536:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":163,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2528:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":162,"name":"uint160","nodeType":"ElementaryTypeName","src":"2528:7:0","typeDescriptions":{}}},"id":166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2528:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":169,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":157,"src":"2564:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$9_memory_ptr","typeString":"struct ValidationData memory"}},"id":170,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2569:10:0","memberName":"validUntil","nodeType":"MemberAccess","referencedDeclaration":8,"src":"2564:15:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":168,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2556:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":167,"name":"uint256","nodeType":"ElementaryTypeName","src":"2556:7:0","typeDescriptions":{}}},"id":171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2556:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313630","id":172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2584:3:0","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"src":"2556:31:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":174,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2555:33:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2528:60:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":178,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":157,"src":"2600:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$9_memory_ptr","typeString":"struct ValidationData memory"}},"id":179,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2605:10:0","memberName":"validAfter","nodeType":"MemberAccess","referencedDeclaration":6,"src":"2600:15:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":177,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2592:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":176,"name":"uint256","nodeType":"ElementaryTypeName","src":"2592:7:0","typeDescriptions":{}}},"id":180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2592:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"id":183,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"313630","id":181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2621:3:0","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3438","id":182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2627:2:0","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"src":"2621:8:0","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"}}],"id":184,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2620:10:0","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"}},"src":"2592:38:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":186,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2591:40:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2528:103:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":161,"id":188,"nodeType":"Return","src":"2521:110:0"}]},"documentation":{"id":154,"nodeType":"StructuredDocumentation","src":"2321:105:0","text":" helper to pack the return value for validateUserOp\n @param data - the ValidationData to pack"},"id":190,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"_packValidationData","nameLocation":"2440:19:0","nodeType":"FunctionDefinition","parameters":{"id":158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":157,"mutability":"mutable","name":"data","nameLocation":"2482:4:0","nodeType":"VariableDeclaration","scope":190,"src":"2460:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$9_memory_ptr","typeString":"struct ValidationData"},"typeName":{"id":156,"nodeType":"UserDefinedTypeName","pathNode":{"id":155,"name":"ValidationData","nameLocations":["2460:14:0"],"nodeType":"IdentifierPath","referencedDeclaration":9,"src":"2460:14:0"},"referencedDeclaration":9,"src":"2460:14:0","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$9_storage_ptr","typeString":"struct ValidationData"}},"visibility":"internal"}],"src":"2459:28:0"},"returnParameters":{"id":161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":160,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":190,"src":"2502:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":159,"name":"uint256","nodeType":"ElementaryTypeName","src":"2502:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2501:9:0"},"scope":239,"src":"2431:207:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":227,"nodeType":"Block","src":"3062:112:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"condition":{"id":202,"name":"sigFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"3080:9:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3096:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3080:17:0","trueExpression":{"hexValue":"31","id":203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3092:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":206,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3079:19:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":209,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"3110:10:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":208,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3102:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":207,"name":"uint256","nodeType":"ElementaryTypeName","src":"3102:7:0","typeDescriptions":{}}},"id":210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3102:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313630","id":211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3125:3:0","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"src":"3102:26:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":213,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3101:28:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3079:50:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":217,"name":"validAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"3141:10:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":216,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3133:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":215,"name":"uint256","nodeType":"ElementaryTypeName","src":"3133:7:0","typeDescriptions":{}}},"id":218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3133:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"id":221,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"313630","id":219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3157:3:0","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3438","id":220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3163:2:0","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"src":"3157:8:0","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"}}],"id":222,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3156:10:0","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"}},"src":"3133:33:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":224,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3132:35:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3079:88:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":201,"id":226,"nodeType":"Return","src":"3072:95:0"}]},"documentation":{"id":191,"nodeType":"StructuredDocumentation","src":"2640:311:0","text":" helper to pack the return value for validateUserOp, when not using an aggregator\n @param sigFailed - true for signature failure, false for success\n @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\n @param validAfter first timestamp this UserOperation is valid"},"id":228,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"_packValidationData","nameLocation":"2965:19:0","nodeType":"FunctionDefinition","parameters":{"id":198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":193,"mutability":"mutable","name":"sigFailed","nameLocation":"2990:9:0","nodeType":"VariableDeclaration","scope":228,"src":"2985:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":192,"name":"bool","nodeType":"ElementaryTypeName","src":"2985:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":195,"mutability":"mutable","name":"validUntil","nameLocation":"3008:10:0","nodeType":"VariableDeclaration","scope":228,"src":"3001:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":194,"name":"uint48","nodeType":"ElementaryTypeName","src":"3001:6:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":197,"mutability":"mutable","name":"validAfter","nameLocation":"3027:10:0","nodeType":"VariableDeclaration","scope":228,"src":"3020:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":196,"name":"uint48","nodeType":"ElementaryTypeName","src":"3020:6:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"2984:54:0"},"returnParameters":{"id":201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":200,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":228,"src":"3053:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":199,"name":"uint256","nodeType":"ElementaryTypeName","src":"3053:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3052:9:0"},"scope":239,"src":"2956:218:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":237,"nodeType":"Block","src":"3429:193:0","statements":[{"AST":{"nativeSrc":"3448:168:0","nodeType":"YulBlock","src":"3448:168:0","statements":[{"nativeSrc":"3462:22:0","nodeType":"YulVariableDeclaration","src":"3462:22:0","value":{"arguments":[{"kind":"number","nativeSrc":"3479:4:0","nodeType":"YulLiteral","src":"3479:4:0","type":"","value":"0x40"}],"functionName":{"name":"mload","nativeSrc":"3473:5:0","nodeType":"YulIdentifier","src":"3473:5:0"},"nativeSrc":"3473:11:0","nodeType":"YulFunctionCall","src":"3473:11:0"},"variables":[{"name":"mem","nativeSrc":"3466:3:0","nodeType":"YulTypedName","src":"3466:3:0","type":""}]},{"nativeSrc":"3497:22:0","nodeType":"YulVariableDeclaration","src":"3497:22:0","value":{"name":"data.length","nativeSrc":"3508:11:0","nodeType":"YulIdentifier","src":"3508:11:0"},"variables":[{"name":"len","nativeSrc":"3501:3:0","nodeType":"YulTypedName","src":"3501:3:0","type":""}]},{"expression":{"arguments":[{"name":"mem","nativeSrc":"3545:3:0","nodeType":"YulIdentifier","src":"3545:3:0"},{"name":"data.offset","nativeSrc":"3550:11:0","nodeType":"YulIdentifier","src":"3550:11:0"},{"name":"len","nativeSrc":"3563:3:0","nodeType":"YulIdentifier","src":"3563:3:0"}],"functionName":{"name":"calldatacopy","nativeSrc":"3532:12:0","nodeType":"YulIdentifier","src":"3532:12:0"},"nativeSrc":"3532:35:0","nodeType":"YulFunctionCall","src":"3532:35:0"},"nativeSrc":"3532:35:0","nodeType":"YulExpressionStatement","src":"3532:35:0"},{"nativeSrc":"3580:26:0","nodeType":"YulAssignment","src":"3580:26:0","value":{"arguments":[{"name":"mem","nativeSrc":"3597:3:0","nodeType":"YulIdentifier","src":"3597:3:0"},{"name":"len","nativeSrc":"3602:3:0","nodeType":"YulIdentifier","src":"3602:3:0"}],"functionName":{"name":"keccak256","nativeSrc":"3587:9:0","nodeType":"YulIdentifier","src":"3587:9:0"},"nativeSrc":"3587:19:0","nodeType":"YulFunctionCall","src":"3587:19:0"},"variableNames":[{"name":"ret","nativeSrc":"3580:3:0","nodeType":"YulIdentifier","src":"3580:3:0"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":231,"isOffset":false,"isSlot":false,"src":"3508:11:0","suffix":"length","valueSize":1},{"declaration":231,"isOffset":true,"isSlot":false,"src":"3550:11:0","suffix":"offset","valueSize":1},{"declaration":234,"isOffset":false,"isSlot":false,"src":"3580:3:0","valueSize":1}],"id":236,"nodeType":"InlineAssembly","src":"3439:177:0"}]},"documentation":{"id":229,"nodeType":"StructuredDocumentation","src":"3176:176:0","text":" keccak function over calldata.\n @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it."},"id":238,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"calldataKeccak","nameLocation":"3366:14:0","nodeType":"FunctionDefinition","parameters":{"id":232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":231,"mutability":"mutable","name":"data","nameLocation":"3396:4:0","nodeType":"VariableDeclaration","scope":238,"src":"3381:19:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":230,"name":"bytes","nodeType":"ElementaryTypeName","src":"3381:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3380:21:0"},"returnParameters":{"id":235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":234,"mutability":"mutable","name":"ret","nameLocation":"3424:3:0","nodeType":"VariableDeclaration","scope":238,"src":"3416:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":233,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3416:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3415:13:0"},"scope":239,"src":"3357:265:0","stateMutability":"pure","virtual":false,"visibility":"internal"}],"src":"36:3588:0"},"id":0},"@account-abstraction/contracts/interfaces/IAccount.sol":{"ast":{"absolutePath":"@account-abstraction/contracts/interfaces/IAccount.sol","exportedSymbols":{"IAccount":[255],"UserOperation":[283],"UserOperationLib":[453],"calldataKeccak":[238]},"id":256,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":240,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"36:24:1"},{"absolutePath":"@account-abstraction/contracts/interfaces/UserOperation.sol","file":"./UserOperation.sol","id":241,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":256,"sourceUnit":454,"src":"62:29:1","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IAccount","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":255,"linearizedBaseContracts":[255],"name":"IAccount","nameLocation":"103:8:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":242,"nodeType":"StructuredDocumentation","src":"119:1861:1","text":" Validate user's signature and nonce\n the entryPoint will make the call to the recipient only if this validation call returns successfully.\n signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\n This allows making a \"simulation call\" without a valid signature\n Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\n @dev Must validate caller is the entryPoint.\n      Must validate the signature and nonce\n @param userOp the operation that is about to be executed.\n @param userOpHash hash of the user's request data. can be used as the basis for signature.\n @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\n      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\n      The excess is left as a deposit in the entrypoint, for future calls.\n      can be withdrawn anytime using \"entryPoint.withdrawTo()\"\n      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\n @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\n      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\n         otherwise, an address of an \"authorizer\" contract.\n      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"\n      <6-byte> validAfter - first timestamp this operation is valid\n      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\n      Note that the validation code cannot use block.timestamp (or block.number) directly."},"functionSelector":"3a871cdd","id":254,"implemented":false,"kind":"function","modifiers":[],"name":"validateUserOp","nameLocation":"1994:14:1","nodeType":"FunctionDefinition","parameters":{"id":250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":245,"mutability":"mutable","name":"userOp","nameLocation":"2032:6:1","nodeType":"VariableDeclaration","scope":254,"src":"2009:29:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$283_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":244,"nodeType":"UserDefinedTypeName","pathNode":{"id":243,"name":"UserOperation","nameLocations":["2009:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":283,"src":"2009:13:1"},"referencedDeclaration":283,"src":"2009:13:1","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$283_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"},{"constant":false,"id":247,"mutability":"mutable","name":"userOpHash","nameLocation":"2048:10:1","nodeType":"VariableDeclaration","scope":254,"src":"2040:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":246,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2040:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":249,"mutability":"mutable","name":"missingAccountFunds","nameLocation":"2068:19:1","nodeType":"VariableDeclaration","scope":254,"src":"2060:27:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":248,"name":"uint256","nodeType":"ElementaryTypeName","src":"2060:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2008:80:1"},"returnParameters":{"id":253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":252,"mutability":"mutable","name":"validationData","nameLocation":"2119:14:1","nodeType":"VariableDeclaration","scope":254,"src":"2111:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":251,"name":"uint256","nodeType":"ElementaryTypeName","src":"2111:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2110:24:1"},"scope":255,"src":"1985:150:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":256,"src":"93:2044:1","usedErrors":[],"usedEvents":[]}],"src":"36:2102:1"},"id":1},"@account-abstraction/contracts/interfaces/UserOperation.sol":{"ast":{"absolutePath":"@account-abstraction/contracts/interfaces/UserOperation.sol","exportedSymbols":{"UserOperation":[283],"UserOperationLib":[453],"calldataKeccak":[238]},"id":454,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":257,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"36:24:2"},{"absolutePath":"@account-abstraction/contracts/core/Helpers.sol","file":"../core/Helpers.sol","id":259,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":454,"sourceUnit":239,"src":"104:51:2","symbolAliases":[{"foreign":{"id":258,"name":"calldataKeccak","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":238,"src":"112:14:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"UserOperation","documentation":{"id":260,"nodeType":"StructuredDocumentation","src":"157:1035:2","text":" User Operation struct\n @param sender the sender account of this request.\n @param nonce unique value the sender uses to verify it is not a replay.\n @param initCode if set, the account contract will be created by this constructor/\n @param callData the method call to execute on this account.\n @param callGasLimit the gas limit passed to the callData method call.\n @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\n @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\n @param maxFeePerGas same as EIP-1559 gas parameter.\n @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\n @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\n @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID."},"id":283,"members":[{"constant":false,"id":262,"mutability":"mutable","name":"sender","nameLocation":"1237:6:2","nodeType":"VariableDeclaration","scope":283,"src":"1229:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":261,"name":"address","nodeType":"ElementaryTypeName","src":"1229:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":264,"mutability":"mutable","name":"nonce","nameLocation":"1261:5:2","nodeType":"VariableDeclaration","scope":283,"src":"1253:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":263,"name":"uint256","nodeType":"ElementaryTypeName","src":"1253:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":266,"mutability":"mutable","name":"initCode","nameLocation":"1282:8:2","nodeType":"VariableDeclaration","scope":283,"src":"1276:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":265,"name":"bytes","nodeType":"ElementaryTypeName","src":"1276:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":268,"mutability":"mutable","name":"callData","nameLocation":"1306:8:2","nodeType":"VariableDeclaration","scope":283,"src":"1300:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":267,"name":"bytes","nodeType":"ElementaryTypeName","src":"1300:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":270,"mutability":"mutable","name":"callGasLimit","nameLocation":"1332:12:2","nodeType":"VariableDeclaration","scope":283,"src":"1324:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":269,"name":"uint256","nodeType":"ElementaryTypeName","src":"1324:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":272,"mutability":"mutable","name":"verificationGasLimit","nameLocation":"1362:20:2","nodeType":"VariableDeclaration","scope":283,"src":"1354:28:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":271,"name":"uint256","nodeType":"ElementaryTypeName","src":"1354:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":274,"mutability":"mutable","name":"preVerificationGas","nameLocation":"1400:18:2","nodeType":"VariableDeclaration","scope":283,"src":"1392:26:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":273,"name":"uint256","nodeType":"ElementaryTypeName","src":"1392:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":276,"mutability":"mutable","name":"maxFeePerGas","nameLocation":"1436:12:2","nodeType":"VariableDeclaration","scope":283,"src":"1428:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":275,"name":"uint256","nodeType":"ElementaryTypeName","src":"1428:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":278,"mutability":"mutable","name":"maxPriorityFeePerGas","nameLocation":"1466:20:2","nodeType":"VariableDeclaration","scope":283,"src":"1458:28:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":277,"name":"uint256","nodeType":"ElementaryTypeName","src":"1458:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":280,"mutability":"mutable","name":"paymasterAndData","nameLocation":"1502:16:2","nodeType":"VariableDeclaration","scope":283,"src":"1496:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":279,"name":"bytes","nodeType":"ElementaryTypeName","src":"1496:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":282,"mutability":"mutable","name":"signature","nameLocation":"1534:9:2","nodeType":"VariableDeclaration","scope":283,"src":"1528:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":281,"name":"bytes","nodeType":"ElementaryTypeName","src":"1528:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"UserOperation","nameLocation":"1204:13:2","nodeType":"StructDefinition","scope":454,"src":"1197:353:2","visibility":"public"},{"abstract":false,"baseContracts":[],"canonicalName":"UserOperationLib","contractDependencies":[],"contractKind":"library","documentation":{"id":284,"nodeType":"StructuredDocumentation","src":"1552:77:2","text":" Utility functions helpful when working with UserOperation structs."},"fullyImplemented":true,"id":453,"linearizedBaseContracts":[453],"name":"UserOperationLib","nameLocation":"1638:16:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":304,"nodeType":"Block","src":"1744:199:2","statements":[{"assignments":[293],"declarations":[{"constant":false,"id":293,"mutability":"mutable","name":"data","nameLocation":"1762:4:2","nodeType":"VariableDeclaration","scope":304,"src":"1754:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":292,"name":"address","nodeType":"ElementaryTypeName","src":"1754:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":294,"nodeType":"VariableDeclarationStatement","src":"1754:12:2"},{"AST":{"nativeSrc":"1868:30:2","nodeType":"YulBlock","src":"1868:30:2","statements":[{"nativeSrc":"1869:28:2","nodeType":"YulAssignment","src":"1869:28:2","value":{"arguments":[{"name":"userOp","nativeSrc":"1890:6:2","nodeType":"YulIdentifier","src":"1890:6:2"}],"functionName":{"name":"calldataload","nativeSrc":"1877:12:2","nodeType":"YulIdentifier","src":"1877:12:2"},"nativeSrc":"1877:20:2","nodeType":"YulFunctionCall","src":"1877:20:2"},"variableNames":[{"name":"data","nativeSrc":"1869:4:2","nodeType":"YulIdentifier","src":"1869:4:2"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":293,"isOffset":false,"isSlot":false,"src":"1869:4:2","valueSize":1},{"declaration":287,"isOffset":false,"isSlot":false,"src":"1890:6:2","valueSize":1}],"id":295,"nodeType":"InlineAssembly","src":"1859:39:2"},{"expression":{"arguments":[{"arguments":[{"id":300,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"1930:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":299,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1922:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":298,"name":"uint160","nodeType":"ElementaryTypeName","src":"1922:7:2","typeDescriptions":{}}},"id":301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1922:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":297,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1914:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":296,"name":"address","nodeType":"ElementaryTypeName","src":"1914:7:2","typeDescriptions":{}}},"id":302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1914:22:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":291,"id":303,"nodeType":"Return","src":"1907:29:2"}]},"id":305,"implemented":true,"kind":"function","modifiers":[],"name":"getSender","nameLocation":"1671:9:2","nodeType":"FunctionDefinition","parameters":{"id":288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":287,"mutability":"mutable","name":"userOp","nameLocation":"1704:6:2","nodeType":"VariableDeclaration","scope":305,"src":"1681:29:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$283_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":286,"nodeType":"UserDefinedTypeName","pathNode":{"id":285,"name":"UserOperation","nameLocations":["1681:13:2"],"nodeType":"IdentifierPath","referencedDeclaration":283,"src":"1681:13:2"},"referencedDeclaration":283,"src":"1681:13:2","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$283_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"1680:31:2"},"returnParameters":{"id":291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":290,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":305,"src":"1735:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":289,"name":"address","nodeType":"ElementaryTypeName","src":"1735:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1734:9:2"},"scope":453,"src":"1662:281:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":339,"nodeType":"Block","src":"2164:391:2","statements":[{"id":338,"nodeType":"UncheckedBlock","src":"2170:379:2","statements":[{"assignments":[314],"declarations":[{"constant":false,"id":314,"mutability":"mutable","name":"maxFeePerGas","nameLocation":"2198:12:2","nodeType":"VariableDeclaration","scope":338,"src":"2190:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":313,"name":"uint256","nodeType":"ElementaryTypeName","src":"2190:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":317,"initialValue":{"expression":{"id":315,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"2213:6:2","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$283_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2220:12:2","memberName":"maxFeePerGas","nodeType":"MemberAccess","referencedDeclaration":276,"src":"2213:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2190:42:2"},{"assignments":[319],"declarations":[{"constant":false,"id":319,"mutability":"mutable","name":"maxPriorityFeePerGas","nameLocation":"2250:20:2","nodeType":"VariableDeclaration","scope":338,"src":"2242:28:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":318,"name":"uint256","nodeType":"ElementaryTypeName","src":"2242:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":322,"initialValue":{"expression":{"id":320,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"2273:6:2","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$283_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2280:20:2","memberName":"maxPriorityFeePerGas","nodeType":"MemberAccess","referencedDeclaration":278,"src":"2273:27:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2242:58:2"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":323,"name":"maxFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"2314:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":324,"name":"maxPriorityFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"2330:20:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2314:36:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":329,"nodeType":"IfStatement","src":"2310:161:2","trueBody":{"id":328,"nodeType":"Block","src":"2352:119:2","statements":[{"expression":{"id":326,"name":"maxFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"2448:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":312,"id":327,"nodeType":"Return","src":"2441:19:2"}]}},{"expression":{"arguments":[{"id":331,"name":"maxFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"2491:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":332,"name":"maxPriorityFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"2505:20:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":333,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2528:5:2","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2534:7:2","memberName":"basefee","nodeType":"MemberAccess","src":"2528:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2505:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":330,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"2487:3:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2487:55:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":312,"id":337,"nodeType":"Return","src":"2480:62:2"}]}]},"id":340,"implemented":true,"kind":"function","modifiers":[],"name":"gasPrice","nameLocation":"2092:8:2","nodeType":"FunctionDefinition","parameters":{"id":309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":308,"mutability":"mutable","name":"userOp","nameLocation":"2124:6:2","nodeType":"VariableDeclaration","scope":340,"src":"2101:29:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$283_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":307,"nodeType":"UserDefinedTypeName","pathNode":{"id":306,"name":"UserOperation","nameLocations":["2101:13:2"],"nodeType":"IdentifierPath","referencedDeclaration":283,"src":"2101:13:2"},"referencedDeclaration":283,"src":"2101:13:2","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$283_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"2100:31:2"},"returnParameters":{"id":312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":311,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":340,"src":"2155:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":310,"name":"uint256","nodeType":"ElementaryTypeName","src":"2155:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2154:9:2"},"scope":453,"src":"2083:472:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":419,"nodeType":"Block","src":"2647:856:2","statements":[{"assignments":[349],"declarations":[{"constant":false,"id":349,"mutability":"mutable","name":"sender","nameLocation":"2665:6:2","nodeType":"VariableDeclaration","scope":419,"src":"2657:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":348,"name":"address","nodeType":"ElementaryTypeName","src":"2657:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":353,"initialValue":{"arguments":[{"id":351,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"2684:6:2","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$283_calldata_ptr","typeString":"struct UserOperation calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_UserOperation_$283_calldata_ptr","typeString":"struct UserOperation calldata"}],"id":350,"name":"getSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"2674:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_UserOperation_$283_calldata_ptr_$returns$_t_address_$","typeString":"function (struct UserOperation calldata) pure returns (address)"}},"id":352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2674:17:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2657:34:2"},{"assignments":[355],"declarations":[{"constant":false,"id":355,"mutability":"mutable","name":"nonce","nameLocation":"2709:5:2","nodeType":"VariableDeclaration","scope":419,"src":"2701:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":354,"name":"uint256","nodeType":"ElementaryTypeName","src":"2701:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":358,"initialValue":{"expression":{"id":356,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"2717:6:2","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$283_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2724:5:2","memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":264,"src":"2717:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2701:28:2"},{"assignments":[360],"declarations":[{"constant":false,"id":360,"mutability":"mutable","name":"hashInitCode","nameLocation":"2747:12:2","nodeType":"VariableDeclaration","scope":419,"src":"2739:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":359,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2739:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":365,"initialValue":{"arguments":[{"expression":{"id":362,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"2777:6:2","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$283_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2784:8:2","memberName":"initCode","nodeType":"MemberAccess","referencedDeclaration":266,"src":"2777:15:2","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":361,"name":"calldataKeccak","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":238,"src":"2762:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$returns$_t_bytes32_$","typeString":"function (bytes calldata) pure returns (bytes32)"}},"id":364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2762:31:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2739:54:2"},{"assignments":[367],"declarations":[{"constant":false,"id":367,"mutability":"mutable","name":"hashCallData","nameLocation":"2811:12:2","nodeType":"VariableDeclaration","scope":419,"src":"2803:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":366,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2803:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":372,"initialValue":{"arguments":[{"expression":{"id":369,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"2841:6:2","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$283_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2848:8:2","memberName":"callData","nodeType":"MemberAccess","referencedDeclaration":268,"src":"2841:15:2","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":368,"name":"calldataKeccak","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":238,"src":"2826:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$returns$_t_bytes32_$","typeString":"function (bytes calldata) pure returns (bytes32)"}},"id":371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2826:31:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2803:54:2"},{"assignments":[374],"declarations":[{"constant":false,"id":374,"mutability":"mutable","name":"callGasLimit","nameLocation":"2875:12:2","nodeType":"VariableDeclaration","scope":419,"src":"2867:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":373,"name":"uint256","nodeType":"ElementaryTypeName","src":"2867:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":377,"initialValue":{"expression":{"id":375,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"2890:6:2","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$283_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2897:12:2","memberName":"callGasLimit","nodeType":"MemberAccess","referencedDeclaration":270,"src":"2890:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2867:42:2"},{"assignments":[379],"declarations":[{"constant":false,"id":379,"mutability":"mutable","name":"verificationGasLimit","nameLocation":"2927:20:2","nodeType":"VariableDeclaration","scope":419,"src":"2919:28:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":378,"name":"uint256","nodeType":"ElementaryTypeName","src":"2919:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":382,"initialValue":{"expression":{"id":380,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"2950:6:2","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$283_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2957:20:2","memberName":"verificationGasLimit","nodeType":"MemberAccess","referencedDeclaration":272,"src":"2950:27:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2919:58:2"},{"assignments":[384],"declarations":[{"constant":false,"id":384,"mutability":"mutable","name":"preVerificationGas","nameLocation":"2995:18:2","nodeType":"VariableDeclaration","scope":419,"src":"2987:26:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":383,"name":"uint256","nodeType":"ElementaryTypeName","src":"2987:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":387,"initialValue":{"expression":{"id":385,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"3016:6:2","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$283_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3023:18:2","memberName":"preVerificationGas","nodeType":"MemberAccess","referencedDeclaration":274,"src":"3016:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2987:54:2"},{"assignments":[389],"declarations":[{"constant":false,"id":389,"mutability":"mutable","name":"maxFeePerGas","nameLocation":"3059:12:2","nodeType":"VariableDeclaration","scope":419,"src":"3051:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":388,"name":"uint256","nodeType":"ElementaryTypeName","src":"3051:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":392,"initialValue":{"expression":{"id":390,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"3074:6:2","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$283_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3081:12:2","memberName":"maxFeePerGas","nodeType":"MemberAccess","referencedDeclaration":276,"src":"3074:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3051:42:2"},{"assignments":[394],"declarations":[{"constant":false,"id":394,"mutability":"mutable","name":"maxPriorityFeePerGas","nameLocation":"3111:20:2","nodeType":"VariableDeclaration","scope":419,"src":"3103:28:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":393,"name":"uint256","nodeType":"ElementaryTypeName","src":"3103:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":397,"initialValue":{"expression":{"id":395,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"3134:6:2","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$283_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3141:20:2","memberName":"maxPriorityFeePerGas","nodeType":"MemberAccess","referencedDeclaration":278,"src":"3134:27:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3103:58:2"},{"assignments":[399],"declarations":[{"constant":false,"id":399,"mutability":"mutable","name":"hashPaymasterAndData","nameLocation":"3179:20:2","nodeType":"VariableDeclaration","scope":419,"src":"3171:28:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":398,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3171:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":404,"initialValue":{"arguments":[{"expression":{"id":401,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"3217:6:2","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$283_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3224:16:2","memberName":"paymasterAndData","nodeType":"MemberAccess","referencedDeclaration":280,"src":"3217:23:2","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":400,"name":"calldataKeccak","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":238,"src":"3202:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$returns$_t_bytes32_$","typeString":"function (bytes calldata) pure returns (bytes32)"}},"id":403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3202:39:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3171:70:2"},{"expression":{"arguments":[{"id":407,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"3283:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":408,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":355,"src":"3291:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":409,"name":"hashInitCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":360,"src":"3310:12:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":410,"name":"hashCallData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":367,"src":"3324:12:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":411,"name":"callGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":374,"src":"3350:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":412,"name":"verificationGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"3364:20:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":413,"name":"preVerificationGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"3386:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":414,"name":"maxFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":389,"src":"3418:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":415,"name":"maxPriorityFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"3432:20:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":416,"name":"hashPaymasterAndData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":399,"src":"3466:20:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":405,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3259:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":406,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3263:6:2","memberName":"encode","nodeType":"MemberAccess","src":"3259:10:2","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3259:237:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":347,"id":418,"nodeType":"Return","src":"3252:244:2"}]},"id":420,"implemented":true,"kind":"function","modifiers":[],"name":"pack","nameLocation":"2570:4:2","nodeType":"FunctionDefinition","parameters":{"id":344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":343,"mutability":"mutable","name":"userOp","nameLocation":"2598:6:2","nodeType":"VariableDeclaration","scope":420,"src":"2575:29:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$283_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":342,"nodeType":"UserDefinedTypeName","pathNode":{"id":341,"name":"UserOperation","nameLocations":["2575:13:2"],"nodeType":"IdentifierPath","referencedDeclaration":283,"src":"2575:13:2"},"referencedDeclaration":283,"src":"2575:13:2","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$283_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"2574:31:2"},"returnParameters":{"id":347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":346,"mutability":"mutable","name":"ret","nameLocation":"2642:3:2","nodeType":"VariableDeclaration","scope":420,"src":"2629:16:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":345,"name":"bytes","nodeType":"ElementaryTypeName","src":"2629:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2628:18:2"},"scope":453,"src":"2561:942:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":434,"nodeType":"Block","src":"3586:47:2","statements":[{"expression":{"arguments":[{"arguments":[{"id":430,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":423,"src":"3618:6:2","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$283_calldata_ptr","typeString":"struct UserOperation calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_UserOperation_$283_calldata_ptr","typeString":"struct UserOperation calldata"}],"id":429,"name":"pack","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":420,"src":"3613:4:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_UserOperation_$283_calldata_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (struct UserOperation calldata) pure returns (bytes memory)"}},"id":431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3613:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":428,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3603:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3603:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":427,"id":433,"nodeType":"Return","src":"3596:30:2"}]},"id":435,"implemented":true,"kind":"function","modifiers":[],"name":"hash","nameLocation":"3518:4:2","nodeType":"FunctionDefinition","parameters":{"id":424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":423,"mutability":"mutable","name":"userOp","nameLocation":"3546:6:2","nodeType":"VariableDeclaration","scope":435,"src":"3523:29:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$283_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":422,"nodeType":"UserDefinedTypeName","pathNode":{"id":421,"name":"UserOperation","nameLocations":["3523:13:2"],"nodeType":"IdentifierPath","referencedDeclaration":283,"src":"3523:13:2"},"referencedDeclaration":283,"src":"3523:13:2","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$283_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"3522:31:2"},"returnParameters":{"id":427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":426,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":435,"src":"3577:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":425,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3577:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3576:9:2"},"scope":453,"src":"3509:124:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":451,"nodeType":"Block","src":"3706:37:2","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":444,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":437,"src":"3723:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":445,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"3727:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3723:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":448,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"3735:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3723:13:2","trueExpression":{"id":447,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":437,"src":"3731:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":443,"id":450,"nodeType":"Return","src":"3716:20:2"}]},"id":452,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"3648:3:2","nodeType":"FunctionDefinition","parameters":{"id":440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":437,"mutability":"mutable","name":"a","nameLocation":"3660:1:2","nodeType":"VariableDeclaration","scope":452,"src":"3652:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":436,"name":"uint256","nodeType":"ElementaryTypeName","src":"3652:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":439,"mutability":"mutable","name":"b","nameLocation":"3671:1:2","nodeType":"VariableDeclaration","scope":452,"src":"3663:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":438,"name":"uint256","nodeType":"ElementaryTypeName","src":"3663:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3651:22:2"},"returnParameters":{"id":443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":442,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":452,"src":"3697:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":441,"name":"uint256","nodeType":"ElementaryTypeName","src":"3697:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3696:9:2"},"scope":453,"src":"3639:104:2","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":454,"src":"1630:2115:2","usedErrors":[],"usedEvents":[]}],"src":"36:3710:2"},"id":2},"@across-protocol/contracts-v2/contracts/interfaces/V3SpokePoolInterface.sol":{"ast":{"absolutePath":"@across-protocol/contracts-v2/contracts/interfaces/V3SpokePoolInterface.sol","exportedSymbols":{"V3SpokePoolInterface":[737]},"id":738,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":455,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"37:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"V3SpokePoolInterface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":737,"linearizedBaseContracts":[737],"name":"V3SpokePoolInterface","nameLocation":"170:20:3","nodeType":"ContractDefinition","nodes":[{"canonicalName":"V3SpokePoolInterface.FillStatus","id":459,"members":[{"id":456,"name":"Unfilled","nameLocation":"444:8:3","nodeType":"EnumValue","src":"444:8:3"},{"id":457,"name":"RequestedSlowFill","nameLocation":"462:17:3","nodeType":"EnumValue","src":"462:17:3"},{"id":458,"name":"Filled","nameLocation":"489:6:3","nodeType":"EnumValue","src":"489:6:3"}],"name":"FillStatus","nameLocation":"423:10:3","nodeType":"EnumDefinition","src":"418:83:3"},{"canonicalName":"V3SpokePoolInterface.FillType","id":463,"members":[{"id":460,"name":"FastFill","nameLocation":"733:8:3","nodeType":"EnumValue","src":"733:8:3"},{"id":461,"name":"ReplacedSlowFill","nameLocation":"831:16:3","nodeType":"EnumValue","src":"831:16:3"},{"id":462,"name":"SlowFill","nameLocation":"1125:8:3","nodeType":"EnumValue","src":"1125:8:3"}],"name":"FillType","nameLocation":"714:8:3","nodeType":"EnumDefinition","src":"709:588:3"},{"canonicalName":"V3SpokePoolInterface.V3RelayData","id":488,"members":[{"constant":false,"id":465,"mutability":"mutable","name":"depositor","nameLocation":"1889:9:3","nodeType":"VariableDeclaration","scope":488,"src":"1881:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":464,"name":"address","nodeType":"ElementaryTypeName","src":"1881:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":467,"mutability":"mutable","name":"recipient","nameLocation":"1975:9:3","nodeType":"VariableDeclaration","scope":488,"src":"1967:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":466,"name":"address","nodeType":"ElementaryTypeName","src":"1967:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":469,"mutability":"mutable","name":"exclusiveRelayer","nameLocation":"2101:16:3","nodeType":"VariableDeclaration","scope":488,"src":"2093:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":468,"name":"address","nodeType":"ElementaryTypeName","src":"2093:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":471,"mutability":"mutable","name":"inputToken","nameLocation":"2200:10:3","nodeType":"VariableDeclaration","scope":488,"src":"2192:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":470,"name":"address","nodeType":"ElementaryTypeName","src":"2192:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":473,"mutability":"mutable","name":"outputToken","nameLocation":"2297:11:3","nodeType":"VariableDeclaration","scope":488,"src":"2289:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":472,"name":"address","nodeType":"ElementaryTypeName","src":"2289:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":475,"mutability":"mutable","name":"inputAmount","nameLocation":"2387:11:3","nodeType":"VariableDeclaration","scope":488,"src":"2379:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":474,"name":"uint256","nodeType":"ElementaryTypeName","src":"2379:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":477,"mutability":"mutable","name":"outputAmount","nameLocation":"2483:12:3","nodeType":"VariableDeclaration","scope":488,"src":"2475:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":476,"name":"uint256","nodeType":"ElementaryTypeName","src":"2475:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":479,"mutability":"mutable","name":"originChainId","nameLocation":"2541:13:3","nodeType":"VariableDeclaration","scope":488,"src":"2533:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":478,"name":"uint256","nodeType":"ElementaryTypeName","src":"2533:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":481,"mutability":"mutable","name":"depositId","nameLocation":"2644:9:3","nodeType":"VariableDeclaration","scope":488,"src":"2637:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":480,"name":"uint32","nodeType":"ElementaryTypeName","src":"2637:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":483,"mutability":"mutable","name":"fillDeadline","nameLocation":"2770:12:3","nodeType":"VariableDeclaration","scope":488,"src":"2763:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":482,"name":"uint32","nodeType":"ElementaryTypeName","src":"2763:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":485,"mutability":"mutable","name":"exclusivityDeadline","nameLocation":"2895:19:3","nodeType":"VariableDeclaration","scope":488,"src":"2888:26:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":484,"name":"uint32","nodeType":"ElementaryTypeName","src":"2888:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":487,"mutability":"mutable","name":"message","nameLocation":"2982:7:3","nodeType":"VariableDeclaration","scope":488,"src":"2976:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":486,"name":"bytes","nodeType":"ElementaryTypeName","src":"2976:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"V3RelayData","nameLocation":"1793:11:3","nodeType":"StructDefinition","scope":737,"src":"1786:1210:3","visibility":"public"},{"canonicalName":"V3SpokePoolInterface.V3SlowFill","id":496,"members":[{"constant":false,"id":491,"mutability":"mutable","name":"relayData","nameLocation":"3130:9:3","nodeType":"VariableDeclaration","scope":496,"src":"3118:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_V3RelayData_$488_storage_ptr","typeString":"struct V3SpokePoolInterface.V3RelayData"},"typeName":{"id":490,"nodeType":"UserDefinedTypeName","pathNode":{"id":489,"name":"V3RelayData","nameLocations":["3118:11:3"],"nodeType":"IdentifierPath","referencedDeclaration":488,"src":"3118:11:3"},"referencedDeclaration":488,"src":"3118:11:3","typeDescriptions":{"typeIdentifier":"t_struct$_V3RelayData_$488_storage_ptr","typeString":"struct V3SpokePoolInterface.V3RelayData"}},"visibility":"internal"},{"constant":false,"id":493,"mutability":"mutable","name":"chainId","nameLocation":"3157:7:3","nodeType":"VariableDeclaration","scope":496,"src":"3149:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":492,"name":"uint256","nodeType":"ElementaryTypeName","src":"3149:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":495,"mutability":"mutable","name":"updatedOutputAmount","nameLocation":"3182:19:3","nodeType":"VariableDeclaration","scope":496,"src":"3174:27:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":494,"name":"uint256","nodeType":"ElementaryTypeName","src":"3174:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"V3SlowFill","nameLocation":"3097:10:3","nodeType":"StructDefinition","scope":737,"src":"3090:118:3","visibility":"public"},{"canonicalName":"V3SpokePoolInterface.V3RelayExecutionParams","id":510,"members":[{"constant":false,"id":499,"mutability":"mutable","name":"relay","nameLocation":"3728:5:3","nodeType":"VariableDeclaration","scope":510,"src":"3716:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_V3RelayData_$488_storage_ptr","typeString":"struct V3SpokePoolInterface.V3RelayData"},"typeName":{"id":498,"nodeType":"UserDefinedTypeName","pathNode":{"id":497,"name":"V3RelayData","nameLocations":["3716:11:3"],"nodeType":"IdentifierPath","referencedDeclaration":488,"src":"3716:11:3"},"referencedDeclaration":488,"src":"3716:11:3","typeDescriptions":{"typeIdentifier":"t_struct$_V3RelayData_$488_storage_ptr","typeString":"struct V3SpokePoolInterface.V3RelayData"}},"visibility":"internal"},{"constant":false,"id":501,"mutability":"mutable","name":"relayHash","nameLocation":"3751:9:3","nodeType":"VariableDeclaration","scope":510,"src":"3743:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":500,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3743:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":503,"mutability":"mutable","name":"updatedOutputAmount","nameLocation":"3778:19:3","nodeType":"VariableDeclaration","scope":510,"src":"3770:27:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":502,"name":"uint256","nodeType":"ElementaryTypeName","src":"3770:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":505,"mutability":"mutable","name":"updatedRecipient","nameLocation":"3815:16:3","nodeType":"VariableDeclaration","scope":510,"src":"3807:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":504,"name":"address","nodeType":"ElementaryTypeName","src":"3807:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":507,"mutability":"mutable","name":"updatedMessage","nameLocation":"3847:14:3","nodeType":"VariableDeclaration","scope":510,"src":"3841:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":506,"name":"bytes","nodeType":"ElementaryTypeName","src":"3841:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":509,"mutability":"mutable","name":"repaymentChainId","nameLocation":"3879:16:3","nodeType":"VariableDeclaration","scope":510,"src":"3871:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":508,"name":"uint256","nodeType":"ElementaryTypeName","src":"3871:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"V3RelayExecutionParams","nameLocation":"3683:22:3","nodeType":"StructDefinition","scope":737,"src":"3676:226:3","visibility":"public"},{"canonicalName":"V3SpokePoolInterface.V3RelayExecutionEventInfo","id":520,"members":[{"constant":false,"id":512,"mutability":"mutable","name":"updatedRecipient","nameLocation":"4238:16:3","nodeType":"VariableDeclaration","scope":520,"src":"4230:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":511,"name":"address","nodeType":"ElementaryTypeName","src":"4230:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":514,"mutability":"mutable","name":"updatedMessage","nameLocation":"4270:14:3","nodeType":"VariableDeclaration","scope":520,"src":"4264:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":513,"name":"bytes","nodeType":"ElementaryTypeName","src":"4264:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":516,"mutability":"mutable","name":"updatedOutputAmount","nameLocation":"4302:19:3","nodeType":"VariableDeclaration","scope":520,"src":"4294:27:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":515,"name":"uint256","nodeType":"ElementaryTypeName","src":"4294:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":519,"mutability":"mutable","name":"fillType","nameLocation":"4340:8:3","nodeType":"VariableDeclaration","scope":520,"src":"4331:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_FillType_$463","typeString":"enum V3SpokePoolInterface.FillType"},"typeName":{"id":518,"nodeType":"UserDefinedTypeName","pathNode":{"id":517,"name":"FillType","nameLocations":["4331:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":463,"src":"4331:8:3"},"referencedDeclaration":463,"src":"4331:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_FillType_$463","typeString":"enum V3SpokePoolInterface.FillType"}},"visibility":"internal"}],"name":"V3RelayExecutionEventInfo","nameLocation":"4194:25:3","nodeType":"StructDefinition","scope":737,"src":"4187:168:3","visibility":"public"},{"anonymous":false,"eventSelector":"a123dc29aebf7d0c3322c8eeb5b999e859f39937950ed31056532713d0de396f","id":548,"name":"V3FundsDeposited","nameLocation":"4501:16:3","nodeType":"EventDefinition","parameters":{"id":547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":522,"indexed":false,"mutability":"mutable","name":"inputToken","nameLocation":"4535:10:3","nodeType":"VariableDeclaration","scope":548,"src":"4527:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":521,"name":"address","nodeType":"ElementaryTypeName","src":"4527:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":524,"indexed":false,"mutability":"mutable","name":"outputToken","nameLocation":"4563:11:3","nodeType":"VariableDeclaration","scope":548,"src":"4555:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":523,"name":"address","nodeType":"ElementaryTypeName","src":"4555:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":526,"indexed":false,"mutability":"mutable","name":"inputAmount","nameLocation":"4592:11:3","nodeType":"VariableDeclaration","scope":548,"src":"4584:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":525,"name":"uint256","nodeType":"ElementaryTypeName","src":"4584:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":528,"indexed":false,"mutability":"mutable","name":"outputAmount","nameLocation":"4621:12:3","nodeType":"VariableDeclaration","scope":548,"src":"4613:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":527,"name":"uint256","nodeType":"ElementaryTypeName","src":"4613:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":530,"indexed":true,"mutability":"mutable","name":"destinationChainId","nameLocation":"4659:18:3","nodeType":"VariableDeclaration","scope":548,"src":"4643:34:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":529,"name":"uint256","nodeType":"ElementaryTypeName","src":"4643:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":532,"indexed":true,"mutability":"mutable","name":"depositId","nameLocation":"4702:9:3","nodeType":"VariableDeclaration","scope":548,"src":"4687:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":531,"name":"uint32","nodeType":"ElementaryTypeName","src":"4687:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":534,"indexed":false,"mutability":"mutable","name":"quoteTimestamp","nameLocation":"4728:14:3","nodeType":"VariableDeclaration","scope":548,"src":"4721:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":533,"name":"uint32","nodeType":"ElementaryTypeName","src":"4721:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":536,"indexed":false,"mutability":"mutable","name":"fillDeadline","nameLocation":"4759:12:3","nodeType":"VariableDeclaration","scope":548,"src":"4752:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":535,"name":"uint32","nodeType":"ElementaryTypeName","src":"4752:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":538,"indexed":false,"mutability":"mutable","name":"exclusivityDeadline","nameLocation":"4788:19:3","nodeType":"VariableDeclaration","scope":548,"src":"4781:26:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":537,"name":"uint32","nodeType":"ElementaryTypeName","src":"4781:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":540,"indexed":true,"mutability":"mutable","name":"depositor","nameLocation":"4833:9:3","nodeType":"VariableDeclaration","scope":548,"src":"4817:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":539,"name":"address","nodeType":"ElementaryTypeName","src":"4817:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":542,"indexed":false,"mutability":"mutable","name":"recipient","nameLocation":"4860:9:3","nodeType":"VariableDeclaration","scope":548,"src":"4852:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":541,"name":"address","nodeType":"ElementaryTypeName","src":"4852:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":544,"indexed":false,"mutability":"mutable","name":"exclusiveRelayer","nameLocation":"4887:16:3","nodeType":"VariableDeclaration","scope":548,"src":"4879:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":543,"name":"address","nodeType":"ElementaryTypeName","src":"4879:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":546,"indexed":false,"mutability":"mutable","name":"message","nameLocation":"4919:7:3","nodeType":"VariableDeclaration","scope":548,"src":"4913:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":545,"name":"bytes","nodeType":"ElementaryTypeName","src":"4913:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4517:415:3"},"src":"4495:438:3"},{"anonymous":false,"eventSelector":"b0a29aed3d389a1041194255878b423f7780be3ed2324d4693508c6ff189845e","id":562,"name":"RequestedSpeedUpV3Deposit","nameLocation":"4945:25:3","nodeType":"EventDefinition","parameters":{"id":561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":550,"indexed":false,"mutability":"mutable","name":"updatedOutputAmount","nameLocation":"4988:19:3","nodeType":"VariableDeclaration","scope":562,"src":"4980:27:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":549,"name":"uint256","nodeType":"ElementaryTypeName","src":"4980:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":552,"indexed":true,"mutability":"mutable","name":"depositId","nameLocation":"5032:9:3","nodeType":"VariableDeclaration","scope":562,"src":"5017:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":551,"name":"uint32","nodeType":"ElementaryTypeName","src":"5017:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":554,"indexed":true,"mutability":"mutable","name":"depositor","nameLocation":"5067:9:3","nodeType":"VariableDeclaration","scope":562,"src":"5051:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":553,"name":"address","nodeType":"ElementaryTypeName","src":"5051:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":556,"indexed":false,"mutability":"mutable","name":"updatedRecipient","nameLocation":"5094:16:3","nodeType":"VariableDeclaration","scope":562,"src":"5086:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":555,"name":"address","nodeType":"ElementaryTypeName","src":"5086:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":558,"indexed":false,"mutability":"mutable","name":"updatedMessage","nameLocation":"5126:14:3","nodeType":"VariableDeclaration","scope":562,"src":"5120:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":557,"name":"bytes","nodeType":"ElementaryTypeName","src":"5120:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":560,"indexed":false,"mutability":"mutable","name":"depositorSignature","nameLocation":"5156:18:3","nodeType":"VariableDeclaration","scope":562,"src":"5150:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":559,"name":"bytes","nodeType":"ElementaryTypeName","src":"5150:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4970:210:3"},"src":"4939:242:3"},{"anonymous":false,"eventSelector":"571749edf1d5c9599318cdbc4e28a6475d65e87fd3b2ddbe1e9a8d5e7a0f0ff7","id":595,"name":"FilledV3Relay","nameLocation":"5193:13:3","nodeType":"EventDefinition","parameters":{"id":594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":564,"indexed":false,"mutability":"mutable","name":"inputToken","nameLocation":"5224:10:3","nodeType":"VariableDeclaration","scope":595,"src":"5216:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":563,"name":"address","nodeType":"ElementaryTypeName","src":"5216:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":566,"indexed":false,"mutability":"mutable","name":"outputToken","nameLocation":"5252:11:3","nodeType":"VariableDeclaration","scope":595,"src":"5244:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":565,"name":"address","nodeType":"ElementaryTypeName","src":"5244:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":568,"indexed":false,"mutability":"mutable","name":"inputAmount","nameLocation":"5281:11:3","nodeType":"VariableDeclaration","scope":595,"src":"5273:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":567,"name":"uint256","nodeType":"ElementaryTypeName","src":"5273:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":570,"indexed":false,"mutability":"mutable","name":"outputAmount","nameLocation":"5310:12:3","nodeType":"VariableDeclaration","scope":595,"src":"5302:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":569,"name":"uint256","nodeType":"ElementaryTypeName","src":"5302:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":572,"indexed":false,"mutability":"mutable","name":"repaymentChainId","nameLocation":"5340:16:3","nodeType":"VariableDeclaration","scope":595,"src":"5332:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":571,"name":"uint256","nodeType":"ElementaryTypeName","src":"5332:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":574,"indexed":true,"mutability":"mutable","name":"originChainId","nameLocation":"5382:13:3","nodeType":"VariableDeclaration","scope":595,"src":"5366:29:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":573,"name":"uint256","nodeType":"ElementaryTypeName","src":"5366:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":576,"indexed":true,"mutability":"mutable","name":"depositId","nameLocation":"5420:9:3","nodeType":"VariableDeclaration","scope":595,"src":"5405:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":575,"name":"uint32","nodeType":"ElementaryTypeName","src":"5405:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":578,"indexed":false,"mutability":"mutable","name":"fillDeadline","nameLocation":"5446:12:3","nodeType":"VariableDeclaration","scope":595,"src":"5439:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":577,"name":"uint32","nodeType":"ElementaryTypeName","src":"5439:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":580,"indexed":false,"mutability":"mutable","name":"exclusivityDeadline","nameLocation":"5475:19:3","nodeType":"VariableDeclaration","scope":595,"src":"5468:26:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":579,"name":"uint32","nodeType":"ElementaryTypeName","src":"5468:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":582,"indexed":false,"mutability":"mutable","name":"exclusiveRelayer","nameLocation":"5512:16:3","nodeType":"VariableDeclaration","scope":595,"src":"5504:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":581,"name":"address","nodeType":"ElementaryTypeName","src":"5504:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":584,"indexed":true,"mutability":"mutable","name":"relayer","nameLocation":"5554:7:3","nodeType":"VariableDeclaration","scope":595,"src":"5538:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":583,"name":"address","nodeType":"ElementaryTypeName","src":"5538:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":586,"indexed":false,"mutability":"mutable","name":"depositor","nameLocation":"5579:9:3","nodeType":"VariableDeclaration","scope":595,"src":"5571:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":585,"name":"address","nodeType":"ElementaryTypeName","src":"5571:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":588,"indexed":false,"mutability":"mutable","name":"recipient","nameLocation":"5606:9:3","nodeType":"VariableDeclaration","scope":595,"src":"5598:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":587,"name":"address","nodeType":"ElementaryTypeName","src":"5598:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":590,"indexed":false,"mutability":"mutable","name":"message","nameLocation":"5631:7:3","nodeType":"VariableDeclaration","scope":595,"src":"5625:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":589,"name":"bytes","nodeType":"ElementaryTypeName","src":"5625:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":593,"indexed":false,"mutability":"mutable","name":"relayExecutionInfo","nameLocation":"5674:18:3","nodeType":"VariableDeclaration","scope":595,"src":"5648:44:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_V3RelayExecutionEventInfo_$520_memory_ptr","typeString":"struct V3SpokePoolInterface.V3RelayExecutionEventInfo"},"typeName":{"id":592,"nodeType":"UserDefinedTypeName","pathNode":{"id":591,"name":"V3RelayExecutionEventInfo","nameLocations":["5648:25:3"],"nodeType":"IdentifierPath","referencedDeclaration":520,"src":"5648:25:3"},"referencedDeclaration":520,"src":"5648:25:3","typeDescriptions":{"typeIdentifier":"t_struct$_V3RelayExecutionEventInfo_$520_storage_ptr","typeString":"struct V3SpokePoolInterface.V3RelayExecutionEventInfo"}},"visibility":"internal"}],"src":"5206:492:3"},"src":"5187:512:3"},{"anonymous":false,"eventSelector":"923794976d026d6b119735adc163cb71decfc903e17c3dc226c00789593c04e1","id":621,"name":"RequestedV3SlowFill","nameLocation":"5711:19:3","nodeType":"EventDefinition","parameters":{"id":620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":597,"indexed":false,"mutability":"mutable","name":"inputToken","nameLocation":"5748:10:3","nodeType":"VariableDeclaration","scope":621,"src":"5740:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":596,"name":"address","nodeType":"ElementaryTypeName","src":"5740:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":599,"indexed":false,"mutability":"mutable","name":"outputToken","nameLocation":"5776:11:3","nodeType":"VariableDeclaration","scope":621,"src":"5768:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":598,"name":"address","nodeType":"ElementaryTypeName","src":"5768:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":601,"indexed":false,"mutability":"mutable","name":"inputAmount","nameLocation":"5805:11:3","nodeType":"VariableDeclaration","scope":621,"src":"5797:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":600,"name":"uint256","nodeType":"ElementaryTypeName","src":"5797:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":603,"indexed":false,"mutability":"mutable","name":"outputAmount","nameLocation":"5834:12:3","nodeType":"VariableDeclaration","scope":621,"src":"5826:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":602,"name":"uint256","nodeType":"ElementaryTypeName","src":"5826:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":605,"indexed":true,"mutability":"mutable","name":"originChainId","nameLocation":"5872:13:3","nodeType":"VariableDeclaration","scope":621,"src":"5856:29:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":604,"name":"uint256","nodeType":"ElementaryTypeName","src":"5856:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":607,"indexed":true,"mutability":"mutable","name":"depositId","nameLocation":"5910:9:3","nodeType":"VariableDeclaration","scope":621,"src":"5895:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":606,"name":"uint32","nodeType":"ElementaryTypeName","src":"5895:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":609,"indexed":false,"mutability":"mutable","name":"fillDeadline","nameLocation":"5936:12:3","nodeType":"VariableDeclaration","scope":621,"src":"5929:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":608,"name":"uint32","nodeType":"ElementaryTypeName","src":"5929:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":611,"indexed":false,"mutability":"mutable","name":"exclusivityDeadline","nameLocation":"5965:19:3","nodeType":"VariableDeclaration","scope":621,"src":"5958:26:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":610,"name":"uint32","nodeType":"ElementaryTypeName","src":"5958:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":613,"indexed":false,"mutability":"mutable","name":"exclusiveRelayer","nameLocation":"6002:16:3","nodeType":"VariableDeclaration","scope":621,"src":"5994:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":612,"name":"address","nodeType":"ElementaryTypeName","src":"5994:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":615,"indexed":false,"mutability":"mutable","name":"depositor","nameLocation":"6036:9:3","nodeType":"VariableDeclaration","scope":621,"src":"6028:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":614,"name":"address","nodeType":"ElementaryTypeName","src":"6028:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":617,"indexed":false,"mutability":"mutable","name":"recipient","nameLocation":"6063:9:3","nodeType":"VariableDeclaration","scope":621,"src":"6055:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":616,"name":"address","nodeType":"ElementaryTypeName","src":"6055:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":619,"indexed":false,"mutability":"mutable","name":"message","nameLocation":"6088:7:3","nodeType":"VariableDeclaration","scope":621,"src":"6082:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":618,"name":"bytes","nodeType":"ElementaryTypeName","src":"6082:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5730:371:3"},"src":"5705:397:3"},{"functionSelector":"7b939232","id":648,"implemented":false,"kind":"function","modifiers":[],"name":"depositV3","nameLocation":"6251:9:3","nodeType":"FunctionDefinition","parameters":{"id":646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":623,"mutability":"mutable","name":"depositor","nameLocation":"6278:9:3","nodeType":"VariableDeclaration","scope":648,"src":"6270:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":622,"name":"address","nodeType":"ElementaryTypeName","src":"6270:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":625,"mutability":"mutable","name":"recipient","nameLocation":"6305:9:3","nodeType":"VariableDeclaration","scope":648,"src":"6297:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":624,"name":"address","nodeType":"ElementaryTypeName","src":"6297:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":627,"mutability":"mutable","name":"inputToken","nameLocation":"6332:10:3","nodeType":"VariableDeclaration","scope":648,"src":"6324:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":626,"name":"address","nodeType":"ElementaryTypeName","src":"6324:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":629,"mutability":"mutable","name":"outputToken","nameLocation":"6360:11:3","nodeType":"VariableDeclaration","scope":648,"src":"6352:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":628,"name":"address","nodeType":"ElementaryTypeName","src":"6352:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":631,"mutability":"mutable","name":"inputAmount","nameLocation":"6389:11:3","nodeType":"VariableDeclaration","scope":648,"src":"6381:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":630,"name":"uint256","nodeType":"ElementaryTypeName","src":"6381:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":633,"mutability":"mutable","name":"outputAmount","nameLocation":"6418:12:3","nodeType":"VariableDeclaration","scope":648,"src":"6410:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":632,"name":"uint256","nodeType":"ElementaryTypeName","src":"6410:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":635,"mutability":"mutable","name":"destinationChainId","nameLocation":"6448:18:3","nodeType":"VariableDeclaration","scope":648,"src":"6440:26:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":634,"name":"uint256","nodeType":"ElementaryTypeName","src":"6440:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":637,"mutability":"mutable","name":"exclusiveRelayer","nameLocation":"6484:16:3","nodeType":"VariableDeclaration","scope":648,"src":"6476:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":636,"name":"address","nodeType":"ElementaryTypeName","src":"6476:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":639,"mutability":"mutable","name":"quoteTimestamp","nameLocation":"6517:14:3","nodeType":"VariableDeclaration","scope":648,"src":"6510:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":638,"name":"uint32","nodeType":"ElementaryTypeName","src":"6510:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":641,"mutability":"mutable","name":"fillDeadline","nameLocation":"6548:12:3","nodeType":"VariableDeclaration","scope":648,"src":"6541:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":640,"name":"uint32","nodeType":"ElementaryTypeName","src":"6541:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":643,"mutability":"mutable","name":"exclusivityDeadline","nameLocation":"6577:19:3","nodeType":"VariableDeclaration","scope":648,"src":"6570:26:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":642,"name":"uint32","nodeType":"ElementaryTypeName","src":"6570:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":645,"mutability":"mutable","name":"message","nameLocation":"6621:7:3","nodeType":"VariableDeclaration","scope":648,"src":"6606:22:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":644,"name":"bytes","nodeType":"ElementaryTypeName","src":"6606:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6260:374:3"},"returnParameters":{"id":647,"nodeType":"ParameterList","parameters":[],"src":"6651:0:3"},"scope":737,"src":"6242:410:3","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"4e0fb8f5","id":663,"implemented":false,"kind":"function","modifiers":[],"name":"speedUpV3Deposit","nameLocation":"6667:16:3","nodeType":"FunctionDefinition","parameters":{"id":661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":650,"mutability":"mutable","name":"depositor","nameLocation":"6701:9:3","nodeType":"VariableDeclaration","scope":663,"src":"6693:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":649,"name":"address","nodeType":"ElementaryTypeName","src":"6693:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":652,"mutability":"mutable","name":"depositId","nameLocation":"6727:9:3","nodeType":"VariableDeclaration","scope":663,"src":"6720:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":651,"name":"uint32","nodeType":"ElementaryTypeName","src":"6720:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":654,"mutability":"mutable","name":"updatedOutputAmount","nameLocation":"6754:19:3","nodeType":"VariableDeclaration","scope":663,"src":"6746:27:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":653,"name":"uint256","nodeType":"ElementaryTypeName","src":"6746:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":656,"mutability":"mutable","name":"updatedRecipient","nameLocation":"6791:16:3","nodeType":"VariableDeclaration","scope":663,"src":"6783:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":655,"name":"address","nodeType":"ElementaryTypeName","src":"6783:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":658,"mutability":"mutable","name":"updatedMessage","nameLocation":"6832:14:3","nodeType":"VariableDeclaration","scope":663,"src":"6817:29:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":657,"name":"bytes","nodeType":"ElementaryTypeName","src":"6817:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":660,"mutability":"mutable","name":"depositorSignature","nameLocation":"6871:18:3","nodeType":"VariableDeclaration","scope":663,"src":"6856:33:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":659,"name":"bytes","nodeType":"ElementaryTypeName","src":"6856:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6683:212:3"},"returnParameters":{"id":662,"nodeType":"ParameterList","parameters":[],"src":"6904:0:3"},"scope":737,"src":"6658:247:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"2e378115","id":671,"implemented":false,"kind":"function","modifiers":[],"name":"fillV3Relay","nameLocation":"6920:11:3","nodeType":"FunctionDefinition","parameters":{"id":669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":666,"mutability":"mutable","name":"relayData","nameLocation":"6953:9:3","nodeType":"VariableDeclaration","scope":671,"src":"6932:30:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_V3RelayData_$488_calldata_ptr","typeString":"struct V3SpokePoolInterface.V3RelayData"},"typeName":{"id":665,"nodeType":"UserDefinedTypeName","pathNode":{"id":664,"name":"V3RelayData","nameLocations":["6932:11:3"],"nodeType":"IdentifierPath","referencedDeclaration":488,"src":"6932:11:3"},"referencedDeclaration":488,"src":"6932:11:3","typeDescriptions":{"typeIdentifier":"t_struct$_V3RelayData_$488_storage_ptr","typeString":"struct V3SpokePoolInterface.V3RelayData"}},"visibility":"internal"},{"constant":false,"id":668,"mutability":"mutable","name":"repaymentChainId","nameLocation":"6972:16:3","nodeType":"VariableDeclaration","scope":671,"src":"6964:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":667,"name":"uint256","nodeType":"ElementaryTypeName","src":"6964:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6931:58:3"},"returnParameters":{"id":670,"nodeType":"ParameterList","parameters":[],"src":"6998:0:3"},"scope":737,"src":"6911:88:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"ccfa5971","id":687,"implemented":false,"kind":"function","modifiers":[],"name":"fillV3RelayWithUpdatedDeposit","nameLocation":"7014:29:3","nodeType":"FunctionDefinition","parameters":{"id":685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":674,"mutability":"mutable","name":"relayData","nameLocation":"7074:9:3","nodeType":"VariableDeclaration","scope":687,"src":"7053:30:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_V3RelayData_$488_calldata_ptr","typeString":"struct V3SpokePoolInterface.V3RelayData"},"typeName":{"id":673,"nodeType":"UserDefinedTypeName","pathNode":{"id":672,"name":"V3RelayData","nameLocations":["7053:11:3"],"nodeType":"IdentifierPath","referencedDeclaration":488,"src":"7053:11:3"},"referencedDeclaration":488,"src":"7053:11:3","typeDescriptions":{"typeIdentifier":"t_struct$_V3RelayData_$488_storage_ptr","typeString":"struct V3SpokePoolInterface.V3RelayData"}},"visibility":"internal"},{"constant":false,"id":676,"mutability":"mutable","name":"repaymentChainId","nameLocation":"7101:16:3","nodeType":"VariableDeclaration","scope":687,"src":"7093:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":675,"name":"uint256","nodeType":"ElementaryTypeName","src":"7093:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":678,"mutability":"mutable","name":"updatedOutputAmount","nameLocation":"7135:19:3","nodeType":"VariableDeclaration","scope":687,"src":"7127:27:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":677,"name":"uint256","nodeType":"ElementaryTypeName","src":"7127:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":680,"mutability":"mutable","name":"updatedRecipient","nameLocation":"7172:16:3","nodeType":"VariableDeclaration","scope":687,"src":"7164:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":679,"name":"address","nodeType":"ElementaryTypeName","src":"7164:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":682,"mutability":"mutable","name":"updatedMessage","nameLocation":"7213:14:3","nodeType":"VariableDeclaration","scope":687,"src":"7198:29:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":681,"name":"bytes","nodeType":"ElementaryTypeName","src":"7198:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":684,"mutability":"mutable","name":"depositorSignature","nameLocation":"7252:18:3","nodeType":"VariableDeclaration","scope":687,"src":"7237:33:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":683,"name":"bytes","nodeType":"ElementaryTypeName","src":"7237:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7043:233:3"},"returnParameters":{"id":686,"nodeType":"ParameterList","parameters":[],"src":"7285:0:3"},"scope":737,"src":"7005:281:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"9963e5a8","id":693,"implemented":false,"kind":"function","modifiers":[],"name":"requestV3SlowFill","nameLocation":"7301:17:3","nodeType":"FunctionDefinition","parameters":{"id":691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":690,"mutability":"mutable","name":"relayData","nameLocation":"7340:9:3","nodeType":"VariableDeclaration","scope":693,"src":"7319:30:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_V3RelayData_$488_calldata_ptr","typeString":"struct V3SpokePoolInterface.V3RelayData"},"typeName":{"id":689,"nodeType":"UserDefinedTypeName","pathNode":{"id":688,"name":"V3RelayData","nameLocations":["7319:11:3"],"nodeType":"IdentifierPath","referencedDeclaration":488,"src":"7319:11:3"},"referencedDeclaration":488,"src":"7319:11:3","typeDescriptions":{"typeIdentifier":"t_struct$_V3RelayData_$488_storage_ptr","typeString":"struct V3SpokePoolInterface.V3RelayData"}},"visibility":"internal"}],"src":"7318:32:3"},"returnParameters":{"id":692,"nodeType":"ParameterList","parameters":[],"src":"7359:0:3"},"scope":737,"src":"7292:68:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"bbca7db0","id":704,"implemented":false,"kind":"function","modifiers":[],"name":"executeV3SlowRelayLeaf","nameLocation":"7375:22:3","nodeType":"FunctionDefinition","parameters":{"id":702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":696,"mutability":"mutable","name":"slowFillLeaf","nameLocation":"7427:12:3","nodeType":"VariableDeclaration","scope":704,"src":"7407:32:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_V3SlowFill_$496_calldata_ptr","typeString":"struct V3SpokePoolInterface.V3SlowFill"},"typeName":{"id":695,"nodeType":"UserDefinedTypeName","pathNode":{"id":694,"name":"V3SlowFill","nameLocations":["7407:10:3"],"nodeType":"IdentifierPath","referencedDeclaration":496,"src":"7407:10:3"},"referencedDeclaration":496,"src":"7407:10:3","typeDescriptions":{"typeIdentifier":"t_struct$_V3SlowFill_$496_storage_ptr","typeString":"struct V3SpokePoolInterface.V3SlowFill"}},"visibility":"internal"},{"constant":false,"id":698,"mutability":"mutable","name":"rootBundleId","nameLocation":"7456:12:3","nodeType":"VariableDeclaration","scope":704,"src":"7449:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":697,"name":"uint32","nodeType":"ElementaryTypeName","src":"7449:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":701,"mutability":"mutable","name":"proof","nameLocation":"7497:5:3","nodeType":"VariableDeclaration","scope":704,"src":"7478:24:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":699,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7478:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":700,"nodeType":"ArrayTypeName","src":"7478:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7397:111:3"},"returnParameters":{"id":703,"nodeType":"ParameterList","parameters":[],"src":"7517:0:3"},"scope":737,"src":"7366:152:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"errorSelector":"2a58c4f3","id":706,"name":"DisabledRoute","nameLocation":"7664:13:3","nodeType":"ErrorDefinition","parameters":{"id":705,"nodeType":"ParameterList","parameters":[],"src":"7677:2:3"},"src":"7658:22:3"},{"errorSelector":"f722177f","id":708,"name":"InvalidQuoteTimestamp","nameLocation":"7691:21:3","nodeType":"ErrorDefinition","parameters":{"id":707,"nodeType":"ParameterList","parameters":[],"src":"7712:2:3"},"src":"7685:30:3"},{"errorSelector":"582e3889","id":710,"name":"InvalidFillDeadline","nameLocation":"7726:19:3","nodeType":"ErrorDefinition","parameters":{"id":709,"nodeType":"ParameterList","parameters":[],"src":"7745:2:3"},"src":"7720:28:3"},{"errorSelector":"495d907f","id":712,"name":"InvalidExclusiveRelayer","nameLocation":"7759:23:3","nodeType":"ErrorDefinition","parameters":{"id":711,"nodeType":"ParameterList","parameters":[],"src":"7782:2:3"},"src":"7753:32:3"},{"errorSelector":"25a63a5b","id":714,"name":"InvalidExclusivityDeadline","nameLocation":"7796:26:3","nodeType":"ErrorDefinition","parameters":{"id":713,"nodeType":"ParameterList","parameters":[],"src":"7822:2:3"},"src":"7790:35:3"},{"errorSelector":"6452a35d","id":716,"name":"MsgValueDoesNotMatchInputAmount","nameLocation":"7836:31:3","nodeType":"ErrorDefinition","parameters":{"id":715,"nodeType":"ParameterList","parameters":[],"src":"7867:2:3"},"src":"7830:40:3"},{"errorSelector":"c3a9b9d0","id":718,"name":"NotExclusiveRelayer","nameLocation":"7881:19:3","nodeType":"ErrorDefinition","parameters":{"id":717,"nodeType":"ParameterList","parameters":[],"src":"7900:2:3"},"src":"7875:28:3"},{"errorSelector":"09deb9ec","id":720,"name":"NoSlowFillsInExclusivityWindow","nameLocation":"7914:30:3","nodeType":"ErrorDefinition","parameters":{"id":719,"nodeType":"ParameterList","parameters":[],"src":"7944:2:3"},"src":"7908:39:3"},{"errorSelector":"8f260c60","id":722,"name":"RelayFilled","nameLocation":"7958:11:3","nodeType":"ErrorDefinition","parameters":{"id":721,"nodeType":"ParameterList","parameters":[],"src":"7969:2:3"},"src":"7952:20:3"},{"errorSelector":"012f9e44","id":724,"name":"InvalidSlowFillRequest","nameLocation":"7983:22:3","nodeType":"ErrorDefinition","parameters":{"id":723,"nodeType":"ParameterList","parameters":[],"src":"8005:2:3"},"src":"7977:31:3"},{"errorSelector":"d642b7d9","id":726,"name":"ExpiredFillDeadline","nameLocation":"8019:19:3","nodeType":"ErrorDefinition","parameters":{"id":725,"nodeType":"ParameterList","parameters":[],"src":"8038:2:3"},"src":"8013:28:3"},{"errorSelector":"b05e92fa","id":728,"name":"InvalidMerkleProof","nameLocation":"8052:18:3","nodeType":"ErrorDefinition","parameters":{"id":727,"nodeType":"ParameterList","parameters":[],"src":"8070:2:3"},"src":"8046:27:3"},{"errorSelector":"7a47c9a2","id":730,"name":"InvalidChainId","nameLocation":"8084:14:3","nodeType":"ErrorDefinition","parameters":{"id":729,"nodeType":"ParameterList","parameters":[],"src":"8098:2:3"},"src":"8078:23:3"},{"errorSelector":"cd298b38","id":732,"name":"InvalidMerkleLeaf","nameLocation":"8112:17:3","nodeType":"ErrorDefinition","parameters":{"id":731,"nodeType":"ParameterList","parameters":[],"src":"8129:2:3"},"src":"8106:26:3"},{"errorSelector":"954476d9","id":734,"name":"ClaimedMerkleLeaf","nameLocation":"8143:17:3","nodeType":"ErrorDefinition","parameters":{"id":733,"nodeType":"ParameterList","parameters":[],"src":"8160:2:3"},"src":"8137:26:3"},{"errorSelector":"a693f051","id":736,"name":"InvalidPayoutAdjustmentPct","nameLocation":"8174:26:3","nodeType":"ErrorDefinition","parameters":{"id":735,"nodeType":"ParameterList","parameters":[],"src":"8200:2:3"},"src":"8168:35:3"}],"scope":738,"src":"160:8045:3","usedErrors":[706,708,710,712,714,716,718,720,722,724,726,728,730,732,734,736],"usedEvents":[548,562,595,621]}],"src":"37:8169:3"},"id":3},"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol":{"ast":{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol","exportedSymbols":{"CCIPReceiver":[857],"Client":[926],"IAny2EVMMessageReceiver":[870],"IERC165":[938]},"id":858,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":739,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:4"},{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol","file":"../interfaces/IAny2EVMMessageReceiver.sol","id":741,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":858,"sourceUnit":871,"src":"57:82:4","symbolAliases":[{"foreign":{"id":740,"name":"IAny2EVMMessageReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"65:23:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol","file":"../libraries/Client.sol","id":743,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":858,"sourceUnit":927,"src":"141:47:4","symbolAliases":[{"foreign":{"id":742,"name":"Client","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"149:6:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/contracts/utils/introspection/IERC165.sol","file":"../../vendor/openzeppelin-solidity/v4.8.0/contracts/utils/introspection/IERC165.sol","id":745,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":858,"sourceUnit":939,"src":"190:108:4","symbolAliases":[{"foreign":{"id":744,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"198:7:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":747,"name":"IAny2EVMMessageReceiver","nameLocations":["423:23:4"],"nodeType":"IdentifierPath","referencedDeclaration":870,"src":"423:23:4"},"id":748,"nodeType":"InheritanceSpecifier","src":"423:23:4"},{"baseName":{"id":749,"name":"IERC165","nameLocations":["448:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":938,"src":"448:7:4"},"id":750,"nodeType":"InheritanceSpecifier","src":"448:7:4"}],"canonicalName":"CCIPReceiver","contractDependencies":[],"contractKind":"contract","documentation":{"id":746,"nodeType":"StructuredDocumentation","src":"300:89:4","text":"@title CCIPReceiver - Base contract for CCIP applications that can receive messages."},"fullyImplemented":false,"id":857,"linearizedBaseContracts":[857,938,870],"name":"CCIPReceiver","nameLocation":"407:12:4","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":752,"mutability":"immutable","name":"i_router","nameLocation":"487:8:4","nodeType":"VariableDeclaration","scope":857,"src":"460:35:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":751,"name":"address","nodeType":"ElementaryTypeName","src":"460:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"body":{"id":775,"nodeType":"Block","src":"528:92:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":757,"name":"router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"538:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"556:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":759,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"548:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":758,"name":"address","nodeType":"ElementaryTypeName","src":"548:7:4","typeDescriptions":{}}},"id":761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"548:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"538:20:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":770,"nodeType":"IfStatement","src":"534:58:4","trueBody":{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"589:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":765,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"581:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":764,"name":"address","nodeType":"ElementaryTypeName","src":"581:7:4","typeDescriptions":{}}},"id":767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"581:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":763,"name":"InvalidRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":838,"src":"567:13:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"567:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":769,"nodeType":"RevertStatement","src":"560:32:4"}},{"expression":{"id":773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":771,"name":"i_router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":752,"src":"598:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":772,"name":"router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"609:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"598:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":774,"nodeType":"ExpressionStatement","src":"598:17:4"}]},"id":776,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":754,"mutability":"mutable","name":"router","nameLocation":"520:6:4","nodeType":"VariableDeclaration","scope":776,"src":"512:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":753,"name":"address","nodeType":"ElementaryTypeName","src":"512:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"511:16:4"},"returnParameters":{"id":756,"nodeType":"ParameterList","parameters":[],"src":"528:0:4"},"scope":857,"src":"500:120:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[937],"body":{"id":799,"nodeType":"Block","src":"1488:118:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":785,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"1501:11:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":787,"name":"IAny2EVMMessageReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"1521:23:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAny2EVMMessageReceiver_$870_$","typeString":"type(contract IAny2EVMMessageReceiver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAny2EVMMessageReceiver_$870_$","typeString":"type(contract IAny2EVMMessageReceiver)"}],"id":786,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1516:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1516:29:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAny2EVMMessageReceiver_$870","typeString":"type(contract IAny2EVMMessageReceiver)"}},"id":789,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1546:11:4","memberName":"interfaceId","nodeType":"MemberAccess","src":"1516:41:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1501:56:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":791,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"1561:11:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":793,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"1581:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$938_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$938_$","typeString":"type(contract IERC165)"}],"id":792,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1576:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1576:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$938","typeString":"type(contract IERC165)"}},"id":795,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1590:11:4","memberName":"interfaceId","nodeType":"MemberAccess","src":"1576:25:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1561:40:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1501:100:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":784,"id":798,"nodeType":"Return","src":"1494:107:4"}]},"documentation":{"id":777,"nodeType":"StructuredDocumentation","src":"624:770:4","text":"@notice IERC165 supports an interfaceId\n @param interfaceId The interfaceId to check\n @return true if the interfaceId is supported\n @dev Should indicate whether the contract implements IAny2EVMMessageReceiver\n e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId\n This allows CCIP to check if ccipReceive is available before calling it.\n If this returns false or reverts, only tokens are transferred to the receiver.\n If this returns true, tokens are transferred and ccipReceive is called atomically.\n Additionally, if the receiver address does not have code associated with\n it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred."},"functionSelector":"01ffc9a7","id":800,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1406:17:4","nodeType":"FunctionDefinition","overrides":{"id":781,"nodeType":"OverrideSpecifier","overrides":[],"src":"1464:8:4"},"parameters":{"id":780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":779,"mutability":"mutable","name":"interfaceId","nameLocation":"1431:11:4","nodeType":"VariableDeclaration","scope":800,"src":"1424:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":778,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1424:6:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1423:20:4"},"returnParameters":{"id":784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":783,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":800,"src":"1482:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":782,"name":"bool","nodeType":"ElementaryTypeName","src":"1482:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1481:6:4"},"scope":857,"src":"1397:209:4","stateMutability":"pure","virtual":true,"visibility":"public"},{"baseFunctions":[869],"body":{"id":814,"nodeType":"Block","src":"1750:32:4","statements":[{"expression":{"arguments":[{"id":811,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"1769:7:4","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$891_calldata_ptr","typeString":"struct Client.Any2EVMMessage calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Any2EVMMessage_$891_calldata_ptr","typeString":"struct Client.Any2EVMMessage calldata"}],"id":810,"name":"_ccipReceive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"1756:12:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Any2EVMMessage_$891_memory_ptr_$returns$__$","typeString":"function (struct Client.Any2EVMMessage memory)"}},"id":812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1756:21:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":813,"nodeType":"ExpressionStatement","src":"1756:21:4"}]},"documentation":{"id":801,"nodeType":"StructuredDocumentation","src":"1610:39:4","text":"@inheritdoc IAny2EVMMessageReceiver"},"functionSelector":"85572ffb","id":815,"implemented":true,"kind":"function","modifiers":[{"id":808,"kind":"modifierInvocation","modifierName":{"id":807,"name":"onlyRouter","nameLocations":["1739:10:4"],"nodeType":"IdentifierPath","referencedDeclaration":856,"src":"1739:10:4"},"nodeType":"ModifierInvocation","src":"1739:10:4"}],"name":"ccipReceive","nameLocation":"1661:11:4","nodeType":"FunctionDefinition","overrides":{"id":806,"nodeType":"OverrideSpecifier","overrides":[],"src":"1730:8:4"},"parameters":{"id":805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":804,"mutability":"mutable","name":"message","nameLocation":"1704:7:4","nodeType":"VariableDeclaration","scope":815,"src":"1673:38:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$891_calldata_ptr","typeString":"struct Client.Any2EVMMessage"},"typeName":{"id":803,"nodeType":"UserDefinedTypeName","pathNode":{"id":802,"name":"Client.Any2EVMMessage","nameLocations":["1673:6:4","1680:14:4"],"nodeType":"IdentifierPath","referencedDeclaration":891,"src":"1673:21:4"},"referencedDeclaration":891,"src":"1673:21:4","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$891_storage_ptr","typeString":"struct Client.Any2EVMMessage"}},"visibility":"internal"}],"src":"1672:40:4"},"returnParameters":{"id":809,"nodeType":"ParameterList","parameters":[],"src":"1750:0:4"},"scope":857,"src":"1652:130:4","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"documentation":{"id":816,"nodeType":"StructuredDocumentation","src":"1786:94:4","text":"@notice Override this function in your implementation.\n @param message Any2EVMMessage"},"id":822,"implemented":false,"kind":"function","modifiers":[],"name":"_ccipReceive","nameLocation":"1892:12:4","nodeType":"FunctionDefinition","parameters":{"id":820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":819,"mutability":"mutable","name":"message","nameLocation":"1934:7:4","nodeType":"VariableDeclaration","scope":822,"src":"1905:36:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$891_memory_ptr","typeString":"struct Client.Any2EVMMessage"},"typeName":{"id":818,"nodeType":"UserDefinedTypeName","pathNode":{"id":817,"name":"Client.Any2EVMMessage","nameLocations":["1905:6:4","1912:14:4"],"nodeType":"IdentifierPath","referencedDeclaration":891,"src":"1905:21:4"},"referencedDeclaration":891,"src":"1905:21:4","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$891_storage_ptr","typeString":"struct Client.Any2EVMMessage"}},"visibility":"internal"}],"src":"1904:38:4"},"returnParameters":{"id":821,"nodeType":"ParameterList","parameters":[],"src":"1959:0:4"},"scope":857,"src":"1883:77:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":833,"nodeType":"Block","src":"2245:35:4","statements":[{"expression":{"arguments":[{"id":830,"name":"i_router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":752,"src":"2266:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":829,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2258:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":828,"name":"address","nodeType":"ElementaryTypeName","src":"2258:7:4","typeDescriptions":{}}},"id":831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2258:17:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":827,"id":832,"nodeType":"Return","src":"2251:24:4"}]},"documentation":{"id":823,"nodeType":"StructuredDocumentation","src":"2123:68:4","text":"@notice Return the current router\n @return i_router address"},"functionSelector":"b0f479a1","id":834,"implemented":true,"kind":"function","modifiers":[],"name":"getRouter","nameLocation":"2203:9:4","nodeType":"FunctionDefinition","parameters":{"id":824,"nodeType":"ParameterList","parameters":[],"src":"2212:2:4"},"returnParameters":{"id":827,"nodeType":"ParameterList","parameters":[{"constant":false,"id":826,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":834,"src":"2236:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":825,"name":"address","nodeType":"ElementaryTypeName","src":"2236:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2235:9:4"},"scope":857,"src":"2194:86:4","stateMutability":"view","virtual":false,"visibility":"public"},{"errorSelector":"d7f73334","id":838,"name":"InvalidRouter","nameLocation":"2290:13:4","nodeType":"ErrorDefinition","parameters":{"id":837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":836,"mutability":"mutable","name":"router","nameLocation":"2312:6:4","nodeType":"VariableDeclaration","scope":838,"src":"2304:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":835,"name":"address","nodeType":"ElementaryTypeName","src":"2304:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2303:16:4"},"src":"2284:36:4"},{"body":{"id":855,"nodeType":"Block","src":"2402:87:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":841,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2412:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2416:6:4","memberName":"sender","nodeType":"MemberAccess","src":"2412:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":845,"name":"i_router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":752,"src":"2434:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":844,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2426:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":843,"name":"address","nodeType":"ElementaryTypeName","src":"2426:7:4","typeDescriptions":{}}},"id":846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2426:17:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2412:31:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":853,"nodeType":"IfStatement","src":"2408:69:4","trueBody":{"errorCall":{"arguments":[{"expression":{"id":849,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2466:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2470:6:4","memberName":"sender","nodeType":"MemberAccess","src":"2466:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":848,"name":"InvalidRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":838,"src":"2452:13:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2452:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":852,"nodeType":"RevertStatement","src":"2445:32:4"}},{"id":854,"nodeType":"PlaceholderStatement","src":"2483:1:4"}]},"documentation":{"id":839,"nodeType":"StructuredDocumentation","src":"2324:53:4","text":"@dev only calls from the set router are accepted."},"id":856,"name":"onlyRouter","nameLocation":"2389:10:4","nodeType":"ModifierDefinition","parameters":{"id":840,"nodeType":"ParameterList","parameters":[],"src":"2399:2:4"},"src":"2380:109:4","virtual":false,"visibility":"internal"}],"scope":858,"src":"389:2102:4","usedErrors":[838],"usedEvents":[]}],"src":"32:2460:4"},"id":4},"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol":{"ast":{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol","exportedSymbols":{"Client":[926],"IAny2EVMMessageReceiver":[870]},"id":871,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":859,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:5"},{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol","file":"../libraries/Client.sol","id":861,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":871,"sourceUnit":927,"src":"57:47:5","symbolAliases":[{"foreign":{"id":860,"name":"Client","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"65:6:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IAny2EVMMessageReceiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":862,"nodeType":"StructuredDocumentation","src":"106:119:5","text":"@notice Application contracts that intend to receive messages from\n the router should implement this interface."},"fullyImplemented":false,"id":870,"linearizedBaseContracts":[870],"name":"IAny2EVMMessageReceiver","nameLocation":"235:23:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":863,"nodeType":"StructuredDocumentation","src":"263:302:5","text":"@notice Called by the Router to deliver a message.\n If this reverts, any token transfers also revert. The message\n will move to a FAILED state and become available for manual execution.\n @param message CCIP Message\n @dev Note ensure you check the msg.sender is the OffRampRouter"},"functionSelector":"85572ffb","id":869,"implemented":false,"kind":"function","modifiers":[],"name":"ccipReceive","nameLocation":"577:11:5","nodeType":"FunctionDefinition","parameters":{"id":867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":866,"mutability":"mutable","name":"message","nameLocation":"620:7:5","nodeType":"VariableDeclaration","scope":869,"src":"589:38:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$891_calldata_ptr","typeString":"struct Client.Any2EVMMessage"},"typeName":{"id":865,"nodeType":"UserDefinedTypeName","pathNode":{"id":864,"name":"Client.Any2EVMMessage","nameLocations":["589:6:5","596:14:5"],"nodeType":"IdentifierPath","referencedDeclaration":891,"src":"589:21:5"},"referencedDeclaration":891,"src":"589:21:5","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$891_storage_ptr","typeString":"struct Client.Any2EVMMessage"}},"visibility":"internal"}],"src":"588:40:5"},"returnParameters":{"id":868,"nodeType":"ParameterList","parameters":[],"src":"637:0:5"},"scope":870,"src":"568:70:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":871,"src":"225:415:5","usedErrors":[],"usedEvents":[]}],"src":"32:609:5"},"id":5},"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol":{"ast":{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol","exportedSymbols":{"Client":[926]},"id":927,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":872,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"Client","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":926,"linearizedBaseContracts":[926],"name":"Client","nameLocation":"90:6:6","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Client.EVMTokenAmount","documentation":{"id":873,"nodeType":"StructuredDocumentation","src":"101:84:6","text":"@dev RMN depends on this struct, if changing, please notify the RMN maintainers."},"id":878,"members":[{"constant":false,"id":875,"mutability":"mutable","name":"token","nameLocation":"224:5:6","nodeType":"VariableDeclaration","scope":878,"src":"216:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":874,"name":"address","nodeType":"ElementaryTypeName","src":"216:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":877,"mutability":"mutable","name":"amount","nameLocation":"280:6:6","nodeType":"VariableDeclaration","scope":878,"src":"272:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":876,"name":"uint256","nodeType":"ElementaryTypeName","src":"272:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"EVMTokenAmount","nameLocation":"195:14:6","nodeType":"StructDefinition","scope":926,"src":"188:124:6","visibility":"public"},{"canonicalName":"Client.Any2EVMMessage","id":891,"members":[{"constant":false,"id":880,"mutability":"mutable","name":"messageId","nameLocation":"352:9:6","nodeType":"VariableDeclaration","scope":891,"src":"344:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":879,"name":"bytes32","nodeType":"ElementaryTypeName","src":"344:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":882,"mutability":"mutable","name":"sourceChainSelector","nameLocation":"424:19:6","nodeType":"VariableDeclaration","scope":891,"src":"417:26:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":881,"name":"uint64","nodeType":"ElementaryTypeName","src":"417:6:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":884,"mutability":"mutable","name":"sender","nameLocation":"481:6:6","nodeType":"VariableDeclaration","scope":891,"src":"475:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":883,"name":"bytes","nodeType":"ElementaryTypeName","src":"475:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":886,"mutability":"mutable","name":"data","nameLocation":"550:4:6","nodeType":"VariableDeclaration","scope":891,"src":"544:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":885,"name":"bytes","nodeType":"ElementaryTypeName","src":"544:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":890,"mutability":"mutable","name":"destTokenAmounts","nameLocation":"614:16:6","nodeType":"VariableDeclaration","scope":891,"src":"597:33:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EVMTokenAmount_$878_storage_$dyn_storage_ptr","typeString":"struct Client.EVMTokenAmount[]"},"typeName":{"baseType":{"id":888,"nodeType":"UserDefinedTypeName","pathNode":{"id":887,"name":"EVMTokenAmount","nameLocations":["597:14:6"],"nodeType":"IdentifierPath","referencedDeclaration":878,"src":"597:14:6"},"referencedDeclaration":878,"src":"597:14:6","typeDescriptions":{"typeIdentifier":"t_struct$_EVMTokenAmount_$878_storage_ptr","typeString":"struct Client.EVMTokenAmount"}},"id":889,"nodeType":"ArrayTypeName","src":"597:16:6","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EVMTokenAmount_$878_storage_$dyn_storage_ptr","typeString":"struct Client.EVMTokenAmount[]"}},"visibility":"internal"}],"name":"Any2EVMMessage","nameLocation":"323:14:6","nodeType":"StructDefinition","scope":926,"src":"316:390:6","visibility":"public"},{"canonicalName":"Client.EVM2AnyMessage","id":904,"members":[{"constant":false,"id":893,"mutability":"mutable","name":"receiver","nameLocation":"809:8:6","nodeType":"VariableDeclaration","scope":904,"src":"803:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":892,"name":"bytes","nodeType":"ElementaryTypeName","src":"803:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":895,"mutability":"mutable","name":"data","nameLocation":"881:4:6","nodeType":"VariableDeclaration","scope":904,"src":"875:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":894,"name":"bytes","nodeType":"ElementaryTypeName","src":"875:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":899,"mutability":"mutable","name":"tokenAmounts","nameLocation":"924:12:6","nodeType":"VariableDeclaration","scope":904,"src":"907:29:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EVMTokenAmount_$878_storage_$dyn_storage_ptr","typeString":"struct Client.EVMTokenAmount[]"},"typeName":{"baseType":{"id":897,"nodeType":"UserDefinedTypeName","pathNode":{"id":896,"name":"EVMTokenAmount","nameLocations":["907:14:6"],"nodeType":"IdentifierPath","referencedDeclaration":878,"src":"907:14:6"},"referencedDeclaration":878,"src":"907:14:6","typeDescriptions":{"typeIdentifier":"t_struct$_EVMTokenAmount_$878_storage_ptr","typeString":"struct Client.EVMTokenAmount"}},"id":898,"nodeType":"ArrayTypeName","src":"907:16:6","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EVMTokenAmount_$878_storage_$dyn_storage_ptr","typeString":"struct Client.EVMTokenAmount[]"}},"visibility":"internal"},{"constant":false,"id":901,"mutability":"mutable","name":"feeToken","nameLocation":"969:8:6","nodeType":"VariableDeclaration","scope":904,"src":"961:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":900,"name":"address","nodeType":"ElementaryTypeName","src":"961:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":903,"mutability":"mutable","name":"extraArgs","nameLocation":"1055:9:6","nodeType":"VariableDeclaration","scope":904,"src":"1049:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":902,"name":"bytes","nodeType":"ElementaryTypeName","src":"1049:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"EVM2AnyMessage","nameLocation":"782:14:6","nodeType":"StructDefinition","scope":926,"src":"775:345:6","visibility":"public"},{"constant":true,"functionSelector":"3ab8c0d0","id":907,"mutability":"constant","name":"EVM_EXTRA_ARGS_V1_TAG","nameLocation":"1194:21:6","nodeType":"VariableDeclaration","scope":926,"src":"1171:57:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":905,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1171:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30783937613635376339","id":906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1218:10:6","typeDescriptions":{"typeIdentifier":"t_rational_2544261065_by_1","typeString":"int_const 2544261065"},"value":"0x97a657c9"},"visibility":"public"},{"canonicalName":"Client.EVMExtraArgsV1","id":910,"members":[{"constant":false,"id":909,"mutability":"mutable","name":"gasLimit","nameLocation":"1268:8:6","nodeType":"VariableDeclaration","scope":910,"src":"1260:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":908,"name":"uint256","nodeType":"ElementaryTypeName","src":"1260:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"EVMExtraArgsV1","nameLocation":"1239:14:6","nodeType":"StructDefinition","scope":926,"src":"1232:49:6","visibility":"public"},{"body":{"id":924,"nodeType":"Block","src":"1381:74:6","statements":[{"expression":{"arguments":[{"id":920,"name":"EVM_EXTRA_ARGS_V1_TAG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"1417:21:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":921,"name":"extraArgs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"1440:9:6","typeDescriptions":{"typeIdentifier":"t_struct$_EVMExtraArgsV1_$910_memory_ptr","typeString":"struct Client.EVMExtraArgsV1 memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_struct$_EVMExtraArgsV1_$910_memory_ptr","typeString":"struct Client.EVMExtraArgsV1 memory"}],"expression":{"id":918,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1394:3:6","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":919,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1398:18:6","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1394:22:6","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1394:56:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":917,"id":923,"nodeType":"Return","src":"1387:63:6"}]},"id":925,"implemented":true,"kind":"function","modifiers":[],"name":"_argsToBytes","nameLocation":"1294:12:6","nodeType":"FunctionDefinition","parameters":{"id":914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":913,"mutability":"mutable","name":"extraArgs","nameLocation":"1329:9:6","nodeType":"VariableDeclaration","scope":925,"src":"1307:31:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_EVMExtraArgsV1_$910_memory_ptr","typeString":"struct Client.EVMExtraArgsV1"},"typeName":{"id":912,"nodeType":"UserDefinedTypeName","pathNode":{"id":911,"name":"EVMExtraArgsV1","nameLocations":["1307:14:6"],"nodeType":"IdentifierPath","referencedDeclaration":910,"src":"1307:14:6"},"referencedDeclaration":910,"src":"1307:14:6","typeDescriptions":{"typeIdentifier":"t_struct$_EVMExtraArgsV1_$910_storage_ptr","typeString":"struct Client.EVMExtraArgsV1"}},"visibility":"internal"}],"src":"1306:33:6"},"returnParameters":{"id":917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":916,"mutability":"mutable","name":"bts","nameLocation":"1376:3:6","nodeType":"VariableDeclaration","scope":925,"src":"1363:16:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":915,"name":"bytes","nodeType":"ElementaryTypeName","src":"1363:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1362:18:6"},"scope":926,"src":"1285:170:6","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":927,"src":"82:1375:6","usedErrors":[],"usedEvents":[]}],"src":"32:1426:6"},"id":6},"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[938]},"id":939,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":928,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":929,"nodeType":"StructuredDocumentation","src":"125:279:7","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":938,"linearizedBaseContracts":[938],"name":"IERC165","nameLocation":"415:7:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":930,"nodeType":"StructuredDocumentation","src":"429:340:7","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":937,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:7","nodeType":"FunctionDefinition","parameters":{"id":933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":932,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:7","nodeType":"VariableDeclaration","scope":937,"src":"801:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":931,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:7"},"returnParameters":{"id":936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":935,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":937,"src":"844:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":934,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:7"},"scope":938,"src":"774:76:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":939,"src":"405:447:7","usedErrors":[],"usedEvents":[]}],"src":"100:752:7"},"id":7},"@safe-global/safe-contracts/contracts/Safe.sol":{"ast":{"absolutePath":"@safe-global/safe-contracts/contracts/Safe.sol","exportedSymbols":{"BaseGuard":[2015],"Enum":[3023],"Executor":[1886],"FallbackManager":[1948],"Guard":[1989],"GuardManager":[2077],"IERC165":[3775],"ISignatureValidator":[3794],"ISignatureValidatorConstants":[3781],"ModuleManager":[2503],"NativeCurrencyPaymentFallback":[3045],"OwnerManager":[3016],"Safe":[1853],"SafeMath":[3279],"SecuredTokenTransfer":[3072],"SelfAuthorized":[3098],"SignatureDecoder":[3118],"Singleton":[3124],"StorageAccessible":[3173]},"id":1854,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":940,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:8"},{"absolutePath":"@safe-global/safe-contracts/contracts/base/ModuleManager.sol","file":"./base/ModuleManager.sol","id":941,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1854,"sourceUnit":2504,"src":"75:34:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@safe-global/safe-contracts/contracts/base/OwnerManager.sol","file":"./base/OwnerManager.sol","id":942,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1854,"sourceUnit":3017,"src":"110:33:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@safe-global/safe-contracts/contracts/base/FallbackManager.sol","file":"./base/FallbackManager.sol","id":943,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1854,"sourceUnit":1949,"src":"144:36:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@safe-global/safe-contracts/contracts/base/GuardManager.sol","file":"./base/GuardManager.sol","id":944,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1854,"sourceUnit":2078,"src":"181:33:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@safe-global/safe-contracts/contracts/common/NativeCurrencyPaymentFallback.sol","file":"./common/NativeCurrencyPaymentFallback.sol","id":945,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1854,"sourceUnit":3046,"src":"215:52:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@safe-global/safe-contracts/contracts/common/Singleton.sol","file":"./common/Singleton.sol","id":946,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1854,"sourceUnit":3125,"src":"268:32:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@safe-global/safe-contracts/contracts/common/SignatureDecoder.sol","file":"./common/SignatureDecoder.sol","id":947,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1854,"sourceUnit":3119,"src":"301:39:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@safe-global/safe-contracts/contracts/common/SecuredTokenTransfer.sol","file":"./common/SecuredTokenTransfer.sol","id":948,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1854,"sourceUnit":3073,"src":"341:43:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@safe-global/safe-contracts/contracts/common/StorageAccessible.sol","file":"./common/StorageAccessible.sol","id":949,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1854,"sourceUnit":3174,"src":"385:40:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@safe-global/safe-contracts/contracts/interfaces/ISignatureValidator.sol","file":"./interfaces/ISignatureValidator.sol","id":950,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1854,"sourceUnit":3795,"src":"426:46:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@safe-global/safe-contracts/contracts/external/SafeMath.sol","file":"./external/SafeMath.sol","id":951,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1854,"sourceUnit":3280,"src":"473:33:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":953,"name":"Singleton","nameLocations":["1940:9:8"],"nodeType":"IdentifierPath","referencedDeclaration":3124,"src":"1940:9:8"},"id":954,"nodeType":"InheritanceSpecifier","src":"1940:9:8"},{"baseName":{"id":955,"name":"NativeCurrencyPaymentFallback","nameLocations":["1955:29:8"],"nodeType":"IdentifierPath","referencedDeclaration":3045,"src":"1955:29:8"},"id":956,"nodeType":"InheritanceSpecifier","src":"1955:29:8"},{"baseName":{"id":957,"name":"ModuleManager","nameLocations":["1990:13:8"],"nodeType":"IdentifierPath","referencedDeclaration":2503,"src":"1990:13:8"},"id":958,"nodeType":"InheritanceSpecifier","src":"1990:13:8"},{"baseName":{"id":959,"name":"OwnerManager","nameLocations":["2009:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":3016,"src":"2009:12:8"},"id":960,"nodeType":"InheritanceSpecifier","src":"2009:12:8"},{"baseName":{"id":961,"name":"SignatureDecoder","nameLocations":["2027:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":3118,"src":"2027:16:8"},"id":962,"nodeType":"InheritanceSpecifier","src":"2027:16:8"},{"baseName":{"id":963,"name":"SecuredTokenTransfer","nameLocations":["2049:20:8"],"nodeType":"IdentifierPath","referencedDeclaration":3072,"src":"2049:20:8"},"id":964,"nodeType":"InheritanceSpecifier","src":"2049:20:8"},{"baseName":{"id":965,"name":"ISignatureValidatorConstants","nameLocations":["2075:28:8"],"nodeType":"IdentifierPath","referencedDeclaration":3781,"src":"2075:28:8"},"id":966,"nodeType":"InheritanceSpecifier","src":"2075:28:8"},{"baseName":{"id":967,"name":"FallbackManager","nameLocations":["2109:15:8"],"nodeType":"IdentifierPath","referencedDeclaration":1948,"src":"2109:15:8"},"id":968,"nodeType":"InheritanceSpecifier","src":"2109:15:8"},{"baseName":{"id":969,"name":"StorageAccessible","nameLocations":["2130:17:8"],"nodeType":"IdentifierPath","referencedDeclaration":3173,"src":"2130:17:8"},"id":970,"nodeType":"InheritanceSpecifier","src":"2130:17:8"},{"baseName":{"id":971,"name":"GuardManager","nameLocations":["2153:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":2077,"src":"2153:12:8"},"id":972,"nodeType":"InheritanceSpecifier","src":"2153:12:8"}],"canonicalName":"Safe","contractDependencies":[],"contractKind":"contract","documentation":{"id":952,"nodeType":"StructuredDocumentation","src":"508:1410:8","text":" @title Safe - A multisignature wallet with support for confirmations using signed messages based on EIP-712.\n @dev Most important concepts:\n      - Threshold: Number of required confirmations for a Safe transaction.\n      - Owners: List of addresses that control the Safe. They are the only ones that can add/remove owners, change the threshold and\n        approve transactions. Managed in `OwnerManager`.\n      - Transaction Hash: Hash of a transaction is calculated using the EIP-712 typed structured data hashing scheme.\n      - Nonce: Each transaction should have a different nonce to prevent replay attacks.\n      - Signature: A valid signature of an owner of the Safe for a transaction hash.\n      - Guard: Guard is a contract that can execute pre- and post- transaction checks. Managed in `GuardManager`.\n      - Modules: Modules are contracts that can be used to extend the write functionality of a Safe. Managed in `ModuleManager`.\n      - Fallback: Fallback handler is a contract that can provide additional read-only functional for Safe. Managed in `FallbackManager`.\n      Note: This version of the implementation contract doesn't emit events for the sake of gas efficiency and therefore requires a tracing node for indexing/\n      For the events-based implementation see `SafeL2.sol`.\n @author Stefan George - @Georgi87\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":1853,"linearizedBaseContracts":[1853,2077,3173,1948,3781,3072,3118,3016,2503,1886,3098,3045,3124],"name":"Safe","nameLocation":"1928:4:8","nodeType":"ContractDefinition","nodes":[{"global":false,"id":975,"libraryName":{"id":973,"name":"SafeMath","nameLocations":["2178:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":3279,"src":"2178:8:8"},"nodeType":"UsingForDirective","src":"2172:27:8","typeName":{"id":974,"name":"uint256","nodeType":"ElementaryTypeName","src":"2191:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":true,"functionSelector":"ffa1ad74","id":978,"mutability":"constant","name":"VERSION","nameLocation":"2228:7:8","nodeType":"VariableDeclaration","scope":1853,"src":"2205:40:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":976,"name":"string","nodeType":"ElementaryTypeName","src":"2205:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"312e342e31","id":977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2238:7:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_7015c1a48403d132ad83884b326109f1b309c42f752b2abd1db79522ee074673","typeString":"literal_string \"1.4.1\""},"value":"1.4.1"},"visibility":"public"},{"constant":true,"id":981,"mutability":"constant","name":"DOMAIN_SEPARATOR_TYPEHASH","nameLocation":"2374:25:8","nodeType":"VariableDeclaration","scope":1853,"src":"2349:119:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":979,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2349:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307834376537393533346132343539353265386231363839336133333662383561336439656139666138633537336633643830336166623932613739343639323138","id":980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2402:66:8","typeDescriptions":{"typeIdentifier":"t_rational_32523383700587834770323112271211932718128200013265661849047136999858837557784_by_1","typeString":"int_const 3252...(69 digits omitted)...7784"},"value":"0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218"},"visibility":"private"},{"constant":true,"id":984,"mutability":"constant","name":"SAFE_TX_TYPEHASH","nameLocation":"2706:16:8","nodeType":"VariableDeclaration","scope":1853,"src":"2681:110:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":982,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2681:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307862623833313064343836333638646236626436663834393430326664643733616435336433313662356134623236343461643665666530663934313238366438","id":983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2725:66:8","typeDescriptions":{"typeIdentifier":"t_rational_84814075808141314178395468817534025465894426928601295766380145544921651250904_by_1","typeString":"int_const 8481...(69 digits omitted)...0904"},"value":"0xbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d8"},"visibility":"private"},{"anonymous":false,"eventSelector":"141df868a6331af528e38c83b7aa03edc19be66e37ae67f9285bf4f8e3c6a1a8","id":997,"name":"SafeSetup","nameLocation":"2804:9:8","nodeType":"EventDefinition","parameters":{"id":996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":986,"indexed":true,"mutability":"mutable","name":"initiator","nameLocation":"2830:9:8","nodeType":"VariableDeclaration","scope":997,"src":"2814:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":985,"name":"address","nodeType":"ElementaryTypeName","src":"2814:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":989,"indexed":false,"mutability":"mutable","name":"owners","nameLocation":"2851:6:8","nodeType":"VariableDeclaration","scope":997,"src":"2841:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":987,"name":"address","nodeType":"ElementaryTypeName","src":"2841:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":988,"nodeType":"ArrayTypeName","src":"2841:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":991,"indexed":false,"mutability":"mutable","name":"threshold","nameLocation":"2867:9:8","nodeType":"VariableDeclaration","scope":997,"src":"2859:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":990,"name":"uint256","nodeType":"ElementaryTypeName","src":"2859:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":993,"indexed":false,"mutability":"mutable","name":"initializer","nameLocation":"2886:11:8","nodeType":"VariableDeclaration","scope":997,"src":"2878:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":992,"name":"address","nodeType":"ElementaryTypeName","src":"2878:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":995,"indexed":false,"mutability":"mutable","name":"fallbackHandler","nameLocation":"2907:15:8","nodeType":"VariableDeclaration","scope":997,"src":"2899:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":994,"name":"address","nodeType":"ElementaryTypeName","src":"2899:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2813:110:8"},"src":"2798:126:8"},{"anonymous":false,"eventSelector":"f2a0eb156472d1440255b0d7c1e19cc07115d1051fe605b0dce69acfec884d9c","id":1003,"name":"ApproveHash","nameLocation":"2935:11:8","nodeType":"EventDefinition","parameters":{"id":1002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":999,"indexed":true,"mutability":"mutable","name":"approvedHash","nameLocation":"2963:12:8","nodeType":"VariableDeclaration","scope":1003,"src":"2947:28:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":998,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2947:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1001,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"2993:5:8","nodeType":"VariableDeclaration","scope":1003,"src":"2977:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1000,"name":"address","nodeType":"ElementaryTypeName","src":"2977:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2946:53:8"},"src":"2929:71:8"},{"anonymous":false,"eventSelector":"e7f4675038f4f6034dfcbbb24c4dc08e4ebf10eb9d257d3d02c0f38d122ac6e4","id":1007,"name":"SignMsg","nameLocation":"3011:7:8","nodeType":"EventDefinition","parameters":{"id":1006,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1005,"indexed":true,"mutability":"mutable","name":"msgHash","nameLocation":"3035:7:8","nodeType":"VariableDeclaration","scope":1007,"src":"3019:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1004,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3019:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3018:25:8"},"src":"3005:39:8"},{"anonymous":false,"eventSelector":"23428b18acfb3ea64b08dc0c1d296ea9c09702c09083ca5272e64d115b687d23","id":1013,"name":"ExecutionFailure","nameLocation":"3055:16:8","nodeType":"EventDefinition","parameters":{"id":1012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1009,"indexed":true,"mutability":"mutable","name":"txHash","nameLocation":"3088:6:8","nodeType":"VariableDeclaration","scope":1013,"src":"3072:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1008,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3072:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1011,"indexed":false,"mutability":"mutable","name":"payment","nameLocation":"3104:7:8","nodeType":"VariableDeclaration","scope":1013,"src":"3096:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1010,"name":"uint256","nodeType":"ElementaryTypeName","src":"3096:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3071:41:8"},"src":"3049:64:8"},{"anonymous":false,"eventSelector":"442e715f626346e8c54381002da614f62bee8d27386535b2521ec8540898556e","id":1019,"name":"ExecutionSuccess","nameLocation":"3124:16:8","nodeType":"EventDefinition","parameters":{"id":1018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1015,"indexed":true,"mutability":"mutable","name":"txHash","nameLocation":"3157:6:8","nodeType":"VariableDeclaration","scope":1019,"src":"3141:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1014,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3141:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1017,"indexed":false,"mutability":"mutable","name":"payment","nameLocation":"3173:7:8","nodeType":"VariableDeclaration","scope":1019,"src":"3165:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1016,"name":"uint256","nodeType":"ElementaryTypeName","src":"3165:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3140:41:8"},"src":"3118:64:8"},{"constant":false,"functionSelector":"affed0e0","id":1021,"mutability":"mutable","name":"nonce","nameLocation":"3203:5:8","nodeType":"VariableDeclaration","scope":1853,"src":"3188:20:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1020,"name":"uint256","nodeType":"ElementaryTypeName","src":"3188:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"id":1023,"mutability":"mutable","name":"_deprecatedDomainSeparator","nameLocation":"3230:26:8","nodeType":"VariableDeclaration","scope":1853,"src":"3214:42:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1022,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3214:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"functionSelector":"5ae6bd37","id":1027,"mutability":"mutable","name":"signedMessages","nameLocation":"3395:14:8","nodeType":"VariableDeclaration","scope":1853,"src":"3360:49:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":1026,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1024,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3368:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"3360:27:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1025,"name":"uint256","nodeType":"ElementaryTypeName","src":"3379:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"7d832974","id":1033,"mutability":"mutable","name":"approvedHashes","nameLocation":"3576:14:8","nodeType":"VariableDeclaration","scope":1853,"src":"3521:69:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_uint256_$_$","typeString":"mapping(address => mapping(bytes32 => uint256))"},"typeName":{"id":1032,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1028,"name":"address","nodeType":"ElementaryTypeName","src":"3529:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3521:47:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_uint256_$_$","typeString":"mapping(address => mapping(bytes32 => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1031,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1029,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3548:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"3540:27:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1030,"name":"uint256","nodeType":"ElementaryTypeName","src":"3559:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"public"},{"body":{"id":1040,"nodeType":"Block","src":"3714:257:8","statements":[{"documentation":" By setting the threshold it is not possible to call setup anymore,\n so we create a Safe with 0 owners and threshold 1.\n This is an unusable Safe, perfect for the singleton","expression":{"id":1038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1036,"name":"threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"3951:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":1037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3963:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3951:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1039,"nodeType":"ExpressionStatement","src":"3951:13:8"}]},"id":1041,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1034,"nodeType":"ParameterList","parameters":[],"src":"3711:2:8"},"returnParameters":{"id":1035,"nodeType":"ParameterList","parameters":[],"src":"3714:0:8"},"scope":1853,"src":"3700:271:8","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1105,"nodeType":"Block","src":"5012:879:8","statements":[{"expression":{"arguments":[{"id":1063,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1045,"src":"5151:7:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},{"id":1064,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1047,"src":"5160:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1062,"name":"setupOwners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2652,"src":"5139:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (address[] memory,uint256)"}},"id":1065,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5139:32:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1066,"nodeType":"ExpressionStatement","src":"5139:32:8"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1067,"name":"fallbackHandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"5185:15:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5212:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1069,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5204:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1068,"name":"address","nodeType":"ElementaryTypeName","src":"5204:7:8","typeDescriptions":{}}},"id":1071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5204:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5185:29:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1077,"nodeType":"IfStatement","src":"5181:78:8","trueBody":{"expression":{"arguments":[{"id":1074,"name":"fallbackHandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"5243:15:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1073,"name":"internalSetFallbackHandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1921,"src":"5216:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5216:43:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1076,"nodeType":"ExpressionStatement","src":"5216:43:8"}},{"expression":{"arguments":[{"id":1079,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1049,"src":"5407:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1080,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"5411:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1078,"name":"setupModules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"5394:12:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":1081,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5394:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1082,"nodeType":"ExpressionStatement","src":"5394:22:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1083,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"5431:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5441:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5431:11:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1095,"nodeType":"IfStatement","src":"5427:380:8","trueBody":{"id":1094,"nodeType":"Block","src":"5444:363:8","statements":[{"expression":{"arguments":[{"id":1087,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"5751:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":1088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5760:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"31","id":1089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5763:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"id":1090,"name":"paymentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"5766:12:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1091,"name":"paymentReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"5780:15:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":1086,"name":"handlePayment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"5737:13:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$_t_address_payable_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256,address,address payable) returns (uint256)"}},"id":1092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5737:59:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1093,"nodeType":"ExpressionStatement","src":"5737:59:8"}]}},{"eventCall":{"arguments":[{"expression":{"id":1097,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5831:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5835:6:8","memberName":"sender","nodeType":"MemberAccess","src":"5831:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1099,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1045,"src":"5843:7:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},{"id":1100,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1047,"src":"5852:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1101,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1049,"src":"5864:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1102,"name":"fallbackHandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"5868:15:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1096,"name":"SafeSetup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"5821:9:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_array$_t_address_$dyn_memory_ptr_$_t_uint256_$_t_address_$_t_address_$returns$__$","typeString":"function (address,address[] memory,uint256,address,address)"}},"id":1103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5821:63:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1104,"nodeType":"EmitStatement","src":"5816:68:8"}]},"documentation":{"id":1042,"nodeType":"StructuredDocumentation","src":"3977:758:8","text":" @notice Sets an initial storage of the Safe contract.\n @dev This method can only be called once.\n      If a proxy was created without setting up, anyone can call setup and claim the proxy.\n @param _owners List of Safe owners.\n @param _threshold Number of required confirmations for a Safe transaction.\n @param to Contract address for optional delegate call.\n @param data Data payload for optional delegate call.\n @param fallbackHandler Handler for fallback calls to this contract\n @param paymentToken Token that should be used for the payment (0 is ETH)\n @param payment Value that should be paid\n @param paymentReceiver Address that should receive the payment (or 0 if tx.origin)"},"functionSelector":"b63e800d","id":1106,"implemented":true,"kind":"function","modifiers":[],"name":"setup","nameLocation":"4749:5:8","nodeType":"FunctionDefinition","parameters":{"id":1060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1045,"mutability":"mutable","name":"_owners","nameLocation":"4783:7:8","nodeType":"VariableDeclaration","scope":1106,"src":"4764:26:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1043,"name":"address","nodeType":"ElementaryTypeName","src":"4764:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1044,"nodeType":"ArrayTypeName","src":"4764:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1047,"mutability":"mutable","name":"_threshold","nameLocation":"4808:10:8","nodeType":"VariableDeclaration","scope":1106,"src":"4800:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1046,"name":"uint256","nodeType":"ElementaryTypeName","src":"4800:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1049,"mutability":"mutable","name":"to","nameLocation":"4836:2:8","nodeType":"VariableDeclaration","scope":1106,"src":"4828:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1048,"name":"address","nodeType":"ElementaryTypeName","src":"4828:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1051,"mutability":"mutable","name":"data","nameLocation":"4863:4:8","nodeType":"VariableDeclaration","scope":1106,"src":"4848:19:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1050,"name":"bytes","nodeType":"ElementaryTypeName","src":"4848:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1053,"mutability":"mutable","name":"fallbackHandler","nameLocation":"4885:15:8","nodeType":"VariableDeclaration","scope":1106,"src":"4877:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1052,"name":"address","nodeType":"ElementaryTypeName","src":"4877:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1055,"mutability":"mutable","name":"paymentToken","nameLocation":"4918:12:8","nodeType":"VariableDeclaration","scope":1106,"src":"4910:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1054,"name":"address","nodeType":"ElementaryTypeName","src":"4910:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1057,"mutability":"mutable","name":"payment","nameLocation":"4948:7:8","nodeType":"VariableDeclaration","scope":1106,"src":"4940:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1056,"name":"uint256","nodeType":"ElementaryTypeName","src":"4940:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1059,"mutability":"mutable","name":"paymentReceiver","nameLocation":"4981:15:8","nodeType":"VariableDeclaration","scope":1106,"src":"4965:31:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1058,"name":"address","nodeType":"ElementaryTypeName","src":"4965:15:8","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"4754:248:8"},"returnParameters":{"id":1061,"nodeType":"ParameterList","parameters":[],"src":"5012:0:8"},"scope":1853,"src":"4740:1151:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1314,"nodeType":"Block","src":"7793:3196:8","statements":[{"assignments":[1134],"declarations":[{"constant":false,"id":1134,"mutability":"mutable","name":"txHash","nameLocation":"7811:6:8","nodeType":"VariableDeclaration","scope":1314,"src":"7803:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1133,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7803:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1135,"nodeType":"VariableDeclarationStatement","src":"7803:14:8"},{"id":1166,"nodeType":"Block","src":"7916:620:8","statements":[{"assignments":[1137],"declarations":[{"constant":false,"id":1137,"mutability":"mutable","name":"txHashData","nameLocation":"7943:10:8","nodeType":"VariableDeclaration","scope":1166,"src":"7930:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1136,"name":"bytes","nodeType":"ElementaryTypeName","src":"7930:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1150,"initialValue":{"arguments":[{"id":1139,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1109,"src":"8031:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1140,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"8051:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1141,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"8074:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":1142,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1116,"src":"8096:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"}},{"id":1143,"name":"safeTxGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"8123:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1144,"name":"baseGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"8182:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1145,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"8207:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1146,"name":"gasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"8233:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1147,"name":"refundReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"8259:14:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":1148,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1021,"src":"8325:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1138,"name":"encodeTransactionData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1809,"src":"7956:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$_t_enum$_Operation_$3022_$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$_t_address_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,uint256,bytes calldata,enum Enum.Operation,uint256,uint256,uint256,address,address,uint256) view returns (bytes memory)"}},"id":1149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7956:388:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"7930:414:8"},{"expression":{"id":1152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8413:7:8","subExpression":{"id":1151,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1021,"src":"8413:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1153,"nodeType":"ExpressionStatement","src":"8413:7:8"},{"expression":{"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1154,"name":"txHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1134,"src":"8434:6:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1156,"name":"txHashData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"8453:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1155,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"8443:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8443:21:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8434:30:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1159,"nodeType":"ExpressionStatement","src":"8434:30:8"},{"expression":{"arguments":[{"id":1161,"name":"txHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1134,"src":"8494:6:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1162,"name":"txHashData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"8502:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1163,"name":"signatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1128,"src":"8514:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1160,"name":"checkSignatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"8478:15:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory,bytes memory) view"}},"id":1164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8478:47:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1165,"nodeType":"ExpressionStatement","src":"8478:47:8"}]},{"assignments":[1168],"declarations":[{"constant":false,"id":1168,"mutability":"mutable","name":"guard","nameLocation":"8553:5:8","nodeType":"VariableDeclaration","scope":1314,"src":"8545:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1167,"name":"address","nodeType":"ElementaryTypeName","src":"8545:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1171,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1169,"name":"getGuard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"8561:8:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8561:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"8545:26:8"},{"id":1198,"nodeType":"Block","src":"8581:571:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1172,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"8599:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8616:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1174,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8608:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1173,"name":"address","nodeType":"ElementaryTypeName","src":"8608:7:8","typeDescriptions":{}}},"id":1176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8608:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8599:19:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1197,"nodeType":"IfStatement","src":"8595:547:8","trueBody":{"id":1196,"nodeType":"Block","src":"8620:522:8","statements":[{"expression":{"arguments":[{"id":1182,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1109,"src":"8729:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1183,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"8753:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1184,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"8780:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":1185,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1116,"src":"8806:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"}},{"id":1186,"name":"safeTxGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"8837:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1187,"name":"baseGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"8904:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1188,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"8933:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1189,"name":"gasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"8963:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1190,"name":"refundReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"8993:14:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":1191,"name":"signatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1128,"src":"9067:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"id":1192,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9099:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9103:6:8","memberName":"sender","nodeType":"MemberAccess","src":"9099:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":1179,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"8644:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1178,"name":"Guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"8638:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Guard_$1989_$","typeString":"type(contract Guard)"}},"id":1180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8638:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Guard_$1989","typeString":"contract Guard"}},"id":1181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8651:16:8","memberName":"checkTransaction","nodeType":"MemberAccess","referencedDeclaration":1981,"src":"8638:29:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_enum$_Operation_$3022_$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$_t_address_payable_$_t_bytes_memory_ptr_$_t_address_$returns$__$","typeString":"function (address,uint256,bytes memory,enum Enum.Operation,uint256,uint256,uint256,address,address payable,bytes memory,address) external"}},"id":1194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8638:489:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1195,"nodeType":"ExpressionStatement","src":"8638:489:8"}]}}]},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1200,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-7,"src":"9443:7:8","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9443:9:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1210,"name":"safeTxGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"9484:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32353030","id":1211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9496:4:8","typeDescriptions":{"typeIdentifier":"t_rational_2500_by_1","typeString":"int_const 2500"},"value":"2500"},"src":"9484:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1202,"name":"safeTxGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"9458:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3634","id":1203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9470:2:8","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"9458:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1205,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9457:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3633","id":1206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9476:2:8","typeDescriptions":{"typeIdentifier":"t_rational_63_by_1","typeString":"int_const 63"},"value":"63"},"src":"9457:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1208,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9456:23:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9480:3:8","memberName":"max","nodeType":"MemberAccess","referencedDeclaration":3278,"src":"9456:27:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9456:45:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"353030","id":1214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9504:3:8","typeDescriptions":{"typeIdentifier":"t_rational_500_by_1","typeString":"int_const 500"},"value":"500"},"src":"9456:51:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9443:64:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753303130","id":1217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9509:7:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_9d970fd9adbe3047cd5b7a20406b6bf2e613338cfe3a19aca4ca1810b67fad10","typeString":"literal_string \"GS010\""},"value":"GS010"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9d970fd9adbe3047cd5b7a20406b6bf2e613338cfe3a19aca4ca1810b67fad10","typeString":"literal_string \"GS010\""}],"id":1199,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9435:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9435:82:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1219,"nodeType":"ExpressionStatement","src":"9435:82:8"},{"id":1296,"nodeType":"Block","src":"9616:1227:8","statements":[{"assignments":[1221],"declarations":[{"constant":false,"id":1221,"mutability":"mutable","name":"gasUsed","nameLocation":"9638:7:8","nodeType":"VariableDeclaration","scope":1296,"src":"9630:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1220,"name":"uint256","nodeType":"ElementaryTypeName","src":"9630:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1224,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1222,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-7,"src":"9648:7:8","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9648:9:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9630:27:8"},{"expression":{"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1225,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"9926:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1227,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1109,"src":"9944:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1228,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"9948:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1229,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"9955:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":1230,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1116,"src":"9961:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1231,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"9972:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9984:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9972:13:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1239,"name":"safeTxGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"10009:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9972:46:8","trueExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1234,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-7,"src":"9989:7:8","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9989:9:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"32353030","id":1236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10001:4:8","typeDescriptions":{"typeIdentifier":"t_rational_2500_by_1","typeString":"int_const 2500"},"value":"2500"},"src":"9989:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1238,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9988:18:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1226,"name":"execute","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"9936:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_enum$_Operation_$3022_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory,enum Enum.Operation,uint256) returns (bool)"}},"id":1241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9936:83:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9926:93:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1243,"nodeType":"ExpressionStatement","src":"9926:93:8"},{"expression":{"id":1250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1244,"name":"gasUsed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1221,"src":"10033:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1247,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-7,"src":"10055:7:8","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10055:9:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1245,"name":"gasUsed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1221,"src":"10043:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10051:3:8","memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":3235,"src":"10043:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10043:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10033:32:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1251,"nodeType":"ExpressionStatement","src":"10033:32:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1253,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"10349:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1254,"name":"safeTxGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"10360:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10373:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10360:14:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10349:25:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1258,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"10378:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10390:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10378:13:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10349:42:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753303133","id":1262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10393:7:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_99333b4627cde46d9c53d7148b33b8b1f4f065f5dceb2cb210893e67e551978e","typeString":"literal_string \"GS013\""},"value":"GS013"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_99333b4627cde46d9c53d7148b33b8b1f4f065f5dceb2cb210893e67e551978e","typeString":"literal_string \"GS013\""}],"id":1252,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10341:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10341:60:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1264,"nodeType":"ExpressionStatement","src":"10341:60:8"},{"assignments":[1266],"declarations":[{"constant":false,"id":1266,"mutability":"mutable","name":"payment","nameLocation":"10558:7:8","nodeType":"VariableDeclaration","scope":1296,"src":"10550:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1265,"name":"uint256","nodeType":"ElementaryTypeName","src":"10550:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1268,"initialValue":{"hexValue":"30","id":1267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10568:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10550:19:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1269,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"10587:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10598:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10587:12:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1283,"nodeType":"IfStatement","src":"10583:128:8","trueBody":{"id":1282,"nodeType":"Block","src":"10601:110:8","statements":[{"expression":{"id":1280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1272,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1266,"src":"10619:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1274,"name":"gasUsed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1221,"src":"10643:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1275,"name":"baseGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"10652:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1276,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"10661:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1277,"name":"gasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"10671:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1278,"name":"refundReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"10681:14:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":1273,"name":"handlePayment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"10629:13:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$_t_address_payable_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256,address,address payable) returns (uint256)"}},"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10629:67:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10619:77:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1281,"nodeType":"ExpressionStatement","src":"10619:77:8"}]}},{"condition":{"id":1284,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"10728:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"eventCall":{"arguments":[{"id":1291,"name":"txHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1134,"src":"10816:6:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1292,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1266,"src":"10824:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1290,"name":"ExecutionFailure","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1013,"src":"10799:16:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":1293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10799:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1294,"nodeType":"EmitStatement","src":"10794:38:8"},"id":1295,"nodeType":"IfStatement","src":"10724:108:8","trueBody":{"eventCall":{"arguments":[{"id":1286,"name":"txHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1134,"src":"10759:6:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1287,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1266,"src":"10767:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1285,"name":"ExecutionSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"10742:16:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":1288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10742:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1289,"nodeType":"EmitStatement","src":"10737:38:8"}}]},{"id":1313,"nodeType":"Block","src":"10852:131:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1297,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"10870:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10887:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1299,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10879:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1298,"name":"address","nodeType":"ElementaryTypeName","src":"10879:7:8","typeDescriptions":{}}},"id":1301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10879:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10870:19:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1312,"nodeType":"IfStatement","src":"10866:107:8","trueBody":{"id":1311,"nodeType":"Block","src":"10891:82:8","statements":[{"expression":{"arguments":[{"id":1307,"name":"txHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1134,"src":"10942:6:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1308,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"10950:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[{"id":1304,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"10915:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1303,"name":"Guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"10909:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Guard_$1989_$","typeString":"type(contract Guard)"}},"id":1305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10909:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Guard_$1989","typeString":"contract Guard"}},"id":1306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10922:19:8","memberName":"checkAfterExecution","nodeType":"MemberAccess","referencedDeclaration":1988,"src":"10909:32:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_bool_$returns$__$","typeString":"function (bytes32,bool) external"}},"id":1309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10909:49:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1310,"nodeType":"ExpressionStatement","src":"10909:49:8"}]}}]}]},"documentation":{"id":1107,"nodeType":"StructuredDocumentation","src":"5897:1531:8","text":"@notice Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)\n          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`.\n @dev The fees are always transferred, even if the user transaction fails.\n      This method doesn't perform any sanity check of the transaction, such as:\n      - if the contract at `to` address has code or not\n      - if the `gasToken` is a contract or not\n      It is the responsibility of the caller to perform such checks.\n @param to Destination address of Safe transaction.\n @param value Ether value of Safe transaction.\n @param data Data payload of Safe transaction.\n @param operation Operation type of Safe transaction.\n @param safeTxGas Gas that should be used for the Safe transaction.\n @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\n @param gasPrice Gas price that should be used for the payment calculation.\n @param gasToken Token address (or 0 if ETH) that is used for the payment.\n @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n @param signatures Signature data that should be verified.\n                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\n @return success Boolean indicating transaction's success."},"functionSelector":"6a761202","id":1315,"implemented":true,"kind":"function","modifiers":[],"name":"execTransaction","nameLocation":"7442:15:8","nodeType":"FunctionDefinition","parameters":{"id":1129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1109,"mutability":"mutable","name":"to","nameLocation":"7475:2:8","nodeType":"VariableDeclaration","scope":1315,"src":"7467:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1108,"name":"address","nodeType":"ElementaryTypeName","src":"7467:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1111,"mutability":"mutable","name":"value","nameLocation":"7495:5:8","nodeType":"VariableDeclaration","scope":1315,"src":"7487:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1110,"name":"uint256","nodeType":"ElementaryTypeName","src":"7487:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1113,"mutability":"mutable","name":"data","nameLocation":"7525:4:8","nodeType":"VariableDeclaration","scope":1315,"src":"7510:19:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1112,"name":"bytes","nodeType":"ElementaryTypeName","src":"7510:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1116,"mutability":"mutable","name":"operation","nameLocation":"7554:9:8","nodeType":"VariableDeclaration","scope":1315,"src":"7539:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"},"typeName":{"id":1115,"nodeType":"UserDefinedTypeName","pathNode":{"id":1114,"name":"Enum.Operation","nameLocations":["7539:4:8","7544:9:8"],"nodeType":"IdentifierPath","referencedDeclaration":3022,"src":"7539:14:8"},"referencedDeclaration":3022,"src":"7539:14:8","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"}},"visibility":"internal"},{"constant":false,"id":1118,"mutability":"mutable","name":"safeTxGas","nameLocation":"7581:9:8","nodeType":"VariableDeclaration","scope":1315,"src":"7573:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1117,"name":"uint256","nodeType":"ElementaryTypeName","src":"7573:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1120,"mutability":"mutable","name":"baseGas","nameLocation":"7608:7:8","nodeType":"VariableDeclaration","scope":1315,"src":"7600:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1119,"name":"uint256","nodeType":"ElementaryTypeName","src":"7600:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1122,"mutability":"mutable","name":"gasPrice","nameLocation":"7633:8:8","nodeType":"VariableDeclaration","scope":1315,"src":"7625:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1121,"name":"uint256","nodeType":"ElementaryTypeName","src":"7625:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1124,"mutability":"mutable","name":"gasToken","nameLocation":"7659:8:8","nodeType":"VariableDeclaration","scope":1315,"src":"7651:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1123,"name":"address","nodeType":"ElementaryTypeName","src":"7651:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1126,"mutability":"mutable","name":"refundReceiver","nameLocation":"7693:14:8","nodeType":"VariableDeclaration","scope":1315,"src":"7677:30:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1125,"name":"address","nodeType":"ElementaryTypeName","src":"7677:15:8","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1128,"mutability":"mutable","name":"signatures","nameLocation":"7730:10:8","nodeType":"VariableDeclaration","scope":1315,"src":"7717:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1127,"name":"bytes","nodeType":"ElementaryTypeName","src":"7717:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7457:289:8"},"returnParameters":{"id":1132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1131,"mutability":"mutable","name":"success","nameLocation":"7784:7:8","nodeType":"VariableDeclaration","scope":1315,"src":"7779:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1130,"name":"bool","nodeType":"ElementaryTypeName","src":"7779:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7778:14:8"},"scope":1853,"src":"7433:3556:8","stateMutability":"payable","virtual":true,"visibility":"public"},{"body":{"id":1400,"nodeType":"Block","src":"11719:616:8","statements":[{"assignments":[1332],"declarations":[{"constant":false,"id":1332,"mutability":"mutable","name":"receiver","nameLocation":"11798:8:8","nodeType":"VariableDeclaration","scope":1400,"src":"11782:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1331,"name":"address","nodeType":"ElementaryTypeName","src":"11782:15:8","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"id":1346,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1333,"name":"refundReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1326,"src":"11809:14:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11835:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1335,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11827:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1334,"name":"address","nodeType":"ElementaryTypeName","src":"11827:7:8","typeDescriptions":{}}},"id":1337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11827:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11809:28:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1344,"name":"refundReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1326,"src":"11861:14:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11809:66:8","trueExpression":{"arguments":[{"expression":{"id":1341,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"11848:2:8","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":1342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11851:6:8","memberName":"origin","nodeType":"MemberAccess","src":"11848:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1340,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11840:8:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":1339,"name":"address","nodeType":"ElementaryTypeName","src":"11840:8:8","stateMutability":"payable","typeDescriptions":{}}},"id":1343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11840:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"11782:93:8"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1347,"name":"gasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"11889:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11909:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1349,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11901:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1348,"name":"address","nodeType":"ElementaryTypeName","src":"11901:7:8","typeDescriptions":{}}},"id":1351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11901:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11889:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1398,"nodeType":"Block","src":"12186:143:8","statements":[{"expression":{"id":1387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1379,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"12200:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1385,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1322,"src":"12235:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":1382,"name":"baseGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"12222:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1380,"name":"gasUsed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"12210:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12218:3:8","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":3260,"src":"12210:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12210:20:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12231:3:8","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":3210,"src":"12210:24:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12210:34:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12200:44:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1388,"nodeType":"ExpressionStatement","src":"12200:44:8"},{"expression":{"arguments":[{"arguments":[{"id":1391,"name":"gasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"12280:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1392,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"12290:8:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":1393,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"12300:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1390,"name":"transferToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3071,"src":"12266:13:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) returns (bool)"}},"id":1394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12266:42:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753303132","id":1395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12310:7:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_74edef16877c9a34a97f281dbea2805f9198008e7df330ab6416449a66143b07","typeString":"literal_string \"GS012\""},"value":"GS012"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_74edef16877c9a34a97f281dbea2805f9198008e7df330ab6416449a66143b07","typeString":"literal_string \"GS012\""}],"id":1389,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12258:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12258:60:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1397,"nodeType":"ExpressionStatement","src":"12258:60:8"}]},"id":1399,"nodeType":"IfStatement","src":"11885:444:8","trueBody":{"id":1378,"nodeType":"Block","src":"11913:267:8","statements":[{"expression":{"id":1368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1353,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"12032:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1359,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1322,"src":"12067:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1360,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"12078:2:8","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":1361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12081:8:8","memberName":"gasprice","nodeType":"MemberAccess","src":"12078:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12067:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"id":1364,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"12103:2:8","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":1365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12106:8:8","memberName":"gasprice","nodeType":"MemberAccess","src":"12103:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12067:47:8","trueExpression":{"id":1363,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1322,"src":"12092:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":1356,"name":"baseGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"12054:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1354,"name":"gasUsed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"12042:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12050:3:8","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":3260,"src":"12042:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12042:20:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12063:3:8","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":3210,"src":"12042:24:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12042:73:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12032:83:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1369,"nodeType":"ExpressionStatement","src":"12032:83:8"},{"expression":{"arguments":[{"arguments":[{"id":1373,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"12151:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1371,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"12137:8:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12146:4:8","memberName":"send","nodeType":"MemberAccess","src":"12137:13:8","typeDescriptions":{"typeIdentifier":"t_function_send_nonpayable$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) returns (bool)"}},"id":1374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12137:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753303131","id":1375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12161:7:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_4353e9bcd8ea99b4d56990ac4b8777f1ab67cada8356790f30e482f2408a44b0","typeString":"literal_string \"GS011\""},"value":"GS011"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4353e9bcd8ea99b4d56990ac4b8777f1ab67cada8356790f30e482f2408a44b0","typeString":"literal_string \"GS011\""}],"id":1370,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12129:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12129:40:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1377,"nodeType":"ExpressionStatement","src":"12129:40:8"}]}}]},"documentation":{"id":1316,"nodeType":"StructuredDocumentation","src":"10995:514:8","text":" @notice Handles the payment for a Safe transaction.\n @param gasUsed Gas used by the Safe transaction.\n @param baseGas Gas costs that are independent of the transaction execution (e.g. base transaction fee, signature check, payment of the refund).\n @param gasPrice Gas price that should be used for the payment calculation.\n @param gasToken Token address (or 0 if ETH) that is used for the payment.\n @return payment The amount of payment made in the specified token."},"id":1401,"implemented":true,"kind":"function","modifiers":[],"name":"handlePayment","nameLocation":"11523:13:8","nodeType":"FunctionDefinition","parameters":{"id":1327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1318,"mutability":"mutable","name":"gasUsed","nameLocation":"11554:7:8","nodeType":"VariableDeclaration","scope":1401,"src":"11546:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1317,"name":"uint256","nodeType":"ElementaryTypeName","src":"11546:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1320,"mutability":"mutable","name":"baseGas","nameLocation":"11579:7:8","nodeType":"VariableDeclaration","scope":1401,"src":"11571:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1319,"name":"uint256","nodeType":"ElementaryTypeName","src":"11571:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1322,"mutability":"mutable","name":"gasPrice","nameLocation":"11604:8:8","nodeType":"VariableDeclaration","scope":1401,"src":"11596:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1321,"name":"uint256","nodeType":"ElementaryTypeName","src":"11596:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1324,"mutability":"mutable","name":"gasToken","nameLocation":"11630:8:8","nodeType":"VariableDeclaration","scope":1401,"src":"11622:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1323,"name":"address","nodeType":"ElementaryTypeName","src":"11622:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1326,"mutability":"mutable","name":"refundReceiver","nameLocation":"11664:14:8","nodeType":"VariableDeclaration","scope":1401,"src":"11648:30:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1325,"name":"address","nodeType":"ElementaryTypeName","src":"11648:15:8","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"11536:148:8"},"returnParameters":{"id":1330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1329,"mutability":"mutable","name":"payment","nameLocation":"11710:7:8","nodeType":"VariableDeclaration","scope":1401,"src":"11702:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1328,"name":"uint256","nodeType":"ElementaryTypeName","src":"11702:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11701:17:8"},"scope":1853,"src":"11514:821:8","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1429,"nodeType":"Block","src":"12957:254:8","statements":[{"assignments":[1412],"declarations":[{"constant":false,"id":1412,"mutability":"mutable","name":"_threshold","nameLocation":"13033:10:8","nodeType":"VariableDeclaration","scope":1429,"src":"13025:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1411,"name":"uint256","nodeType":"ElementaryTypeName","src":"13025:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1414,"initialValue":{"id":1413,"name":"threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"13046:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13025:30:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1416,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"13114:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13127:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13114:14:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753303031","id":1419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13130:7:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_93293a4a2e4cde533ea81b8912d8934c2d7892ceb975e9ad2c25f4abf449a730","typeString":"literal_string \"GS001\""},"value":"GS001"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_93293a4a2e4cde533ea81b8912d8934c2d7892ceb975e9ad2c25f4abf449a730","typeString":"literal_string \"GS001\""}],"id":1415,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13106:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1420,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13106:32:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1421,"nodeType":"ExpressionStatement","src":"13106:32:8"},{"expression":{"arguments":[{"id":1423,"name":"dataHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"13165:8:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1424,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1406,"src":"13175:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1425,"name":"signatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"13181:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1426,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"13193:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1422,"name":"checkNSignatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1680,"src":"13148:16:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (bytes32,bytes memory,bytes memory,uint256) view"}},"id":1427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13148:56:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1428,"nodeType":"ExpressionStatement","src":"13148:56:8"}]},"documentation":{"id":1402,"nodeType":"StructuredDocumentation","src":"12341:512:8","text":" @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\n @param dataHash Hash of the data (could be either a message hash or transaction hash)\n @param data That should be signed (this is passed to an external validator contract)\n @param signatures Signature data that should be verified.\n                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash."},"functionSelector":"934f3a11","id":1430,"implemented":true,"kind":"function","modifiers":[],"name":"checkSignatures","nameLocation":"12867:15:8","nodeType":"FunctionDefinition","parameters":{"id":1409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1404,"mutability":"mutable","name":"dataHash","nameLocation":"12891:8:8","nodeType":"VariableDeclaration","scope":1430,"src":"12883:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1403,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12883:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1406,"mutability":"mutable","name":"data","nameLocation":"12914:4:8","nodeType":"VariableDeclaration","scope":1430,"src":"12901:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1405,"name":"bytes","nodeType":"ElementaryTypeName","src":"12901:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1408,"mutability":"mutable","name":"signatures","nameLocation":"12933:10:8","nodeType":"VariableDeclaration","scope":1430,"src":"12920:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1407,"name":"bytes","nodeType":"ElementaryTypeName","src":"12920:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"12882:62:8"},"returnParameters":{"id":1410,"nodeType":"ParameterList","parameters":[],"src":"12957:0:8"},"scope":1853,"src":"12858:353:8","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1679,"nodeType":"Block","src":"14020:3709:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1443,"name":"signatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1437,"src":"14105:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14116:6:8","memberName":"length","nodeType":"MemberAccess","src":"14105:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"arguments":[{"hexValue":"3635","id":1447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14149:2:8","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"}],"expression":{"id":1445,"name":"requiredSignatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"14126:18:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14145:3:8","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":3210,"src":"14126:22:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14126:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14105:47:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753303230","id":1450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14154:7:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_f27dba96666375fe844b71e8ea4f388db2ce9f87fa9882d36a17036a7478b232","typeString":"literal_string \"GS020\""},"value":"GS020"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f27dba96666375fe844b71e8ea4f388db2ce9f87fa9882d36a17036a7478b232","typeString":"literal_string \"GS020\""}],"id":1442,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14097:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14097:65:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1452,"nodeType":"ExpressionStatement","src":"14097:65:8"},{"assignments":[1454],"declarations":[{"constant":false,"id":1454,"mutability":"mutable","name":"lastOwner","nameLocation":"14232:9:8","nodeType":"VariableDeclaration","scope":1679,"src":"14224:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1453,"name":"address","nodeType":"ElementaryTypeName","src":"14224:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1459,"initialValue":{"arguments":[{"hexValue":"30","id":1457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14252:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1456,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14244:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1455,"name":"address","nodeType":"ElementaryTypeName","src":"14244:7:8","typeDescriptions":{}}},"id":1458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14244:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"14224:30:8"},{"assignments":[1461],"declarations":[{"constant":false,"id":1461,"mutability":"mutable","name":"currentOwner","nameLocation":"14272:12:8","nodeType":"VariableDeclaration","scope":1679,"src":"14264:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1460,"name":"address","nodeType":"ElementaryTypeName","src":"14264:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1462,"nodeType":"VariableDeclarationStatement","src":"14264:20:8"},{"assignments":[1464],"declarations":[{"constant":false,"id":1464,"mutability":"mutable","name":"v","nameLocation":"14300:1:8","nodeType":"VariableDeclaration","scope":1679,"src":"14294:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1463,"name":"uint8","nodeType":"ElementaryTypeName","src":"14294:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1465,"nodeType":"VariableDeclarationStatement","src":"14294:7:8"},{"assignments":[1467],"declarations":[{"constant":false,"id":1467,"mutability":"mutable","name":"r","nameLocation":"14319:1:8","nodeType":"VariableDeclaration","scope":1679,"src":"14311:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1466,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14311:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1468,"nodeType":"VariableDeclarationStatement","src":"14311:9:8"},{"assignments":[1470],"declarations":[{"constant":false,"id":1470,"mutability":"mutable","name":"s","nameLocation":"14338:1:8","nodeType":"VariableDeclaration","scope":1679,"src":"14330:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1469,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14330:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1471,"nodeType":"VariableDeclarationStatement","src":"14330:9:8"},{"assignments":[1473],"declarations":[{"constant":false,"id":1473,"mutability":"mutable","name":"i","nameLocation":"14357:1:8","nodeType":"VariableDeclaration","scope":1679,"src":"14349:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1472,"name":"uint256","nodeType":"ElementaryTypeName","src":"14349:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1474,"nodeType":"VariableDeclarationStatement","src":"14349:9:8"},{"body":{"id":1677,"nodeType":"Block","src":"14409:3314:8","statements":[{"expression":{"id":1493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":1485,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1464,"src":"14424:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1486,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1467,"src":"14427:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1487,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"14430:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1488,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"14423:9:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint8_$_t_bytes32_$_t_bytes32_$","typeString":"tuple(uint8,bytes32,bytes32)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1490,"name":"signatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1437,"src":"14450:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1491,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"14462:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1489,"name":"signatureSplit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3117,"src":"14435:14:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint8_$_t_bytes32_$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (uint8,bytes32,bytes32)"}},"id":1492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14435:29:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint8_$_t_bytes32_$_t_bytes32_$","typeString":"tuple(uint8,bytes32,bytes32)"}},"src":"14423:41:8","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1494,"nodeType":"ExpressionStatement","src":"14423:41:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1495,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1464,"src":"14482:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14487:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14482:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1586,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1464,"src":"16425:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":1587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16430:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"16425:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1619,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1464,"src":"16925:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3330","id":1620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16929:2:8","typeDescriptions":{"typeIdentifier":"t_rational_30_by_1","typeString":"int_const 30"},"value":"30"},"src":"16925:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1649,"nodeType":"Block","src":"17320:226:8","statements":[{"expression":{"id":1647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1640,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"17488:12:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1642,"name":"dataHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"17513:8:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1643,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1464,"src":"17523:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1644,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1467,"src":"17526:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1645,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"17529:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1641,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"17503:9:8","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17503:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"17488:43:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1648,"nodeType":"ExpressionStatement","src":"17488:43:8"}]},"id":1650,"nodeType":"IfStatement","src":"16921:625:8","trueBody":{"id":1639,"nodeType":"Block","src":"16933:381:8","statements":[{"expression":{"id":1637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1622,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"17187:12:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","id":1627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17239:34:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},"value":"\u0019Ethereum Signed Message:\n32"},{"id":1628,"name":"dataHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"17275:8:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1625,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"17222:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1626,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17226:12:8","memberName":"encodePacked","nodeType":"MemberAccess","src":"17222:16:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17222:62:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1624,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"17212:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17212:73:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1631,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1464,"src":"17287:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"34","id":1632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17291:1:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"17287:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1634,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1467,"src":"17294:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1635,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"17297:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1623,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"17202:9:8","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17202:97:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"17187:112:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1638,"nodeType":"ExpressionStatement","src":"17187:112:8"}]}},"id":1651,"nodeType":"IfStatement","src":"16421:1125:8","trueBody":{"id":1618,"nodeType":"Block","src":"16433:482:8","statements":[{"expression":{"id":1600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1589,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"16603:12:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"arguments":[{"id":1596,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1467,"src":"16642:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1595,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16634:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1594,"name":"uint256","nodeType":"ElementaryTypeName","src":"16634:7:8","typeDescriptions":{}}},"id":1597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16634:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1593,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16626:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1592,"name":"uint160","nodeType":"ElementaryTypeName","src":"16626:7:8","typeDescriptions":{}}},"id":1598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16626:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1591,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16618:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1590,"name":"address","nodeType":"ElementaryTypeName","src":"16618:7:8","typeDescriptions":{}}},"id":1599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16618:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16603:43:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1601,"nodeType":"ExpressionStatement","src":"16603:43:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1603,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"16817:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16821:6:8","memberName":"sender","nodeType":"MemberAccess","src":"16817:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1605,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"16831:12:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16817:26:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":1607,"name":"approvedHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1033,"src":"16847:14:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_uint256_$_$","typeString":"mapping(address => mapping(bytes32 => uint256))"}},"id":1609,"indexExpression":{"id":1608,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"16862:12:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16847:28:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":1611,"indexExpression":{"id":1610,"name":"dataHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"16876:8:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16847:38:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16889:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"16847:43:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"16817:73:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753303235","id":1615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16892:7:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_bc2491dc7fc5c71a630e01bcb9c3e39f61f559ab54f6528d2adb67d65ed9ff6b","typeString":"literal_string \"GS025\""},"value":"GS025"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_bc2491dc7fc5c71a630e01bcb9c3e39f61f559ab54f6528d2adb67d65ed9ff6b","typeString":"literal_string \"GS025\""}],"id":1602,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"16809:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16809:91:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1617,"nodeType":"ExpressionStatement","src":"16809:91:8"}]}},"id":1652,"nodeType":"IfStatement","src":"14478:3068:8","trueBody":{"id":1585,"nodeType":"Block","src":"14490:1925:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1500,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1435,"src":"14526:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1499,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"14516:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14516:15:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1502,"name":"dataHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"14535:8:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"14516:27:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753303237","id":1504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14545:7:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_71cf63766ccc857998a36e6f1707e507e2e8921214ba4b8df65713cc885a8888","typeString":"literal_string \"GS027\""},"value":"GS027"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_71cf63766ccc857998a36e6f1707e507e2e8921214ba4b8df65713cc885a8888","typeString":"literal_string \"GS027\""}],"id":1498,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14508:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14508:45:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1506,"nodeType":"ExpressionStatement","src":"14508:45:8"},{"expression":{"id":1518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1507,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"14731:12:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"arguments":[{"id":1514,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1467,"src":"14770:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1513,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14762:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1512,"name":"uint256","nodeType":"ElementaryTypeName","src":"14762:7:8","typeDescriptions":{}}},"id":1515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14762:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1511,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14754:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1510,"name":"uint160","nodeType":"ElementaryTypeName","src":"14754:7:8","typeDescriptions":{}}},"id":1516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14754:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1509,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14746:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1508,"name":"address","nodeType":"ElementaryTypeName","src":"14746:7:8","typeDescriptions":{}}},"id":1517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14746:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14731:43:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1519,"nodeType":"ExpressionStatement","src":"14731:43:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1523,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"15169:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1522,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15161:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1521,"name":"uint256","nodeType":"ElementaryTypeName","src":"15161:7:8","typeDescriptions":{}}},"id":1524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15161:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"arguments":[{"hexValue":"3635","id":1527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15198:2:8","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"}],"expression":{"id":1525,"name":"requiredSignatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"15175:18:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15194:3:8","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":3210,"src":"15175:22:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15175:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15161:40:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753303231","id":1530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15203:7:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_d153a9d5a0d4e2c2b7d4e887f02c1da6287d6d54f20f4d8ce40382a23140787a","typeString":"literal_string \"GS021\""},"value":"GS021"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d153a9d5a0d4e2c2b7d4e887f02c1da6287d6d54f20f4d8ce40382a23140787a","typeString":"literal_string \"GS021\""}],"id":1520,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"15153:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15153:58:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1532,"nodeType":"ExpressionStatement","src":"15153:58:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"hexValue":"3332","id":1539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15366:2:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"expression":{"arguments":[{"id":1536,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"15359:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1535,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15351:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1534,"name":"uint256","nodeType":"ElementaryTypeName","src":"15351:7:8","typeDescriptions":{}}},"id":1537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15351:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15362:3:8","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":3260,"src":"15351:14:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15351:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":1541,"name":"signatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1437,"src":"15373:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15384:6:8","memberName":"length","nodeType":"MemberAccess","src":"15373:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15351:39:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753303232","id":1544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15392:7:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_372498b513e17609439d064ce0277017b054c808f722c83ff57cee4e06a9e457","typeString":"literal_string \"GS022\""},"value":"GS022"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_372498b513e17609439d064ce0277017b054c808f722c83ff57cee4e06a9e457","typeString":"literal_string \"GS022\""}],"id":1533,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"15343:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15343:57:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1546,"nodeType":"ExpressionStatement","src":"15343:57:8"},{"assignments":[1548],"declarations":[{"constant":false,"id":1548,"mutability":"mutable","name":"contractSignatureLen","nameLocation":"15552:20:8","nodeType":"VariableDeclaration","scope":1585,"src":"15544:28:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1547,"name":"uint256","nodeType":"ElementaryTypeName","src":"15544:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1549,"nodeType":"VariableDeclarationStatement","src":"15544:28:8"},{"AST":{"nativeSrc":"15663:100:8","nodeType":"YulBlock","src":"15663:100:8","statements":[{"nativeSrc":"15685:60:8","nodeType":"YulAssignment","src":"15685:60:8","value":{"arguments":[{"arguments":[{"arguments":[{"name":"signatures","nativeSrc":"15723:10:8","nodeType":"YulIdentifier","src":"15723:10:8"},{"name":"s","nativeSrc":"15735:1:8","nodeType":"YulIdentifier","src":"15735:1:8"}],"functionName":{"name":"add","nativeSrc":"15719:3:8","nodeType":"YulIdentifier","src":"15719:3:8"},"nativeSrc":"15719:18:8","nodeType":"YulFunctionCall","src":"15719:18:8"},{"kind":"number","nativeSrc":"15739:4:8","nodeType":"YulLiteral","src":"15739:4:8","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"15715:3:8","nodeType":"YulIdentifier","src":"15715:3:8"},"nativeSrc":"15715:29:8","nodeType":"YulFunctionCall","src":"15715:29:8"}],"functionName":{"name":"mload","nativeSrc":"15709:5:8","nodeType":"YulIdentifier","src":"15709:5:8"},"nativeSrc":"15709:36:8","nodeType":"YulFunctionCall","src":"15709:36:8"},"variableNames":[{"name":"contractSignatureLen","nativeSrc":"15685:20:8","nodeType":"YulIdentifier","src":"15685:20:8"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1548,"isOffset":false,"isSlot":false,"src":"15685:20:8","valueSize":1},{"declaration":1470,"isOffset":false,"isSlot":false,"src":"15735:1:8","valueSize":1},{"declaration":1437,"isOffset":false,"isSlot":false,"src":"15723:10:8","valueSize":1}],"id":1550,"nodeType":"InlineAssembly","src":"15654:109:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1560,"name":"contractSignatureLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"15811:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"hexValue":"3332","id":1557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15803:2:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"expression":{"arguments":[{"id":1554,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"15796:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1553,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15788:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1552,"name":"uint256","nodeType":"ElementaryTypeName","src":"15788:7:8","typeDescriptions":{}}},"id":1555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15788:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15799:3:8","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":3260,"src":"15788:14:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15788:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15807:3:8","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":3260,"src":"15788:22:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1561,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15788:44:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":1562,"name":"signatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1437,"src":"15836:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15847:6:8","memberName":"length","nodeType":"MemberAccess","src":"15836:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15788:65:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753303233","id":1565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15855:7:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_00aecc0fa22d38afc0f465808a9fee188ba139fb53b2ca550ea01d91d6ecf29f","typeString":"literal_string \"GS023\""},"value":"GS023"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_00aecc0fa22d38afc0f465808a9fee188ba139fb53b2ca550ea01d91d6ecf29f","typeString":"literal_string \"GS023\""}],"id":1551,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"15780:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15780:83:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1567,"nodeType":"ExpressionStatement","src":"15780:83:8"},{"assignments":[1569],"declarations":[{"constant":false,"id":1569,"mutability":"mutable","name":"contractSignature","nameLocation":"15930:17:8","nodeType":"VariableDeclaration","scope":1585,"src":"15917:30:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1568,"name":"bytes","nodeType":"ElementaryTypeName","src":"15917:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1570,"nodeType":"VariableDeclarationStatement","src":"15917:30:8"},{"AST":{"nativeSrc":"16038:229:8","nodeType":"YulBlock","src":"16038:229:8","statements":[{"nativeSrc":"16199:50:8","nodeType":"YulAssignment","src":"16199:50:8","value":{"arguments":[{"arguments":[{"name":"signatures","nativeSrc":"16228:10:8","nodeType":"YulIdentifier","src":"16228:10:8"},{"name":"s","nativeSrc":"16240:1:8","nodeType":"YulIdentifier","src":"16240:1:8"}],"functionName":{"name":"add","nativeSrc":"16224:3:8","nodeType":"YulIdentifier","src":"16224:3:8"},"nativeSrc":"16224:18:8","nodeType":"YulFunctionCall","src":"16224:18:8"},{"kind":"number","nativeSrc":"16244:4:8","nodeType":"YulLiteral","src":"16244:4:8","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"16220:3:8","nodeType":"YulIdentifier","src":"16220:3:8"},"nativeSrc":"16220:29:8","nodeType":"YulFunctionCall","src":"16220:29:8"},"variableNames":[{"name":"contractSignature","nativeSrc":"16199:17:8","nodeType":"YulIdentifier","src":"16199:17:8"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1569,"isOffset":false,"isSlot":false,"src":"16199:17:8","valueSize":1},{"declaration":1470,"isOffset":false,"isSlot":false,"src":"16240:1:8","valueSize":1},{"declaration":1437,"isOffset":false,"isSlot":false,"src":"16228:10:8","valueSize":1}],"id":1571,"nodeType":"InlineAssembly","src":"16029:238:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1577,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1435,"src":"16343:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1578,"name":"contractSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1569,"src":"16349:17:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1574,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"16312:12:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1573,"name":"ISignatureValidator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"16292:19:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISignatureValidator_$3794_$","typeString":"type(contract ISignatureValidator)"}},"id":1575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16292:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISignatureValidator_$3794","typeString":"contract ISignatureValidator"}},"id":1576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16326:16:8","memberName":"isValidSignature","nodeType":"MemberAccess","referencedDeclaration":3793,"src":"16292:50:8","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (bytes memory,bytes memory) view external returns (bytes4)"}},"id":1579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16292:75:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1580,"name":"EIP1271_MAGIC_VALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3780,"src":"16371:19:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"16292:98:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753303234","id":1582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16392:7:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_1d9dfad0f7e80ccb3a898324566cbd9ed8451678d229622c4c1b5f1f19330139","typeString":"literal_string \"GS024\""},"value":"GS024"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1d9dfad0f7e80ccb3a898324566cbd9ed8451678d229622c4c1b5f1f19330139","typeString":"literal_string \"GS024\""}],"id":1572,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"16284:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16284:116:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1584,"nodeType":"ExpressionStatement","src":"16284:116:8"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1654,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"17567:12:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1655,"name":"lastOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"17582:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"17567:24:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1657,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"17595:6:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1659,"indexExpression":{"id":1658,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"17602:12:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17595:20:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17627:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1661,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17619:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1660,"name":"address","nodeType":"ElementaryTypeName","src":"17619:7:8","typeDescriptions":{}}},"id":1663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17619:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"17595:34:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"17567:62:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1666,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"17633:12:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1667,"name":"SENTINEL_OWNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"17649:15:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"17633:31:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"17567:97:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753303236","id":1670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17666:7:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_14032cc06a7a2043c1b961d6b7d6cbfaea1511224ce5ca723af49fa68e55c159","typeString":"literal_string \"GS026\""},"value":"GS026"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_14032cc06a7a2043c1b961d6b7d6cbfaea1511224ce5ca723af49fa68e55c159","typeString":"literal_string \"GS026\""}],"id":1653,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"17559:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17559:115:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1672,"nodeType":"ExpressionStatement","src":"17559:115:8"},{"expression":{"id":1675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1673,"name":"lastOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"17688:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1674,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"17700:12:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"17688:24:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1676,"nodeType":"ExpressionStatement","src":"17688:24:8"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1479,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"14380:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1480,"name":"requiredSignatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"14384:18:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14380:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1678,"initializationExpression":{"expression":{"id":1477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1475,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"14373:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14377:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14373:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1478,"nodeType":"ExpressionStatement","src":"14373:5:8"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"14404:3:8","subExpression":{"id":1482,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"14404:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1484,"nodeType":"ExpressionStatement","src":"14404:3:8"},"nodeType":"ForStatement","src":"14368:3355:8"}]},"documentation":{"id":1431,"nodeType":"StructuredDocumentation","src":"13217:670:8","text":" @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\n @dev Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\n @param dataHash Hash of the data (could be either a message hash or transaction hash)\n @param data That should be signed (this is passed to an external validator contract)\n @param signatures Signature data that should be verified.\n                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\n @param requiredSignatures Amount of required valid signatures."},"functionSelector":"12fb68e0","id":1680,"implemented":true,"kind":"function","modifiers":[],"name":"checkNSignatures","nameLocation":"13901:16:8","nodeType":"FunctionDefinition","parameters":{"id":1440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1433,"mutability":"mutable","name":"dataHash","nameLocation":"13926:8:8","nodeType":"VariableDeclaration","scope":1680,"src":"13918:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1432,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13918:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1435,"mutability":"mutable","name":"data","nameLocation":"13949:4:8","nodeType":"VariableDeclaration","scope":1680,"src":"13936:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1434,"name":"bytes","nodeType":"ElementaryTypeName","src":"13936:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1437,"mutability":"mutable","name":"signatures","nameLocation":"13968:10:8","nodeType":"VariableDeclaration","scope":1680,"src":"13955:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1436,"name":"bytes","nodeType":"ElementaryTypeName","src":"13955:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1439,"mutability":"mutable","name":"requiredSignatures","nameLocation":"13988:18:8","nodeType":"VariableDeclaration","scope":1680,"src":"13980:26:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1438,"name":"uint256","nodeType":"ElementaryTypeName","src":"13980:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13917:90:8"},"returnParameters":{"id":1441,"nodeType":"ParameterList","parameters":[],"src":"14020:0:8"},"scope":1853,"src":"13892:3837:8","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1714,"nodeType":"Block","src":"18186:175:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1687,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"18204:6:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1690,"indexExpression":{"expression":{"id":1688,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"18211:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18215:6:8","memberName":"sender","nodeType":"MemberAccess","src":"18211:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18204:18:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18234:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1692,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18226:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1691,"name":"address","nodeType":"ElementaryTypeName","src":"18226:7:8","typeDescriptions":{}}},"id":1694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18226:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"18204:32:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753303330","id":1696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18238:7:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_26b7fa7d947085035b53de5c25693e568c405e1e894ad22389a1528045f35ba8","typeString":"literal_string \"GS030\""},"value":"GS030"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_26b7fa7d947085035b53de5c25693e568c405e1e894ad22389a1528045f35ba8","typeString":"literal_string \"GS030\""}],"id":1686,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"18196:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18196:50:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1698,"nodeType":"ExpressionStatement","src":"18196:50:8"},{"expression":{"id":1706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1699,"name":"approvedHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1033,"src":"18256:14:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_uint256_$_$","typeString":"mapping(address => mapping(bytes32 => uint256))"}},"id":1703,"indexExpression":{"expression":{"id":1700,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"18271:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18275:6:8","memberName":"sender","nodeType":"MemberAccess","src":"18271:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18256:26:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":1704,"indexExpression":{"id":1702,"name":"hashToApprove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1683,"src":"18283:13:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"18256:41:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":1705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18300:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"18256:45:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1707,"nodeType":"ExpressionStatement","src":"18256:45:8"},{"eventCall":{"arguments":[{"id":1709,"name":"hashToApprove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1683,"src":"18328:13:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":1710,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"18343:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18347:6:8","memberName":"sender","nodeType":"MemberAccess","src":"18343:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1708,"name":"ApproveHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"18316:11:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":1712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18316:38:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1713,"nodeType":"EmitStatement","src":"18311:43:8"}]},"documentation":{"id":1681,"nodeType":"StructuredDocumentation","src":"17735:393:8","text":" @notice Marks hash `hashToApprove` as approved.\n @dev This can be used with a pre-approved hash transaction signature.\n      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures\n @param hashToApprove The hash to mark as approved for signatures that are verified by this contract."},"functionSelector":"d4d9bdcd","id":1715,"implemented":true,"kind":"function","modifiers":[],"name":"approveHash","nameLocation":"18142:11:8","nodeType":"FunctionDefinition","parameters":{"id":1684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1683,"mutability":"mutable","name":"hashToApprove","nameLocation":"18162:13:8","nodeType":"VariableDeclaration","scope":1715,"src":"18154:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1682,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18154:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"18153:23:8"},"returnParameters":{"id":1685,"nodeType":"ParameterList","parameters":[],"src":"18186:0:8"},"scope":1853,"src":"18133:228:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1727,"nodeType":"Block","src":"18574:159:8","statements":[{"assignments":[1722],"declarations":[{"constant":false,"id":1722,"mutability":"mutable","name":"id","nameLocation":"18592:2:8","nodeType":"VariableDeclaration","scope":1727,"src":"18584:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1721,"name":"uint256","nodeType":"ElementaryTypeName","src":"18584:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1723,"nodeType":"VariableDeclarationStatement","src":"18584:10:8"},{"AST":{"nativeSrc":"18669:39:8","nodeType":"YulBlock","src":"18669:39:8","statements":[{"nativeSrc":"18683:15:8","nodeType":"YulAssignment","src":"18683:15:8","value":{"arguments":[],"functionName":{"name":"chainid","nativeSrc":"18689:7:8","nodeType":"YulIdentifier","src":"18689:7:8"},"nativeSrc":"18689:9:8","nodeType":"YulFunctionCall","src":"18689:9:8"},"variableNames":[{"name":"id","nativeSrc":"18683:2:8","nodeType":"YulIdentifier","src":"18683:2:8"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1722,"isOffset":false,"isSlot":false,"src":"18683:2:8","valueSize":1}],"id":1724,"nodeType":"InlineAssembly","src":"18660:48:8"},{"expression":{"id":1725,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"18724:2:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1720,"id":1726,"nodeType":"Return","src":"18717:9:8"}]},"documentation":{"id":1716,"nodeType":"StructuredDocumentation","src":"18367:150:8","text":" @notice Returns the ID of the chain the contract is currently deployed on.\n @return The ID of the current chain as a uint256."},"functionSelector":"3408e470","id":1728,"implemented":true,"kind":"function","modifiers":[],"name":"getChainId","nameLocation":"18531:10:8","nodeType":"FunctionDefinition","parameters":{"id":1717,"nodeType":"ParameterList","parameters":[],"src":"18541:2:8"},"returnParameters":{"id":1720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1719,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1728,"src":"18565:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1718,"name":"uint256","nodeType":"ElementaryTypeName","src":"18565:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18564:9:8"},"scope":1853,"src":"18522:211:8","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1744,"nodeType":"Block","src":"18958:92:8","statements":[{"expression":{"arguments":[{"arguments":[{"id":1737,"name":"DOMAIN_SEPARATOR_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"18996:25:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1738,"name":"getChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1728,"src":"19023:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19023:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1740,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"19037:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_Safe_$1853","typeString":"contract Safe"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_contract$_Safe_$1853","typeString":"contract Safe"}],"expression":{"id":1735,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"18985:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1736,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"18989:6:8","memberName":"encode","nodeType":"MemberAccess","src":"18985:10:8","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18985:57:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1734,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"18975:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18975:68:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1733,"id":1743,"nodeType":"Return","src":"18968:75:8"}]},"documentation":{"id":1729,"nodeType":"StructuredDocumentation","src":"18739:157:8","text":" @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\n @return bytes32 The domain separator hash."},"functionSelector":"f698da25","id":1745,"implemented":true,"kind":"function","modifiers":[],"name":"domainSeparator","nameLocation":"18910:15:8","nodeType":"FunctionDefinition","parameters":{"id":1730,"nodeType":"ParameterList","parameters":[],"src":"18925:2:8"},"returnParameters":{"id":1733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1732,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1745,"src":"18949:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1731,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18949:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"18948:9:8"},"scope":1853,"src":"18901:149:8","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1808,"nodeType":"Block","src":"20196:484:8","statements":[{"assignments":[1773],"declarations":[{"constant":false,"id":1773,"mutability":"mutable","name":"safeTxHash","nameLocation":"20214:10:8","nodeType":"VariableDeclaration","scope":1808,"src":"20206:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1772,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20206:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1792,"initialValue":{"arguments":[{"arguments":[{"id":1777,"name":"SAFE_TX_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":984,"src":"20278:16:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1778,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1748,"src":"20312:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1779,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1750,"src":"20332:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":1781,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"20365:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1780,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"20355:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20355:15:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1783,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1755,"src":"20388:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"}},{"id":1784,"name":"safeTxGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"20415:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1785,"name":"baseGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"20442:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1786,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1761,"src":"20467:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1787,"name":"gasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"20493:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1788,"name":"refundReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1765,"src":"20519:14:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1789,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1767,"src":"20551:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1775,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"20250:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1776,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"20254:6:8","memberName":"encode","nodeType":"MemberAccess","src":"20250:10:8","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1790,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20250:321:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1774,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"20227:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20227:354:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"20206:375:8"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30783139","id":1797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20622:4:8","typeDescriptions":{"typeIdentifier":"t_rational_25_by_1","typeString":"int_const 25"},"value":"0x19"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_25_by_1","typeString":"int_const 25"}],"id":1796,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20615:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":1795,"name":"bytes1","nodeType":"ElementaryTypeName","src":"20615:6:8","typeDescriptions":{}}},"id":1798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20615:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},{"arguments":[{"hexValue":"30783031","id":1801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20636:4:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"0x01"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1800,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20629:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":1799,"name":"bytes1","nodeType":"ElementaryTypeName","src":"20629:6:8","typeDescriptions":{}}},"id":1802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20629:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1803,"name":"domainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1745,"src":"20643:15:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":1804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20643:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1805,"name":"safeTxHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1773,"src":"20662:10:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"},{"typeIdentifier":"t_bytes1","typeString":"bytes1"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1793,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"20598:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1794,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"20602:12:8","memberName":"encodePacked","nodeType":"MemberAccess","src":"20598:16:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20598:75:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1771,"id":1807,"nodeType":"Return","src":"20591:82:8"}]},"documentation":{"id":1746,"nodeType":"StructuredDocumentation","src":"19056:797:8","text":" @notice Returns the pre-image of the transaction hash (see getTransactionHash).\n @param to Destination address.\n @param value Ether value.\n @param data Data payload.\n @param operation Operation type.\n @param safeTxGas Gas that should be used for the safe transaction.\n @param baseGas Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\n @param gasPrice Maximum gas price that should be used for this transaction.\n @param gasToken Token address (or 0 if ETH) that is used for the payment.\n @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n @param _nonce Transaction nonce.\n @return Transaction hash bytes."},"functionSelector":"e86637db","id":1809,"implemented":true,"kind":"function","modifiers":[],"name":"encodeTransactionData","nameLocation":"19867:21:8","nodeType":"FunctionDefinition","parameters":{"id":1768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1748,"mutability":"mutable","name":"to","nameLocation":"19906:2:8","nodeType":"VariableDeclaration","scope":1809,"src":"19898:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1747,"name":"address","nodeType":"ElementaryTypeName","src":"19898:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1750,"mutability":"mutable","name":"value","nameLocation":"19926:5:8","nodeType":"VariableDeclaration","scope":1809,"src":"19918:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1749,"name":"uint256","nodeType":"ElementaryTypeName","src":"19918:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1752,"mutability":"mutable","name":"data","nameLocation":"19956:4:8","nodeType":"VariableDeclaration","scope":1809,"src":"19941:19:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1751,"name":"bytes","nodeType":"ElementaryTypeName","src":"19941:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1755,"mutability":"mutable","name":"operation","nameLocation":"19985:9:8","nodeType":"VariableDeclaration","scope":1809,"src":"19970:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"},"typeName":{"id":1754,"nodeType":"UserDefinedTypeName","pathNode":{"id":1753,"name":"Enum.Operation","nameLocations":["19970:4:8","19975:9:8"],"nodeType":"IdentifierPath","referencedDeclaration":3022,"src":"19970:14:8"},"referencedDeclaration":3022,"src":"19970:14:8","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"}},"visibility":"internal"},{"constant":false,"id":1757,"mutability":"mutable","name":"safeTxGas","nameLocation":"20012:9:8","nodeType":"VariableDeclaration","scope":1809,"src":"20004:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1756,"name":"uint256","nodeType":"ElementaryTypeName","src":"20004:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1759,"mutability":"mutable","name":"baseGas","nameLocation":"20039:7:8","nodeType":"VariableDeclaration","scope":1809,"src":"20031:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1758,"name":"uint256","nodeType":"ElementaryTypeName","src":"20031:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1761,"mutability":"mutable","name":"gasPrice","nameLocation":"20064:8:8","nodeType":"VariableDeclaration","scope":1809,"src":"20056:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1760,"name":"uint256","nodeType":"ElementaryTypeName","src":"20056:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1763,"mutability":"mutable","name":"gasToken","nameLocation":"20090:8:8","nodeType":"VariableDeclaration","scope":1809,"src":"20082:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1762,"name":"address","nodeType":"ElementaryTypeName","src":"20082:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1765,"mutability":"mutable","name":"refundReceiver","nameLocation":"20116:14:8","nodeType":"VariableDeclaration","scope":1809,"src":"20108:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1764,"name":"address","nodeType":"ElementaryTypeName","src":"20108:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1767,"mutability":"mutable","name":"_nonce","nameLocation":"20148:6:8","nodeType":"VariableDeclaration","scope":1809,"src":"20140:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1766,"name":"uint256","nodeType":"ElementaryTypeName","src":"20140:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19888:272:8"},"returnParameters":{"id":1771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1770,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1809,"src":"20182:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1769,"name":"bytes","nodeType":"ElementaryTypeName","src":"20182:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"20181:14:8"},"scope":1853,"src":"19858:822:8","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1851,"nodeType":"Block","src":"21715:148:8","statements":[{"expression":{"arguments":[{"arguments":[{"id":1838,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"21764:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1839,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1814,"src":"21768:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1840,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1816,"src":"21775:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":1841,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1819,"src":"21781:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"}},{"id":1842,"name":"safeTxGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1821,"src":"21792:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1843,"name":"baseGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1823,"src":"21803:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1844,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1825,"src":"21812:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1845,"name":"gasToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"21822:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1846,"name":"refundReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"21832:14:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1847,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1831,"src":"21848:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1837,"name":"encodeTransactionData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1809,"src":"21742:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$_t_enum$_Operation_$3022_$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$_t_address_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,uint256,bytes calldata,enum Enum.Operation,uint256,uint256,uint256,address,address,uint256) view returns (bytes memory)"}},"id":1848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21742:113:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1836,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"21732:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21732:124:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1835,"id":1850,"nodeType":"Return","src":"21725:131:8"}]},"documentation":{"id":1810,"nodeType":"StructuredDocumentation","src":"20686:694:8","text":" @notice Returns transaction hash to be signed by owners.\n @param to Destination address.\n @param value Ether value.\n @param data Data payload.\n @param operation Operation type.\n @param safeTxGas Fas that should be used for the safe transaction.\n @param baseGas Gas costs for data used to trigger the safe transaction.\n @param gasPrice Maximum gas price that should be used for this transaction.\n @param gasToken Token address (or 0 if ETH) that is used for the payment.\n @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n @param _nonce Transaction nonce.\n @return Transaction hash."},"functionSelector":"d8d11f78","id":1852,"implemented":true,"kind":"function","modifiers":[],"name":"getTransactionHash","nameLocation":"21394:18:8","nodeType":"FunctionDefinition","parameters":{"id":1832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1812,"mutability":"mutable","name":"to","nameLocation":"21430:2:8","nodeType":"VariableDeclaration","scope":1852,"src":"21422:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1811,"name":"address","nodeType":"ElementaryTypeName","src":"21422:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1814,"mutability":"mutable","name":"value","nameLocation":"21450:5:8","nodeType":"VariableDeclaration","scope":1852,"src":"21442:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1813,"name":"uint256","nodeType":"ElementaryTypeName","src":"21442:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1816,"mutability":"mutable","name":"data","nameLocation":"21480:4:8","nodeType":"VariableDeclaration","scope":1852,"src":"21465:19:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1815,"name":"bytes","nodeType":"ElementaryTypeName","src":"21465:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1819,"mutability":"mutable","name":"operation","nameLocation":"21509:9:8","nodeType":"VariableDeclaration","scope":1852,"src":"21494:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"},"typeName":{"id":1818,"nodeType":"UserDefinedTypeName","pathNode":{"id":1817,"name":"Enum.Operation","nameLocations":["21494:4:8","21499:9:8"],"nodeType":"IdentifierPath","referencedDeclaration":3022,"src":"21494:14:8"},"referencedDeclaration":3022,"src":"21494:14:8","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"}},"visibility":"internal"},{"constant":false,"id":1821,"mutability":"mutable","name":"safeTxGas","nameLocation":"21536:9:8","nodeType":"VariableDeclaration","scope":1852,"src":"21528:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1820,"name":"uint256","nodeType":"ElementaryTypeName","src":"21528:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1823,"mutability":"mutable","name":"baseGas","nameLocation":"21563:7:8","nodeType":"VariableDeclaration","scope":1852,"src":"21555:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1822,"name":"uint256","nodeType":"ElementaryTypeName","src":"21555:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1825,"mutability":"mutable","name":"gasPrice","nameLocation":"21588:8:8","nodeType":"VariableDeclaration","scope":1852,"src":"21580:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1824,"name":"uint256","nodeType":"ElementaryTypeName","src":"21580:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1827,"mutability":"mutable","name":"gasToken","nameLocation":"21614:8:8","nodeType":"VariableDeclaration","scope":1852,"src":"21606:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1826,"name":"address","nodeType":"ElementaryTypeName","src":"21606:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1829,"mutability":"mutable","name":"refundReceiver","nameLocation":"21640:14:8","nodeType":"VariableDeclaration","scope":1852,"src":"21632:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1828,"name":"address","nodeType":"ElementaryTypeName","src":"21632:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1831,"mutability":"mutable","name":"_nonce","nameLocation":"21672:6:8","nodeType":"VariableDeclaration","scope":1852,"src":"21664:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1830,"name":"uint256","nodeType":"ElementaryTypeName","src":"21664:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21412:272:8"},"returnParameters":{"id":1835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1834,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1852,"src":"21706:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1833,"name":"bytes32","nodeType":"ElementaryTypeName","src":"21706:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"21705:9:8"},"scope":1853,"src":"21385:478:8","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":1854,"src":"1919:19946:8","usedErrors":[],"usedEvents":[997,1003,1007,1013,1019,1896,2022,2091,2095,2099,2103,2513,2517,2521,3032]}],"src":"42:21824:8"},"id":8},"@safe-global/safe-contracts/contracts/base/Executor.sol":{"ast":{"absolutePath":"@safe-global/safe-contracts/contracts/base/Executor.sol","exportedSymbols":{"Enum":[3023],"Executor":[1886]},"id":1887,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":1855,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:9"},{"absolutePath":"@safe-global/safe-contracts/contracts/common/Enum.sol","file":"../common/Enum.sol","id":1856,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1887,"sourceUnit":3024,"src":"74:28:9","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Executor","contractDependencies":[],"contractKind":"contract","documentation":{"id":1857,"nodeType":"StructuredDocumentation","src":"104:110:9","text":" @title Executor - A contract that can execute transactions\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":1886,"linearizedBaseContracts":[1886],"name":"Executor","nameLocation":"233:8:9","nodeType":"ContractDefinition","nodes":[{"body":{"id":1884,"nodeType":"Block","src":"965:457:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"},"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1874,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1867,"src":"979:9:9","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":1875,"name":"Enum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3023,"src":"992:4:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Enum_$3023_$","typeString":"type(contract Enum)"}},"id":1876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"997:9:9","memberName":"Operation","nodeType":"MemberAccess","referencedDeclaration":3022,"src":"992:14:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Operation_$3022_$","typeString":"type(enum Enum.Operation)"}},"id":1877,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1007:12:9","memberName":"DelegateCall","nodeType":"MemberAccess","referencedDeclaration":3021,"src":"992:27:9","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"}},"src":"979:40:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1882,"nodeType":"Block","src":"1222:194:9","statements":[{"AST":{"nativeSrc":"1305:101:9","nodeType":"YulBlock","src":"1305:101:9","statements":[{"nativeSrc":"1323:69:9","nodeType":"YulAssignment","src":"1323:69:9","value":{"arguments":[{"name":"txGas","nativeSrc":"1339:5:9","nodeType":"YulIdentifier","src":"1339:5:9"},{"name":"to","nativeSrc":"1346:2:9","nodeType":"YulIdentifier","src":"1346:2:9"},{"name":"value","nativeSrc":"1350:5:9","nodeType":"YulIdentifier","src":"1350:5:9"},{"arguments":[{"name":"data","nativeSrc":"1361:4:9","nodeType":"YulIdentifier","src":"1361:4:9"},{"kind":"number","nativeSrc":"1367:4:9","nodeType":"YulLiteral","src":"1367:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1357:3:9","nodeType":"YulIdentifier","src":"1357:3:9"},"nativeSrc":"1357:15:9","nodeType":"YulFunctionCall","src":"1357:15:9"},{"arguments":[{"name":"data","nativeSrc":"1380:4:9","nodeType":"YulIdentifier","src":"1380:4:9"}],"functionName":{"name":"mload","nativeSrc":"1374:5:9","nodeType":"YulIdentifier","src":"1374:5:9"},"nativeSrc":"1374:11:9","nodeType":"YulFunctionCall","src":"1374:11:9"},{"kind":"number","nativeSrc":"1387:1:9","nodeType":"YulLiteral","src":"1387:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"1390:1:9","nodeType":"YulLiteral","src":"1390:1:9","type":"","value":"0"}],"functionName":{"name":"call","nativeSrc":"1334:4:9","nodeType":"YulIdentifier","src":"1334:4:9"},"nativeSrc":"1334:58:9","nodeType":"YulFunctionCall","src":"1334:58:9"},"variableNames":[{"name":"success","nativeSrc":"1323:7:9","nodeType":"YulIdentifier","src":"1323:7:9"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1864,"isOffset":false,"isSlot":false,"src":"1361:4:9","valueSize":1},{"declaration":1864,"isOffset":false,"isSlot":false,"src":"1380:4:9","valueSize":1},{"declaration":1872,"isOffset":false,"isSlot":false,"src":"1323:7:9","valueSize":1},{"declaration":1860,"isOffset":false,"isSlot":false,"src":"1346:2:9","valueSize":1},{"declaration":1869,"isOffset":false,"isSlot":false,"src":"1339:5:9","valueSize":1},{"declaration":1862,"isOffset":false,"isSlot":false,"src":"1350:5:9","valueSize":1}],"id":1881,"nodeType":"InlineAssembly","src":"1296:110:9"}]},"id":1883,"nodeType":"IfStatement","src":"975:441:9","trueBody":{"id":1880,"nodeType":"Block","src":"1021:195:9","statements":[{"AST":{"nativeSrc":"1104:102:9","nodeType":"YulBlock","src":"1104:102:9","statements":[{"nativeSrc":"1122:70:9","nodeType":"YulAssignment","src":"1122:70:9","value":{"arguments":[{"name":"txGas","nativeSrc":"1146:5:9","nodeType":"YulIdentifier","src":"1146:5:9"},{"name":"to","nativeSrc":"1153:2:9","nodeType":"YulIdentifier","src":"1153:2:9"},{"arguments":[{"name":"data","nativeSrc":"1161:4:9","nodeType":"YulIdentifier","src":"1161:4:9"},{"kind":"number","nativeSrc":"1167:4:9","nodeType":"YulLiteral","src":"1167:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1157:3:9","nodeType":"YulIdentifier","src":"1157:3:9"},"nativeSrc":"1157:15:9","nodeType":"YulFunctionCall","src":"1157:15:9"},{"arguments":[{"name":"data","nativeSrc":"1180:4:9","nodeType":"YulIdentifier","src":"1180:4:9"}],"functionName":{"name":"mload","nativeSrc":"1174:5:9","nodeType":"YulIdentifier","src":"1174:5:9"},"nativeSrc":"1174:11:9","nodeType":"YulFunctionCall","src":"1174:11:9"},{"kind":"number","nativeSrc":"1187:1:9","nodeType":"YulLiteral","src":"1187:1:9","type":"","value":"0"},{"kind":"number","nativeSrc":"1190:1:9","nodeType":"YulLiteral","src":"1190:1:9","type":"","value":"0"}],"functionName":{"name":"delegatecall","nativeSrc":"1133:12:9","nodeType":"YulIdentifier","src":"1133:12:9"},"nativeSrc":"1133:59:9","nodeType":"YulFunctionCall","src":"1133:59:9"},"variableNames":[{"name":"success","nativeSrc":"1122:7:9","nodeType":"YulIdentifier","src":"1122:7:9"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1864,"isOffset":false,"isSlot":false,"src":"1161:4:9","valueSize":1},{"declaration":1864,"isOffset":false,"isSlot":false,"src":"1180:4:9","valueSize":1},{"declaration":1872,"isOffset":false,"isSlot":false,"src":"1122:7:9","valueSize":1},{"declaration":1860,"isOffset":false,"isSlot":false,"src":"1153:2:9","valueSize":1},{"declaration":1869,"isOffset":false,"isSlot":false,"src":"1146:5:9","valueSize":1}],"id":1879,"nodeType":"InlineAssembly","src":"1095:111:9"}]}}]},"documentation":{"id":1858,"nodeType":"StructuredDocumentation","src":"248:530:9","text":" @notice Executes either a delegatecall or a call with provided parameters.\n @dev This method doesn't perform any sanity check of the transaction, such as:\n      - if the contract at `to` address has code or not\n      It is the responsibility of the caller to perform such checks.\n @param to Destination address.\n @param value Ether value.\n @param data Data payload.\n @param operation Operation type.\n @return success boolean flag indicating if the call succeeded."},"id":1885,"implemented":true,"kind":"function","modifiers":[],"name":"execute","nameLocation":"792:7:9","nodeType":"FunctionDefinition","parameters":{"id":1870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1860,"mutability":"mutable","name":"to","nameLocation":"817:2:9","nodeType":"VariableDeclaration","scope":1885,"src":"809:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1859,"name":"address","nodeType":"ElementaryTypeName","src":"809:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1862,"mutability":"mutable","name":"value","nameLocation":"837:5:9","nodeType":"VariableDeclaration","scope":1885,"src":"829:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1861,"name":"uint256","nodeType":"ElementaryTypeName","src":"829:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1864,"mutability":"mutable","name":"data","nameLocation":"865:4:9","nodeType":"VariableDeclaration","scope":1885,"src":"852:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1863,"name":"bytes","nodeType":"ElementaryTypeName","src":"852:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1867,"mutability":"mutable","name":"operation","nameLocation":"894:9:9","nodeType":"VariableDeclaration","scope":1885,"src":"879:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"},"typeName":{"id":1866,"nodeType":"UserDefinedTypeName","pathNode":{"id":1865,"name":"Enum.Operation","nameLocations":["879:4:9","884:9:9"],"nodeType":"IdentifierPath","referencedDeclaration":3022,"src":"879:14:9"},"referencedDeclaration":3022,"src":"879:14:9","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"}},"visibility":"internal"},{"constant":false,"id":1869,"mutability":"mutable","name":"txGas","nameLocation":"921:5:9","nodeType":"VariableDeclaration","scope":1885,"src":"913:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1868,"name":"uint256","nodeType":"ElementaryTypeName","src":"913:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"799:133:9"},"returnParameters":{"id":1873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1872,"mutability":"mutable","name":"success","nameLocation":"956:7:9","nodeType":"VariableDeclaration","scope":1885,"src":"951:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1871,"name":"bool","nodeType":"ElementaryTypeName","src":"951:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"950:14:9"},"scope":1886,"src":"783:639:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1887,"src":"215:1209:9","usedErrors":[],"usedEvents":[]}],"src":"42:1383:9"},"id":9},"@safe-global/safe-contracts/contracts/base/FallbackManager.sol":{"ast":{"absolutePath":"@safe-global/safe-contracts/contracts/base/FallbackManager.sol","exportedSymbols":{"FallbackManager":[1948],"SelfAuthorized":[3098]},"id":1949,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":1888,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:10"},{"absolutePath":"@safe-global/safe-contracts/contracts/common/SelfAuthorized.sol","file":"../common/SelfAuthorized.sol","id":1889,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1949,"sourceUnit":3099,"src":"75:38:10","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1891,"name":"SelfAuthorized","nameLocations":["287:14:10"],"nodeType":"IdentifierPath","referencedDeclaration":3098,"src":"287:14:10"},"id":1892,"nodeType":"InheritanceSpecifier","src":"287:14:10"}],"canonicalName":"FallbackManager","contractDependencies":[],"contractKind":"contract","documentation":{"id":1890,"nodeType":"StructuredDocumentation","src":"115:134:10","text":" @title Fallback Manager - A contract managing fallback calls made to this contract\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":1948,"linearizedBaseContracts":[1948,3098],"name":"FallbackManager","nameLocation":"268:15:10","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"5ac6c46c93c8d0e53714ba3b53db3e7c046da994313d7ed0d192028bc7c228b0","id":1896,"name":"ChangedFallbackHandler","nameLocation":"314:22:10","nodeType":"EventDefinition","parameters":{"id":1895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1894,"indexed":true,"mutability":"mutable","name":"handler","nameLocation":"353:7:10","nodeType":"VariableDeclaration","scope":1896,"src":"337:23:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1893,"name":"address","nodeType":"ElementaryTypeName","src":"337:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"336:25:10"},"src":"308:54:10"},{"constant":true,"id":1899,"mutability":"constant","name":"FALLBACK_HANDLER_STORAGE_SLOT","nameLocation":"447:29:10","nodeType":"VariableDeclaration","scope":1948,"src":"421:124:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1897,"name":"bytes32","nodeType":"ElementaryTypeName","src":"421:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307836633961366334613339323834653337656431636635336433333735373764313432313261343837306662393736613433363663363933623933393931386435","id":1898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"479:66:10","typeDescriptions":{"typeIdentifier":"t_rational_49122629484629529244014240937346711770925847994644146912111677022347558721749_by_1","typeString":"int_const 4912...(69 digits omitted)...1749"},"value":"0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5"},"visibility":"internal"},{"body":{"id":1920,"nodeType":"Block","src":"751:1361:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1906,"name":"handler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1902,"src":"1897:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":1909,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1916:4:10","typeDescriptions":{"typeIdentifier":"t_contract$_FallbackManager_$1948","typeString":"contract FallbackManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_FallbackManager_$1948","typeString":"contract FallbackManager"}],"id":1908,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1908:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1907,"name":"address","nodeType":"ElementaryTypeName","src":"1908:7:10","typeDescriptions":{}}},"id":1910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1908:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1897:24:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753343030","id":1912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1923:7:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_f31aea2d758c1bc976ea4b6db8005af34a1f6d8fd0cba0d31e0228d78d6a5ae2","typeString":"literal_string \"GS400\""},"value":"GS400"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f31aea2d758c1bc976ea4b6db8005af34a1f6d8fd0cba0d31e0228d78d6a5ae2","typeString":"literal_string \"GS400\""}],"id":1905,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1889:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1889:42:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1914,"nodeType":"ExpressionStatement","src":"1889:42:10"},{"assignments":[1916],"declarations":[{"constant":false,"id":1916,"mutability":"mutable","name":"slot","nameLocation":"1950:4:10","nodeType":"VariableDeclaration","scope":1920,"src":"1942:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1915,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1942:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1918,"initialValue":{"id":1917,"name":"FALLBACK_HANDLER_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1899,"src":"1957:29:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1942:44:10"},{"AST":{"nativeSrc":"2061:45:10","nodeType":"YulBlock","src":"2061:45:10","statements":[{"expression":{"arguments":[{"name":"slot","nativeSrc":"2082:4:10","nodeType":"YulIdentifier","src":"2082:4:10"},{"name":"handler","nativeSrc":"2088:7:10","nodeType":"YulIdentifier","src":"2088:7:10"}],"functionName":{"name":"sstore","nativeSrc":"2075:6:10","nodeType":"YulIdentifier","src":"2075:6:10"},"nativeSrc":"2075:21:10","nodeType":"YulFunctionCall","src":"2075:21:10"},"nativeSrc":"2075:21:10","nodeType":"YulExpressionStatement","src":"2075:21:10"}]},"evmVersion":"paris","externalReferences":[{"declaration":1902,"isOffset":false,"isSlot":false,"src":"2088:7:10","valueSize":1},{"declaration":1916,"isOffset":false,"isSlot":false,"src":"2082:4:10","valueSize":1}],"id":1919,"nodeType":"InlineAssembly","src":"2052:54:10"}]},"documentation":{"id":1900,"nodeType":"StructuredDocumentation","src":"552:132:10","text":"  @notice Internal function to set the fallback handler.\n  @param handler contract to handle fallback calls."},"id":1921,"implemented":true,"kind":"function","modifiers":[],"name":"internalSetFallbackHandler","nameLocation":"698:26:10","nodeType":"FunctionDefinition","parameters":{"id":1903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1902,"mutability":"mutable","name":"handler","nameLocation":"733:7:10","nodeType":"VariableDeclaration","scope":1921,"src":"725:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1901,"name":"address","nodeType":"ElementaryTypeName","src":"725:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"724:17:10"},"returnParameters":{"id":1904,"nodeType":"ParameterList","parameters":[],"src":"751:0:10"},"scope":1948,"src":"689:1423:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1937,"nodeType":"Block","src":"2500:98:10","statements":[{"expression":{"arguments":[{"id":1930,"name":"handler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"2537:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1929,"name":"internalSetFallbackHandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1921,"src":"2510:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2510:35:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1932,"nodeType":"ExpressionStatement","src":"2510:35:10"},{"eventCall":{"arguments":[{"id":1934,"name":"handler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"2583:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1933,"name":"ChangedFallbackHandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1896,"src":"2560:22:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2560:31:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1936,"nodeType":"EmitStatement","src":"2555:36:10"}]},"documentation":{"id":1922,"nodeType":"StructuredDocumentation","src":"2118:314:10","text":" @notice Set Fallback Handler to `handler` for the Safe.\n @dev Only fallback calls without value and with data will be forwarded.\n      This can only be done via a Safe transaction.\n      Cannot be set to the Safe itself.\n @param handler contract to handle fallback calls."},"functionSelector":"f08a0323","id":1938,"implemented":true,"kind":"function","modifiers":[{"id":1927,"kind":"modifierInvocation","modifierName":{"id":1926,"name":"authorized","nameLocations":["2489:10:10"],"nodeType":"IdentifierPath","referencedDeclaration":3097,"src":"2489:10:10"},"nodeType":"ModifierInvocation","src":"2489:10:10"}],"name":"setFallbackHandler","nameLocation":"2446:18:10","nodeType":"FunctionDefinition","parameters":{"id":1925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1924,"mutability":"mutable","name":"handler","nameLocation":"2473:7:10","nodeType":"VariableDeclaration","scope":1938,"src":"2465:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1923,"name":"address","nodeType":"ElementaryTypeName","src":"2465:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2464:17:10"},"returnParameters":{"id":1928,"nodeType":"ParameterList","parameters":[],"src":"2500:0:10"},"scope":1948,"src":"2437:161:10","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1946,"nodeType":"Block","src":"3183:872:10","statements":[{"assignments":[1942],"declarations":[{"constant":false,"id":1942,"mutability":"mutable","name":"slot","nameLocation":"3201:4:10","nodeType":"VariableDeclaration","scope":1946,"src":"3193:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1941,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3193:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1944,"initialValue":{"id":1943,"name":"FALLBACK_HANDLER_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1899,"src":"3208:29:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3193:44:10"},{"AST":{"nativeSrc":"3312:737:10","nodeType":"YulBlock","src":"3312:737:10","statements":[{"nativeSrc":"3326:26:10","nodeType":"YulVariableDeclaration","src":"3326:26:10","value":{"arguments":[{"name":"slot","nativeSrc":"3347:4:10","nodeType":"YulIdentifier","src":"3347:4:10"}],"functionName":{"name":"sload","nativeSrc":"3341:5:10","nodeType":"YulIdentifier","src":"3341:5:10"},"nativeSrc":"3341:11:10","nodeType":"YulFunctionCall","src":"3341:11:10"},"variables":[{"name":"handler","nativeSrc":"3330:7:10","nodeType":"YulTypedName","src":"3330:7:10","type":""}]},{"body":{"nativeSrc":"3384:44:10","nodeType":"YulBlock","src":"3384:44:10","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3409:1:10","nodeType":"YulLiteral","src":"3409:1:10","type":"","value":"0"},{"kind":"number","nativeSrc":"3412:1:10","nodeType":"YulLiteral","src":"3412:1:10","type":"","value":"0"}],"functionName":{"name":"return","nativeSrc":"3402:6:10","nodeType":"YulIdentifier","src":"3402:6:10"},"nativeSrc":"3402:12:10","nodeType":"YulFunctionCall","src":"3402:12:10"},"nativeSrc":"3402:12:10","nodeType":"YulExpressionStatement","src":"3402:12:10"}]},"condition":{"arguments":[{"name":"handler","nativeSrc":"3375:7:10","nodeType":"YulIdentifier","src":"3375:7:10"}],"functionName":{"name":"iszero","nativeSrc":"3368:6:10","nodeType":"YulIdentifier","src":"3368:6:10"},"nativeSrc":"3368:15:10","nodeType":"YulFunctionCall","src":"3368:15:10"},"nativeSrc":"3365:63:10","nodeType":"YulIf","src":"3365:63:10"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3454:1:10","nodeType":"YulLiteral","src":"3454:1:10","type":"","value":"0"},{"kind":"number","nativeSrc":"3457:1:10","nodeType":"YulLiteral","src":"3457:1:10","type":"","value":"0"},{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"3460:12:10","nodeType":"YulIdentifier","src":"3460:12:10"},"nativeSrc":"3460:14:10","nodeType":"YulFunctionCall","src":"3460:14:10"}],"functionName":{"name":"calldatacopy","nativeSrc":"3441:12:10","nodeType":"YulIdentifier","src":"3441:12:10"},"nativeSrc":"3441:34:10","nodeType":"YulFunctionCall","src":"3441:34:10"},"nativeSrc":"3441:34:10","nodeType":"YulExpressionStatement","src":"3441:34:10"},{"expression":{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"3673:12:10","nodeType":"YulIdentifier","src":"3673:12:10"},"nativeSrc":"3673:14:10","nodeType":"YulFunctionCall","src":"3673:14:10"},{"arguments":[{"kind":"number","nativeSrc":"3693:2:10","nodeType":"YulLiteral","src":"3693:2:10","type":"","value":"96"},{"arguments":[],"functionName":{"name":"caller","nativeSrc":"3697:6:10","nodeType":"YulIdentifier","src":"3697:6:10"},"nativeSrc":"3697:8:10","nodeType":"YulFunctionCall","src":"3697:8:10"}],"functionName":{"name":"shl","nativeSrc":"3689:3:10","nodeType":"YulIdentifier","src":"3689:3:10"},"nativeSrc":"3689:17:10","nodeType":"YulFunctionCall","src":"3689:17:10"}],"functionName":{"name":"mstore","nativeSrc":"3666:6:10","nodeType":"YulIdentifier","src":"3666:6:10"},"nativeSrc":"3666:41:10","nodeType":"YulFunctionCall","src":"3666:41:10"},"nativeSrc":"3666:41:10","nodeType":"YulExpressionStatement","src":"3666:41:10"},{"nativeSrc":"3785:72:10","nodeType":"YulVariableDeclaration","src":"3785:72:10","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nativeSrc":"3805:3:10","nodeType":"YulIdentifier","src":"3805:3:10"},"nativeSrc":"3805:5:10","nodeType":"YulFunctionCall","src":"3805:5:10"},{"name":"handler","nativeSrc":"3812:7:10","nodeType":"YulIdentifier","src":"3812:7:10"},{"kind":"number","nativeSrc":"3821:1:10","nodeType":"YulLiteral","src":"3821:1:10","type":"","value":"0"},{"kind":"number","nativeSrc":"3824:1:10","nodeType":"YulLiteral","src":"3824:1:10","type":"","value":"0"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"3831:12:10","nodeType":"YulIdentifier","src":"3831:12:10"},"nativeSrc":"3831:14:10","nodeType":"YulFunctionCall","src":"3831:14:10"},{"kind":"number","nativeSrc":"3847:2:10","nodeType":"YulLiteral","src":"3847:2:10","type":"","value":"20"}],"functionName":{"name":"add","nativeSrc":"3827:3:10","nodeType":"YulIdentifier","src":"3827:3:10"},"nativeSrc":"3827:23:10","nodeType":"YulFunctionCall","src":"3827:23:10"},{"kind":"number","nativeSrc":"3852:1:10","nodeType":"YulLiteral","src":"3852:1:10","type":"","value":"0"},{"kind":"number","nativeSrc":"3855:1:10","nodeType":"YulLiteral","src":"3855:1:10","type":"","value":"0"}],"functionName":{"name":"call","nativeSrc":"3800:4:10","nodeType":"YulIdentifier","src":"3800:4:10"},"nativeSrc":"3800:57:10","nodeType":"YulFunctionCall","src":"3800:57:10"},"variables":[{"name":"success","nativeSrc":"3789:7:10","nodeType":"YulTypedName","src":"3789:7:10","type":""}]},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3885:1:10","nodeType":"YulLiteral","src":"3885:1:10","type":"","value":"0"},{"kind":"number","nativeSrc":"3888:1:10","nodeType":"YulLiteral","src":"3888:1:10","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nativeSrc":"3891:14:10","nodeType":"YulIdentifier","src":"3891:14:10"},"nativeSrc":"3891:16:10","nodeType":"YulFunctionCall","src":"3891:16:10"}],"functionName":{"name":"returndatacopy","nativeSrc":"3870:14:10","nodeType":"YulIdentifier","src":"3870:14:10"},"nativeSrc":"3870:38:10","nodeType":"YulFunctionCall","src":"3870:38:10"},"nativeSrc":"3870:38:10","nodeType":"YulExpressionStatement","src":"3870:38:10"},{"body":{"nativeSrc":"3940:59:10","nodeType":"YulBlock","src":"3940:59:10","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3965:1:10","nodeType":"YulLiteral","src":"3965:1:10","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nativeSrc":"3968:14:10","nodeType":"YulIdentifier","src":"3968:14:10"},"nativeSrc":"3968:16:10","nodeType":"YulFunctionCall","src":"3968:16:10"}],"functionName":{"name":"revert","nativeSrc":"3958:6:10","nodeType":"YulIdentifier","src":"3958:6:10"},"nativeSrc":"3958:27:10","nodeType":"YulFunctionCall","src":"3958:27:10"},"nativeSrc":"3958:27:10","nodeType":"YulExpressionStatement","src":"3958:27:10"}]},"condition":{"arguments":[{"name":"success","nativeSrc":"3931:7:10","nodeType":"YulIdentifier","src":"3931:7:10"}],"functionName":{"name":"iszero","nativeSrc":"3924:6:10","nodeType":"YulIdentifier","src":"3924:6:10"},"nativeSrc":"3924:15:10","nodeType":"YulFunctionCall","src":"3924:15:10"},"nativeSrc":"3921:78:10","nodeType":"YulIf","src":"3921:78:10"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4019:1:10","nodeType":"YulLiteral","src":"4019:1:10","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nativeSrc":"4022:14:10","nodeType":"YulIdentifier","src":"4022:14:10"},"nativeSrc":"4022:16:10","nodeType":"YulFunctionCall","src":"4022:16:10"}],"functionName":{"name":"return","nativeSrc":"4012:6:10","nodeType":"YulIdentifier","src":"4012:6:10"},"nativeSrc":"4012:27:10","nodeType":"YulFunctionCall","src":"4012:27:10"},"nativeSrc":"4012:27:10","nodeType":"YulExpressionStatement","src":"4012:27:10"}]},"evmVersion":"paris","externalReferences":[{"declaration":1942,"isOffset":false,"isSlot":false,"src":"3347:4:10","valueSize":1}],"id":1945,"nodeType":"InlineAssembly","src":"3303:746:10"}]},"id":1947,"implemented":true,"kind":"fallback","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1939,"nodeType":"ParameterList","parameters":[],"src":"3171:2:10"},"returnParameters":{"id":1940,"nodeType":"ParameterList","parameters":[],"src":"3183:0:10"},"scope":1948,"src":"3163:892:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1949,"src":"250:3807:10","usedErrors":[],"usedEvents":[1896]}],"src":"42:4016:10"},"id":10},"@safe-global/safe-contracts/contracts/base/GuardManager.sol":{"ast":{"absolutePath":"@safe-global/safe-contracts/contracts/base/GuardManager.sol","exportedSymbols":{"BaseGuard":[2015],"Enum":[3023],"Guard":[1989],"GuardManager":[2077],"IERC165":[3775],"SelfAuthorized":[3098]},"id":2078,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":1950,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:11"},{"absolutePath":"@safe-global/safe-contracts/contracts/common/Enum.sol","file":"../common/Enum.sol","id":1951,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2078,"sourceUnit":3024,"src":"75:28:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@safe-global/safe-contracts/contracts/common/SelfAuthorized.sol","file":"../common/SelfAuthorized.sol","id":1952,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2078,"sourceUnit":3099,"src":"104:38:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@safe-global/safe-contracts/contracts/interfaces/IERC165.sol","file":"../interfaces/IERC165.sol","id":1953,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2078,"sourceUnit":3776,"src":"143:35:11","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1954,"name":"IERC165","nameLocations":["199:7:11"],"nodeType":"IdentifierPath","referencedDeclaration":3775,"src":"199:7:11"},"id":1955,"nodeType":"InheritanceSpecifier","src":"199:7:11"}],"canonicalName":"Guard","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1989,"linearizedBaseContracts":[1989,3775],"name":"Guard","nameLocation":"190:5:11","nodeType":"ContractDefinition","nodes":[{"functionSelector":"75f0bb52","id":1981,"implemented":false,"kind":"function","modifiers":[],"name":"checkTransaction","nameLocation":"222:16:11","nodeType":"FunctionDefinition","parameters":{"id":1979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1957,"mutability":"mutable","name":"to","nameLocation":"256:2:11","nodeType":"VariableDeclaration","scope":1981,"src":"248:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1956,"name":"address","nodeType":"ElementaryTypeName","src":"248:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1959,"mutability":"mutable","name":"value","nameLocation":"276:5:11","nodeType":"VariableDeclaration","scope":1981,"src":"268:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1958,"name":"uint256","nodeType":"ElementaryTypeName","src":"268:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1961,"mutability":"mutable","name":"data","nameLocation":"304:4:11","nodeType":"VariableDeclaration","scope":1981,"src":"291:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1960,"name":"bytes","nodeType":"ElementaryTypeName","src":"291:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1964,"mutability":"mutable","name":"operation","nameLocation":"333:9:11","nodeType":"VariableDeclaration","scope":1981,"src":"318:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"},"typeName":{"id":1963,"nodeType":"UserDefinedTypeName","pathNode":{"id":1962,"name":"Enum.Operation","nameLocations":["318:4:11","323:9:11"],"nodeType":"IdentifierPath","referencedDeclaration":3022,"src":"318:14:11"},"referencedDeclaration":3022,"src":"318:14:11","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"}},"visibility":"internal"},{"constant":false,"id":1966,"mutability":"mutable","name":"safeTxGas","nameLocation":"360:9:11","nodeType":"VariableDeclaration","scope":1981,"src":"352:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1965,"name":"uint256","nodeType":"ElementaryTypeName","src":"352:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1968,"mutability":"mutable","name":"baseGas","nameLocation":"387:7:11","nodeType":"VariableDeclaration","scope":1981,"src":"379:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1967,"name":"uint256","nodeType":"ElementaryTypeName","src":"379:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1970,"mutability":"mutable","name":"gasPrice","nameLocation":"412:8:11","nodeType":"VariableDeclaration","scope":1981,"src":"404:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1969,"name":"uint256","nodeType":"ElementaryTypeName","src":"404:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1972,"mutability":"mutable","name":"gasToken","nameLocation":"438:8:11","nodeType":"VariableDeclaration","scope":1981,"src":"430:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1971,"name":"address","nodeType":"ElementaryTypeName","src":"430:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1974,"mutability":"mutable","name":"refundReceiver","nameLocation":"472:14:11","nodeType":"VariableDeclaration","scope":1981,"src":"456:30:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1973,"name":"address","nodeType":"ElementaryTypeName","src":"456:15:11","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1976,"mutability":"mutable","name":"signatures","nameLocation":"509:10:11","nodeType":"VariableDeclaration","scope":1981,"src":"496:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1975,"name":"bytes","nodeType":"ElementaryTypeName","src":"496:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1978,"mutability":"mutable","name":"msgSender","nameLocation":"537:9:11","nodeType":"VariableDeclaration","scope":1981,"src":"529:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1977,"name":"address","nodeType":"ElementaryTypeName","src":"529:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"238:314:11"},"returnParameters":{"id":1980,"nodeType":"ParameterList","parameters":[],"src":"561:0:11"},"scope":1989,"src":"213:349:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"93271368","id":1988,"implemented":false,"kind":"function","modifiers":[],"name":"checkAfterExecution","nameLocation":"577:19:11","nodeType":"FunctionDefinition","parameters":{"id":1986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1983,"mutability":"mutable","name":"txHash","nameLocation":"605:6:11","nodeType":"VariableDeclaration","scope":1988,"src":"597:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1982,"name":"bytes32","nodeType":"ElementaryTypeName","src":"597:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1985,"mutability":"mutable","name":"success","nameLocation":"618:7:11","nodeType":"VariableDeclaration","scope":1988,"src":"613:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1984,"name":"bool","nodeType":"ElementaryTypeName","src":"613:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"596:30:11"},"returnParameters":{"id":1987,"nodeType":"ParameterList","parameters":[],"src":"635:0:11"},"scope":1989,"src":"568:68:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2078,"src":"180:458:11","usedErrors":[],"usedEvents":[]},{"abstract":true,"baseContracts":[{"baseName":{"id":1990,"name":"Guard","nameLocations":["671:5:11"],"nodeType":"IdentifierPath","referencedDeclaration":1989,"src":"671:5:11"},"id":1991,"nodeType":"InheritanceSpecifier","src":"671:5:11"}],"canonicalName":"BaseGuard","contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":2015,"linearizedBaseContracts":[2015,1989,3775],"name":"BaseGuard","nameLocation":"658:9:11","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[3774],"body":{"id":2013,"nodeType":"Block","src":"776:158:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1999,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"805:11:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2001,"name":"Guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"825:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Guard_$1989_$","typeString":"type(contract Guard)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_Guard_$1989_$","typeString":"type(contract Guard)"}],"id":2000,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"820:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"820:11:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_Guard_$1989","typeString":"type(contract Guard)"}},"id":2003,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"832:11:11","memberName":"interfaceId","nodeType":"MemberAccess","src":"820:23:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"805:38:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2005,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"873:11:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2007,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3775,"src":"893:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$3775_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$3775_$","typeString":"type(contract IERC165)"}],"id":2006,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"888:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"888:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$3775","typeString":"type(contract IERC165)"}},"id":2009,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"902:11:11","memberName":"interfaceId","nodeType":"MemberAccess","src":"888:25:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"873:40:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"805:108:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1998,"id":2012,"nodeType":"Return","src":"786:127:11"}]},"functionSelector":"01ffc9a7","id":2014,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"692:17:11","nodeType":"FunctionDefinition","overrides":{"id":1995,"nodeType":"OverrideSpecifier","overrides":[],"src":"752:8:11"},"parameters":{"id":1994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1993,"mutability":"mutable","name":"interfaceId","nameLocation":"717:11:11","nodeType":"VariableDeclaration","scope":2014,"src":"710:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1992,"name":"bytes4","nodeType":"ElementaryTypeName","src":"710:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"709:20:11"},"returnParameters":{"id":1998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1997,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2014,"src":"770:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1996,"name":"bool","nodeType":"ElementaryTypeName","src":"770:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"769:6:11"},"scope":2015,"src":"683:251:11","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":2078,"src":"640:296:11","usedErrors":[],"usedEvents":[]},{"abstract":true,"baseContracts":[{"baseName":{"id":2017,"name":"SelfAuthorized","nameLocations":["1142:14:11"],"nodeType":"IdentifierPath","referencedDeclaration":3098,"src":"1142:14:11"},"id":2018,"nodeType":"InheritanceSpecifier","src":"1142:14:11"}],"canonicalName":"GuardManager","contractDependencies":[],"contractKind":"contract","documentation":{"id":2016,"nodeType":"StructuredDocumentation","src":"938:169:11","text":" @title Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":2077,"linearizedBaseContracts":[2077,3098],"name":"GuardManager","nameLocation":"1126:12:11","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"1151116914515bc0891ff9047a6cb32cf902546f83066499bcf8ba33d2353fa2","id":2022,"name":"ChangedGuard","nameLocation":"1169:12:11","nodeType":"EventDefinition","parameters":{"id":2021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2020,"indexed":true,"mutability":"mutable","name":"guard","nameLocation":"1198:5:11","nodeType":"VariableDeclaration","scope":2022,"src":"1182:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2019,"name":"address","nodeType":"ElementaryTypeName","src":"1182:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1181:23:11"},"src":"1163:42:11"},{"constant":true,"id":2025,"mutability":"constant","name":"GUARD_STORAGE_SLOT","nameLocation":"1285:18:11","nodeType":"VariableDeclaration","scope":2077,"src":"1259:113:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2023,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1259:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307834613230346636323063386335636364636133666435346430303362616464383562613530303433366134333166306362646134663535386339336333346338","id":2024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1306:66:11","typeDescriptions":{"typeIdentifier":"t_rational_33528237782592280163068556224972516439282563014722366175641814928123294921928_by_1","typeString":"int_const 3352...(69 digits omitted)...1928"},"value":"0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8"},"visibility":"internal"},{"body":{"id":2063,"nodeType":"Block","src":"2015:333:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2033,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2028,"src":"2029:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2046:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2035,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2038:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2034,"name":"address","nodeType":"ElementaryTypeName","src":"2038:7:11","typeDescriptions":{}}},"id":2037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2038:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2029:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2053,"nodeType":"IfStatement","src":"2025:123:11","trueBody":{"id":2052,"nodeType":"Block","src":"2050:98:11","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"arguments":[{"id":2045,"name":"Guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"2108:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Guard_$1989_$","typeString":"type(contract Guard)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_Guard_$1989_$","typeString":"type(contract Guard)"}],"id":2044,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2103:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2046,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2103:11:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_Guard_$1989","typeString":"type(contract Guard)"}},"id":2047,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2115:11:11","memberName":"interfaceId","nodeType":"MemberAccess","src":"2103:23:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[{"id":2041,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2028,"src":"2078:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2040,"name":"Guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"2072:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Guard_$1989_$","typeString":"type(contract Guard)"}},"id":2042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2072:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Guard_$1989","typeString":"contract Guard"}},"id":2043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2085:17:11","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3774,"src":"2072:30:11","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view external returns (bool)"}},"id":2048,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2072:55:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753333030","id":2049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2129:7:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c2a4c0da6073a4ef35f113e24388fa780c351ad02fefd784ffba62884174edf0","typeString":"literal_string \"GS300\""},"value":"GS300"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c2a4c0da6073a4ef35f113e24388fa780c351ad02fefd784ffba62884174edf0","typeString":"literal_string \"GS300\""}],"id":2039,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2064:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2050,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2064:73:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2051,"nodeType":"ExpressionStatement","src":"2064:73:11"}]}},{"assignments":[2055],"declarations":[{"constant":false,"id":2055,"mutability":"mutable","name":"slot","nameLocation":"2165:4:11","nodeType":"VariableDeclaration","scope":2063,"src":"2157:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2054,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2157:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2057,"initialValue":{"id":2056,"name":"GUARD_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2025,"src":"2172:18:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2157:33:11"},{"AST":{"nativeSrc":"2265:43:11","nodeType":"YulBlock","src":"2265:43:11","statements":[{"expression":{"arguments":[{"name":"slot","nativeSrc":"2286:4:11","nodeType":"YulIdentifier","src":"2286:4:11"},{"name":"guard","nativeSrc":"2292:5:11","nodeType":"YulIdentifier","src":"2292:5:11"}],"functionName":{"name":"sstore","nativeSrc":"2279:6:11","nodeType":"YulIdentifier","src":"2279:6:11"},"nativeSrc":"2279:19:11","nodeType":"YulFunctionCall","src":"2279:19:11"},"nativeSrc":"2279:19:11","nodeType":"YulExpressionStatement","src":"2279:19:11"}]},"evmVersion":"paris","externalReferences":[{"declaration":2028,"isOffset":false,"isSlot":false,"src":"2292:5:11","valueSize":1},{"declaration":2055,"isOffset":false,"isSlot":false,"src":"2286:4:11","valueSize":1}],"id":2058,"nodeType":"InlineAssembly","src":"2256:52:11"},{"eventCall":{"arguments":[{"id":2060,"name":"guard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2028,"src":"2335:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2059,"name":"ChangedGuard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2022,"src":"2322:12:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2061,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2322:19:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2062,"nodeType":"EmitStatement","src":"2317:24:11"}]},"documentation":{"id":2026,"nodeType":"StructuredDocumentation","src":"1379:578:11","text":" @dev Set a guard that checks transactions before execution\n      This can only be done via a Safe transaction.\n      ⚠️ IMPORTANT: Since a guard has full power to block Safe transaction execution,\n        a broken guard can cause a denial of service for the Safe. Make sure to carefully\n        audit the guard code and design recovery mechanisms.\n @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\n @param guard The address of the guard to be used or the 0 address to disable the guard"},"functionSelector":"e19a9dd9","id":2064,"implemented":true,"kind":"function","modifiers":[{"id":2031,"kind":"modifierInvocation","modifierName":{"id":2030,"name":"authorized","nameLocations":["2004:10:11"],"nodeType":"IdentifierPath","referencedDeclaration":3097,"src":"2004:10:11"},"nodeType":"ModifierInvocation","src":"2004:10:11"}],"name":"setGuard","nameLocation":"1971:8:11","nodeType":"FunctionDefinition","parameters":{"id":2029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2028,"mutability":"mutable","name":"guard","nameLocation":"1988:5:11","nodeType":"VariableDeclaration","scope":2064,"src":"1980:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2027,"name":"address","nodeType":"ElementaryTypeName","src":"1980:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1979:15:11"},"returnParameters":{"id":2032,"nodeType":"ParameterList","parameters":[],"src":"2015:0:11"},"scope":2077,"src":"1962:386:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2075,"nodeType":"Block","src":"2770:168:11","statements":[{"assignments":[2071],"declarations":[{"constant":false,"id":2071,"mutability":"mutable","name":"slot","nameLocation":"2788:4:11","nodeType":"VariableDeclaration","scope":2075,"src":"2780:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2070,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2780:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2073,"initialValue":{"id":2072,"name":"GUARD_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2025,"src":"2795:18:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2780:33:11"},{"AST":{"nativeSrc":"2888:44:11","nodeType":"YulBlock","src":"2888:44:11","statements":[{"nativeSrc":"2902:20:11","nodeType":"YulAssignment","src":"2902:20:11","value":{"arguments":[{"name":"slot","nativeSrc":"2917:4:11","nodeType":"YulIdentifier","src":"2917:4:11"}],"functionName":{"name":"sload","nativeSrc":"2911:5:11","nodeType":"YulIdentifier","src":"2911:5:11"},"nativeSrc":"2911:11:11","nodeType":"YulFunctionCall","src":"2911:11:11"},"variableNames":[{"name":"guard","nativeSrc":"2902:5:11","nodeType":"YulIdentifier","src":"2902:5:11"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2068,"isOffset":false,"isSlot":false,"src":"2902:5:11","valueSize":1},{"declaration":2071,"isOffset":false,"isSlot":false,"src":"2917:4:11","valueSize":1}],"id":2074,"nodeType":"InlineAssembly","src":"2879:53:11"}]},"documentation":{"id":2065,"nodeType":"StructuredDocumentation","src":"2354:353:11","text":" @dev Internal method to retrieve the current guard\n      We do not have a public method because we're short on bytecode size limit,\n      to retrieve the guard address, one can use `getStorageAt` from `StorageAccessible` contract\n      with the slot `GUARD_STORAGE_SLOT`\n @return guard The address of the guard"},"id":2076,"implemented":true,"kind":"function","modifiers":[],"name":"getGuard","nameLocation":"2721:8:11","nodeType":"FunctionDefinition","parameters":{"id":2066,"nodeType":"ParameterList","parameters":[],"src":"2729:2:11"},"returnParameters":{"id":2069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2068,"mutability":"mutable","name":"guard","nameLocation":"2763:5:11","nodeType":"VariableDeclaration","scope":2076,"src":"2755:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2067,"name":"address","nodeType":"ElementaryTypeName","src":"2755:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2754:15:11"},"scope":2077,"src":"2712:226:11","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":2078,"src":"1108:1832:11","usedErrors":[],"usedEvents":[2022]}],"src":"42:2899:11"},"id":11},"@safe-global/safe-contracts/contracts/base/ModuleManager.sol":{"ast":{"absolutePath":"@safe-global/safe-contracts/contracts/base/ModuleManager.sol","exportedSymbols":{"Enum":[3023],"Executor":[1886],"ModuleManager":[2503],"SelfAuthorized":[3098]},"id":2504,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":2079,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:12"},{"absolutePath":"@safe-global/safe-contracts/contracts/common/Enum.sol","file":"../common/Enum.sol","id":2080,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2504,"sourceUnit":3024,"src":"74:28:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@safe-global/safe-contracts/contracts/common/SelfAuthorized.sol","file":"../common/SelfAuthorized.sol","id":2081,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2504,"sourceUnit":3099,"src":"103:38:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@safe-global/safe-contracts/contracts/base/Executor.sol","file":"./Executor.sol","id":2082,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2504,"sourceUnit":1887,"src":"142:24:12","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2084,"name":"SelfAuthorized","nameLocations":["697:14:12"],"nodeType":"IdentifierPath","referencedDeclaration":3098,"src":"697:14:12"},"id":2085,"nodeType":"InheritanceSpecifier","src":"697:14:12"},{"baseName":{"id":2086,"name":"Executor","nameLocations":["713:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":1886,"src":"713:8:12"},"id":2087,"nodeType":"InheritanceSpecifier","src":"713:8:12"}],"canonicalName":"ModuleManager","contractDependencies":[],"contractKind":"contract","documentation":{"id":2083,"nodeType":"StructuredDocumentation","src":"168:493:12","text":" @title Module Manager - A contract managing Safe modules\n @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\n⚠️ WARNING: Modules are a security risk since they can execute arbitrary transactions, \nso only trusted and audited modules should be added to a Safe. A malicious module can\ncompletely takeover a Safe.\n @author Stefan George - @Georgi87\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":2503,"linearizedBaseContracts":[2503,1886,3098],"name":"ModuleManager","nameLocation":"680:13:12","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"ecdf3a3effea5783a3c4c2140e677577666428d44ed9d474a0b3a4c9943f8440","id":2091,"name":"EnabledModule","nameLocation":"734:13:12","nodeType":"EventDefinition","parameters":{"id":2090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2089,"indexed":true,"mutability":"mutable","name":"module","nameLocation":"764:6:12","nodeType":"VariableDeclaration","scope":2091,"src":"748:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2088,"name":"address","nodeType":"ElementaryTypeName","src":"748:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"747:24:12"},"src":"728:44:12"},{"anonymous":false,"eventSelector":"aab4fa2b463f581b2b32cb3b7e3b704b9ce37cc209b5fb4d77e593ace4054276","id":2095,"name":"DisabledModule","nameLocation":"783:14:12","nodeType":"EventDefinition","parameters":{"id":2094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2093,"indexed":true,"mutability":"mutable","name":"module","nameLocation":"814:6:12","nodeType":"VariableDeclaration","scope":2095,"src":"798:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2092,"name":"address","nodeType":"ElementaryTypeName","src":"798:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"797:24:12"},"src":"777:45:12"},{"anonymous":false,"eventSelector":"6895c13664aa4f67288b25d7a21d7aaa34916e355fb9b6fae0a139a9085becb8","id":2099,"name":"ExecutionFromModuleSuccess","nameLocation":"833:26:12","nodeType":"EventDefinition","parameters":{"id":2098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2097,"indexed":true,"mutability":"mutable","name":"module","nameLocation":"876:6:12","nodeType":"VariableDeclaration","scope":2099,"src":"860:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2096,"name":"address","nodeType":"ElementaryTypeName","src":"860:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"859:24:12"},"src":"827:57:12"},{"anonymous":false,"eventSelector":"acd2c8702804128fdb0db2bb49f6d127dd0181c13fd45dbfe16de0930e2bd375","id":2103,"name":"ExecutionFromModuleFailure","nameLocation":"895:26:12","nodeType":"EventDefinition","parameters":{"id":2102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2101,"indexed":true,"mutability":"mutable","name":"module","nameLocation":"938:6:12","nodeType":"VariableDeclaration","scope":2103,"src":"922:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2100,"name":"address","nodeType":"ElementaryTypeName","src":"922:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"921:24:12"},"src":"889:57:12"},{"constant":true,"id":2109,"mutability":"constant","name":"SENTINEL_MODULES","nameLocation":"978:16:12","nodeType":"VariableDeclaration","scope":2503,"src":"952:57:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2104,"name":"address","nodeType":"ElementaryTypeName","src":"952:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"hexValue":"307831","id":2107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1005:3:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"0x1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2106,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"997:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2105,"name":"address","nodeType":"ElementaryTypeName","src":"997:7:12","typeDescriptions":{}}},"id":2108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"997:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2113,"mutability":"mutable","name":"modules","nameLocation":"1053:7:12","nodeType":"VariableDeclaration","scope":2503,"src":"1016:44:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"typeName":{"id":2112,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2110,"name":"address","nodeType":"ElementaryTypeName","src":"1024:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1016:27:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2111,"name":"address","nodeType":"ElementaryTypeName","src":"1035:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"internal"},{"body":{"id":2171,"nodeType":"Block","src":"1429:388:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2122,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"1447:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2124,"indexExpression":{"id":2123,"name":"SENTINEL_MODULES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"1455:16:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1447:25:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1484:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2126,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1476:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2125,"name":"address","nodeType":"ElementaryTypeName","src":"1476:7:12","typeDescriptions":{}}},"id":2128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1476:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1447:39:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753313030","id":2130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1488:7:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_8c9c6f726a0896ef73f47c5bcc7192641db350a8b0b2e1f61e0f0c694ec59426","typeString":"literal_string \"GS100\""},"value":"GS100"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8c9c6f726a0896ef73f47c5bcc7192641db350a8b0b2e1f61e0f0c694ec59426","typeString":"literal_string \"GS100\""}],"id":2121,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1439:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1439:57:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2132,"nodeType":"ExpressionStatement","src":"1439:57:12"},{"expression":{"id":2137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2133,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"1506:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2135,"indexExpression":{"id":2134,"name":"SENTINEL_MODULES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"1514:16:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1506:25:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2136,"name":"SENTINEL_MODULES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"1534:16:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1506:44:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2138,"nodeType":"ExpressionStatement","src":"1506:44:12"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2139,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2116,"src":"1564:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1578:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2141,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1570:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2140,"name":"address","nodeType":"ElementaryTypeName","src":"1570:7:12","typeDescriptions":{}}},"id":2143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1570:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1564:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2170,"nodeType":"IfStatement","src":"1560:251:12","trueBody":{"id":2169,"nodeType":"Block","src":"1582:229:12","statements":[{"expression":{"arguments":[{"arguments":[{"id":2147,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2116,"src":"1615:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2146,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2502,"src":"1604:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1604:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753303032","id":2149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1620:7:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_6815e8af672f0836acc6449b9d3a4cb88965a5b47ac95c5e5335f73ab586c8d0","typeString":"literal_string \"GS002\""},"value":"GS002"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6815e8af672f0836acc6449b9d3a4cb88965a5b47ac95c5e5335f73ab586c8d0","typeString":"literal_string \"GS002\""}],"id":2145,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1596:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1596:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2151,"nodeType":"ExpressionStatement","src":"1596:32:12"},{"expression":{"arguments":[{"arguments":[{"id":2154,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2116,"src":"1730:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":2155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1734:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2156,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"1737:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"expression":{"id":2157,"name":"Enum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3023,"src":"1743:4:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Enum_$3023_$","typeString":"type(contract Enum)"}},"id":2158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1748:9:12","memberName":"Operation","nodeType":"MemberAccess","referencedDeclaration":3022,"src":"1743:14:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Operation_$3022_$","typeString":"type(enum Enum.Operation)"}},"id":2159,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1758:12:12","memberName":"DelegateCall","nodeType":"MemberAccess","referencedDeclaration":3021,"src":"1743:27:12","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"}},{"expression":{"arguments":[{"id":2162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1777:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2161,"name":"uint256","nodeType":"ElementaryTypeName","src":"1777:7:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":2160,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1772:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1772:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":2164,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1786:3:12","memberName":"max","nodeType":"MemberAccess","src":"1772:17:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2153,"name":"execute","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"1722:7:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_enum$_Operation_$3022_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory,enum Enum.Operation,uint256) returns (bool)"}},"id":2165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1722:68:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753303030","id":2166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1792:7:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_3fdb21530a98d914fa570cd548d7a3608c11195b5a11ec44ecd149309d9dcced","typeString":"literal_string \"GS000\""},"value":"GS000"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3fdb21530a98d914fa570cd548d7a3608c11195b5a11ec44ecd149309d9dcced","typeString":"literal_string \"GS000\""}],"id":2152,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1714:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1714:86:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2168,"nodeType":"ExpressionStatement","src":"1714:86:12"}]}}]},"documentation":{"id":2114,"nodeType":"StructuredDocumentation","src":"1067:295:12","text":" @notice Setup function sets the initial storage of the contract.\n         Optionally executes a delegate call to another contract to setup the modules.\n @param to Optional destination address of call to execute.\n @param data Optional data of call to execute."},"id":2172,"implemented":true,"kind":"function","modifiers":[],"name":"setupModules","nameLocation":"1376:12:12","nodeType":"FunctionDefinition","parameters":{"id":2119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2116,"mutability":"mutable","name":"to","nameLocation":"1397:2:12","nodeType":"VariableDeclaration","scope":2172,"src":"1389:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2115,"name":"address","nodeType":"ElementaryTypeName","src":"1389:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2118,"mutability":"mutable","name":"data","nameLocation":"1414:4:12","nodeType":"VariableDeclaration","scope":2172,"src":"1401:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2117,"name":"bytes","nodeType":"ElementaryTypeName","src":"1401:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1388:31:12"},"returnParameters":{"id":2120,"nodeType":"ParameterList","parameters":[],"src":"1429:0:12"},"scope":2503,"src":"1367:450:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2224,"nodeType":"Block","src":"2057:370:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2181,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2175,"src":"2129:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2147:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2183,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2139:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2182,"name":"address","nodeType":"ElementaryTypeName","src":"2139:7:12","typeDescriptions":{}}},"id":2185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2139:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2129:20:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2187,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2175,"src":"2153:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2188,"name":"SENTINEL_MODULES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"2163:16:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2153:26:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2129:50:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753313031","id":2191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2181:7:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_eab5e6af6960e6bb32b59bfd1d877c9c1728e4c18fa7a83eb40baa1c0f05f61f","typeString":"literal_string \"GS101\""},"value":"GS101"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_eab5e6af6960e6bb32b59bfd1d877c9c1728e4c18fa7a83eb40baa1c0f05f61f","typeString":"literal_string \"GS101\""}],"id":2180,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2121:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2121:68:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2193,"nodeType":"ExpressionStatement","src":"2121:68:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2195,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"2248:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2197,"indexExpression":{"id":2196,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2175,"src":"2256:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2248:15:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2275:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2199,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2267:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2198,"name":"address","nodeType":"ElementaryTypeName","src":"2267:7:12","typeDescriptions":{}}},"id":2201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2267:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2248:29:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753313032","id":2203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2279:7:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_bfe16ebc2bd5d2fdfe588255b31e648718f9ede037848519acb772cd4f042f12","typeString":"literal_string \"GS102\""},"value":"GS102"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_bfe16ebc2bd5d2fdfe588255b31e648718f9ede037848519acb772cd4f042f12","typeString":"literal_string \"GS102\""}],"id":2194,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2240:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2240:47:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2205,"nodeType":"ExpressionStatement","src":"2240:47:12"},{"expression":{"id":2212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2206,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"2297:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2208,"indexExpression":{"id":2207,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2175,"src":"2305:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2297:15:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2209,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"2315:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2211,"indexExpression":{"id":2210,"name":"SENTINEL_MODULES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"2323:16:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2315:25:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2297:43:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2213,"nodeType":"ExpressionStatement","src":"2297:43:12"},{"expression":{"id":2218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2214,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"2350:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2216,"indexExpression":{"id":2215,"name":"SENTINEL_MODULES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"2358:16:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2350:25:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2217,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2175,"src":"2378:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2350:34:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2219,"nodeType":"ExpressionStatement","src":"2350:34:12"},{"eventCall":{"arguments":[{"id":2221,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2175,"src":"2413:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2220,"name":"EnabledModule","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2091,"src":"2399:13:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2399:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2223,"nodeType":"EmitStatement","src":"2394:26:12"}]},"documentation":{"id":2173,"nodeType":"StructuredDocumentation","src":"1823:173:12","text":" @notice Enables the module `module` for the Safe.\n @dev This can only be done via a Safe transaction.\n @param module Module to be whitelisted."},"functionSelector":"610b5925","id":2225,"implemented":true,"kind":"function","modifiers":[{"id":2178,"kind":"modifierInvocation","modifierName":{"id":2177,"name":"authorized","nameLocations":["2046:10:12"],"nodeType":"IdentifierPath","referencedDeclaration":3097,"src":"2046:10:12"},"nodeType":"ModifierInvocation","src":"2046:10:12"}],"name":"enableModule","nameLocation":"2010:12:12","nodeType":"FunctionDefinition","parameters":{"id":2176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2175,"mutability":"mutable","name":"module","nameLocation":"2031:6:12","nodeType":"VariableDeclaration","scope":2225,"src":"2023:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2174,"name":"address","nodeType":"ElementaryTypeName","src":"2023:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2022:16:12"},"returnParameters":{"id":2179,"nodeType":"ParameterList","parameters":[],"src":"2057:0:12"},"scope":2503,"src":"2001:426:12","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2279,"nodeType":"Block","src":"2754:346:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2236,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"2854:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2872:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2238,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2864:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2237,"name":"address","nodeType":"ElementaryTypeName","src":"2864:7:12","typeDescriptions":{}}},"id":2240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2864:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2854:20:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2242,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"2878:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2243,"name":"SENTINEL_MODULES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"2888:16:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2878:26:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2854:50:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753313031","id":2246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2906:7:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_eab5e6af6960e6bb32b59bfd1d877c9c1728e4c18fa7a83eb40baa1c0f05f61f","typeString":"literal_string \"GS101\""},"value":"GS101"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_eab5e6af6960e6bb32b59bfd1d877c9c1728e4c18fa7a83eb40baa1c0f05f61f","typeString":"literal_string \"GS101\""}],"id":2235,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2846:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2846:68:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2248,"nodeType":"ExpressionStatement","src":"2846:68:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2250,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"2932:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2252,"indexExpression":{"id":2251,"name":"prevModule","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2228,"src":"2940:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2932:19:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2253,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"2955:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2932:29:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753313033","id":2255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2963:7:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_7295c339622429fbd8194417b44c0a2c972675caa6bf424cf588d99024c608be","typeString":"literal_string \"GS103\""},"value":"GS103"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7295c339622429fbd8194417b44c0a2c972675caa6bf424cf588d99024c608be","typeString":"literal_string \"GS103\""}],"id":2249,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2924:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2924:47:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2257,"nodeType":"ExpressionStatement","src":"2924:47:12"},{"expression":{"id":2264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2258,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"2981:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2260,"indexExpression":{"id":2259,"name":"prevModule","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2228,"src":"2989:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2981:19:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2261,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"3003:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2263,"indexExpression":{"id":2262,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"3011:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3003:15:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2981:37:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2265,"nodeType":"ExpressionStatement","src":"2981:37:12"},{"expression":{"id":2273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2266,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"3028:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2268,"indexExpression":{"id":2267,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"3036:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3028:15:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":2271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3054:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2270,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3046:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2269,"name":"address","nodeType":"ElementaryTypeName","src":"3046:7:12","typeDescriptions":{}}},"id":2272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3046:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3028:28:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2274,"nodeType":"ExpressionStatement","src":"3028:28:12"},{"eventCall":{"arguments":[{"id":2276,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"3086:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2275,"name":"DisabledModule","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"3071:14:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3071:22:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2278,"nodeType":"EmitStatement","src":"3066:27:12"}]},"documentation":{"id":2226,"nodeType":"StructuredDocumentation","src":"2433:239:12","text":" @notice Disables the module `module` for the Safe.\n @dev This can only be done via a Safe transaction.\n @param prevModule Previous module in the modules linked list.\n @param module Module to be removed."},"functionSelector":"e009cfde","id":2280,"implemented":true,"kind":"function","modifiers":[{"id":2233,"kind":"modifierInvocation","modifierName":{"id":2232,"name":"authorized","nameLocations":["2743:10:12"],"nodeType":"IdentifierPath","referencedDeclaration":3097,"src":"2743:10:12"},"nodeType":"ModifierInvocation","src":"2743:10:12"}],"name":"disableModule","nameLocation":"2686:13:12","nodeType":"FunctionDefinition","parameters":{"id":2231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2228,"mutability":"mutable","name":"prevModule","nameLocation":"2708:10:12","nodeType":"VariableDeclaration","scope":2280,"src":"2700:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2227,"name":"address","nodeType":"ElementaryTypeName","src":"2700:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2230,"mutability":"mutable","name":"module","nameLocation":"2728:6:12","nodeType":"VariableDeclaration","scope":2280,"src":"2720:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2229,"name":"address","nodeType":"ElementaryTypeName","src":"2720:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2699:36:12"},"returnParameters":{"id":2234,"nodeType":"ParameterList","parameters":[],"src":"2754:0:12"},"scope":2503,"src":"2677:423:12","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2339,"nodeType":"Block","src":"3805:411:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2296,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3872:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3876:6:12","memberName":"sender","nodeType":"MemberAccess","src":"3872:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2298,"name":"SENTINEL_MODULES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"3886:16:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3872:30:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2300,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"3906:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2303,"indexExpression":{"expression":{"id":2301,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3914:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3918:6:12","memberName":"sender","nodeType":"MemberAccess","src":"3914:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3906:19:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3937:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2305,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3929:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2304,"name":"address","nodeType":"ElementaryTypeName","src":"3929:7:12","typeDescriptions":{}}},"id":2307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3929:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3906:33:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3872:67:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753313034","id":2310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3941:7:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_b44c13dad2cf265cdd10f957c112238232519dfdaff7245a6824a63db294cf23","typeString":"literal_string \"GS104\""},"value":"GS104"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b44c13dad2cf265cdd10f957c112238232519dfdaff7245a6824a63db294cf23","typeString":"literal_string \"GS104\""}],"id":2295,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3864:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3864:85:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2312,"nodeType":"ExpressionStatement","src":"3864:85:12"},{"expression":{"id":2325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2313,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"4021:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2315,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2283,"src":"4039:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2316,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2285,"src":"4043:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2317,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2287,"src":"4050:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2318,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2290,"src":"4056:9:12","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"}},{"expression":{"arguments":[{"id":2321,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4072:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2320,"name":"uint256","nodeType":"ElementaryTypeName","src":"4072:7:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":2319,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4067:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4067:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":2323,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4081:3:12","memberName":"max","nodeType":"MemberAccess","src":"4067:17:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2314,"name":"execute","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"4031:7:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_enum$_Operation_$3022_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory,enum Enum.Operation,uint256) returns (bool)"}},"id":2324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4031:54:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4021:64:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2326,"nodeType":"ExpressionStatement","src":"4021:64:12"},{"condition":{"id":2327,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"4099:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"eventCall":{"arguments":[{"expression":{"id":2334,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4198:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4202:6:12","memberName":"sender","nodeType":"MemberAccess","src":"4198:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2333,"name":"ExecutionFromModuleFailure","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"4171:26:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4171:38:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2337,"nodeType":"EmitStatement","src":"4166:43:12"},"id":2338,"nodeType":"IfStatement","src":"4095:114:12","trueBody":{"eventCall":{"arguments":[{"expression":{"id":2329,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4140:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4144:6:12","memberName":"sender","nodeType":"MemberAccess","src":"4140:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2328,"name":"ExecutionFromModuleSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2099,"src":"4113:26:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4113:38:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2332,"nodeType":"EmitStatement","src":"4108:43:12"}}]},"documentation":{"id":2281,"nodeType":"StructuredDocumentation","src":"3106:511:12","text":" @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\n @dev Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\n @param to Destination address of module transaction.\n @param value Ether value of module transaction.\n @param data Data payload of module transaction.\n @param operation Operation type of module transaction.\n @return success Boolean flag indicating if the call succeeded."},"functionSelector":"468721a7","id":2340,"implemented":true,"kind":"function","modifiers":[],"name":"execTransactionFromModule","nameLocation":"3631:25:12","nodeType":"FunctionDefinition","parameters":{"id":2291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2283,"mutability":"mutable","name":"to","nameLocation":"3674:2:12","nodeType":"VariableDeclaration","scope":2340,"src":"3666:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2282,"name":"address","nodeType":"ElementaryTypeName","src":"3666:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2285,"mutability":"mutable","name":"value","nameLocation":"3694:5:12","nodeType":"VariableDeclaration","scope":2340,"src":"3686:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2284,"name":"uint256","nodeType":"ElementaryTypeName","src":"3686:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2287,"mutability":"mutable","name":"data","nameLocation":"3722:4:12","nodeType":"VariableDeclaration","scope":2340,"src":"3709:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2286,"name":"bytes","nodeType":"ElementaryTypeName","src":"3709:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2290,"mutability":"mutable","name":"operation","nameLocation":"3751:9:12","nodeType":"VariableDeclaration","scope":2340,"src":"3736:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"},"typeName":{"id":2289,"nodeType":"UserDefinedTypeName","pathNode":{"id":2288,"name":"Enum.Operation","nameLocations":["3736:4:12","3741:9:12"],"nodeType":"IdentifierPath","referencedDeclaration":3022,"src":"3736:14:12"},"referencedDeclaration":3022,"src":"3736:14:12","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"}},"visibility":"internal"}],"src":"3656:110:12"},"returnParameters":{"id":2294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2293,"mutability":"mutable","name":"success","nameLocation":"3796:7:12","nodeType":"VariableDeclaration","scope":2340,"src":"3791:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2292,"name":"bool","nodeType":"ElementaryTypeName","src":"3791:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3790:14:12"},"scope":2503,"src":"3622:594:12","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2367,"nodeType":"Block","src":"4917:749:12","statements":[{"expression":{"id":2364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2357,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2353,"src":"4927:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2359,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2343,"src":"4963:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2360,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2345,"src":"4967:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2361,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2347,"src":"4974:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2362,"name":"operation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2350,"src":"4980:9:12","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"}],"id":2358,"name":"execTransactionFromModule","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"4937:25:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_enum$_Operation_$3022_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory,enum Enum.Operation) returns (bool)"}},"id":2363,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4937:53:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4927:63:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2365,"nodeType":"ExpressionStatement","src":"4927:63:12"},{"AST":{"nativeSrc":"5065:595:12","nodeType":"YulBlock","src":"5065:595:12","statements":[{"nativeSrc":"5120:22:12","nodeType":"YulVariableDeclaration","src":"5120:22:12","value":{"arguments":[{"kind":"number","nativeSrc":"5137:4:12","nodeType":"YulLiteral","src":"5137:4:12","type":"","value":"0x40"}],"functionName":{"name":"mload","nativeSrc":"5131:5:12","nodeType":"YulIdentifier","src":"5131:5:12"},"nativeSrc":"5131:11:12","nodeType":"YulFunctionCall","src":"5131:11:12"},"variables":[{"name":"ptr","nativeSrc":"5124:3:12","nodeType":"YulTypedName","src":"5124:3:12","type":""}]},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5342:4:12","nodeType":"YulLiteral","src":"5342:4:12","type":"","value":"0x40"},{"arguments":[{"name":"ptr","nativeSrc":"5352:3:12","nodeType":"YulIdentifier","src":"5352:3:12"},{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nativeSrc":"5361:14:12","nodeType":"YulIdentifier","src":"5361:14:12"},"nativeSrc":"5361:16:12","nodeType":"YulFunctionCall","src":"5361:16:12"},{"kind":"number","nativeSrc":"5379:4:12","nodeType":"YulLiteral","src":"5379:4:12","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5357:3:12","nodeType":"YulIdentifier","src":"5357:3:12"},"nativeSrc":"5357:27:12","nodeType":"YulFunctionCall","src":"5357:27:12"}],"functionName":{"name":"add","nativeSrc":"5348:3:12","nodeType":"YulIdentifier","src":"5348:3:12"},"nativeSrc":"5348:37:12","nodeType":"YulFunctionCall","src":"5348:37:12"}],"functionName":{"name":"mstore","nativeSrc":"5335:6:12","nodeType":"YulIdentifier","src":"5335:6:12"},"nativeSrc":"5335:51:12","nodeType":"YulFunctionCall","src":"5335:51:12"},"nativeSrc":"5335:51:12","nodeType":"YulExpressionStatement","src":"5335:51:12"},{"expression":{"arguments":[{"name":"ptr","nativeSrc":"5436:3:12","nodeType":"YulIdentifier","src":"5436:3:12"},{"arguments":[],"functionName":{"name":"returndatasize","nativeSrc":"5441:14:12","nodeType":"YulIdentifier","src":"5441:14:12"},"nativeSrc":"5441:16:12","nodeType":"YulFunctionCall","src":"5441:16:12"}],"functionName":{"name":"mstore","nativeSrc":"5429:6:12","nodeType":"YulIdentifier","src":"5429:6:12"},"nativeSrc":"5429:29:12","nodeType":"YulFunctionCall","src":"5429:29:12"},"nativeSrc":"5429:29:12","nodeType":"YulExpressionStatement","src":"5429:29:12"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"5520:3:12","nodeType":"YulIdentifier","src":"5520:3:12"},{"kind":"number","nativeSrc":"5525:4:12","nodeType":"YulLiteral","src":"5525:4:12","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5516:3:12","nodeType":"YulIdentifier","src":"5516:3:12"},"nativeSrc":"5516:14:12","nodeType":"YulFunctionCall","src":"5516:14:12"},{"kind":"number","nativeSrc":"5532:1:12","nodeType":"YulLiteral","src":"5532:1:12","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nativeSrc":"5535:14:12","nodeType":"YulIdentifier","src":"5535:14:12"},"nativeSrc":"5535:16:12","nodeType":"YulFunctionCall","src":"5535:16:12"}],"functionName":{"name":"returndatacopy","nativeSrc":"5501:14:12","nodeType":"YulIdentifier","src":"5501:14:12"},"nativeSrc":"5501:51:12","nodeType":"YulFunctionCall","src":"5501:51:12"},"nativeSrc":"5501:51:12","nodeType":"YulExpressionStatement","src":"5501:51:12"},{"nativeSrc":"5633:17:12","nodeType":"YulAssignment","src":"5633:17:12","value":{"name":"ptr","nativeSrc":"5647:3:12","nodeType":"YulIdentifier","src":"5647:3:12"},"variableNames":[{"name":"returnData","nativeSrc":"5633:10:12","nodeType":"YulIdentifier","src":"5633:10:12"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2355,"isOffset":false,"isSlot":false,"src":"5633:10:12","valueSize":1}],"id":2366,"nodeType":"InlineAssembly","src":"5056:604:12"}]},"documentation":{"id":2341,"nodeType":"StructuredDocumentation","src":"4222:480:12","text":" @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\n @param to Destination address of module transaction.\n @param value Ether value of module transaction.\n @param data Data payload of module transaction.\n @param operation Operation type of module transaction.\n @return success Boolean flag indicating if the call succeeded.\n @return returnData Data returned by the call."},"functionSelector":"5229073f","id":2368,"implemented":true,"kind":"function","modifiers":[],"name":"execTransactionFromModuleReturnData","nameLocation":"4716:35:12","nodeType":"FunctionDefinition","parameters":{"id":2351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2343,"mutability":"mutable","name":"to","nameLocation":"4769:2:12","nodeType":"VariableDeclaration","scope":2368,"src":"4761:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2342,"name":"address","nodeType":"ElementaryTypeName","src":"4761:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2345,"mutability":"mutable","name":"value","nameLocation":"4789:5:12","nodeType":"VariableDeclaration","scope":2368,"src":"4781:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2344,"name":"uint256","nodeType":"ElementaryTypeName","src":"4781:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2347,"mutability":"mutable","name":"data","nameLocation":"4817:4:12","nodeType":"VariableDeclaration","scope":2368,"src":"4804:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2346,"name":"bytes","nodeType":"ElementaryTypeName","src":"4804:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2350,"mutability":"mutable","name":"operation","nameLocation":"4846:9:12","nodeType":"VariableDeclaration","scope":2368,"src":"4831:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"},"typeName":{"id":2349,"nodeType":"UserDefinedTypeName","pathNode":{"id":2348,"name":"Enum.Operation","nameLocations":["4831:4:12","4836:9:12"],"nodeType":"IdentifierPath","referencedDeclaration":3022,"src":"4831:14:12"},"referencedDeclaration":3022,"src":"4831:14:12","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$3022","typeString":"enum Enum.Operation"}},"visibility":"internal"}],"src":"4751:110:12"},"returnParameters":{"id":2356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2353,"mutability":"mutable","name":"success","nameLocation":"4883:7:12","nodeType":"VariableDeclaration","scope":2368,"src":"4878:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2352,"name":"bool","nodeType":"ElementaryTypeName","src":"4878:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2355,"mutability":"mutable","name":"returnData","nameLocation":"4905:10:12","nodeType":"VariableDeclaration","scope":2368,"src":"4892:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2354,"name":"bytes","nodeType":"ElementaryTypeName","src":"4892:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4877:39:12"},"scope":2503,"src":"4707:959:12","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2389,"nodeType":"Block","src":"5848:83:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2376,"name":"SENTINEL_MODULES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"5865:16:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2377,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2371,"src":"5885:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5865:26:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2379,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"5895:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2381,"indexExpression":{"id":2380,"name":"module","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2371,"src":"5903:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5895:15:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5922:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2383,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5914:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2382,"name":"address","nodeType":"ElementaryTypeName","src":"5914:7:12","typeDescriptions":{}}},"id":2385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5914:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5895:29:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5865:59:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2375,"id":2388,"nodeType":"Return","src":"5858:66:12"}]},"documentation":{"id":2369,"nodeType":"StructuredDocumentation","src":"5672:103:12","text":" @notice Returns if an module is enabled\n @return True if the module is enabled"},"functionSelector":"2d9ad53d","id":2390,"implemented":true,"kind":"function","modifiers":[],"name":"isModuleEnabled","nameLocation":"5789:15:12","nodeType":"FunctionDefinition","parameters":{"id":2372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2371,"mutability":"mutable","name":"module","nameLocation":"5813:6:12","nodeType":"VariableDeclaration","scope":2390,"src":"5805:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2370,"name":"address","nodeType":"ElementaryTypeName","src":"5805:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5804:16:12"},"returnParameters":{"id":2375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2374,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2390,"src":"5842:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2373,"name":"bool","nodeType":"ElementaryTypeName","src":"5842:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5841:6:12"},"scope":2503,"src":"5780:151:12","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":2484,"nodeType":"Block","src":"6560:1412:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2404,"name":"start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2393,"src":"6578:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2405,"name":"SENTINEL_MODULES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"6587:16:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6578:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2408,"name":"start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2393,"src":"6623:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2407,"name":"isModuleEnabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"6607:15:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6607:22:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6578:51:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753313035","id":2411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6631:7:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_21e9127eafd366d4171d9c7f3375ca996507e4dd231bd2c13b243a626f992d4c","typeString":"literal_string \"GS105\""},"value":"GS105"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_21e9127eafd366d4171d9c7f3375ca996507e4dd231bd2c13b243a626f992d4c","typeString":"literal_string \"GS105\""}],"id":2403,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6570:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6570:69:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2413,"nodeType":"ExpressionStatement","src":"6570:69:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2415,"name":"pageSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"6657:8:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6668:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6657:12:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753313036","id":2418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6671:7:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_3be12fd8170783d77e95b898996a64d9da524b4d1491db467a4cf43987cf214d","typeString":"literal_string \"GS106\""},"value":"GS106"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3be12fd8170783d77e95b898996a64d9da524b4d1491db467a4cf43987cf214d","typeString":"literal_string \"GS106\""}],"id":2414,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6649:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6649:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2420,"nodeType":"ExpressionStatement","src":"6649:30:12"},{"expression":{"id":2427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2421,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"6730:5:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2425,"name":"pageSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"6752:8:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2424,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"6738:13:12","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address[] memory)"},"typeName":{"baseType":{"id":2422,"name":"address","nodeType":"ElementaryTypeName","src":"6742:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2423,"nodeType":"ArrayTypeName","src":"6742:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"id":2426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6738:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"src":"6730:31:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2428,"nodeType":"ExpressionStatement","src":"6730:31:12"},{"assignments":[2430],"declarations":[{"constant":false,"id":2430,"mutability":"mutable","name":"moduleCount","nameLocation":"6813:11:12","nodeType":"VariableDeclaration","scope":2484,"src":"6805:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2429,"name":"uint256","nodeType":"ElementaryTypeName","src":"6805:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2432,"initialValue":{"hexValue":"30","id":2431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6827:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6805:23:12"},{"expression":{"id":2437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2433,"name":"next","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"6838:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2434,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"6845:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2436,"indexExpression":{"id":2435,"name":"start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2393,"src":"6853:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6845:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6838:21:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2438,"nodeType":"ExpressionStatement","src":"6838:21:12"},{"body":{"id":2468,"nodeType":"Block","src":"6950:111:12","statements":[{"expression":{"id":2457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2453,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"6964:5:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2455,"indexExpression":{"id":2454,"name":"moduleCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2430,"src":"6970:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6964:18:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2456,"name":"next","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"6985:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6964:25:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2458,"nodeType":"ExpressionStatement","src":"6964:25:12"},{"expression":{"id":2463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2459,"name":"next","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"7003:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2460,"name":"modules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"7010:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2462,"indexExpression":{"id":2461,"name":"next","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"7018:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7010:13:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7003:20:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2464,"nodeType":"ExpressionStatement","src":"7003:20:12"},{"expression":{"id":2466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7037:13:12","subExpression":{"id":2465,"name":"moduleCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2430,"src":"7037:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2467,"nodeType":"ExpressionStatement","src":"7037:13:12"}]},"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2439,"name":"next","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"6876:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6892:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2441,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6884:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2440,"name":"address","nodeType":"ElementaryTypeName","src":"6884:7:12","typeDescriptions":{}}},"id":2443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6884:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6876:18:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2445,"name":"next","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"6898:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2446,"name":"SENTINEL_MODULES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"6906:16:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6898:24:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6876:46:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2449,"name":"moduleCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2430,"src":"6926:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2450,"name":"pageSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"6940:8:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6926:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6876:72:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2469,"nodeType":"WhileStatement","src":"6869:192:12"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2470,"name":"next","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"7716:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2471,"name":"SENTINEL_MODULES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"7724:16:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7716:24:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"documentation":"Because of the argument validation, we can assume that the loop will always iterate over the valid module list values\nand the `next` variable will either be an enabled module or a sentinel address (signalling the end). \nIf we haven't reached the end inside the loop, we need to set the next pointer to the last element of the modules array\nbecause the `next` variable (which is a module by itself) acting as a pointer to the start of the next page is neither \nincluded to the current page, nor will it be included in the next one if you pass it as a start.","id":2482,"nodeType":"IfStatement","src":"7712:84:12","trueBody":{"id":2481,"nodeType":"Block","src":"7742:54:12","statements":[{"expression":{"id":2479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2473,"name":"next","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"7756:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2474,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"7763:5:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2478,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2475,"name":"moduleCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2430,"src":"7769:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7783:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7769:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7763:22:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7756:29:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2480,"nodeType":"ExpressionStatement","src":"7756:29:12"}]}},{"AST":{"nativeSrc":"7916:50:12","nodeType":"YulBlock","src":"7916:50:12","statements":[{"expression":{"arguments":[{"name":"array","nativeSrc":"7937:5:12","nodeType":"YulIdentifier","src":"7937:5:12"},{"name":"moduleCount","nativeSrc":"7944:11:12","nodeType":"YulIdentifier","src":"7944:11:12"}],"functionName":{"name":"mstore","nativeSrc":"7930:6:12","nodeType":"YulIdentifier","src":"7930:6:12"},"nativeSrc":"7930:26:12","nodeType":"YulFunctionCall","src":"7930:26:12"},"nativeSrc":"7930:26:12","nodeType":"YulExpressionStatement","src":"7930:26:12"}]},"evmVersion":"paris","externalReferences":[{"declaration":2399,"isOffset":false,"isSlot":false,"src":"7937:5:12","valueSize":1},{"declaration":2430,"isOffset":false,"isSlot":false,"src":"7944:11:12","valueSize":1}],"id":2483,"nodeType":"InlineAssembly","src":"7907:59:12"}]},"documentation":{"id":2391,"nodeType":"StructuredDocumentation","src":"5937:495:12","text":" @notice Returns an array of modules.\n         If all entries fit into a single page, the next pointer will be 0x1.\n         If another page is present, next will be the last element of the returned array.\n @param start Start of the page. Has to be a module or start pointer (0x1 address)\n @param pageSize Maximum number of modules that should be returned. Has to be > 0\n @return array Array of modules.\n @return next Start of the next page."},"functionSelector":"cc2f8452","id":2485,"implemented":true,"kind":"function","modifiers":[],"name":"getModulesPaginated","nameLocation":"6446:19:12","nodeType":"FunctionDefinition","parameters":{"id":2396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2393,"mutability":"mutable","name":"start","nameLocation":"6474:5:12","nodeType":"VariableDeclaration","scope":2485,"src":"6466:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2392,"name":"address","nodeType":"ElementaryTypeName","src":"6466:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2395,"mutability":"mutable","name":"pageSize","nameLocation":"6489:8:12","nodeType":"VariableDeclaration","scope":2485,"src":"6481:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2394,"name":"uint256","nodeType":"ElementaryTypeName","src":"6481:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6465:33:12"},"returnParameters":{"id":2402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2399,"mutability":"mutable","name":"array","nameLocation":"6539:5:12","nodeType":"VariableDeclaration","scope":2485,"src":"6522:22:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2397,"name":"address","nodeType":"ElementaryTypeName","src":"6522:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2398,"nodeType":"ArrayTypeName","src":"6522:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2401,"mutability":"mutable","name":"next","nameLocation":"6554:4:12","nodeType":"VariableDeclaration","scope":2485,"src":"6546:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2400,"name":"address","nodeType":"ElementaryTypeName","src":"6546:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6521:38:12"},"scope":2503,"src":"6437:1535:12","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2501,"nodeType":"Block","src":"8343:180:12","statements":[{"assignments":[2494],"declarations":[{"constant":false,"id":2494,"mutability":"mutable","name":"size","nameLocation":"8361:4:12","nodeType":"VariableDeclaration","scope":2501,"src":"8353:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2493,"name":"uint256","nodeType":"ElementaryTypeName","src":"8353:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2495,"nodeType":"VariableDeclarationStatement","src":"8353:12:12"},{"AST":{"nativeSrc":"8440:52:12","nodeType":"YulBlock","src":"8440:52:12","statements":[{"nativeSrc":"8454:28:12","nodeType":"YulAssignment","src":"8454:28:12","value":{"arguments":[{"name":"account","nativeSrc":"8474:7:12","nodeType":"YulIdentifier","src":"8474:7:12"}],"functionName":{"name":"extcodesize","nativeSrc":"8462:11:12","nodeType":"YulIdentifier","src":"8462:11:12"},"nativeSrc":"8462:20:12","nodeType":"YulFunctionCall","src":"8462:20:12"},"variableNames":[{"name":"size","nativeSrc":"8454:4:12","nodeType":"YulIdentifier","src":"8454:4:12"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2488,"isOffset":false,"isSlot":false,"src":"8474:7:12","valueSize":1},{"declaration":2494,"isOffset":false,"isSlot":false,"src":"8454:4:12","valueSize":1}],"id":2496,"nodeType":"InlineAssembly","src":"8431:61:12"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2497,"name":"size","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"8508:4:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8515:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8508:8:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2492,"id":2500,"nodeType":"Return","src":"8501:15:12"}]},"documentation":{"id":2486,"nodeType":"StructuredDocumentation","src":"7978:294:12","text":" @notice Returns true if `account` is a contract.\n @dev This function will return false if invoked during the constructor of a contract,\n      as the code is not actually created until after the constructor finishes.\n @param account The address being queried"},"id":2502,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"8286:10:12","nodeType":"FunctionDefinition","parameters":{"id":2489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2488,"mutability":"mutable","name":"account","nameLocation":"8305:7:12","nodeType":"VariableDeclaration","scope":2502,"src":"8297:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2487,"name":"address","nodeType":"ElementaryTypeName","src":"8297:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8296:17:12"},"returnParameters":{"id":2492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2491,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2502,"src":"8337:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2490,"name":"bool","nodeType":"ElementaryTypeName","src":"8337:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8336:6:12"},"scope":2503,"src":"8277:246:12","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":2504,"src":"662:7863:12","usedErrors":[],"usedEvents":[2091,2095,2099,2103]}],"src":"42:8484:12"},"id":12},"@safe-global/safe-contracts/contracts/base/OwnerManager.sol":{"ast":{"absolutePath":"@safe-global/safe-contracts/contracts/base/OwnerManager.sol","exportedSymbols":{"OwnerManager":[3016],"SelfAuthorized":[3098]},"id":3017,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":2505,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:13"},{"absolutePath":"@safe-global/safe-contracts/contracts/common/SelfAuthorized.sol","file":"../common/SelfAuthorized.sol","id":2506,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3017,"sourceUnit":3099,"src":"74:38:13","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2508,"name":"SelfAuthorized","nameLocations":["474:14:13"],"nodeType":"IdentifierPath","referencedDeclaration":3098,"src":"474:14:13"},"id":2509,"nodeType":"InheritanceSpecifier","src":"474:14:13"}],"canonicalName":"OwnerManager","contractDependencies":[],"contractKind":"contract","documentation":{"id":2507,"nodeType":"StructuredDocumentation","src":"114:325:13","text":" @title OwnerManager - Manages Safe owners and a threshold to authorize transactions.\n @dev Uses a linked list to store the owners because the code generate by the solidity compiler\n      is more efficient than using a dynamic array.\n @author Stefan George - @Georgi87\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":3016,"linearizedBaseContracts":[3016,3098],"name":"OwnerManager","nameLocation":"458:12:13","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea26","id":2513,"name":"AddedOwner","nameLocation":"501:10:13","nodeType":"EventDefinition","parameters":{"id":2512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2511,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"528:5:13","nodeType":"VariableDeclaration","scope":2513,"src":"512:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2510,"name":"address","nodeType":"ElementaryTypeName","src":"512:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"511:23:13"},"src":"495:40:13"},{"anonymous":false,"eventSelector":"f8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf","id":2517,"name":"RemovedOwner","nameLocation":"546:12:13","nodeType":"EventDefinition","parameters":{"id":2516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2515,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"575:5:13","nodeType":"VariableDeclaration","scope":2517,"src":"559:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2514,"name":"address","nodeType":"ElementaryTypeName","src":"559:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"558:23:13"},"src":"540:42:13"},{"anonymous":false,"eventSelector":"610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c93","id":2521,"name":"ChangedThreshold","nameLocation":"593:16:13","nodeType":"EventDefinition","parameters":{"id":2520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2519,"indexed":false,"mutability":"mutable","name":"threshold","nameLocation":"618:9:13","nodeType":"VariableDeclaration","scope":2521,"src":"610:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2518,"name":"uint256","nodeType":"ElementaryTypeName","src":"610:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"609:19:13"},"src":"587:42:13"},{"constant":true,"id":2527,"mutability":"constant","name":"SENTINEL_OWNERS","nameLocation":"661:15:13","nodeType":"VariableDeclaration","scope":3016,"src":"635:56:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2522,"name":"address","nodeType":"ElementaryTypeName","src":"635:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"hexValue":"307831","id":2525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"687:3:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"0x1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2524,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"679:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2523,"name":"address","nodeType":"ElementaryTypeName","src":"679:7:13","typeDescriptions":{}}},"id":2526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"679:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2531,"mutability":"mutable","name":"owners","nameLocation":"735:6:13","nodeType":"VariableDeclaration","scope":3016,"src":"698:43:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"typeName":{"id":2530,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2528,"name":"address","nodeType":"ElementaryTypeName","src":"706:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"698:27:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2529,"name":"address","nodeType":"ElementaryTypeName","src":"717:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"internal"},{"constant":false,"id":2533,"mutability":"mutable","name":"ownerCount","nameLocation":"764:10:13","nodeType":"VariableDeclaration","scope":3016,"src":"747:27:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2532,"name":"uint256","nodeType":"ElementaryTypeName","src":"747:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2535,"mutability":"mutable","name":"threshold","nameLocation":"797:9:13","nodeType":"VariableDeclaration","scope":3016,"src":"780:26:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2534,"name":"uint256","nodeType":"ElementaryTypeName","src":"780:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"body":{"id":2651,"nodeType":"Block","src":"1087:1060:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2545,"name":"threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"1229:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1242:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1229:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753323030","id":2548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1245:7:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_3a328c389014707497c45ecba7527a678d30fabfd6868fe8bade352062f7774b","typeString":"literal_string \"GS200\""},"value":"GS200"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3a328c389014707497c45ecba7527a678d30fabfd6868fe8bade352062f7774b","typeString":"literal_string \"GS200\""}],"id":2544,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1221:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1221:32:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2550,"nodeType":"ExpressionStatement","src":"1221:32:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2552,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2541,"src":"1346:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":2553,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"1360:7:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1368:6:13","memberName":"length","nodeType":"MemberAccess","src":"1360:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1346:28:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753323031","id":2556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1376:7:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_2ed3cfd606bc0ca63de16ac40539251d9539eb77db0a0d075dd487d4cf1c74c7","typeString":"literal_string \"GS201\""},"value":"GS201"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2ed3cfd606bc0ca63de16ac40539251d9539eb77db0a0d075dd487d4cf1c74c7","typeString":"literal_string \"GS201\""}],"id":2551,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1338:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1338:46:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2558,"nodeType":"ExpressionStatement","src":"1338:46:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2560,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2541,"src":"1454:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"31","id":2561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1468:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1454:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753323032","id":2563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1471:7:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_a5f8340ff5526fa73c9197322cd5a1c742b87b5fdfeb41a9c278b80dab01159b","typeString":"literal_string \"GS202\""},"value":"GS202"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a5f8340ff5526fa73c9197322cd5a1c742b87b5fdfeb41a9c278b80dab01159b","typeString":"literal_string \"GS202\""}],"id":2559,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1446:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2564,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1446:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2565,"nodeType":"ExpressionStatement","src":"1446:33:13"},{"assignments":[2567],"declarations":[{"constant":false,"id":2567,"mutability":"mutable","name":"currentOwner","nameLocation":"1534:12:13","nodeType":"VariableDeclaration","scope":2651,"src":"1526:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2566,"name":"address","nodeType":"ElementaryTypeName","src":"1526:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2569,"initialValue":{"id":2568,"name":"SENTINEL_OWNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"1549:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1526:38:13"},{"body":{"id":2634,"nodeType":"Block","src":"1619:405:13","statements":[{"assignments":[2582],"declarations":[{"constant":false,"id":2582,"mutability":"mutable","name":"owner","nameLocation":"1686:5:13","nodeType":"VariableDeclaration","scope":2634,"src":"1678:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2581,"name":"address","nodeType":"ElementaryTypeName","src":"1678:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2586,"initialValue":{"baseExpression":{"id":2583,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"1694:7:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2585,"indexExpression":{"id":2584,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2571,"src":"1702:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1694:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1678:26:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2588,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2582,"src":"1726:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1743:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2590,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1735:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2589,"name":"address","nodeType":"ElementaryTypeName","src":"1735:7:13","typeDescriptions":{}}},"id":2592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1735:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1726:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2594,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2582,"src":"1749:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2595,"name":"SENTINEL_OWNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"1758:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1749:24:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1726:47:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2598,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2582,"src":"1777:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":2601,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1794:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_OwnerManager_$3016","typeString":"contract OwnerManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_OwnerManager_$3016","typeString":"contract OwnerManager"}],"id":2600,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1786:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2599,"name":"address","nodeType":"ElementaryTypeName","src":"1786:7:13","typeDescriptions":{}}},"id":2602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1786:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1777:22:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1726:73:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2605,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2567,"src":"1803:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2606,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2582,"src":"1819:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1803:21:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1726:98:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753323033","id":2609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1826:7:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_3d415fb64f163720f719509288c33af2675ad2c80f86a95800d94f19c802a300","typeString":"literal_string \"GS203\""},"value":"GS203"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3d415fb64f163720f719509288c33af2675ad2c80f86a95800d94f19c802a300","typeString":"literal_string \"GS203\""}],"id":2587,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1718:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1718:116:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2611,"nodeType":"ExpressionStatement","src":"1718:116:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2613,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"1900:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2615,"indexExpression":{"id":2614,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2582,"src":"1907:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1900:13:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1925:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2617,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1917:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2616,"name":"address","nodeType":"ElementaryTypeName","src":"1917:7:13","typeDescriptions":{}}},"id":2619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1917:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1900:27:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753323034","id":2621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1929:7:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_bd322b68614692ef7b503763b6ccedf066a7ae3f91196a908df3c549d078f597","typeString":"literal_string \"GS204\""},"value":"GS204"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_bd322b68614692ef7b503763b6ccedf066a7ae3f91196a908df3c549d078f597","typeString":"literal_string \"GS204\""}],"id":2612,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1892:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1892:45:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2623,"nodeType":"ExpressionStatement","src":"1892:45:13"},{"expression":{"id":2628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2624,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"1951:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2626,"indexExpression":{"id":2625,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2567,"src":"1958:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1951:20:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2627,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2582,"src":"1974:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1951:28:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2629,"nodeType":"ExpressionStatement","src":"1951:28:13"},{"expression":{"id":2632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2630,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2567,"src":"1993:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2631,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2582,"src":"2008:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1993:20:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2633,"nodeType":"ExpressionStatement","src":"1993:20:13"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2574,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2571,"src":"1594:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2575,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"1598:7:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1606:6:13","memberName":"length","nodeType":"MemberAccess","src":"1598:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1594:18:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2635,"initializationExpression":{"assignments":[2571],"declarations":[{"constant":false,"id":2571,"mutability":"mutable","name":"i","nameLocation":"1587:1:13","nodeType":"VariableDeclaration","scope":2635,"src":"1579:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2570,"name":"uint256","nodeType":"ElementaryTypeName","src":"1579:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2573,"initialValue":{"hexValue":"30","id":2572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1591:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1579:13:13"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1614:3:13","subExpression":{"id":2578,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2571,"src":"1614:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2580,"nodeType":"ExpressionStatement","src":"1614:3:13"},"nodeType":"ForStatement","src":"1574:450:13"},{"expression":{"id":2640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2636,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"2033:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2638,"indexExpression":{"id":2637,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2567,"src":"2040:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2033:20:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2639,"name":"SENTINEL_OWNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"2056:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2033:38:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2641,"nodeType":"ExpressionStatement","src":"2033:38:13"},{"expression":{"id":2645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2642,"name":"ownerCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2533,"src":"2081:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2643,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"2094:7:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2102:6:13","memberName":"length","nodeType":"MemberAccess","src":"2094:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2081:27:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2646,"nodeType":"ExpressionStatement","src":"2081:27:13"},{"expression":{"id":2649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2647,"name":"threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"2118:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2648,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2541,"src":"2130:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2118:22:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2650,"nodeType":"ExpressionStatement","src":"2118:22:13"}]},"documentation":{"id":2536,"nodeType":"StructuredDocumentation","src":"813:193:13","text":" @notice Sets the initial storage of the contract.\n @param _owners List of Safe owners.\n @param _threshold Number of required confirmations for a Safe transaction."},"id":2652,"implemented":true,"kind":"function","modifiers":[],"name":"setupOwners","nameLocation":"1020:11:13","nodeType":"FunctionDefinition","parameters":{"id":2542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2539,"mutability":"mutable","name":"_owners","nameLocation":"1049:7:13","nodeType":"VariableDeclaration","scope":2652,"src":"1032:24:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2537,"name":"address","nodeType":"ElementaryTypeName","src":"1032:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2538,"nodeType":"ArrayTypeName","src":"1032:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2541,"mutability":"mutable","name":"_threshold","nameLocation":"1066:10:13","nodeType":"VariableDeclaration","scope":2652,"src":"1058:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2540,"name":"uint256","nodeType":"ElementaryTypeName","src":"1058:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1031:46:13"},"returnParameters":{"id":2543,"nodeType":"ParameterList","parameters":[],"src":"1087:0:13"},"scope":3016,"src":"1011:1136:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2724,"nodeType":"Block","src":"2483:541:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2663,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2655,"src":"2575:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2592:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2665,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2584:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2664,"name":"address","nodeType":"ElementaryTypeName","src":"2584:7:13","typeDescriptions":{}}},"id":2667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2584:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2575:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2669,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2655,"src":"2598:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2670,"name":"SENTINEL_OWNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"2607:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2598:24:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2575:47:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2673,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2655,"src":"2626:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":2676,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2643:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_OwnerManager_$3016","typeString":"contract OwnerManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_OwnerManager_$3016","typeString":"contract OwnerManager"}],"id":2675,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2635:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2674,"name":"address","nodeType":"ElementaryTypeName","src":"2635:7:13","typeDescriptions":{}}},"id":2677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2635:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2626:22:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2575:73:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753323033","id":2680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2650:7:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_3d415fb64f163720f719509288c33af2675ad2c80f86a95800d94f19c802a300","typeString":"literal_string \"GS203\""},"value":"GS203"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3d415fb64f163720f719509288c33af2675ad2c80f86a95800d94f19c802a300","typeString":"literal_string \"GS203\""}],"id":2662,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2567:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2567:91:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2682,"nodeType":"ExpressionStatement","src":"2567:91:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2684,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"2716:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2686,"indexExpression":{"id":2685,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2655,"src":"2723:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2716:13:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2741:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2688,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2733:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2687,"name":"address","nodeType":"ElementaryTypeName","src":"2733:7:13","typeDescriptions":{}}},"id":2690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2733:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2716:27:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753323034","id":2692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2745:7:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_bd322b68614692ef7b503763b6ccedf066a7ae3f91196a908df3c549d078f597","typeString":"literal_string \"GS204\""},"value":"GS204"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_bd322b68614692ef7b503763b6ccedf066a7ae3f91196a908df3c549d078f597","typeString":"literal_string \"GS204\""}],"id":2683,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2708:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2708:45:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2694,"nodeType":"ExpressionStatement","src":"2708:45:13"},{"expression":{"id":2701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2695,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"2763:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2697,"indexExpression":{"id":2696,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2655,"src":"2770:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2763:13:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2698,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"2779:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2700,"indexExpression":{"id":2699,"name":"SENTINEL_OWNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"2786:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2779:23:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2763:39:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2702,"nodeType":"ExpressionStatement","src":"2763:39:13"},{"expression":{"id":2707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2703,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"2812:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2705,"indexExpression":{"id":2704,"name":"SENTINEL_OWNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"2819:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2812:23:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2706,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2655,"src":"2838:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2812:31:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2708,"nodeType":"ExpressionStatement","src":"2812:31:13"},{"expression":{"id":2710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2853:12:13","subExpression":{"id":2709,"name":"ownerCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2533,"src":"2853:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2711,"nodeType":"ExpressionStatement","src":"2853:12:13"},{"eventCall":{"arguments":[{"id":2713,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2655,"src":"2891:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2712,"name":"AddedOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2513,"src":"2880:10:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2880:17:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2715,"nodeType":"EmitStatement","src":"2875:22:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2716,"name":"threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"2965:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2717,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"2978:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2965:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2723,"nodeType":"IfStatement","src":"2961:56:13","trueBody":{"expression":{"arguments":[{"id":2720,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"3006:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2719,"name":"changeThreshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2933,"src":"2990:15:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2990:27:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2722,"nodeType":"ExpressionStatement","src":"2990:27:13"}}]},"documentation":{"id":2653,"nodeType":"StructuredDocumentation","src":"2153:241:13","text":" @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\n @dev This can only be done via a Safe transaction.\n @param owner New owner address.\n @param _threshold New threshold."},"functionSelector":"0d582f13","id":2725,"implemented":true,"kind":"function","modifiers":[{"id":2660,"kind":"modifierInvocation","modifierName":{"id":2659,"name":"authorized","nameLocations":["2472:10:13"],"nodeType":"IdentifierPath","referencedDeclaration":3097,"src":"2472:10:13"},"nodeType":"ModifierInvocation","src":"2472:10:13"}],"name":"addOwnerWithThreshold","nameLocation":"2408:21:13","nodeType":"FunctionDefinition","parameters":{"id":2658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2655,"mutability":"mutable","name":"owner","nameLocation":"2438:5:13","nodeType":"VariableDeclaration","scope":2725,"src":"2430:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2654,"name":"address","nodeType":"ElementaryTypeName","src":"2430:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2657,"mutability":"mutable","name":"_threshold","nameLocation":"2453:10:13","nodeType":"VariableDeclaration","scope":2725,"src":"2445:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2656,"name":"uint256","nodeType":"ElementaryTypeName","src":"2445:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2429:35:13"},"returnParameters":{"id":2661,"nodeType":"ParameterList","parameters":[],"src":"2483:0:13"},"scope":3016,"src":"2399:625:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2801,"nodeType":"Block","src":"3473:604:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2738,"name":"ownerCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2533,"src":"3568:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3581:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3568:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2741,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"3586:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3568:28:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753323031","id":2743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3598:7:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_2ed3cfd606bc0ca63de16ac40539251d9539eb77db0a0d075dd487d4cf1c74c7","typeString":"literal_string \"GS201\""},"value":"GS201"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2ed3cfd606bc0ca63de16ac40539251d9539eb77db0a0d075dd487d4cf1c74c7","typeString":"literal_string \"GS201\""}],"id":2737,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3560:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3560:46:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2745,"nodeType":"ExpressionStatement","src":"3560:46:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2747,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"3704:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3721:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2749,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3713:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2748,"name":"address","nodeType":"ElementaryTypeName","src":"3713:7:13","typeDescriptions":{}}},"id":2751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3713:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3704:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2753,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"3727:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2754,"name":"SENTINEL_OWNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"3736:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3727:24:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3704:47:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753323033","id":2757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3753:7:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_3d415fb64f163720f719509288c33af2675ad2c80f86a95800d94f19c802a300","typeString":"literal_string \"GS203\""},"value":"GS203"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3d415fb64f163720f719509288c33af2675ad2c80f86a95800d94f19c802a300","typeString":"literal_string \"GS203\""}],"id":2746,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3696:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3696:65:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2759,"nodeType":"ExpressionStatement","src":"3696:65:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2761,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"3779:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2763,"indexExpression":{"id":2762,"name":"prevOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"3786:9:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3779:17:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2764,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"3800:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3779:26:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753323035","id":2766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3807:7:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_f86d3c4b40d399421f213105cf28bb5b688028c0e3d9bd9eb6f879f0bebe6c39","typeString":"literal_string \"GS205\""},"value":"GS205"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f86d3c4b40d399421f213105cf28bb5b688028c0e3d9bd9eb6f879f0bebe6c39","typeString":"literal_string \"GS205\""}],"id":2760,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3771:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3771:44:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2768,"nodeType":"ExpressionStatement","src":"3771:44:13"},{"expression":{"id":2775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2769,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"3825:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2771,"indexExpression":{"id":2770,"name":"prevOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"3832:9:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3825:17:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2772,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"3845:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2774,"indexExpression":{"id":2773,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"3852:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3845:13:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3825:33:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2776,"nodeType":"ExpressionStatement","src":"3825:33:13"},{"expression":{"id":2784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2777,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"3868:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2779,"indexExpression":{"id":2778,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"3875:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3868:13:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":2782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3892:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2781,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3884:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2780,"name":"address","nodeType":"ElementaryTypeName","src":"3884:7:13","typeDescriptions":{}}},"id":2783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3884:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3868:26:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2785,"nodeType":"ExpressionStatement","src":"3868:26:13"},{"expression":{"id":2787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"3904:12:13","subExpression":{"id":2786,"name":"ownerCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2533,"src":"3904:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2788,"nodeType":"ExpressionStatement","src":"3904:12:13"},{"eventCall":{"arguments":[{"id":2790,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"3944:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2789,"name":"RemovedOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"3931:12:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3931:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2792,"nodeType":"EmitStatement","src":"3926:24:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2793,"name":"threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"4018:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2794,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"4031:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4018:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2800,"nodeType":"IfStatement","src":"4014:56:13","trueBody":{"expression":{"arguments":[{"id":2797,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"4059:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2796,"name":"changeThreshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2933,"src":"4043:15:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4043:27:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2799,"nodeType":"ExpressionStatement","src":"4043:27:13"}}]},"documentation":{"id":2726,"nodeType":"StructuredDocumentation","src":"3030:345:13","text":" @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\n @dev This can only be done via a Safe transaction.\n @param prevOwner Owner that pointed to the owner to be removed in the linked list\n @param owner Owner address to be removed.\n @param _threshold New threshold."},"functionSelector":"f8dc5dd9","id":2802,"implemented":true,"kind":"function","modifiers":[{"id":2735,"kind":"modifierInvocation","modifierName":{"id":2734,"name":"authorized","nameLocations":["3462:10:13"],"nodeType":"IdentifierPath","referencedDeclaration":3097,"src":"3462:10:13"},"nodeType":"ModifierInvocation","src":"3462:10:13"}],"name":"removeOwner","nameLocation":"3389:11:13","nodeType":"FunctionDefinition","parameters":{"id":2733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2728,"mutability":"mutable","name":"prevOwner","nameLocation":"3409:9:13","nodeType":"VariableDeclaration","scope":2802,"src":"3401:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2727,"name":"address","nodeType":"ElementaryTypeName","src":"3401:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2730,"mutability":"mutable","name":"owner","nameLocation":"3428:5:13","nodeType":"VariableDeclaration","scope":2802,"src":"3420:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2729,"name":"address","nodeType":"ElementaryTypeName","src":"3420:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2732,"mutability":"mutable","name":"_threshold","nameLocation":"3443:10:13","nodeType":"VariableDeclaration","scope":2802,"src":"3435:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2731,"name":"uint256","nodeType":"ElementaryTypeName","src":"3435:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3400:54:13"},"returnParameters":{"id":2736,"nodeType":"ParameterList","parameters":[],"src":"3473:0:13"},"scope":3016,"src":"3380:697:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2901,"nodeType":"Block","src":"4508:704:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2815,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2809,"src":"4600:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4620:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2817,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4612:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2816,"name":"address","nodeType":"ElementaryTypeName","src":"4612:7:13","typeDescriptions":{}}},"id":2819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4612:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4600:22:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2821,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2809,"src":"4626:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2822,"name":"SENTINEL_OWNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"4638:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4626:27:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4600:53:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2825,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2809,"src":"4657:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":2828,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4677:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_OwnerManager_$3016","typeString":"contract OwnerManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_OwnerManager_$3016","typeString":"contract OwnerManager"}],"id":2827,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4669:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2826,"name":"address","nodeType":"ElementaryTypeName","src":"4669:7:13","typeDescriptions":{}}},"id":2829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4669:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4657:25:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4600:82:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753323033","id":2832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4684:7:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_3d415fb64f163720f719509288c33af2675ad2c80f86a95800d94f19c802a300","typeString":"literal_string \"GS203\""},"value":"GS203"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3d415fb64f163720f719509288c33af2675ad2c80f86a95800d94f19c802a300","typeString":"literal_string \"GS203\""}],"id":2814,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4592:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4592:100:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2834,"nodeType":"ExpressionStatement","src":"4592:100:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2836,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"4750:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2838,"indexExpression":{"id":2837,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2809,"src":"4757:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4750:16:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4778:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2840,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4770:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2839,"name":"address","nodeType":"ElementaryTypeName","src":"4770:7:13","typeDescriptions":{}}},"id":2842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4770:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4750:30:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753323034","id":2844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4782:7:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_bd322b68614692ef7b503763b6ccedf066a7ae3f91196a908df3c549d078f597","typeString":"literal_string \"GS204\""},"value":"GS204"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_bd322b68614692ef7b503763b6ccedf066a7ae3f91196a908df3c549d078f597","typeString":"literal_string \"GS204\""}],"id":2835,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4742:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4742:48:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2846,"nodeType":"ExpressionStatement","src":"4742:48:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2848,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"4891:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4911:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2850,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4903:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2849,"name":"address","nodeType":"ElementaryTypeName","src":"4903:7:13","typeDescriptions":{}}},"id":2852,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4903:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4891:22:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2854,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"4917:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2855,"name":"SENTINEL_OWNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"4929:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4917:27:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4891:53:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753323033","id":2858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4946:7:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_3d415fb64f163720f719509288c33af2675ad2c80f86a95800d94f19c802a300","typeString":"literal_string \"GS203\""},"value":"GS203"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3d415fb64f163720f719509288c33af2675ad2c80f86a95800d94f19c802a300","typeString":"literal_string \"GS203\""}],"id":2847,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4883:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4883:71:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2860,"nodeType":"ExpressionStatement","src":"4883:71:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2862,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"4972:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2864,"indexExpression":{"id":2863,"name":"prevOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"4979:9:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4972:17:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2865,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"4993:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4972:29:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753323035","id":2867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5003:7:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_f86d3c4b40d399421f213105cf28bb5b688028c0e3d9bd9eb6f879f0bebe6c39","typeString":"literal_string \"GS205\""},"value":"GS205"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f86d3c4b40d399421f213105cf28bb5b688028c0e3d9bd9eb6f879f0bebe6c39","typeString":"literal_string \"GS205\""}],"id":2861,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4964:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4964:47:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2869,"nodeType":"ExpressionStatement","src":"4964:47:13"},{"expression":{"id":2876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2870,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"5021:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2872,"indexExpression":{"id":2871,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2809,"src":"5028:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5021:16:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2873,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"5040:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2875,"indexExpression":{"id":2874,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"5047:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5040:16:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5021:35:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2877,"nodeType":"ExpressionStatement","src":"5021:35:13"},{"expression":{"id":2882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2878,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"5066:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2880,"indexExpression":{"id":2879,"name":"prevOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"5073:9:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5066:17:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2881,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2809,"src":"5086:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5066:28:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2883,"nodeType":"ExpressionStatement","src":"5066:28:13"},{"expression":{"id":2891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2884,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"5104:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2886,"indexExpression":{"id":2885,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"5111:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5104:16:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":2889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5131:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2888,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5123:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2887,"name":"address","nodeType":"ElementaryTypeName","src":"5123:7:13","typeDescriptions":{}}},"id":2890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5123:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5104:29:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2892,"nodeType":"ExpressionStatement","src":"5104:29:13"},{"eventCall":{"arguments":[{"id":2894,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"5161:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2893,"name":"RemovedOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"5148:12:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5148:22:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2896,"nodeType":"EmitStatement","src":"5143:27:13"},{"eventCall":{"arguments":[{"id":2898,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2809,"src":"5196:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2897,"name":"AddedOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2513,"src":"5185:10:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5185:20:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2900,"nodeType":"EmitStatement","src":"5180:25:13"}]},"documentation":{"id":2803,"nodeType":"StructuredDocumentation","src":"4083:328:13","text":" @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\n @dev This can only be done via a Safe transaction.\n @param prevOwner Owner that pointed to the owner to be replaced in the linked list\n @param oldOwner Owner address to be replaced.\n @param newOwner New owner address."},"functionSelector":"e318b52b","id":2902,"implemented":true,"kind":"function","modifiers":[{"id":2812,"kind":"modifierInvocation","modifierName":{"id":2811,"name":"authorized","nameLocations":["4497:10:13"],"nodeType":"IdentifierPath","referencedDeclaration":3097,"src":"4497:10:13"},"nodeType":"ModifierInvocation","src":"4497:10:13"}],"name":"swapOwner","nameLocation":"4425:9:13","nodeType":"FunctionDefinition","parameters":{"id":2810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2805,"mutability":"mutable","name":"prevOwner","nameLocation":"4443:9:13","nodeType":"VariableDeclaration","scope":2902,"src":"4435:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2804,"name":"address","nodeType":"ElementaryTypeName","src":"4435:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2807,"mutability":"mutable","name":"oldOwner","nameLocation":"4462:8:13","nodeType":"VariableDeclaration","scope":2902,"src":"4454:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2806,"name":"address","nodeType":"ElementaryTypeName","src":"4454:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2809,"mutability":"mutable","name":"newOwner","nameLocation":"4480:8:13","nodeType":"VariableDeclaration","scope":2902,"src":"4472:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2808,"name":"address","nodeType":"ElementaryTypeName","src":"4472:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4434:55:13"},"returnParameters":{"id":2813,"nodeType":"ParameterList","parameters":[],"src":"4508:0:13"},"scope":3016,"src":"4416:796:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2932,"nodeType":"Block","src":"5461:297:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2911,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"5548:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":2912,"name":"ownerCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2533,"src":"5562:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5548:24:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753323031","id":2914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5574:7:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_2ed3cfd606bc0ca63de16ac40539251d9539eb77db0a0d075dd487d4cf1c74c7","typeString":"literal_string \"GS201\""},"value":"GS201"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2ed3cfd606bc0ca63de16ac40539251d9539eb77db0a0d075dd487d4cf1c74c7","typeString":"literal_string \"GS201\""}],"id":2910,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5540:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5540:42:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2916,"nodeType":"ExpressionStatement","src":"5540:42:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2918,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"5652:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"31","id":2919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5666:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5652:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753323032","id":2921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5669:7:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_a5f8340ff5526fa73c9197322cd5a1c742b87b5fdfeb41a9c278b80dab01159b","typeString":"literal_string \"GS202\""},"value":"GS202"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a5f8340ff5526fa73c9197322cd5a1c742b87b5fdfeb41a9c278b80dab01159b","typeString":"literal_string \"GS202\""}],"id":2917,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5644:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5644:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2923,"nodeType":"ExpressionStatement","src":"5644:33:13"},{"expression":{"id":2926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2924,"name":"threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"5687:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2925,"name":"_threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"5699:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5687:22:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2927,"nodeType":"ExpressionStatement","src":"5687:22:13"},{"eventCall":{"arguments":[{"id":2929,"name":"threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"5741:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2928,"name":"ChangedThreshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2521,"src":"5724:16:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5724:27:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2931,"nodeType":"EmitStatement","src":"5719:32:13"}]},"documentation":{"id":2903,"nodeType":"StructuredDocumentation","src":"5218:175:13","text":" @notice Changes the threshold of the Safe to `_threshold`.\n @dev This can only be done via a Safe transaction.\n @param _threshold New threshold."},"functionSelector":"694e80c3","id":2933,"implemented":true,"kind":"function","modifiers":[{"id":2908,"kind":"modifierInvocation","modifierName":{"id":2907,"name":"authorized","nameLocations":["5450:10:13"],"nodeType":"IdentifierPath","referencedDeclaration":3097,"src":"5450:10:13"},"nodeType":"ModifierInvocation","src":"5450:10:13"}],"name":"changeThreshold","nameLocation":"5407:15:13","nodeType":"FunctionDefinition","parameters":{"id":2906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2905,"mutability":"mutable","name":"_threshold","nameLocation":"5431:10:13","nodeType":"VariableDeclaration","scope":2933,"src":"5423:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2904,"name":"uint256","nodeType":"ElementaryTypeName","src":"5423:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5422:20:13"},"returnParameters":{"id":2909,"nodeType":"ParameterList","parameters":[],"src":"5461:0:13"},"scope":3016,"src":"5398:360:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2941,"nodeType":"Block","src":"5969:33:13","statements":[{"expression":{"id":2939,"name":"threshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"5986:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2938,"id":2940,"nodeType":"Return","src":"5979:16:13"}]},"documentation":{"id":2934,"nodeType":"StructuredDocumentation","src":"5764:146:13","text":" @notice Returns the number of required confirmations for a Safe transaction aka the threshold.\n @return Threshold number."},"functionSelector":"e75235b8","id":2942,"implemented":true,"kind":"function","modifiers":[],"name":"getThreshold","nameLocation":"5924:12:13","nodeType":"FunctionDefinition","parameters":{"id":2935,"nodeType":"ParameterList","parameters":[],"src":"5936:2:13"},"returnParameters":{"id":2938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2937,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2942,"src":"5960:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2936,"name":"uint256","nodeType":"ElementaryTypeName","src":"5960:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5959:9:13"},"scope":3016,"src":"5915:87:13","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":2963,"nodeType":"Block","src":"6199:79:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2950,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2945,"src":"6216:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2951,"name":"SENTINEL_OWNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"6225:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6216:24:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2953,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"6244:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2955,"indexExpression":{"id":2954,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2945,"src":"6251:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6244:13:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6269:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2957,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6261:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2956,"name":"address","nodeType":"ElementaryTypeName","src":"6261:7:13","typeDescriptions":{}}},"id":2959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6261:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6244:27:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6216:55:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2949,"id":2962,"nodeType":"Return","src":"6209:62:13"}]},"documentation":{"id":2943,"nodeType":"StructuredDocumentation","src":"6008:127:13","text":" @notice Returns if `owner` is an owner of the Safe.\n @return Boolean if owner is an owner of the Safe."},"functionSelector":"2f54bf6e","id":2964,"implemented":true,"kind":"function","modifiers":[],"name":"isOwner","nameLocation":"6149:7:13","nodeType":"FunctionDefinition","parameters":{"id":2946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2945,"mutability":"mutable","name":"owner","nameLocation":"6165:5:13","nodeType":"VariableDeclaration","scope":2964,"src":"6157:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2944,"name":"address","nodeType":"ElementaryTypeName","src":"6157:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6156:15:13"},"returnParameters":{"id":2949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2948,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2964,"src":"6193:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2947,"name":"bool","nodeType":"ElementaryTypeName","src":"6193:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6192:6:13"},"scope":3016,"src":"6140:138:13","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3014,"nodeType":"Block","src":"6443:377:13","statements":[{"assignments":[2975],"declarations":[{"constant":false,"id":2975,"mutability":"mutable","name":"array","nameLocation":"6470:5:13","nodeType":"VariableDeclaration","scope":3014,"src":"6453:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2973,"name":"address","nodeType":"ElementaryTypeName","src":"6453:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2974,"nodeType":"ArrayTypeName","src":"6453:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":2981,"initialValue":{"arguments":[{"id":2979,"name":"ownerCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2533,"src":"6492:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2978,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"6478:13:13","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address[] memory)"},"typeName":{"baseType":{"id":2976,"name":"address","nodeType":"ElementaryTypeName","src":"6482:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2977,"nodeType":"ArrayTypeName","src":"6482:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"id":2980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6478:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"nodeType":"VariableDeclarationStatement","src":"6453:50:13"},{"assignments":[2983],"declarations":[{"constant":false,"id":2983,"mutability":"mutable","name":"index","nameLocation":"6555:5:13","nodeType":"VariableDeclaration","scope":3014,"src":"6547:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2982,"name":"uint256","nodeType":"ElementaryTypeName","src":"6547:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2985,"initialValue":{"hexValue":"30","id":2984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6563:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6547:17:13"},{"assignments":[2987],"declarations":[{"constant":false,"id":2987,"mutability":"mutable","name":"currentOwner","nameLocation":"6582:12:13","nodeType":"VariableDeclaration","scope":3014,"src":"6574:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2986,"name":"address","nodeType":"ElementaryTypeName","src":"6574:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2991,"initialValue":{"baseExpression":{"id":2988,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"6597:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":2990,"indexExpression":{"id":2989,"name":"SENTINEL_OWNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"6604:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6597:23:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6574:46:13"},{"body":{"id":3010,"nodeType":"Block","src":"6670:122:13","statements":[{"expression":{"id":2999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2995,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2975,"src":"6684:5:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2997,"indexExpression":{"id":2996,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"6690:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6684:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2998,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"6699:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6684:27:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3000,"nodeType":"ExpressionStatement","src":"6684:27:13"},{"expression":{"id":3005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3001,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"6725:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3002,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"6740:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":3004,"indexExpression":{"id":3003,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"6747:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6740:20:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6725:35:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3006,"nodeType":"ExpressionStatement","src":"6725:35:13"},{"expression":{"id":3008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6774:7:13","subExpression":{"id":3007,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"6774:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3009,"nodeType":"ExpressionStatement","src":"6774:7:13"}]},"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2992,"name":"currentOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"6637:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2993,"name":"SENTINEL_OWNERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"6653:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6637:31:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3011,"nodeType":"WhileStatement","src":"6630:162:13"},{"expression":{"id":3012,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2975,"src":"6808:5:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":2970,"id":3013,"nodeType":"Return","src":"6801:12:13"}]},"documentation":{"id":2965,"nodeType":"StructuredDocumentation","src":"6284:94:13","text":" @notice Returns a list of Safe owners.\n @return Array of Safe owners."},"functionSelector":"a0e67e2b","id":3015,"implemented":true,"kind":"function","modifiers":[],"name":"getOwners","nameLocation":"6392:9:13","nodeType":"FunctionDefinition","parameters":{"id":2966,"nodeType":"ParameterList","parameters":[],"src":"6401:2:13"},"returnParameters":{"id":2970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2969,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3015,"src":"6425:16:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2967,"name":"address","nodeType":"ElementaryTypeName","src":"6425:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2968,"nodeType":"ArrayTypeName","src":"6425:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"6424:18:13"},"scope":3016,"src":"6383:437:13","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":3017,"src":"440:6382:13","usedErrors":[],"usedEvents":[2513,2517,2521]}],"src":"42:6781:13"},"id":13},"@safe-global/safe-contracts/contracts/common/Enum.sol":{"ast":{"absolutePath":"@safe-global/safe-contracts/contracts/common/Enum.sol","exportedSymbols":{"Enum":[3023]},"id":3024,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3018,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:14"},{"abstract":true,"baseContracts":[],"canonicalName":"Enum","contractDependencies":[],"contractKind":"contract","documentation":{"id":3019,"nodeType":"StructuredDocumentation","src":"75:109:14","text":" @title Enum - Collection of enums used in Safe contracts.\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":3023,"linearizedBaseContracts":[3023],"name":"Enum","nameLocation":"203:4:14","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Enum.Operation","id":3022,"members":[{"id":3020,"name":"Call","nameLocation":"239:4:14","nodeType":"EnumValue","src":"239:4:14"},{"id":3021,"name":"DelegateCall","nameLocation":"253:12:14","nodeType":"EnumValue","src":"253:12:14"}],"name":"Operation","nameLocation":"219:9:14","nodeType":"EnumDefinition","src":"214:57:14"}],"scope":3024,"src":"185:88:14","usedErrors":[],"usedEvents":[]}],"src":"42:232:14"},"id":14},"@safe-global/safe-contracts/contracts/common/NativeCurrencyPaymentFallback.sol":{"ast":{"absolutePath":"@safe-global/safe-contracts/contracts/common/NativeCurrencyPaymentFallback.sol","exportedSymbols":{"NativeCurrencyPaymentFallback":[3045]},"id":3046,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3025,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:15"},{"abstract":true,"baseContracts":[],"canonicalName":"NativeCurrencyPaymentFallback","contractDependencies":[],"contractKind":"contract","documentation":{"id":3026,"nodeType":"StructuredDocumentation","src":"75:157:15","text":" @title NativeCurrencyPaymentFallback - A contract that has a fallback to accept native currency payments.\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":3045,"linearizedBaseContracts":[3045],"name":"NativeCurrencyPaymentFallback","nameLocation":"251:29:15","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"3d0ce9bfc3ed7d6862dbb28b2dea94561fe714a1b4d019aa8af39730d1ad7c3d","id":3032,"name":"SafeReceived","nameLocation":"293:12:15","nodeType":"EventDefinition","parameters":{"id":3031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3028,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"322:6:15","nodeType":"VariableDeclaration","scope":3032,"src":"306:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3027,"name":"address","nodeType":"ElementaryTypeName","src":"306:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3030,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"338:5:15","nodeType":"VariableDeclaration","scope":3032,"src":"330:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3029,"name":"uint256","nodeType":"ElementaryTypeName","src":"330:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"305:39:15"},"src":"287:58:15"},{"body":{"id":3043,"nodeType":"Block","src":"523:57:15","statements":[{"eventCall":{"arguments":[{"expression":{"id":3037,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"551:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"555:6:15","memberName":"sender","nodeType":"MemberAccess","src":"551:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3039,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"563:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"567:5:15","memberName":"value","nodeType":"MemberAccess","src":"563:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3036,"name":"SafeReceived","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3032,"src":"538:12:15","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"538:35:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3042,"nodeType":"EmitStatement","src":"533:40:15"}]},"documentation":{"id":3033,"nodeType":"StructuredDocumentation","src":"351:140:15","text":" @notice Receive function accepts native currency transactions.\n @dev Emits an event with sender and received value."},"id":3044,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3034,"nodeType":"ParameterList","parameters":[],"src":"503:2:15"},"returnParameters":{"id":3035,"nodeType":"ParameterList","parameters":[],"src":"523:0:15"},"scope":3045,"src":"496:84:15","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":3046,"src":"233:349:15","usedErrors":[],"usedEvents":[3032]}],"src":"42:541:15"},"id":15},"@safe-global/safe-contracts/contracts/common/SecuredTokenTransfer.sol":{"ast":{"absolutePath":"@safe-global/safe-contracts/contracts/common/SecuredTokenTransfer.sol","exportedSymbols":{"SecuredTokenTransfer":[3072]},"id":3073,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3047,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:16"},{"abstract":true,"baseContracts":[],"canonicalName":"SecuredTokenTransfer","contractDependencies":[],"contractKind":"contract","documentation":{"id":3048,"nodeType":"StructuredDocumentation","src":"75:104:16","text":" @title SecuredTokenTransfer - Secure token transfer.\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":3072,"linearizedBaseContracts":[3072],"name":"SecuredTokenTransfer","nameLocation":"198:20:16","nodeType":"ContractDefinition","nodes":[{"body":{"id":3070,"nodeType":"Block","src":"871:796:16","statements":[{"assignments":[3061],"declarations":[{"constant":false,"id":3061,"mutability":"mutable","name":"data","nameLocation":"955:4:16","nodeType":"VariableDeclaration","scope":3070,"src":"942:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3060,"name":"bytes","nodeType":"ElementaryTypeName","src":"942:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3068,"initialValue":{"arguments":[{"hexValue":"30786139303539636262","id":3064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"985:10:16","typeDescriptions":{"typeIdentifier":"t_rational_2835717307_by_1","typeString":"int_const 2835717307"},"value":"0xa9059cbb"},{"id":3065,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3053,"src":"997:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3066,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3055,"src":"1007:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_2835717307_by_1","typeString":"int_const 2835717307"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3062,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"962:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3063,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"966:18:16","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"962:22:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3067,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"962:52:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"942:72:16"},{"AST":{"nativeSrc":"1089:572:16","nodeType":"YulBlock","src":"1089:572:16","statements":[{"nativeSrc":"1270:87:16","nodeType":"YulVariableDeclaration","src":"1270:87:16","value":{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"gas","nativeSrc":"1294:3:16","nodeType":"YulIdentifier","src":"1294:3:16"},"nativeSrc":"1294:5:16","nodeType":"YulFunctionCall","src":"1294:5:16"},{"kind":"number","nativeSrc":"1301:5:16","nodeType":"YulLiteral","src":"1301:5:16","type":"","value":"10000"}],"functionName":{"name":"sub","nativeSrc":"1290:3:16","nodeType":"YulIdentifier","src":"1290:3:16"},"nativeSrc":"1290:17:16","nodeType":"YulFunctionCall","src":"1290:17:16"},{"name":"token","nativeSrc":"1309:5:16","nodeType":"YulIdentifier","src":"1309:5:16"},{"kind":"number","nativeSrc":"1316:1:16","nodeType":"YulLiteral","src":"1316:1:16","type":"","value":"0"},{"arguments":[{"name":"data","nativeSrc":"1323:4:16","nodeType":"YulIdentifier","src":"1323:4:16"},{"kind":"number","nativeSrc":"1329:4:16","nodeType":"YulLiteral","src":"1329:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1319:3:16","nodeType":"YulIdentifier","src":"1319:3:16"},"nativeSrc":"1319:15:16","nodeType":"YulFunctionCall","src":"1319:15:16"},{"arguments":[{"name":"data","nativeSrc":"1342:4:16","nodeType":"YulIdentifier","src":"1342:4:16"}],"functionName":{"name":"mload","nativeSrc":"1336:5:16","nodeType":"YulIdentifier","src":"1336:5:16"},"nativeSrc":"1336:11:16","nodeType":"YulFunctionCall","src":"1336:11:16"},{"kind":"number","nativeSrc":"1349:1:16","nodeType":"YulLiteral","src":"1349:1:16","type":"","value":"0"},{"kind":"number","nativeSrc":"1352:4:16","nodeType":"YulLiteral","src":"1352:4:16","type":"","value":"0x20"}],"functionName":{"name":"call","nativeSrc":"1285:4:16","nodeType":"YulIdentifier","src":"1285:4:16"},"nativeSrc":"1285:72:16","nodeType":"YulFunctionCall","src":"1285:72:16"},"variables":[{"name":"success","nativeSrc":"1274:7:16","nodeType":"YulTypedName","src":"1274:7:16","type":""}]},{"cases":[{"body":{"nativeSrc":"1413:54:16","nodeType":"YulBlock","src":"1413:54:16","statements":[{"nativeSrc":"1431:22:16","nodeType":"YulAssignment","src":"1431:22:16","value":{"name":"success","nativeSrc":"1446:7:16","nodeType":"YulIdentifier","src":"1446:7:16"},"variableNames":[{"name":"transferred","nativeSrc":"1431:11:16","nodeType":"YulIdentifier","src":"1431:11:16"}]}]},"nativeSrc":"1406:61:16","nodeType":"YulCase","src":"1406:61:16","value":{"kind":"number","nativeSrc":"1411:1:16","nodeType":"YulLiteral","src":"1411:1:16","type":"","value":"0"}},{"body":{"nativeSrc":"1490:92:16","nodeType":"YulBlock","src":"1490:92:16","statements":[{"nativeSrc":"1508:60:16","nodeType":"YulAssignment","src":"1508:60:16","value":{"arguments":[{"arguments":[{"arguments":[{"name":"success","nativeSrc":"1540:7:16","nodeType":"YulIdentifier","src":"1540:7:16"}],"functionName":{"name":"iszero","nativeSrc":"1533:6:16","nodeType":"YulIdentifier","src":"1533:6:16"},"nativeSrc":"1533:15:16","nodeType":"YulFunctionCall","src":"1533:15:16"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"1563:1:16","nodeType":"YulLiteral","src":"1563:1:16","type":"","value":"0"}],"functionName":{"name":"mload","nativeSrc":"1557:5:16","nodeType":"YulIdentifier","src":"1557:5:16"},"nativeSrc":"1557:8:16","nodeType":"YulFunctionCall","src":"1557:8:16"}],"functionName":{"name":"iszero","nativeSrc":"1550:6:16","nodeType":"YulIdentifier","src":"1550:6:16"},"nativeSrc":"1550:16:16","nodeType":"YulFunctionCall","src":"1550:16:16"}],"functionName":{"name":"or","nativeSrc":"1530:2:16","nodeType":"YulIdentifier","src":"1530:2:16"},"nativeSrc":"1530:37:16","nodeType":"YulFunctionCall","src":"1530:37:16"}],"functionName":{"name":"iszero","nativeSrc":"1523:6:16","nodeType":"YulIdentifier","src":"1523:6:16"},"nativeSrc":"1523:45:16","nodeType":"YulFunctionCall","src":"1523:45:16"},"variableNames":[{"name":"transferred","nativeSrc":"1508:11:16","nodeType":"YulIdentifier","src":"1508:11:16"}]}]},"nativeSrc":"1480:102:16","nodeType":"YulCase","src":"1480:102:16","value":{"kind":"number","nativeSrc":"1485:4:16","nodeType":"YulLiteral","src":"1485:4:16","type":"","value":"0x20"}},{"body":{"nativeSrc":"1603:48:16","nodeType":"YulBlock","src":"1603:48:16","statements":[{"nativeSrc":"1621:16:16","nodeType":"YulAssignment","src":"1621:16:16","value":{"kind":"number","nativeSrc":"1636:1:16","nodeType":"YulLiteral","src":"1636:1:16","type":"","value":"0"},"variableNames":[{"name":"transferred","nativeSrc":"1621:11:16","nodeType":"YulIdentifier","src":"1621:11:16"}]}]},"nativeSrc":"1595:56:16","nodeType":"YulCase","src":"1595:56:16","value":"default"}],"expression":{"arguments":[],"functionName":{"name":"returndatasize","nativeSrc":"1377:14:16","nodeType":"YulIdentifier","src":"1377:14:16"},"nativeSrc":"1377:16:16","nodeType":"YulFunctionCall","src":"1377:16:16"},"nativeSrc":"1370:281:16","nodeType":"YulSwitch","src":"1370:281:16"}]},"evmVersion":"paris","externalReferences":[{"declaration":3061,"isOffset":false,"isSlot":false,"src":"1323:4:16","valueSize":1},{"declaration":3061,"isOffset":false,"isSlot":false,"src":"1342:4:16","valueSize":1},{"declaration":3051,"isOffset":false,"isSlot":false,"src":"1309:5:16","valueSize":1},{"declaration":3058,"isOffset":false,"isSlot":false,"src":"1431:11:16","valueSize":1},{"declaration":3058,"isOffset":false,"isSlot":false,"src":"1508:11:16","valueSize":1},{"declaration":3058,"isOffset":false,"isSlot":false,"src":"1621:11:16","valueSize":1}],"id":3069,"nodeType":"InlineAssembly","src":"1080:581:16"}]},"documentation":{"id":3049,"nodeType":"StructuredDocumentation","src":"225:533:16","text":" @notice Transfers a token and returns a boolean if it was a success\n @dev It checks the return data of the transfer call and returns true if the transfer was successful.\n      It doesn't check if the `token` address is a contract or not.\n @param token Token that should be transferred\n @param receiver Receiver to whom the token should be transferred\n @param amount The amount of tokens that should be transferred\n @return transferred Returns true if the transfer was successful"},"id":3071,"implemented":true,"kind":"function","modifiers":[],"name":"transferToken","nameLocation":"772:13:16","nodeType":"FunctionDefinition","parameters":{"id":3056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3051,"mutability":"mutable","name":"token","nameLocation":"794:5:16","nodeType":"VariableDeclaration","scope":3071,"src":"786:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3050,"name":"address","nodeType":"ElementaryTypeName","src":"786:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3053,"mutability":"mutable","name":"receiver","nameLocation":"809:8:16","nodeType":"VariableDeclaration","scope":3071,"src":"801:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3052,"name":"address","nodeType":"ElementaryTypeName","src":"801:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3055,"mutability":"mutable","name":"amount","nameLocation":"827:6:16","nodeType":"VariableDeclaration","scope":3071,"src":"819:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3054,"name":"uint256","nodeType":"ElementaryTypeName","src":"819:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"785:49:16"},"returnParameters":{"id":3059,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3058,"mutability":"mutable","name":"transferred","nameLocation":"858:11:16","nodeType":"VariableDeclaration","scope":3071,"src":"853:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3057,"name":"bool","nodeType":"ElementaryTypeName","src":"853:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"852:18:16"},"scope":3072,"src":"763:904:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":3073,"src":"180:1489:16","usedErrors":[],"usedEvents":[]}],"src":"42:1628:16"},"id":16},"@safe-global/safe-contracts/contracts/common/SelfAuthorized.sol":{"ast":{"absolutePath":"@safe-global/safe-contracts/contracts/common/SelfAuthorized.sol","exportedSymbols":{"SelfAuthorized":[3098]},"id":3099,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3074,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:17"},{"abstract":true,"baseContracts":[],"canonicalName":"SelfAuthorized","contractDependencies":[],"contractKind":"contract","documentation":{"id":3075,"nodeType":"StructuredDocumentation","src":"75:133:17","text":" @title SelfAuthorized - Authorizes current contract to perform actions to itself.\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":3098,"linearizedBaseContracts":[3098],"name":"SelfAuthorized","nameLocation":"227:14:17","nodeType":"ContractDefinition","nodes":[{"body":{"id":3089,"nodeType":"Block","src":"288:62:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3079,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"306:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"310:6:17","memberName":"sender","nodeType":"MemberAccess","src":"306:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":3083,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"328:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_SelfAuthorized_$3098","typeString":"contract SelfAuthorized"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SelfAuthorized_$3098","typeString":"contract SelfAuthorized"}],"id":3082,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"320:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3081,"name":"address","nodeType":"ElementaryTypeName","src":"320:7:17","typeDescriptions":{}}},"id":3084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"320:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"306:27:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4753303331","id":3086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"335:7:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_b7248be3e8887f14d79f63d350787adcdb5e12b47898ebd6ef2aacf660fc9f17","typeString":"literal_string \"GS031\""},"value":"GS031"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b7248be3e8887f14d79f63d350787adcdb5e12b47898ebd6ef2aacf660fc9f17","typeString":"literal_string \"GS031\""}],"id":3078,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"298:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"298:45:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3088,"nodeType":"ExpressionStatement","src":"298:45:17"}]},"id":3090,"implemented":true,"kind":"function","modifiers":[],"name":"requireSelfCall","nameLocation":"257:15:17","nodeType":"FunctionDefinition","parameters":{"id":3076,"nodeType":"ParameterList","parameters":[],"src":"272:2:17"},"returnParameters":{"id":3077,"nodeType":"ParameterList","parameters":[],"src":"288:0:17"},"scope":3098,"src":"248:102:17","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":3096,"nodeType":"Block","src":"378:162:17","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3092,"name":"requireSelfCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3090,"src":"505:15:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":3093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"505:17:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3094,"nodeType":"ExpressionStatement","src":"505:17:17"},{"id":3095,"nodeType":"PlaceholderStatement","src":"532:1:17"}]},"id":3097,"name":"authorized","nameLocation":"365:10:17","nodeType":"ModifierDefinition","parameters":{"id":3091,"nodeType":"ParameterList","parameters":[],"src":"375:2:17"},"src":"356:184:17","virtual":false,"visibility":"internal"}],"scope":3099,"src":"209:333:17","usedErrors":[],"usedEvents":[]}],"src":"42:501:17"},"id":17},"@safe-global/safe-contracts/contracts/common/SignatureDecoder.sol":{"ast":{"absolutePath":"@safe-global/safe-contracts/contracts/common/SignatureDecoder.sol","exportedSymbols":{"SignatureDecoder":[3118]},"id":3119,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3100,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:18"},{"abstract":true,"baseContracts":[],"canonicalName":"SignatureDecoder","contractDependencies":[],"contractKind":"contract","documentation":{"id":3101,"nodeType":"StructuredDocumentation","src":"75:113:18","text":" @title SignatureDecoder - Decodes signatures encoded as bytes\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":3118,"linearizedBaseContracts":[3118],"name":"SignatureDecoder","nameLocation":"207:16:18","nodeType":"ContractDefinition","nodes":[{"body":{"id":3116,"nodeType":"Block","src":"1063:628:18","statements":[{"AST":{"nativeSrc":"1138:547:18","nodeType":"YulBlock","src":"1138:547:18","statements":[{"nativeSrc":"1152:34:18","nodeType":"YulVariableDeclaration","src":"1152:34:18","value":{"arguments":[{"kind":"number","nativeSrc":"1176:4:18","nodeType":"YulLiteral","src":"1176:4:18","type":"","value":"0x41"},{"name":"pos","nativeSrc":"1182:3:18","nodeType":"YulIdentifier","src":"1182:3:18"}],"functionName":{"name":"mul","nativeSrc":"1172:3:18","nodeType":"YulIdentifier","src":"1172:3:18"},"nativeSrc":"1172:14:18","nodeType":"YulFunctionCall","src":"1172:14:18"},"variables":[{"name":"signaturePos","nativeSrc":"1156:12:18","nodeType":"YulTypedName","src":"1156:12:18","type":""}]},{"nativeSrc":"1199:52:18","nodeType":"YulAssignment","src":"1199:52:18","value":{"arguments":[{"arguments":[{"name":"signatures","nativeSrc":"1214:10:18","nodeType":"YulIdentifier","src":"1214:10:18"},{"arguments":[{"name":"signaturePos","nativeSrc":"1230:12:18","nodeType":"YulIdentifier","src":"1230:12:18"},{"kind":"number","nativeSrc":"1244:4:18","nodeType":"YulLiteral","src":"1244:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1226:3:18","nodeType":"YulIdentifier","src":"1226:3:18"},"nativeSrc":"1226:23:18","nodeType":"YulFunctionCall","src":"1226:23:18"}],"functionName":{"name":"add","nativeSrc":"1210:3:18","nodeType":"YulIdentifier","src":"1210:3:18"},"nativeSrc":"1210:40:18","nodeType":"YulFunctionCall","src":"1210:40:18"}],"functionName":{"name":"mload","nativeSrc":"1204:5:18","nodeType":"YulIdentifier","src":"1204:5:18"},"nativeSrc":"1204:47:18","nodeType":"YulFunctionCall","src":"1204:47:18"},"variableNames":[{"name":"r","nativeSrc":"1199:1:18","nodeType":"YulIdentifier","src":"1199:1:18"}]},{"nativeSrc":"1264:52:18","nodeType":"YulAssignment","src":"1264:52:18","value":{"arguments":[{"arguments":[{"name":"signatures","nativeSrc":"1279:10:18","nodeType":"YulIdentifier","src":"1279:10:18"},{"arguments":[{"name":"signaturePos","nativeSrc":"1295:12:18","nodeType":"YulIdentifier","src":"1295:12:18"},{"kind":"number","nativeSrc":"1309:4:18","nodeType":"YulLiteral","src":"1309:4:18","type":"","value":"0x40"}],"functionName":{"name":"add","nativeSrc":"1291:3:18","nodeType":"YulIdentifier","src":"1291:3:18"},"nativeSrc":"1291:23:18","nodeType":"YulFunctionCall","src":"1291:23:18"}],"functionName":{"name":"add","nativeSrc":"1275:3:18","nodeType":"YulIdentifier","src":"1275:3:18"},"nativeSrc":"1275:40:18","nodeType":"YulFunctionCall","src":"1275:40:18"}],"functionName":{"name":"mload","nativeSrc":"1269:5:18","nodeType":"YulIdentifier","src":"1269:5:18"},"nativeSrc":"1269:47:18","nodeType":"YulFunctionCall","src":"1269:47:18"},"variableNames":[{"name":"s","nativeSrc":"1264:1:18","nodeType":"YulIdentifier","src":"1264:1:18"}]},{"nativeSrc":"1612:63:18","nodeType":"YulAssignment","src":"1612:63:18","value":{"arguments":[{"arguments":[{"arguments":[{"name":"signatures","nativeSrc":"1631:10:18","nodeType":"YulIdentifier","src":"1631:10:18"},{"arguments":[{"name":"signaturePos","nativeSrc":"1647:12:18","nodeType":"YulIdentifier","src":"1647:12:18"},{"kind":"number","nativeSrc":"1661:4:18","nodeType":"YulLiteral","src":"1661:4:18","type":"","value":"0x41"}],"functionName":{"name":"add","nativeSrc":"1643:3:18","nodeType":"YulIdentifier","src":"1643:3:18"},"nativeSrc":"1643:23:18","nodeType":"YulFunctionCall","src":"1643:23:18"}],"functionName":{"name":"add","nativeSrc":"1627:3:18","nodeType":"YulIdentifier","src":"1627:3:18"},"nativeSrc":"1627:40:18","nodeType":"YulFunctionCall","src":"1627:40:18"}],"functionName":{"name":"mload","nativeSrc":"1621:5:18","nodeType":"YulIdentifier","src":"1621:5:18"},"nativeSrc":"1621:47:18","nodeType":"YulFunctionCall","src":"1621:47:18"},{"kind":"number","nativeSrc":"1670:4:18","nodeType":"YulLiteral","src":"1670:4:18","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"1617:3:18","nodeType":"YulIdentifier","src":"1617:3:18"},"nativeSrc":"1617:58:18","nodeType":"YulFunctionCall","src":"1617:58:18"},"variableNames":[{"name":"v","nativeSrc":"1612:1:18","nodeType":"YulIdentifier","src":"1612:1:18"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3106,"isOffset":false,"isSlot":false,"src":"1182:3:18","valueSize":1},{"declaration":3111,"isOffset":false,"isSlot":false,"src":"1199:1:18","valueSize":1},{"declaration":3113,"isOffset":false,"isSlot":false,"src":"1264:1:18","valueSize":1},{"declaration":3104,"isOffset":false,"isSlot":false,"src":"1214:10:18","valueSize":1},{"declaration":3104,"isOffset":false,"isSlot":false,"src":"1279:10:18","valueSize":1},{"declaration":3104,"isOffset":false,"isSlot":false,"src":"1631:10:18","valueSize":1},{"declaration":3109,"isOffset":false,"isSlot":false,"src":"1612:1:18","valueSize":1}],"id":3115,"nodeType":"InlineAssembly","src":"1129:556:18"}]},"documentation":{"id":3102,"nodeType":"StructuredDocumentation","src":"230:712:18","text":" @notice Splits signature bytes into `uint8 v, bytes32 r, bytes32 s`.\n @dev Make sure to perform a bounds check for @param pos, to avoid out of bounds access on @param signatures\n      The signature format is a compact form of {bytes32 r}{bytes32 s}{uint8 v}\n      Compact means uint8 is not padded to 32 bytes.\n @param pos Which signature to read.\n            A prior bounds check of this parameter should be performed, to avoid out of bounds access.\n @param signatures Concatenated {r, s, v} signatures.\n @return v Recovery ID or Safe signature type.\n @return r Output value r of the signature.\n @return s Output value s of the signature."},"id":3117,"implemented":true,"kind":"function","modifiers":[],"name":"signatureSplit","nameLocation":"956:14:18","nodeType":"FunctionDefinition","parameters":{"id":3107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3104,"mutability":"mutable","name":"signatures","nameLocation":"984:10:18","nodeType":"VariableDeclaration","scope":3117,"src":"971:23:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3103,"name":"bytes","nodeType":"ElementaryTypeName","src":"971:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3106,"mutability":"mutable","name":"pos","nameLocation":"1004:3:18","nodeType":"VariableDeclaration","scope":3117,"src":"996:11:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3105,"name":"uint256","nodeType":"ElementaryTypeName","src":"996:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:38:18"},"returnParameters":{"id":3114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3109,"mutability":"mutable","name":"v","nameLocation":"1038:1:18","nodeType":"VariableDeclaration","scope":3117,"src":"1032:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3108,"name":"uint8","nodeType":"ElementaryTypeName","src":"1032:5:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3111,"mutability":"mutable","name":"r","nameLocation":"1049:1:18","nodeType":"VariableDeclaration","scope":3117,"src":"1041:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3110,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1041:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3113,"mutability":"mutable","name":"s","nameLocation":"1060:1:18","nodeType":"VariableDeclaration","scope":3117,"src":"1052:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3112,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1052:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1031:31:18"},"scope":3118,"src":"947:744:18","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3119,"src":"189:1504:18","usedErrors":[],"usedEvents":[]}],"src":"42:1652:18"},"id":18},"@safe-global/safe-contracts/contracts/common/Singleton.sol":{"ast":{"absolutePath":"@safe-global/safe-contracts/contracts/common/Singleton.sol","exportedSymbols":{"Singleton":[3124]},"id":3125,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3120,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:19"},{"abstract":true,"baseContracts":[],"canonicalName":"Singleton","contractDependencies":[],"contractKind":"contract","documentation":{"id":3121,"nodeType":"StructuredDocumentation","src":"75:238:19","text":" @title Singleton - Base for singleton contracts (should always be the first super contract)\n        This contract is tightly coupled to our proxy contract (see `proxies/SafeProxy.sol`)\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":3124,"linearizedBaseContracts":[3124],"name":"Singleton","nameLocation":"332:9:19","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":3123,"mutability":"mutable","name":"singleton","nameLocation":"567:9:19","nodeType":"VariableDeclaration","scope":3124,"src":"551:25:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3122,"name":"address","nodeType":"ElementaryTypeName","src":"551:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"}],"scope":3125,"src":"314:265:19","usedErrors":[],"usedEvents":[]}],"src":"42:538:19"},"id":19},"@safe-global/safe-contracts/contracts/common/StorageAccessible.sol":{"ast":{"absolutePath":"@safe-global/safe-contracts/contracts/common/StorageAccessible.sol","exportedSymbols":{"StorageAccessible":[3173]},"id":3174,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3126,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:20"},{"abstract":true,"baseContracts":[],"canonicalName":"StorageAccessible","contractDependencies":[],"contractKind":"contract","documentation":{"id":3127,"nodeType":"StructuredDocumentation","src":"75:369:20","text":" @title StorageAccessible - A generic base contract that allows callers to access all internal storage.\n @notice See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\n         It removes a method from the original contract not needed for the Safe contracts.\n @author Gnosis Developers"},"fullyImplemented":true,"id":3173,"linearizedBaseContracts":[3173],"name":"StorageAccessible","nameLocation":"463:17:20","nodeType":"ContractDefinition","nodes":[{"body":{"id":3161,"nodeType":"Block","src":"874:375:20","statements":[{"assignments":[3138],"declarations":[{"constant":false,"id":3138,"mutability":"mutable","name":"result","nameLocation":"897:6:20","nodeType":"VariableDeclaration","scope":3161,"src":"884:19:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3137,"name":"bytes","nodeType":"ElementaryTypeName","src":"884:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3145,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3141,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3132,"src":"916:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3332","id":3142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"925:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"916:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3140,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"906:9:20","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":3139,"name":"bytes","nodeType":"ElementaryTypeName","src":"910:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":3144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"906:22:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"884:44:20"},{"body":{"id":3157,"nodeType":"Block","src":"987:233:20","statements":[{"AST":{"nativeSrc":"1070:140:20","nodeType":"YulBlock","src":"1070:140:20","statements":[{"nativeSrc":"1088:37:20","nodeType":"YulVariableDeclaration","src":"1088:37:20","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1110:6:20","nodeType":"YulIdentifier","src":"1110:6:20"},{"name":"index","nativeSrc":"1118:5:20","nodeType":"YulIdentifier","src":"1118:5:20"}],"functionName":{"name":"add","nativeSrc":"1106:3:20","nodeType":"YulIdentifier","src":"1106:3:20"},"nativeSrc":"1106:18:20","nodeType":"YulFunctionCall","src":"1106:18:20"}],"functionName":{"name":"sload","nativeSrc":"1100:5:20","nodeType":"YulIdentifier","src":"1100:5:20"},"nativeSrc":"1100:25:20","nodeType":"YulFunctionCall","src":"1100:25:20"},"variables":[{"name":"word","nativeSrc":"1092:4:20","nodeType":"YulTypedName","src":"1092:4:20","type":""}]},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"result","nativeSrc":"1157:6:20","nodeType":"YulIdentifier","src":"1157:6:20"},{"kind":"number","nativeSrc":"1165:4:20","nodeType":"YulLiteral","src":"1165:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1153:3:20","nodeType":"YulIdentifier","src":"1153:3:20"},"nativeSrc":"1153:17:20","nodeType":"YulFunctionCall","src":"1153:17:20"},{"arguments":[{"name":"index","nativeSrc":"1176:5:20","nodeType":"YulIdentifier","src":"1176:5:20"},{"kind":"number","nativeSrc":"1183:4:20","nodeType":"YulLiteral","src":"1183:4:20","type":"","value":"0x20"}],"functionName":{"name":"mul","nativeSrc":"1172:3:20","nodeType":"YulIdentifier","src":"1172:3:20"},"nativeSrc":"1172:16:20","nodeType":"YulFunctionCall","src":"1172:16:20"}],"functionName":{"name":"add","nativeSrc":"1149:3:20","nodeType":"YulIdentifier","src":"1149:3:20"},"nativeSrc":"1149:40:20","nodeType":"YulFunctionCall","src":"1149:40:20"},{"name":"word","nativeSrc":"1191:4:20","nodeType":"YulIdentifier","src":"1191:4:20"}],"functionName":{"name":"mstore","nativeSrc":"1142:6:20","nodeType":"YulIdentifier","src":"1142:6:20"},"nativeSrc":"1142:54:20","nodeType":"YulFunctionCall","src":"1142:54:20"},"nativeSrc":"1142:54:20","nodeType":"YulExpressionStatement","src":"1142:54:20"}]},"evmVersion":"paris","externalReferences":[{"declaration":3147,"isOffset":false,"isSlot":false,"src":"1118:5:20","valueSize":1},{"declaration":3147,"isOffset":false,"isSlot":false,"src":"1176:5:20","valueSize":1},{"declaration":3130,"isOffset":false,"isSlot":false,"src":"1110:6:20","valueSize":1},{"declaration":3138,"isOffset":false,"isSlot":false,"src":"1157:6:20","valueSize":1}],"id":3156,"nodeType":"InlineAssembly","src":"1061:149:20"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3150,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3147,"src":"962:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3151,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3132,"src":"970:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"962:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3158,"initializationExpression":{"assignments":[3147],"declarations":[{"constant":false,"id":3147,"mutability":"mutable","name":"index","nameLocation":"951:5:20","nodeType":"VariableDeclaration","scope":3158,"src":"943:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3146,"name":"uint256","nodeType":"ElementaryTypeName","src":"943:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3149,"initialValue":{"hexValue":"30","id":3148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"959:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"943:17:20"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":3154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"978:7:20","subExpression":{"id":3153,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3147,"src":"978:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3155,"nodeType":"ExpressionStatement","src":"978:7:20"},"nodeType":"ForStatement","src":"938:282:20"},{"expression":{"id":3159,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"1236:6:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3136,"id":3160,"nodeType":"Return","src":"1229:13:20"}]},"documentation":{"id":3128,"nodeType":"StructuredDocumentation","src":"487:293:20","text":" @notice Reads `length` bytes of storage in the currents contract\n @param offset - the offset in the current contract's storage in words to start reading from\n @param length - the number of words (32 bytes) of data to read\n @return the bytes that were read."},"functionSelector":"5624b25b","id":3162,"implemented":true,"kind":"function","modifiers":[],"name":"getStorageAt","nameLocation":"794:12:20","nodeType":"FunctionDefinition","parameters":{"id":3133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3130,"mutability":"mutable","name":"offset","nameLocation":"815:6:20","nodeType":"VariableDeclaration","scope":3162,"src":"807:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3129,"name":"uint256","nodeType":"ElementaryTypeName","src":"807:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3132,"mutability":"mutable","name":"length","nameLocation":"831:6:20","nodeType":"VariableDeclaration","scope":3162,"src":"823:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3131,"name":"uint256","nodeType":"ElementaryTypeName","src":"823:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"806:32:20"},"returnParameters":{"id":3136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3135,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3162,"src":"860:12:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3134,"name":"bytes","nodeType":"ElementaryTypeName","src":"860:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"859:14:20"},"scope":3173,"src":"785:464:20","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3171,"nodeType":"Block","src":"1972:396:20","statements":[{"AST":{"nativeSrc":"2047:315:20","nodeType":"YulBlock","src":"2047:315:20","statements":[{"nativeSrc":"2061:108:20","nodeType":"YulVariableDeclaration","src":"2061:108:20","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nativeSrc":"2089:3:20","nodeType":"YulIdentifier","src":"2089:3:20"},"nativeSrc":"2089:5:20","nodeType":"YulFunctionCall","src":"2089:5:20"},{"name":"targetContract","nativeSrc":"2096:14:20","nodeType":"YulIdentifier","src":"2096:14:20"},{"arguments":[{"name":"calldataPayload","nativeSrc":"2116:15:20","nodeType":"YulIdentifier","src":"2116:15:20"},{"kind":"number","nativeSrc":"2133:4:20","nodeType":"YulLiteral","src":"2133:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2112:3:20","nodeType":"YulIdentifier","src":"2112:3:20"},"nativeSrc":"2112:26:20","nodeType":"YulFunctionCall","src":"2112:26:20"},{"arguments":[{"name":"calldataPayload","nativeSrc":"2146:15:20","nodeType":"YulIdentifier","src":"2146:15:20"}],"functionName":{"name":"mload","nativeSrc":"2140:5:20","nodeType":"YulIdentifier","src":"2140:5:20"},"nativeSrc":"2140:22:20","nodeType":"YulFunctionCall","src":"2140:22:20"},{"kind":"number","nativeSrc":"2164:1:20","nodeType":"YulLiteral","src":"2164:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"2167:1:20","nodeType":"YulLiteral","src":"2167:1:20","type":"","value":"0"}],"functionName":{"name":"delegatecall","nativeSrc":"2076:12:20","nodeType":"YulIdentifier","src":"2076:12:20"},"nativeSrc":"2076:93:20","nodeType":"YulFunctionCall","src":"2076:93:20"},"variables":[{"name":"success","nativeSrc":"2065:7:20","nodeType":"YulTypedName","src":"2065:7:20","type":""}]},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2190:4:20","nodeType":"YulLiteral","src":"2190:4:20","type":"","value":"0x00"},{"name":"success","nativeSrc":"2196:7:20","nodeType":"YulIdentifier","src":"2196:7:20"}],"functionName":{"name":"mstore","nativeSrc":"2183:6:20","nodeType":"YulIdentifier","src":"2183:6:20"},"nativeSrc":"2183:21:20","nodeType":"YulFunctionCall","src":"2183:21:20"},"nativeSrc":"2183:21:20","nodeType":"YulExpressionStatement","src":"2183:21:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2224:4:20","nodeType":"YulLiteral","src":"2224:4:20","type":"","value":"0x20"},{"arguments":[],"functionName":{"name":"returndatasize","nativeSrc":"2230:14:20","nodeType":"YulIdentifier","src":"2230:14:20"},"nativeSrc":"2230:16:20","nodeType":"YulFunctionCall","src":"2230:16:20"}],"functionName":{"name":"mstore","nativeSrc":"2217:6:20","nodeType":"YulIdentifier","src":"2217:6:20"},"nativeSrc":"2217:30:20","nodeType":"YulFunctionCall","src":"2217:30:20"},"nativeSrc":"2217:30:20","nodeType":"YulExpressionStatement","src":"2217:30:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2275:4:20","nodeType":"YulLiteral","src":"2275:4:20","type":"","value":"0x40"},{"kind":"number","nativeSrc":"2281:1:20","nodeType":"YulLiteral","src":"2281:1:20","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nativeSrc":"2284:14:20","nodeType":"YulIdentifier","src":"2284:14:20"},"nativeSrc":"2284:16:20","nodeType":"YulFunctionCall","src":"2284:16:20"}],"functionName":{"name":"returndatacopy","nativeSrc":"2260:14:20","nodeType":"YulIdentifier","src":"2260:14:20"},"nativeSrc":"2260:41:20","nodeType":"YulFunctionCall","src":"2260:41:20"},"nativeSrc":"2260:41:20","nodeType":"YulExpressionStatement","src":"2260:41:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2321:1:20","nodeType":"YulLiteral","src":"2321:1:20","type":"","value":"0"},{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nativeSrc":"2328:14:20","nodeType":"YulIdentifier","src":"2328:14:20"},"nativeSrc":"2328:16:20","nodeType":"YulFunctionCall","src":"2328:16:20"},{"kind":"number","nativeSrc":"2346:4:20","nodeType":"YulLiteral","src":"2346:4:20","type":"","value":"0x40"}],"functionName":{"name":"add","nativeSrc":"2324:3:20","nodeType":"YulIdentifier","src":"2324:3:20"},"nativeSrc":"2324:27:20","nodeType":"YulFunctionCall","src":"2324:27:20"}],"functionName":{"name":"revert","nativeSrc":"2314:6:20","nodeType":"YulIdentifier","src":"2314:6:20"},"nativeSrc":"2314:38:20","nodeType":"YulFunctionCall","src":"2314:38:20"},"nativeSrc":"2314:38:20","nodeType":"YulExpressionStatement","src":"2314:38:20"}]},"evmVersion":"paris","externalReferences":[{"declaration":3167,"isOffset":false,"isSlot":false,"src":"2116:15:20","valueSize":1},{"declaration":3167,"isOffset":false,"isSlot":false,"src":"2146:15:20","valueSize":1},{"declaration":3165,"isOffset":false,"isSlot":false,"src":"2096:14:20","valueSize":1}],"id":3170,"nodeType":"InlineAssembly","src":"2038:324:20"}]},"documentation":{"id":3163,"nodeType":"StructuredDocumentation","src":"1255:622:20","text":" @dev Performs a delegatecall on a targetContract in the context of self.\n Internally reverts execution to avoid side effects (making it static).\n This method reverts with data equal to `abi.encode(bool(success), bytes(response))`.\n Specifically, the `returndata` after a call to this method will be:\n `success:bool || response.length:uint256 || response:bytes`.\n @param targetContract Address of the contract containing the code to execute.\n @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments)."},"functionSelector":"b4faba09","id":3172,"implemented":true,"kind":"function","modifiers":[],"name":"simulateAndRevert","nameLocation":"1891:17:20","nodeType":"FunctionDefinition","parameters":{"id":3168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3165,"mutability":"mutable","name":"targetContract","nameLocation":"1917:14:20","nodeType":"VariableDeclaration","scope":3172,"src":"1909:22:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3164,"name":"address","nodeType":"ElementaryTypeName","src":"1909:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3167,"mutability":"mutable","name":"calldataPayload","nameLocation":"1946:15:20","nodeType":"VariableDeclaration","scope":3172,"src":"1933:28:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3166,"name":"bytes","nodeType":"ElementaryTypeName","src":"1933:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1908:54:20"},"returnParameters":{"id":3169,"nodeType":"ParameterList","parameters":[],"src":"1972:0:20"},"scope":3173,"src":"1882:486:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3174,"src":"445:1925:20","usedErrors":[],"usedEvents":[]}],"src":"42:2329:20"},"id":20},"@safe-global/safe-contracts/contracts/external/SafeMath.sol":{"ast":{"absolutePath":"@safe-global/safe-contracts/contracts/external/SafeMath.sol","exportedSymbols":{"SafeMath":[3279]},"id":3280,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3175,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:21"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeMath","contractDependencies":[],"contractKind":"library","documentation":{"id":3176,"nodeType":"StructuredDocumentation","src":"75:114:21","text":" @title SafeMath\n @notice Math operations with safety checks that revert on error (overflow/underflow)"},"fullyImplemented":true,"id":3279,"linearizedBaseContracts":[3279],"name":"SafeMath","nameLocation":"198:8:21","nodeType":"ContractDefinition","nodes":[{"body":{"id":3209,"nodeType":"Block","src":"449:354:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3186,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"680:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"685:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"680:6:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3192,"nodeType":"IfStatement","src":"676:45:21","trueBody":{"id":3191,"nodeType":"Block","src":"688:33:21","statements":[{"expression":{"hexValue":"30","id":3189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"709:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3185,"id":3190,"nodeType":"Return","src":"702:8:21"}]}},{"assignments":[3194],"declarations":[{"constant":false,"id":3194,"mutability":"mutable","name":"c","nameLocation":"739:1:21","nodeType":"VariableDeclaration","scope":3209,"src":"731:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3193,"name":"uint256","nodeType":"ElementaryTypeName","src":"731:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3198,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3195,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"743:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3196,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3181,"src":"747:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"743:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"731:17:21"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3200,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3194,"src":"766:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3201,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"770:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"766:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3203,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3181,"src":"775:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"766:10:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3199,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"758:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"758:19:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3206,"nodeType":"ExpressionStatement","src":"758:19:21"},{"expression":{"id":3207,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3194,"src":"795:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3185,"id":3208,"nodeType":"Return","src":"788:8:21"}]},"documentation":{"id":3177,"nodeType":"StructuredDocumentation","src":"213:164:21","text":" @notice Multiplies two numbers, reverts on overflow.\n @param a First number\n @param b Second number\n @return Product of a and b"},"id":3210,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"391:3:21","nodeType":"FunctionDefinition","parameters":{"id":3182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3179,"mutability":"mutable","name":"a","nameLocation":"403:1:21","nodeType":"VariableDeclaration","scope":3210,"src":"395:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3178,"name":"uint256","nodeType":"ElementaryTypeName","src":"395:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3181,"mutability":"mutable","name":"b","nameLocation":"414:1:21","nodeType":"VariableDeclaration","scope":3210,"src":"406:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3180,"name":"uint256","nodeType":"ElementaryTypeName","src":"406:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"394:22:21"},"returnParameters":{"id":3185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3184,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3210,"src":"440:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3183,"name":"uint256","nodeType":"ElementaryTypeName","src":"440:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"439:9:21"},"scope":3279,"src":"382:421:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3234,"nodeType":"Block","src":"1092:78:21","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3221,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3215,"src":"1110:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3222,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3213,"src":"1115:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1110:6:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3220,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1102:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1102:15:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3225,"nodeType":"ExpressionStatement","src":"1102:15:21"},{"assignments":[3227],"declarations":[{"constant":false,"id":3227,"mutability":"mutable","name":"c","nameLocation":"1135:1:21","nodeType":"VariableDeclaration","scope":3234,"src":"1127:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3226,"name":"uint256","nodeType":"ElementaryTypeName","src":"1127:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3231,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3228,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3213,"src":"1139:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3229,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3215,"src":"1143:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1139:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1127:17:21"},{"expression":{"id":3232,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3227,"src":"1162:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3219,"id":3233,"nodeType":"Return","src":"1155:8:21"}]},"documentation":{"id":3211,"nodeType":"StructuredDocumentation","src":"809:211:21","text":" @notice Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n @param a First number\n @param b Second number\n @return Difference of a and b"},"id":3235,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"1034:3:21","nodeType":"FunctionDefinition","parameters":{"id":3216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3213,"mutability":"mutable","name":"a","nameLocation":"1046:1:21","nodeType":"VariableDeclaration","scope":3235,"src":"1038:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3212,"name":"uint256","nodeType":"ElementaryTypeName","src":"1038:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3215,"mutability":"mutable","name":"b","nameLocation":"1057:1:21","nodeType":"VariableDeclaration","scope":3235,"src":"1049:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3214,"name":"uint256","nodeType":"ElementaryTypeName","src":"1049:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1037:22:21"},"returnParameters":{"id":3219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3218,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3235,"src":"1083:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3217,"name":"uint256","nodeType":"ElementaryTypeName","src":"1083:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1082:9:21"},"scope":3279,"src":"1025:145:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3259,"nodeType":"Block","src":"1402:78:21","statements":[{"assignments":[3246],"declarations":[{"constant":false,"id":3246,"mutability":"mutable","name":"c","nameLocation":"1420:1:21","nodeType":"VariableDeclaration","scope":3259,"src":"1412:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3245,"name":"uint256","nodeType":"ElementaryTypeName","src":"1412:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3250,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3247,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3238,"src":"1424:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3248,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3240,"src":"1428:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1424:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1412:17:21"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3252,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"1447:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3253,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3238,"src":"1452:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1447:6:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3251,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1439:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1439:15:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3256,"nodeType":"ExpressionStatement","src":"1439:15:21"},{"expression":{"id":3257,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"1472:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3244,"id":3258,"nodeType":"Return","src":"1465:8:21"}]},"documentation":{"id":3236,"nodeType":"StructuredDocumentation","src":"1176:154:21","text":" @notice Adds two numbers, reverts on overflow.\n @param a First number\n @param b Second number\n @return Sum of a and b"},"id":3260,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"1344:3:21","nodeType":"FunctionDefinition","parameters":{"id":3241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3238,"mutability":"mutable","name":"a","nameLocation":"1356:1:21","nodeType":"VariableDeclaration","scope":3260,"src":"1348:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3237,"name":"uint256","nodeType":"ElementaryTypeName","src":"1348:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3240,"mutability":"mutable","name":"b","nameLocation":"1367:1:21","nodeType":"VariableDeclaration","scope":3260,"src":"1359:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3239,"name":"uint256","nodeType":"ElementaryTypeName","src":"1359:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1347:22:21"},"returnParameters":{"id":3244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3243,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3260,"src":"1393:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3242,"name":"uint256","nodeType":"ElementaryTypeName","src":"1393:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1392:9:21"},"scope":3279,"src":"1335:145:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3277,"nodeType":"Block","src":"1713:38:21","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3270,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3263,"src":"1730:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3271,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3265,"src":"1735:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1730:6:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3274,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3265,"src":"1743:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1730:14:21","trueExpression":{"id":3273,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3263,"src":"1739:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3269,"id":3276,"nodeType":"Return","src":"1723:21:21"}]},"documentation":{"id":3261,"nodeType":"StructuredDocumentation","src":"1486:155:21","text":" @notice Returns the largest of two numbers.\n @param a First number\n @param b Second number\n @return Largest of a and b"},"id":3278,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"1655:3:21","nodeType":"FunctionDefinition","parameters":{"id":3266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3263,"mutability":"mutable","name":"a","nameLocation":"1667:1:21","nodeType":"VariableDeclaration","scope":3278,"src":"1659:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3262,"name":"uint256","nodeType":"ElementaryTypeName","src":"1659:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3265,"mutability":"mutable","name":"b","nameLocation":"1678:1:21","nodeType":"VariableDeclaration","scope":3278,"src":"1670:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3264,"name":"uint256","nodeType":"ElementaryTypeName","src":"1670:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1658:22:21"},"returnParameters":{"id":3269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3268,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3278,"src":"1704:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3267,"name":"uint256","nodeType":"ElementaryTypeName","src":"1704:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1703:9:21"},"scope":3279,"src":"1646:105:21","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3280,"src":"190:1563:21","usedErrors":[],"usedEvents":[]}],"src":"42:1712:21"},"id":21},"@safe-global/safe-contracts/contracts/handler/CompatibilityFallbackHandler.sol":{"ast":{"absolutePath":"@safe-global/safe-contracts/contracts/handler/CompatibilityFallbackHandler.sol","exportedSymbols":{"BaseGuard":[2015],"CompatibilityFallbackHandler":[3541],"ERC1155TokenReceiver":[3725],"ERC721TokenReceiver":[3743],"ERC777TokensRecipient":[3763],"Enum":[3023],"Executor":[1886],"FallbackManager":[1948],"Guard":[1989],"GuardManager":[2077],"IERC165":[3775],"ISignatureValidator":[3794],"ISignatureValidatorConstants":[3781],"ModuleManager":[2503],"NativeCurrencyPaymentFallback":[3045],"OwnerManager":[3016],"Safe":[1853],"SafeMath":[3279],"SecuredTokenTransfer":[3072],"SelfAuthorized":[3098],"SignatureDecoder":[3118],"Singleton":[3124],"StorageAccessible":[3173],"TokenCallbackHandler":[3688]},"id":3542,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3281,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:22"},{"absolutePath":"@safe-global/safe-contracts/contracts/handler/TokenCallbackHandler.sol","file":"./TokenCallbackHandler.sol","id":3282,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3542,"sourceUnit":3689,"src":"75:36:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"@safe-global/safe-contracts/contracts/interfaces/ISignatureValidator.sol","file":"../interfaces/ISignatureValidator.sol","id":3283,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3542,"sourceUnit":3795,"src":"112:47:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"@safe-global/safe-contracts/contracts/Safe.sol","file":"../Safe.sol","id":3284,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3542,"sourceUnit":1854,"src":"160:21:22","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3286,"name":"TokenCallbackHandler","nameLocations":["384:20:22"],"nodeType":"IdentifierPath","referencedDeclaration":3688,"src":"384:20:22"},"id":3287,"nodeType":"InheritanceSpecifier","src":"384:20:22"},{"baseName":{"id":3288,"name":"ISignatureValidator","nameLocations":["406:19:22"],"nodeType":"IdentifierPath","referencedDeclaration":3794,"src":"406:19:22"},"id":3289,"nodeType":"InheritanceSpecifier","src":"406:19:22"}],"canonicalName":"CompatibilityFallbackHandler","contractDependencies":[],"contractKind":"contract","documentation":{"id":3285,"nodeType":"StructuredDocumentation","src":"183:159:22","text":" @title Compatibility Fallback Handler - Provides compatibility between pre 1.3.0 and 1.3.0+ Safe contracts.\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":3541,"linearizedBaseContracts":[3541,3794,3781,3688,3775,3743,3763,3725],"name":"CompatibilityFallbackHandler","nameLocation":"352:28:22","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3292,"mutability":"constant","name":"SAFE_MSG_TYPEHASH","nameLocation":"505:17:22","nodeType":"VariableDeclaration","scope":3541,"src":"480:111:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3290,"name":"bytes32","nodeType":"ElementaryTypeName","src":"480:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307836306233636266386234613232336436386436343162336236646466396132393865376633333731306366336433613964313134366235613631353066626361","id":3291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"525:66:22","typeDescriptions":{"typeIdentifier":"t_rational_43739706848186989041152069077571617734008543096732098246335109361212071148490_by_1","typeString":"int_const 4373...(69 digits omitted)...8490"},"value":"0x60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca"},"visibility":"private"},{"constant":true,"id":3300,"mutability":"constant","name":"SIMULATE_SELECTOR","nameLocation":"623:17:22","nodeType":"VariableDeclaration","scope":3541,"src":"598:89:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3293,"name":"bytes4","nodeType":"ElementaryTypeName","src":"598:6:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"arguments":[{"arguments":[{"hexValue":"73696d756c61746528616464726573732c627974657329","id":3297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"660:25:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_bd61951d7ffb6a339250a21db4422ea103eaa0c60f484ea3bbdd746b2e87bbd6","typeString":"literal_string \"simulate(address,bytes)\""},"value":"simulate(address,bytes)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_bd61951d7ffb6a339250a21db4422ea103eaa0c60f484ea3bbdd746b2e87bbd6","typeString":"literal_string \"simulate(address,bytes)\""}],"id":3296,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"650:9:22","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"650:36:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3295,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"643:6:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":3294,"name":"bytes4","nodeType":"ElementaryTypeName","src":"643:6:22","typeDescriptions":{}}},"id":3299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"643:44:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":true,"id":3306,"mutability":"constant","name":"SENTINEL_MODULES","nameLocation":"720:16:22","nodeType":"VariableDeclaration","scope":3541,"src":"694:57:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3301,"name":"address","nodeType":"ElementaryTypeName","src":"694:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"hexValue":"307831","id":3304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"747:3:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"0x1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":3303,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"739:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3302,"name":"address","nodeType":"ElementaryTypeName","src":"739:7:22","typeDescriptions":{}}},"id":3305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"739:12:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":true,"id":3309,"mutability":"constant","name":"UPDATED_MAGIC_VALUE","nameLocation":"782:19:22","nodeType":"VariableDeclaration","scope":3541,"src":"757:57:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3307,"name":"bytes4","nodeType":"ElementaryTypeName","src":"757:6:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30783136323662613765","id":3308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"804:10:22","typeDescriptions":{"typeIdentifier":"t_rational_371636862_by_1","typeString":"int_const 371636862"},"value":"0x1626ba7e"},"visibility":"internal"},{"baseFunctions":[3793],"body":{"id":3371,"nodeType":"Block","src":"1296:471:22","statements":[{"assignments":[3322],"declarations":[{"constant":false,"id":3322,"mutability":"mutable","name":"safe","nameLocation":"1346:4:22","nodeType":"VariableDeclaration","scope":3371,"src":"1341:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_Safe_$1853","typeString":"contract Safe"},"typeName":{"id":3321,"nodeType":"UserDefinedTypeName","pathNode":{"id":3320,"name":"Safe","nameLocations":["1341:4:22"],"nodeType":"IdentifierPath","referencedDeclaration":1853,"src":"1341:4:22"},"referencedDeclaration":1853,"src":"1341:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_Safe_$1853","typeString":"contract Safe"}},"visibility":"internal"}],"id":3330,"initialValue":{"arguments":[{"arguments":[{"expression":{"id":3326,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1366:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1370:6:22","memberName":"sender","nodeType":"MemberAccess","src":"1366:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3325,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1358:8:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":3324,"name":"address","nodeType":"ElementaryTypeName","src":"1358:8:22","stateMutability":"payable","typeDescriptions":{}}},"id":3328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1358:19:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":3323,"name":"Safe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1853,"src":"1353:4:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Safe_$1853_$","typeString":"type(contract Safe)"}},"id":3329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1353:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Safe_$1853","typeString":"contract Safe"}},"nodeType":"VariableDeclarationStatement","src":"1341:37:22"},{"assignments":[3332],"declarations":[{"constant":false,"id":3332,"mutability":"mutable","name":"messageData","nameLocation":"1401:11:22","nodeType":"VariableDeclaration","scope":3371,"src":"1388:24:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3331,"name":"bytes","nodeType":"ElementaryTypeName","src":"1388:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3337,"initialValue":{"arguments":[{"id":3334,"name":"safe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3322,"src":"1440:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_Safe_$1853","typeString":"contract Safe"}},{"id":3335,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"1446:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Safe_$1853","typeString":"contract Safe"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3333,"name":"encodeMessageDataForSafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3432,"src":"1415:24:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_contract$_Safe_$1853_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (contract Safe,bytes memory) view returns (bytes memory)"}},"id":3336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1415:37:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1388:64:22"},{"assignments":[3339],"declarations":[{"constant":false,"id":3339,"mutability":"mutable","name":"messageHash","nameLocation":"1470:11:22","nodeType":"VariableDeclaration","scope":3371,"src":"1462:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3338,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1462:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3343,"initialValue":{"arguments":[{"id":3341,"name":"messageData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3332,"src":"1494:11:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3340,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1484:9:22","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1484:22:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1462:44:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3344,"name":"_signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3314,"src":"1520:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1531:6:22","memberName":"length","nodeType":"MemberAccess","src":"1520:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1541:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1520:22:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3367,"nodeType":"Block","src":"1642:83:22","statements":[{"expression":{"arguments":[{"id":3362,"name":"messageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3339,"src":"1677:11:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3363,"name":"messageData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3332,"src":"1690:11:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3364,"name":"_signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3314,"src":"1703:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3359,"name":"safe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3322,"src":"1656:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_Safe_$1853","typeString":"contract Safe"}},"id":3361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1661:15:22","memberName":"checkSignatures","nodeType":"MemberAccess","referencedDeclaration":1430,"src":"1656:20:22","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory,bytes memory) view external"}},"id":3365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1656:58:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3366,"nodeType":"ExpressionStatement","src":"1656:58:22"}]},"id":3368,"nodeType":"IfStatement","src":"1516:209:22","trueBody":{"id":3358,"nodeType":"Block","src":"1544:92:22","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3351,"name":"messageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3339,"src":"1586:11:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3349,"name":"safe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3322,"src":"1566:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_Safe_$1853","typeString":"contract Safe"}},"id":3350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1571:14:22","memberName":"signedMessages","nodeType":"MemberAccess","referencedDeclaration":1027,"src":"1566:19:22","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_uint256_$","typeString":"function (bytes32) view external returns (uint256)"}},"id":3352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1566:32:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1602:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1566:37:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"48617368206e6f7420617070726f766564","id":3355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1605:19:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_fd8211c71ab965565e8a56b84284a02d17d4d89e6f05f14b26449d5de3a8c5b6","typeString":"literal_string \"Hash not approved\""},"value":"Hash not approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fd8211c71ab965565e8a56b84284a02d17d4d89e6f05f14b26449d5de3a8c5b6","typeString":"literal_string \"Hash not approved\""}],"id":3348,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1558:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1558:67:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3357,"nodeType":"ExpressionStatement","src":"1558:67:22"}]}},{"expression":{"id":3369,"name":"EIP1271_MAGIC_VALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3780,"src":"1741:19:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":3319,"id":3370,"nodeType":"Return","src":"1734:26:22"}]},"documentation":{"id":3310,"nodeType":"StructuredDocumentation","src":"821:361:22","text":" @notice Legacy EIP-1271 signature validation method.\n @dev Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)\n @param _data Arbitrary length data signed on the behalf of address(msg.sender).\n @param _signature Signature byte array associated with _data.\n @return The EIP-1271 magic value."},"functionSelector":"20c13b0b","id":3372,"implemented":true,"kind":"function","modifiers":[],"name":"isValidSignature","nameLocation":"1196:16:22","nodeType":"FunctionDefinition","overrides":{"id":3316,"nodeType":"OverrideSpecifier","overrides":[],"src":"1270:8:22"},"parameters":{"id":3315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3312,"mutability":"mutable","name":"_data","nameLocation":"1226:5:22","nodeType":"VariableDeclaration","scope":3372,"src":"1213:18:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3311,"name":"bytes","nodeType":"ElementaryTypeName","src":"1213:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3314,"mutability":"mutable","name":"_signature","nameLocation":"1246:10:22","nodeType":"VariableDeclaration","scope":3372,"src":"1233:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3313,"name":"bytes","nodeType":"ElementaryTypeName","src":"1233:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1212:45:22"},"returnParameters":{"id":3319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3318,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3372,"src":"1288:6:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3317,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1288:6:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1287:8:22"},"scope":3541,"src":"1187:580:22","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3391,"nodeType":"Block","src":"2001:81:22","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":3384,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2053:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2057:6:22","memberName":"sender","nodeType":"MemberAccess","src":"2053:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3383,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2045:8:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":3382,"name":"address","nodeType":"ElementaryTypeName","src":"2045:8:22","stateMutability":"payable","typeDescriptions":{}}},"id":3386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2045:19:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":3381,"name":"Safe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1853,"src":"2040:4:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Safe_$1853_$","typeString":"type(contract Safe)"}},"id":3387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2040:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Safe_$1853","typeString":"contract Safe"}},{"id":3388,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3375,"src":"2067:7:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Safe_$1853","typeString":"contract Safe"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3380,"name":"getMessageHashForSafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3451,"src":"2018:21:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_contract$_Safe_$1853_$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (contract Safe,bytes memory) view returns (bytes32)"}},"id":3389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2018:57:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3379,"id":3390,"nodeType":"Return","src":"2011:64:22"}]},"documentation":{"id":3373,"nodeType":"StructuredDocumentation","src":"1773:147:22","text":" @dev Returns the hash of a message to be signed by owners.\n @param message Raw message bytes.\n @return Message hash."},"functionSelector":"0a1028c4","id":3392,"implemented":true,"kind":"function","modifiers":[],"name":"getMessageHash","nameLocation":"1934:14:22","nodeType":"FunctionDefinition","parameters":{"id":3376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3375,"mutability":"mutable","name":"message","nameLocation":"1962:7:22","nodeType":"VariableDeclaration","scope":3392,"src":"1949:20:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3374,"name":"bytes","nodeType":"ElementaryTypeName","src":"1949:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1948:22:22"},"returnParameters":{"id":3379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3378,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3392,"src":"1992:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1992:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1991:9:22"},"scope":3541,"src":"1925:157:22","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3431,"nodeType":"Block","src":"2433:205:22","statements":[{"assignments":[3404],"declarations":[{"constant":false,"id":3404,"mutability":"mutable","name":"safeMessageHash","nameLocation":"2451:15:22","nodeType":"VariableDeclaration","scope":3431,"src":"2443:23:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3403,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2443:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3414,"initialValue":{"arguments":[{"arguments":[{"id":3408,"name":"SAFE_MSG_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"2490:17:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":3410,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"2519:7:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3409,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2509:9:22","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:18:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3406,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2479:3:22","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3407,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2483:6:22","memberName":"encode","nodeType":"MemberAccess","src":"2479:10:22","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2479:49:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3405,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2469:9:22","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2469:60:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2443:86:22"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30783139","id":3419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2570:4:22","typeDescriptions":{"typeIdentifier":"t_rational_25_by_1","typeString":"int_const 25"},"value":"0x19"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_25_by_1","typeString":"int_const 25"}],"id":3418,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2563:6:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":3417,"name":"bytes1","nodeType":"ElementaryTypeName","src":"2563:6:22","typeDescriptions":{}}},"id":3420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2563:12:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},{"arguments":[{"hexValue":"30783031","id":3423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2584:4:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"0x01"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":3422,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2577:6:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":3421,"name":"bytes1","nodeType":"ElementaryTypeName","src":"2577:6:22","typeDescriptions":{}}},"id":3424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2577:12:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3425,"name":"safe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3396,"src":"2591:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_Safe_$1853","typeString":"contract Safe"}},"id":3426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2596:15:22","memberName":"domainSeparator","nodeType":"MemberAccess","referencedDeclaration":1745,"src":"2591:20:22","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":3427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2591:22:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3428,"name":"safeMessageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3404,"src":"2615:15:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"},{"typeIdentifier":"t_bytes1","typeString":"bytes1"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3415,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2546:3:22","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3416,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2550:12:22","memberName":"encodePacked","nodeType":"MemberAccess","src":"2546:16:22","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2546:85:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3402,"id":3430,"nodeType":"Return","src":"2539:92:22"}]},"documentation":{"id":3393,"nodeType":"StructuredDocumentation","src":"2088:238:22","text":" @dev Returns the pre-image of the message hash (see getMessageHashForSafe).\n @param safe Safe to which the message is targeted.\n @param message Message that should be encoded.\n @return Encoded message."},"functionSelector":"23031640","id":3432,"implemented":true,"kind":"function","modifiers":[],"name":"encodeMessageDataForSafe","nameLocation":"2340:24:22","nodeType":"FunctionDefinition","parameters":{"id":3399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3396,"mutability":"mutable","name":"safe","nameLocation":"2370:4:22","nodeType":"VariableDeclaration","scope":3432,"src":"2365:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_Safe_$1853","typeString":"contract Safe"},"typeName":{"id":3395,"nodeType":"UserDefinedTypeName","pathNode":{"id":3394,"name":"Safe","nameLocations":["2365:4:22"],"nodeType":"IdentifierPath","referencedDeclaration":1853,"src":"2365:4:22"},"referencedDeclaration":1853,"src":"2365:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_Safe_$1853","typeString":"contract Safe"}},"visibility":"internal"},{"constant":false,"id":3398,"mutability":"mutable","name":"message","nameLocation":"2389:7:22","nodeType":"VariableDeclaration","scope":3432,"src":"2376:20:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3397,"name":"bytes","nodeType":"ElementaryTypeName","src":"2376:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2364:33:22"},"returnParameters":{"id":3402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3401,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3432,"src":"2419:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3400,"name":"bytes","nodeType":"ElementaryTypeName","src":"2419:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2418:14:22"},"scope":3541,"src":"2331:307:22","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3450,"nodeType":"Block","src":"2962:74:22","statements":[{"expression":{"arguments":[{"arguments":[{"id":3445,"name":"safe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"3014:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_Safe_$1853","typeString":"contract Safe"}},{"id":3446,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3438,"src":"3020:7:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Safe_$1853","typeString":"contract Safe"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3444,"name":"encodeMessageDataForSafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3432,"src":"2989:24:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_contract$_Safe_$1853_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (contract Safe,bytes memory) view returns (bytes memory)"}},"id":3447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2989:39:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3443,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2979:9:22","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2979:50:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3442,"id":3449,"nodeType":"Return","src":"2972:57:22"}]},"documentation":{"id":3433,"nodeType":"StructuredDocumentation","src":"2644:219:22","text":" @dev Returns hash of a message that can be signed by owners.\n @param safe Safe to which the message is targeted.\n @param message Message that should be hashed.\n @return Message hash."},"functionSelector":"6ac24784","id":3451,"implemented":true,"kind":"function","modifiers":[],"name":"getMessageHashForSafe","nameLocation":"2877:21:22","nodeType":"FunctionDefinition","parameters":{"id":3439,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3436,"mutability":"mutable","name":"safe","nameLocation":"2904:4:22","nodeType":"VariableDeclaration","scope":3451,"src":"2899:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_Safe_$1853","typeString":"contract Safe"},"typeName":{"id":3435,"nodeType":"UserDefinedTypeName","pathNode":{"id":3434,"name":"Safe","nameLocations":["2899:4:22"],"nodeType":"IdentifierPath","referencedDeclaration":1853,"src":"2899:4:22"},"referencedDeclaration":1853,"src":"2899:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_Safe_$1853","typeString":"contract Safe"}},"visibility":"internal"},{"constant":false,"id":3438,"mutability":"mutable","name":"message","nameLocation":"2923:7:22","nodeType":"VariableDeclaration","scope":3451,"src":"2910:20:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3437,"name":"bytes","nodeType":"ElementaryTypeName","src":"2910:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2898:33:22"},"returnParameters":{"id":3442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3441,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3451,"src":"2953:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3440,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2953:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2952:9:22"},"scope":3541,"src":"2868:168:22","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3491,"nodeType":"Block","src":"3477:247:22","statements":[{"assignments":[3463],"declarations":[{"constant":false,"id":3463,"mutability":"mutable","name":"validator","nameLocation":"3507:9:22","nodeType":"VariableDeclaration","scope":3491,"src":"3487:29:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISignatureValidator_$3794","typeString":"contract ISignatureValidator"},"typeName":{"id":3462,"nodeType":"UserDefinedTypeName","pathNode":{"id":3461,"name":"ISignatureValidator","nameLocations":["3487:19:22"],"nodeType":"IdentifierPath","referencedDeclaration":3794,"src":"3487:19:22"},"referencedDeclaration":3794,"src":"3487:19:22","typeDescriptions":{"typeIdentifier":"t_contract$_ISignatureValidator_$3794","typeString":"contract ISignatureValidator"}},"visibility":"internal"}],"id":3468,"initialValue":{"arguments":[{"expression":{"id":3465,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3539:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3543:6:22","memberName":"sender","nodeType":"MemberAccess","src":"3539:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3464,"name":"ISignatureValidator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"3519:19:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISignatureValidator_$3794_$","typeString":"type(contract ISignatureValidator)"}},"id":3467,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3519:31:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISignatureValidator_$3794","typeString":"contract ISignatureValidator"}},"nodeType":"VariableDeclarationStatement","src":"3487:63:22"},{"assignments":[3470],"declarations":[{"constant":false,"id":3470,"mutability":"mutable","name":"value","nameLocation":"3567:5:22","nodeType":"VariableDeclaration","scope":3491,"src":"3560:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3469,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3560:6:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"id":3479,"initialValue":{"arguments":[{"arguments":[{"id":3475,"name":"_dataHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3454,"src":"3613:9:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3473,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3602:3:22","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3474,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3606:6:22","memberName":"encode","nodeType":"MemberAccess","src":"3602:10:22","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3602:21:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3477,"name":"_signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"3625:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"id":3471,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3463,"src":"3575:9:22","typeDescriptions":{"typeIdentifier":"t_contract$_ISignatureValidator_$3794","typeString":"contract ISignatureValidator"}},"id":3472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3585:16:22","memberName":"isValidSignature","nodeType":"MemberAccess","referencedDeclaration":3793,"src":"3575:26:22","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (bytes memory,bytes memory) view external returns (bytes4)"}},"id":3478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3575:61:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"VariableDeclarationStatement","src":"3560:76:22"},{"expression":{"condition":{"components":[{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3480,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"3654:5:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3481,"name":"EIP1271_MAGIC_VALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3780,"src":"3663:19:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"3654:28:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3483,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3653:30:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"hexValue":"30","id":3487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3715:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3486,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3708:6:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":3485,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3708:6:22","typeDescriptions":{}}},"id":3488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3708:9:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3653:64:22","trueExpression":{"id":3484,"name":"UPDATED_MAGIC_VALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3309,"src":"3686:19:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":3460,"id":3490,"nodeType":"Return","src":"3646:71:22"}]},"documentation":{"id":3452,"nodeType":"StructuredDocumentation","src":"3042:327:22","text":" @notice Implementation of updated EIP-1271 signature validation method.\n @param _dataHash Hash of the data signed on the behalf of address(msg.sender)\n @param _signature Signature byte array associated with _dataHash\n @return Updated EIP1271 magic value if signature is valid, otherwise 0x0"},"functionSelector":"1626ba7e","id":3492,"implemented":true,"kind":"function","modifiers":[],"name":"isValidSignature","nameLocation":"3383:16:22","nodeType":"FunctionDefinition","parameters":{"id":3457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3454,"mutability":"mutable","name":"_dataHash","nameLocation":"3408:9:22","nodeType":"VariableDeclaration","scope":3492,"src":"3400:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3453,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3400:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3456,"mutability":"mutable","name":"_signature","nameLocation":"3434:10:22","nodeType":"VariableDeclaration","scope":3492,"src":"3419:25:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3455,"name":"bytes","nodeType":"ElementaryTypeName","src":"3419:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3399:46:22"},"returnParameters":{"id":3460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3459,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3492,"src":"3469:6:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3458,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3469:6:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"3468:8:22"},"scope":3541,"src":"3374:350:22","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3523,"nodeType":"Block","src":"3889:196:22","statements":[{"assignments":[3501],"declarations":[{"constant":false,"id":3501,"mutability":"mutable","name":"safe","nameLocation":"3939:4:22","nodeType":"VariableDeclaration","scope":3523,"src":"3934:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_Safe_$1853","typeString":"contract Safe"},"typeName":{"id":3500,"nodeType":"UserDefinedTypeName","pathNode":{"id":3499,"name":"Safe","nameLocations":["3934:4:22"],"nodeType":"IdentifierPath","referencedDeclaration":1853,"src":"3934:4:22"},"referencedDeclaration":1853,"src":"3934:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_Safe_$1853","typeString":"contract Safe"}},"visibility":"internal"}],"id":3509,"initialValue":{"arguments":[{"arguments":[{"expression":{"id":3505,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3959:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3963:6:22","memberName":"sender","nodeType":"MemberAccess","src":"3959:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3504,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3951:8:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":3503,"name":"address","nodeType":"ElementaryTypeName","src":"3951:8:22","stateMutability":"payable","typeDescriptions":{}}},"id":3507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3951:19:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":3502,"name":"Safe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1853,"src":"3946:4:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Safe_$1853_$","typeString":"type(contract Safe)"}},"id":3508,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3946:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Safe_$1853","typeString":"contract Safe"}},"nodeType":"VariableDeclarationStatement","src":"3934:37:22"},{"assignments":[3514,null],"declarations":[{"constant":false,"id":3514,"mutability":"mutable","name":"array","nameLocation":"3999:5:22","nodeType":"VariableDeclaration","scope":3523,"src":"3982:22:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3512,"name":"address","nodeType":"ElementaryTypeName","src":"3982:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3513,"nodeType":"ArrayTypeName","src":"3982:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},null],"id":3520,"initialValue":{"arguments":[{"id":3517,"name":"SENTINEL_MODULES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3306,"src":"4035:16:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"3130","id":3518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4053:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}],"expression":{"id":3515,"name":"safe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3501,"src":"4010:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_Safe_$1853","typeString":"contract Safe"}},"id":3516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4015:19:22","memberName":"getModulesPaginated","nodeType":"MemberAccess","referencedDeclaration":2485,"src":"4010:24:22","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$_t_address_$","typeString":"function (address,uint256) view external returns (address[] memory,address)"}},"id":3519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4010:46:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_address_$dyn_memory_ptr_$_t_address_$","typeString":"tuple(address[] memory,address)"}},"nodeType":"VariableDeclarationStatement","src":"3981:75:22"},{"expression":{"id":3521,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3514,"src":"4073:5:22","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":3498,"id":3522,"nodeType":"Return","src":"4066:12:22"}]},"documentation":{"id":3493,"nodeType":"StructuredDocumentation","src":"3730:91:22","text":" @dev Returns array of first 10 modules.\n @return Array of modules."},"functionSelector":"b2494df3","id":3524,"implemented":true,"kind":"function","modifiers":[],"name":"getModules","nameLocation":"3835:10:22","nodeType":"FunctionDefinition","parameters":{"id":3494,"nodeType":"ParameterList","parameters":[],"src":"3845:2:22"},"returnParameters":{"id":3498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3497,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3524,"src":"3871:16:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3495,"name":"address","nodeType":"ElementaryTypeName","src":"3871:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3496,"nodeType":"ArrayTypeName","src":"3871:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3870:18:22"},"scope":3541,"src":"3826:259:22","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3539,"nodeType":"Block","src":"4779:2947:22","statements":[{"documentation":" Suppress compiler warnings about not using parameters, while allowing\n parameters to keep names for documentation purposes. This does not\n generate code.","expression":{"id":3534,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3527,"src":"4998:14:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3535,"nodeType":"ExpressionStatement","src":"4998:14:22"},{"expression":{"id":3536,"name":"calldataPayload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"5022:15:22","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":3537,"nodeType":"ExpressionStatement","src":"5022:15:22"},{"AST":{"nativeSrc":"5113:2607:22","nodeType":"YulBlock","src":"5113:2607:22","statements":[{"nativeSrc":"5127:35:22","nodeType":"YulVariableDeclaration","src":"5127:35:22","value":{"arguments":[{"kind":"number","nativeSrc":"5157:4:22","nodeType":"YulLiteral","src":"5157:4:22","type":"","value":"0x40"}],"functionName":{"name":"mload","nativeSrc":"5151:5:22","nodeType":"YulIdentifier","src":"5151:5:22"},"nativeSrc":"5151:11:22","nodeType":"YulFunctionCall","src":"5151:11:22"},"variables":[{"name":"internalCalldata","nativeSrc":"5131:16:22","nodeType":"YulTypedName","src":"5131:16:22","type":""}]},{"expression":{"arguments":[{"name":"internalCalldata","nativeSrc":"5333:16:22","nodeType":"YulIdentifier","src":"5333:16:22"},{"hexValue":"b4faba09","kind":"string","nativeSrc":"5351:18:22","nodeType":"YulLiteral","src":"5351:18:22","type":""}],"functionName":{"name":"mstore","nativeSrc":"5326:6:22","nodeType":"YulIdentifier","src":"5326:6:22"},"nativeSrc":"5326:44:22","nodeType":"YulFunctionCall","src":"5326:44:22"},"nativeSrc":"5326:44:22","nodeType":"YulExpressionStatement","src":"5326:44:22"},{"expression":{"arguments":[{"arguments":[{"name":"internalCalldata","nativeSrc":"5784:16:22","nodeType":"YulIdentifier","src":"5784:16:22"},{"kind":"number","nativeSrc":"5802:4:22","nodeType":"YulLiteral","src":"5802:4:22","type":"","value":"0x04"}],"functionName":{"name":"add","nativeSrc":"5780:3:22","nodeType":"YulIdentifier","src":"5780:3:22"},"nativeSrc":"5780:27:22","nodeType":"YulFunctionCall","src":"5780:27:22"},{"kind":"number","nativeSrc":"5809:4:22","nodeType":"YulLiteral","src":"5809:4:22","type":"","value":"0x04"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"5819:12:22","nodeType":"YulIdentifier","src":"5819:12:22"},"nativeSrc":"5819:14:22","nodeType":"YulFunctionCall","src":"5819:14:22"},{"kind":"number","nativeSrc":"5835:4:22","nodeType":"YulLiteral","src":"5835:4:22","type":"","value":"0x04"}],"functionName":{"name":"sub","nativeSrc":"5815:3:22","nodeType":"YulIdentifier","src":"5815:3:22"},"nativeSrc":"5815:25:22","nodeType":"YulFunctionCall","src":"5815:25:22"}],"functionName":{"name":"calldatacopy","nativeSrc":"5767:12:22","nodeType":"YulIdentifier","src":"5767:12:22"},"nativeSrc":"5767:74:22","nodeType":"YulFunctionCall","src":"5767:74:22"},"nativeSrc":"5767:74:22","nodeType":"YulExpressionStatement","src":"5767:74:22"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"gas","nativeSrc":"6248:3:22","nodeType":"YulIdentifier","src":"6248:3:22"},"nativeSrc":"6248:5:22","nodeType":"YulFunctionCall","src":"6248:5:22"},{"arguments":[],"functionName":{"name":"caller","nativeSrc":"6375:6:22","nodeType":"YulIdentifier","src":"6375:6:22"},"nativeSrc":"6375:8:22","nodeType":"YulFunctionCall","src":"6375:8:22"},{"kind":"number","nativeSrc":"6405:1:22","nodeType":"YulLiteral","src":"6405:1:22","type":"","value":"0"},{"name":"internalCalldata","nativeSrc":"6428:16:22","nodeType":"YulIdentifier","src":"6428:16:22"},{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"6466:12:22","nodeType":"YulIdentifier","src":"6466:12:22"},"nativeSrc":"6466:14:22","nodeType":"YulFunctionCall","src":"6466:14:22"},{"kind":"number","nativeSrc":"6948:4:22","nodeType":"YulLiteral","src":"6948:4:22","type":"","value":"0x00"},{"kind":"number","nativeSrc":"6974:4:22","nodeType":"YulLiteral","src":"6974:4:22","type":"","value":"0x20"}],"functionName":{"name":"call","nativeSrc":"6222:4:22","nodeType":"YulIdentifier","src":"6222:4:22"},"nativeSrc":"6222:774:22","nodeType":"YulFunctionCall","src":"6222:774:22"}],"functionName":{"name":"pop","nativeSrc":"6201:3:22","nodeType":"YulIdentifier","src":"6201:3:22"},"nativeSrc":"6201:809:22","nodeType":"YulFunctionCall","src":"6201:809:22"},"nativeSrc":"6201:809:22","nodeType":"YulExpressionStatement","src":"6201:809:22"},{"nativeSrc":"7403:47:22","nodeType":"YulVariableDeclaration","src":"7403:47:22","value":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nativeSrc":"7427:14:22","nodeType":"YulIdentifier","src":"7427:14:22"},"nativeSrc":"7427:16:22","nodeType":"YulFunctionCall","src":"7427:16:22"},{"kind":"number","nativeSrc":"7445:4:22","nodeType":"YulLiteral","src":"7445:4:22","type":"","value":"0x20"}],"functionName":{"name":"sub","nativeSrc":"7423:3:22","nodeType":"YulIdentifier","src":"7423:3:22"},"nativeSrc":"7423:27:22","nodeType":"YulFunctionCall","src":"7423:27:22"},"variables":[{"name":"responseSize","nativeSrc":"7407:12:22","nodeType":"YulTypedName","src":"7407:12:22","type":""}]},{"nativeSrc":"7463:23:22","nodeType":"YulAssignment","src":"7463:23:22","value":{"arguments":[{"kind":"number","nativeSrc":"7481:4:22","nodeType":"YulLiteral","src":"7481:4:22","type":"","value":"0x40"}],"functionName":{"name":"mload","nativeSrc":"7475:5:22","nodeType":"YulIdentifier","src":"7475:5:22"},"nativeSrc":"7475:11:22","nodeType":"YulFunctionCall","src":"7475:11:22"},"variableNames":[{"name":"response","nativeSrc":"7463:8:22","nodeType":"YulIdentifier","src":"7463:8:22"}]},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7506:4:22","nodeType":"YulLiteral","src":"7506:4:22","type":"","value":"0x40"},{"arguments":[{"name":"response","nativeSrc":"7516:8:22","nodeType":"YulIdentifier","src":"7516:8:22"},{"name":"responseSize","nativeSrc":"7526:12:22","nodeType":"YulIdentifier","src":"7526:12:22"}],"functionName":{"name":"add","nativeSrc":"7512:3:22","nodeType":"YulIdentifier","src":"7512:3:22"},"nativeSrc":"7512:27:22","nodeType":"YulFunctionCall","src":"7512:27:22"}],"functionName":{"name":"mstore","nativeSrc":"7499:6:22","nodeType":"YulIdentifier","src":"7499:6:22"},"nativeSrc":"7499:41:22","nodeType":"YulFunctionCall","src":"7499:41:22"},"nativeSrc":"7499:41:22","nodeType":"YulExpressionStatement","src":"7499:41:22"},{"expression":{"arguments":[{"name":"response","nativeSrc":"7568:8:22","nodeType":"YulIdentifier","src":"7568:8:22"},{"kind":"number","nativeSrc":"7578:4:22","nodeType":"YulLiteral","src":"7578:4:22","type":"","value":"0x20"},{"name":"responseSize","nativeSrc":"7584:12:22","nodeType":"YulIdentifier","src":"7584:12:22"}],"functionName":{"name":"returndatacopy","nativeSrc":"7553:14:22","nodeType":"YulIdentifier","src":"7553:14:22"},"nativeSrc":"7553:44:22","nodeType":"YulFunctionCall","src":"7553:44:22"},"nativeSrc":"7553:44:22","nodeType":"YulExpressionStatement","src":"7553:44:22"},{"body":{"nativeSrc":"7634:76:22","nodeType":"YulBlock","src":"7634:76:22","statements":[{"expression":{"arguments":[{"arguments":[{"name":"response","nativeSrc":"7663:8:22","nodeType":"YulIdentifier","src":"7663:8:22"},{"kind":"number","nativeSrc":"7673:4:22","nodeType":"YulLiteral","src":"7673:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"7659:3:22","nodeType":"YulIdentifier","src":"7659:3:22"},"nativeSrc":"7659:19:22","nodeType":"YulFunctionCall","src":"7659:19:22"},{"arguments":[{"name":"response","nativeSrc":"7686:8:22","nodeType":"YulIdentifier","src":"7686:8:22"}],"functionName":{"name":"mload","nativeSrc":"7680:5:22","nodeType":"YulIdentifier","src":"7680:5:22"},"nativeSrc":"7680:15:22","nodeType":"YulFunctionCall","src":"7680:15:22"}],"functionName":{"name":"revert","nativeSrc":"7652:6:22","nodeType":"YulIdentifier","src":"7652:6:22"},"nativeSrc":"7652:44:22","nodeType":"YulFunctionCall","src":"7652:44:22"},"nativeSrc":"7652:44:22","nodeType":"YulExpressionStatement","src":"7652:44:22"}]},"condition":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"7627:4:22","nodeType":"YulLiteral","src":"7627:4:22","type":"","value":"0x00"}],"functionName":{"name":"mload","nativeSrc":"7621:5:22","nodeType":"YulIdentifier","src":"7621:5:22"},"nativeSrc":"7621:11:22","nodeType":"YulFunctionCall","src":"7621:11:22"}],"functionName":{"name":"iszero","nativeSrc":"7614:6:22","nodeType":"YulIdentifier","src":"7614:6:22"},"nativeSrc":"7614:19:22","nodeType":"YulFunctionCall","src":"7614:19:22"},"nativeSrc":"7611:99:22","nodeType":"YulIf","src":"7611:99:22"}]},"evmVersion":"paris","externalReferences":[{"declaration":3532,"isOffset":false,"isSlot":false,"src":"7463:8:22","valueSize":1},{"declaration":3532,"isOffset":false,"isSlot":false,"src":"7516:8:22","valueSize":1},{"declaration":3532,"isOffset":false,"isSlot":false,"src":"7568:8:22","valueSize":1},{"declaration":3532,"isOffset":false,"isSlot":false,"src":"7663:8:22","valueSize":1},{"declaration":3532,"isOffset":false,"isSlot":false,"src":"7686:8:22","valueSize":1}],"id":3538,"nodeType":"InlineAssembly","src":"5104:2616:22"}]},"documentation":{"id":3525,"nodeType":"StructuredDocumentation","src":"4091:568:22","text":" @dev Performs a delegatecall on a targetContract in the context of self.\n Internally reverts execution to avoid side effects (making it static). Catches revert and returns encoded result as bytes.\n @dev Inspired by https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\n @param targetContract Address of the contract containing the code to execute.\n @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments)."},"functionSelector":"bd61951d","id":3540,"implemented":true,"kind":"function","modifiers":[],"name":"simulate","nameLocation":"4673:8:22","nodeType":"FunctionDefinition","parameters":{"id":3530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3527,"mutability":"mutable","name":"targetContract","nameLocation":"4690:14:22","nodeType":"VariableDeclaration","scope":3540,"src":"4682:22:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3526,"name":"address","nodeType":"ElementaryTypeName","src":"4682:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3529,"mutability":"mutable","name":"calldataPayload","nameLocation":"4721:15:22","nodeType":"VariableDeclaration","scope":3540,"src":"4706:30:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3528,"name":"bytes","nodeType":"ElementaryTypeName","src":"4706:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4681:56:22"},"returnParameters":{"id":3533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3532,"mutability":"mutable","name":"response","nameLocation":"4769:8:22","nodeType":"VariableDeclaration","scope":3540,"src":"4756:21:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3531,"name":"bytes","nodeType":"ElementaryTypeName","src":"4756:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4755:23:22"},"scope":3541,"src":"4664:3062:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3542,"src":"343:7385:22","usedErrors":[],"usedEvents":[]}],"src":"42:7687:22"},"id":22},"@safe-global/safe-contracts/contracts/handler/HandlerContext.sol":{"ast":{"absolutePath":"@safe-global/safe-contracts/contracts/handler/HandlerContext.sol","exportedSymbols":{"HandlerContext":[3563]},"id":3564,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3543,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:23"},{"abstract":true,"baseContracts":[],"canonicalName":"HandlerContext","contractDependencies":[],"contractKind":"contract","documentation":{"id":3544,"nodeType":"StructuredDocumentation","src":"75:431:23","text":" @title Handler Context - Allows the fallback handler to extract addition context from the calldata\n @dev The fallback manager appends the following context to the calldata:\n      1. Fallback manager caller address (non-padded)\n based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/f8cc8b844a9f92f63dc55aa581f7d643a1bc5ac1/contracts/metatx/ERC2771Context.sol\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":3563,"linearizedBaseContracts":[3563],"name":"HandlerContext","nameLocation":"525:14:23","nodeType":"ContractDefinition","nodes":[{"body":{"id":3551,"nodeType":"Block","src":"1114:251:23","statements":[{"AST":{"nativeSrc":"1279:80:23","nodeType":"YulBlock","src":"1279:80:23","statements":[{"nativeSrc":"1293:56:23","nodeType":"YulAssignment","src":"1293:56:23","value":{"arguments":[{"kind":"number","nativeSrc":"1307:2:23","nodeType":"YulLiteral","src":"1307:2:23","type":"","value":"96"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"1328:12:23","nodeType":"YulIdentifier","src":"1328:12:23"},"nativeSrc":"1328:14:23","nodeType":"YulFunctionCall","src":"1328:14:23"},{"kind":"number","nativeSrc":"1344:2:23","nodeType":"YulLiteral","src":"1344:2:23","type":"","value":"20"}],"functionName":{"name":"sub","nativeSrc":"1324:3:23","nodeType":"YulIdentifier","src":"1324:3:23"},"nativeSrc":"1324:23:23","nodeType":"YulFunctionCall","src":"1324:23:23"}],"functionName":{"name":"calldataload","nativeSrc":"1311:12:23","nodeType":"YulIdentifier","src":"1311:12:23"},"nativeSrc":"1311:37:23","nodeType":"YulFunctionCall","src":"1311:37:23"}],"functionName":{"name":"shr","nativeSrc":"1303:3:23","nodeType":"YulIdentifier","src":"1303:3:23"},"nativeSrc":"1303:46:23","nodeType":"YulFunctionCall","src":"1303:46:23"},"variableNames":[{"name":"sender","nativeSrc":"1293:6:23","nodeType":"YulIdentifier","src":"1293:6:23"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3548,"isOffset":false,"isSlot":false,"src":"1293:6:23","valueSize":1}],"id":3550,"nodeType":"InlineAssembly","src":"1270:89:23"}]},"documentation":{"id":3545,"nodeType":"StructuredDocumentation","src":"546:502:23","text":" @notice Allows fetching the original caller address.\n @dev This is only reliable in combination with a FallbackManager that supports this (e.g. Safe contract >=1.3.0).\n      When using this functionality make sure that the linked _manager (aka msg.sender) supports this.\n      This function does not rely on a trusted forwarder. Use the returned value only to\n      check information against the calling manager.\n @return sender Original caller address."},"id":3552,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"1062:10:23","nodeType":"FunctionDefinition","parameters":{"id":3546,"nodeType":"ParameterList","parameters":[],"src":"1072:2:23"},"returnParameters":{"id":3549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3548,"mutability":"mutable","name":"sender","nameLocation":"1106:6:23","nodeType":"VariableDeclaration","scope":3552,"src":"1098:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3547,"name":"address","nodeType":"ElementaryTypeName","src":"1098:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1097:16:23"},"scope":3563,"src":"1053:312:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3561,"nodeType":"Block","src":"1530:34:23","statements":[{"expression":{"expression":{"id":3558,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1547:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1551:6:23","memberName":"sender","nodeType":"MemberAccess","src":"1547:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3557,"id":3560,"nodeType":"Return","src":"1540:17:23"}]},"documentation":{"id":3553,"nodeType":"StructuredDocumentation","src":"1371:102:23","text":" @notice Returns the FallbackManager address\n @return Fallback manager address"},"id":3562,"implemented":true,"kind":"function","modifiers":[],"name":"_manager","nameLocation":"1487:8:23","nodeType":"FunctionDefinition","parameters":{"id":3554,"nodeType":"ParameterList","parameters":[],"src":"1495:2:23"},"returnParameters":{"id":3557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3556,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3562,"src":"1521:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3555,"name":"address","nodeType":"ElementaryTypeName","src":"1521:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1520:9:23"},"scope":3563,"src":"1478:86:23","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":3564,"src":"507:1059:23","usedErrors":[],"usedEvents":[]}],"src":"42:1525:23"},"id":23},"@safe-global/safe-contracts/contracts/handler/TokenCallbackHandler.sol":{"ast":{"absolutePath":"@safe-global/safe-contracts/contracts/handler/TokenCallbackHandler.sol","exportedSymbols":{"ERC1155TokenReceiver":[3725],"ERC721TokenReceiver":[3743],"ERC777TokensRecipient":[3763],"IERC165":[3775],"TokenCallbackHandler":[3688]},"id":3689,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3565,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:24"},{"absolutePath":"@safe-global/safe-contracts/contracts/interfaces/ERC1155TokenReceiver.sol","file":"../interfaces/ERC1155TokenReceiver.sol","id":3566,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3689,"sourceUnit":3726,"src":"75:48:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@safe-global/safe-contracts/contracts/interfaces/ERC721TokenReceiver.sol","file":"../interfaces/ERC721TokenReceiver.sol","id":3567,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3689,"sourceUnit":3744,"src":"124:47:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@safe-global/safe-contracts/contracts/interfaces/ERC777TokensRecipient.sol","file":"../interfaces/ERC777TokensRecipient.sol","id":3568,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3689,"sourceUnit":3764,"src":"172:49:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@safe-global/safe-contracts/contracts/interfaces/IERC165.sol","file":"../interfaces/IERC165.sol","id":3569,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3689,"sourceUnit":3776,"src":"222:35:24","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3571,"name":"ERC1155TokenReceiver","nameLocations":["454:20:24"],"nodeType":"IdentifierPath","referencedDeclaration":3725,"src":"454:20:24"},"id":3572,"nodeType":"InheritanceSpecifier","src":"454:20:24"},{"baseName":{"id":3573,"name":"ERC777TokensRecipient","nameLocations":["476:21:24"],"nodeType":"IdentifierPath","referencedDeclaration":3763,"src":"476:21:24"},"id":3574,"nodeType":"InheritanceSpecifier","src":"476:21:24"},{"baseName":{"id":3575,"name":"ERC721TokenReceiver","nameLocations":["499:19:24"],"nodeType":"IdentifierPath","referencedDeclaration":3743,"src":"499:19:24"},"id":3576,"nodeType":"InheritanceSpecifier","src":"499:19:24"},{"baseName":{"id":3577,"name":"IERC165","nameLocations":["520:7:24"],"nodeType":"IdentifierPath","referencedDeclaration":3775,"src":"520:7:24"},"id":3578,"nodeType":"InheritanceSpecifier","src":"520:7:24"}],"canonicalName":"TokenCallbackHandler","contractDependencies":[],"contractKind":"contract","documentation":{"id":3570,"nodeType":"StructuredDocumentation","src":"259:161:24","text":" @title Default Callback Handler - Handles supported tokens' callbacks, allowing Safes receiving these tokens.\n @author Richard Meissner - @rmeissner"},"fullyImplemented":true,"id":3688,"linearizedBaseContracts":[3688,3775,3743,3763,3725],"name":"TokenCallbackHandler","nameLocation":"430:20:24","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[3706],"body":{"id":3597,"nodeType":"Block","src":"775:34:24","statements":[{"expression":{"hexValue":"30786632336136653631","id":3595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"792:10:24","typeDescriptions":{"typeIdentifier":"t_rational_4063915617_by_1","typeString":"int_const 4063915617"},"value":"0xf23a6e61"},"functionReturnParameters":3594,"id":3596,"nodeType":"Return","src":"785:17:24"}]},"documentation":{"id":3579,"nodeType":"StructuredDocumentation","src":"534:117:24","text":" @notice Handles ERC1155 Token callback.\n return Standardized onERC1155Received return value."},"functionSelector":"f23a6e61","id":3598,"implemented":true,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"665:17:24","nodeType":"FunctionDefinition","overrides":{"id":3591,"nodeType":"OverrideSpecifier","overrides":[],"src":"749:8:24"},"parameters":{"id":3590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3581,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3598,"src":"683:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3580,"name":"address","nodeType":"ElementaryTypeName","src":"683:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3583,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3598,"src":"692:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3582,"name":"address","nodeType":"ElementaryTypeName","src":"692:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3585,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3598,"src":"701:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3584,"name":"uint256","nodeType":"ElementaryTypeName","src":"701:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3587,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3598,"src":"710:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3586,"name":"uint256","nodeType":"ElementaryTypeName","src":"710:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3589,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3598,"src":"719:14:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3588,"name":"bytes","nodeType":"ElementaryTypeName","src":"719:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"682:52:24"},"returnParameters":{"id":3594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3593,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3598,"src":"767:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3592,"name":"bytes4","nodeType":"ElementaryTypeName","src":"767:6:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"766:8:24"},"scope":3688,"src":"656:153:24","stateMutability":"pure","virtual":false,"visibility":"external"},{"baseFunctions":[3724],"body":{"id":3619,"nodeType":"Block","src":"1140:34:24","statements":[{"expression":{"hexValue":"30786263313937633831","id":3617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1157:10:24","typeDescriptions":{"typeIdentifier":"t_rational_3155786881_by_1","typeString":"int_const 3155786881"},"value":"0xbc197c81"},"functionReturnParameters":3616,"id":3618,"nodeType":"Return","src":"1150:17:24"}]},"documentation":{"id":3599,"nodeType":"StructuredDocumentation","src":"815:128:24","text":" @notice Handles ERC1155 Token batch callback.\n return Standardized onERC1155BatchReceived return value."},"functionSelector":"bc197c81","id":3620,"implemented":true,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"957:22:24","nodeType":"FunctionDefinition","overrides":{"id":3613,"nodeType":"OverrideSpecifier","overrides":[],"src":"1114:8:24"},"parameters":{"id":3612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3601,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3620,"src":"989:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3600,"name":"address","nodeType":"ElementaryTypeName","src":"989:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3603,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3620,"src":"1006:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3602,"name":"address","nodeType":"ElementaryTypeName","src":"1006:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3606,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3620,"src":"1023:18:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3604,"name":"uint256","nodeType":"ElementaryTypeName","src":"1023:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3605,"nodeType":"ArrayTypeName","src":"1023:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3609,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3620,"src":"1051:18:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3607,"name":"uint256","nodeType":"ElementaryTypeName","src":"1051:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3608,"nodeType":"ArrayTypeName","src":"1051:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3611,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3620,"src":"1079:14:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3610,"name":"bytes","nodeType":"ElementaryTypeName","src":"1079:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"979:120:24"},"returnParameters":{"id":3616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3615,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3620,"src":"1132:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3614,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1132:6:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1131:8:24"},"scope":3688,"src":"948:226:24","stateMutability":"pure","virtual":false,"visibility":"external"},{"baseFunctions":[3742],"body":{"id":3637,"nodeType":"Block","src":"1410:34:24","statements":[{"expression":{"hexValue":"30783135306237613032","id":3635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1427:10:24","typeDescriptions":{"typeIdentifier":"t_rational_353073666_by_1","typeString":"int_const 353073666"},"value":"0x150b7a02"},"functionReturnParameters":3634,"id":3636,"nodeType":"Return","src":"1420:17:24"}]},"documentation":{"id":3621,"nodeType":"StructuredDocumentation","src":"1180:116:24","text":" @notice Handles ERC721 Token callback.\n  return Standardized onERC721Received return value."},"functionSelector":"150b7a02","id":3638,"implemented":true,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"1310:16:24","nodeType":"FunctionDefinition","overrides":{"id":3631,"nodeType":"OverrideSpecifier","overrides":[],"src":"1384:8:24"},"parameters":{"id":3630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3623,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3638,"src":"1327:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3622,"name":"address","nodeType":"ElementaryTypeName","src":"1327:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3625,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3638,"src":"1336:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3624,"name":"address","nodeType":"ElementaryTypeName","src":"1336:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3627,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3638,"src":"1345:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3626,"name":"uint256","nodeType":"ElementaryTypeName","src":"1345:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3629,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3638,"src":"1354:14:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3628,"name":"bytes","nodeType":"ElementaryTypeName","src":"1354:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1326:43:24"},"returnParameters":{"id":3634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3633,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3638,"src":"1402:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3632,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1402:6:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1401:8:24"},"scope":3688,"src":"1301:143:24","stateMutability":"pure","virtual":false,"visibility":"external"},{"baseFunctions":[3762],"body":{"id":3655,"nodeType":"Block","src":"1668:84:24","statements":[]},"documentation":{"id":3639,"nodeType":"StructuredDocumentation","src":"1450:98:24","text":" @notice Handles ERC777 Token callback.\n return nothing (not standardized)"},"functionSelector":"0023de29","id":3656,"implemented":true,"kind":"function","modifiers":[],"name":"tokensReceived","nameLocation":"1562:14:24","nodeType":"FunctionDefinition","overrides":{"id":3653,"nodeType":"OverrideSpecifier","overrides":[],"src":"1659:8:24"},"parameters":{"id":3652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3641,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3656,"src":"1577:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3640,"name":"address","nodeType":"ElementaryTypeName","src":"1577:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3643,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3656,"src":"1586:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3642,"name":"address","nodeType":"ElementaryTypeName","src":"1586:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3645,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3656,"src":"1595:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3644,"name":"address","nodeType":"ElementaryTypeName","src":"1595:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3647,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3656,"src":"1604:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3646,"name":"uint256","nodeType":"ElementaryTypeName","src":"1604:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3649,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3656,"src":"1613:14:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3648,"name":"bytes","nodeType":"ElementaryTypeName","src":"1613:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3651,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3656,"src":"1629:14:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3650,"name":"bytes","nodeType":"ElementaryTypeName","src":"1629:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1576:68:24"},"returnParameters":{"id":3654,"nodeType":"ParameterList","parameters":[],"src":"1668:0:24"},"scope":3688,"src":"1553:199:24","stateMutability":"pure","virtual":false,"visibility":"external"},{"baseFunctions":[3774],"body":{"id":3686,"nodeType":"Block","src":"2070:213:24","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3665,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3659,"src":"2099:11:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3667,"name":"ERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3725,"src":"2119:20:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1155TokenReceiver_$3725_$","typeString":"type(contract ERC1155TokenReceiver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_ERC1155TokenReceiver_$3725_$","typeString":"type(contract ERC1155TokenReceiver)"}],"id":3666,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2114:4:24","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2114:26:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_ERC1155TokenReceiver_$3725","typeString":"type(contract ERC1155TokenReceiver)"}},"id":3669,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2141:11:24","memberName":"interfaceId","nodeType":"MemberAccess","src":"2114:38:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2099:53:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3671,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3659,"src":"2168:11:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3673,"name":"ERC721TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3743,"src":"2188:19:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721TokenReceiver_$3743_$","typeString":"type(contract ERC721TokenReceiver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_ERC721TokenReceiver_$3743_$","typeString":"type(contract ERC721TokenReceiver)"}],"id":3672,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2183:4:24","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2183:25:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_ERC721TokenReceiver_$3743","typeString":"type(contract ERC721TokenReceiver)"}},"id":3675,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2209:11:24","memberName":"interfaceId","nodeType":"MemberAccess","src":"2183:37:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2168:52:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2099:121:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3678,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3659,"src":"2236:11:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3680,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3775,"src":"2256:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$3775_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$3775_$","typeString":"type(contract IERC165)"}],"id":3679,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2251:4:24","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2251:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$3775","typeString":"type(contract IERC165)"}},"id":3682,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2265:11:24","memberName":"interfaceId","nodeType":"MemberAccess","src":"2251:25:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2236:40:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2099:177:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3664,"id":3685,"nodeType":"Return","src":"2080:196:24"}]},"documentation":{"id":3657,"nodeType":"StructuredDocumentation","src":"1758:214:24","text":" @notice Implements ERC165 interface support for ERC1155TokenReceiver, ERC721TokenReceiver and IERC165.\n @param interfaceId Id of the interface.\n @return if the interface is supported."},"functionSelector":"01ffc9a7","id":3687,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1986:17:24","nodeType":"FunctionDefinition","overrides":{"id":3661,"nodeType":"OverrideSpecifier","overrides":[],"src":"2046:8:24"},"parameters":{"id":3660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3659,"mutability":"mutable","name":"interfaceId","nameLocation":"2011:11:24","nodeType":"VariableDeclaration","scope":3687,"src":"2004:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3658,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2004:6:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2003:20:24"},"returnParameters":{"id":3664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3663,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3687,"src":"2064:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3662,"name":"bool","nodeType":"ElementaryTypeName","src":"2064:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2063:6:24"},"scope":3688,"src":"1977:306:24","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":3689,"src":"421:1864:24","usedErrors":[],"usedEvents":[]}],"src":"42:2244:24"},"id":24},"@safe-global/safe-contracts/contracts/interfaces/ERC1155TokenReceiver.sol":{"ast":{"absolutePath":"@safe-global/safe-contracts/contracts/interfaces/ERC1155TokenReceiver.sol","exportedSymbols":{"ERC1155TokenReceiver":[3725]},"id":3726,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3690,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:25"},{"abstract":false,"baseContracts":[],"canonicalName":"ERC1155TokenReceiver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3725,"linearizedBaseContracts":[3725],"name":"ERC1155TokenReceiver","nameLocation":"151:20:25","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3691,"nodeType":"StructuredDocumentation","src":"178:1086:25","text":" @notice Handle the receipt of a single ERC1155 token type.\n @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\n      This function MUST return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\n      This function MUST revert if it rejects the transfer.\n      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n @param _operator  The address which initiated the transfer (i.e. msg.sender).\n @param _from      The address which previously owned the token.\n @param _id        The ID of the token being transferred.\n @param _value     The amount of tokens being transferred.\n @param _data      Additional data with no specified format.\n @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`."},"functionSelector":"f23a6e61","id":3706,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"1278:17:25","nodeType":"FunctionDefinition","parameters":{"id":3702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3693,"mutability":"mutable","name":"_operator","nameLocation":"1313:9:25","nodeType":"VariableDeclaration","scope":3706,"src":"1305:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3692,"name":"address","nodeType":"ElementaryTypeName","src":"1305:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3695,"mutability":"mutable","name":"_from","nameLocation":"1340:5:25","nodeType":"VariableDeclaration","scope":3706,"src":"1332:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3694,"name":"address","nodeType":"ElementaryTypeName","src":"1332:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3697,"mutability":"mutable","name":"_id","nameLocation":"1363:3:25","nodeType":"VariableDeclaration","scope":3706,"src":"1355:11:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3696,"name":"uint256","nodeType":"ElementaryTypeName","src":"1355:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3699,"mutability":"mutable","name":"_value","nameLocation":"1384:6:25","nodeType":"VariableDeclaration","scope":3706,"src":"1376:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3698,"name":"uint256","nodeType":"ElementaryTypeName","src":"1376:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3701,"mutability":"mutable","name":"_data","nameLocation":"1415:5:25","nodeType":"VariableDeclaration","scope":3706,"src":"1400:20:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3700,"name":"bytes","nodeType":"ElementaryTypeName","src":"1400:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1295:131:25"},"returnParameters":{"id":3705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3704,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3706,"src":"1445:6:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3703,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1445:6:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1444:8:25"},"scope":3725,"src":"1269:184:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3707,"nodeType":"StructuredDocumentation","src":"1459:1248:25","text":" @notice Handle the receipt of multiple ERC1155 token types.\n @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\n      This function MUST return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\n      This function MUST revert if it rejects the transfer(s).\n      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n @param _operator  The address which initiated the batch transfer (i.e. msg.sender).\n @param _from      The address which previously owned the token.\n @param _ids       An array containing ids of each token being transferred (order and length must match _values array).\n @param _values    An array containing amounts of each token being transferred (order and length must match _ids array).\n @param _data      Additional data with no specified format.\n @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`."},"functionSelector":"bc197c81","id":3724,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"2721:22:25","nodeType":"FunctionDefinition","parameters":{"id":3720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3709,"mutability":"mutable","name":"_operator","nameLocation":"2761:9:25","nodeType":"VariableDeclaration","scope":3724,"src":"2753:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3708,"name":"address","nodeType":"ElementaryTypeName","src":"2753:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3711,"mutability":"mutable","name":"_from","nameLocation":"2788:5:25","nodeType":"VariableDeclaration","scope":3724,"src":"2780:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3710,"name":"address","nodeType":"ElementaryTypeName","src":"2780:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3714,"mutability":"mutable","name":"_ids","nameLocation":"2822:4:25","nodeType":"VariableDeclaration","scope":3724,"src":"2803:23:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3712,"name":"uint256","nodeType":"ElementaryTypeName","src":"2803:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3713,"nodeType":"ArrayTypeName","src":"2803:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3717,"mutability":"mutable","name":"_values","nameLocation":"2855:7:25","nodeType":"VariableDeclaration","scope":3724,"src":"2836:26:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3715,"name":"uint256","nodeType":"ElementaryTypeName","src":"2836:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3716,"nodeType":"ArrayTypeName","src":"2836:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3719,"mutability":"mutable","name":"_data","nameLocation":"2887:5:25","nodeType":"VariableDeclaration","scope":3724,"src":"2872:20:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3718,"name":"bytes","nodeType":"ElementaryTypeName","src":"2872:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2743:155:25"},"returnParameters":{"id":3723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3722,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3724,"src":"2917:6:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3721,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2917:6:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2916:8:25"},"scope":3725,"src":"2712:213:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3726,"src":"141:2786:25","usedErrors":[],"usedEvents":[]}],"src":"42:2886:25"},"id":25},"@safe-global/safe-contracts/contracts/interfaces/ERC721TokenReceiver.sol":{"ast":{"absolutePath":"@safe-global/safe-contracts/contracts/interfaces/ERC721TokenReceiver.sol","exportedSymbols":{"ERC721TokenReceiver":[3743]},"id":3744,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3727,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:26"},{"abstract":false,"baseContracts":[],"canonicalName":"ERC721TokenReceiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":3728,"nodeType":"StructuredDocumentation","src":"75:72:26","text":"@dev Note: the ERC-165 identifier for this interface is 0x150b7a02."},"fullyImplemented":false,"id":3743,"linearizedBaseContracts":[3743],"name":"ERC721TokenReceiver","nameLocation":"157:19:26","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3729,"nodeType":"StructuredDocumentation","src":"183:769:26","text":" @notice Handle the receipt of an NFT\n @dev The ERC721 smart contract calls this function on the recipient\n  after a `transfer`. This function MAY throw to revert and reject the\n  transfer. Return of other than the magic value MUST result in the\n  transaction being reverted.\n  Note: the contract address is always the message sender.\n @param _operator The address which called `safeTransferFrom` function.\n @param _from The address which previously owned the token.\n @param _tokenId The NFT identifier which is being transferred.\n @param _data Additional data with no specified format.\n @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n  unless throwing"},"functionSelector":"150b7a02","id":3742,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"966:16:26","nodeType":"FunctionDefinition","parameters":{"id":3738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3731,"mutability":"mutable","name":"_operator","nameLocation":"991:9:26","nodeType":"VariableDeclaration","scope":3742,"src":"983:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3730,"name":"address","nodeType":"ElementaryTypeName","src":"983:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3733,"mutability":"mutable","name":"_from","nameLocation":"1010:5:26","nodeType":"VariableDeclaration","scope":3742,"src":"1002:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3732,"name":"address","nodeType":"ElementaryTypeName","src":"1002:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3735,"mutability":"mutable","name":"_tokenId","nameLocation":"1025:8:26","nodeType":"VariableDeclaration","scope":3742,"src":"1017:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3734,"name":"uint256","nodeType":"ElementaryTypeName","src":"1017:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3737,"mutability":"mutable","name":"_data","nameLocation":"1050:5:26","nodeType":"VariableDeclaration","scope":3742,"src":"1035:20:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3736,"name":"bytes","nodeType":"ElementaryTypeName","src":"1035:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"982:74:26"},"returnParameters":{"id":3741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3740,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3742,"src":"1075:6:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3739,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1075:6:26","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1074:8:26"},"scope":3743,"src":"957:126:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3744,"src":"147:938:26","usedErrors":[],"usedEvents":[]}],"src":"42:1044:26"},"id":26},"@safe-global/safe-contracts/contracts/interfaces/ERC777TokensRecipient.sol":{"ast":{"absolutePath":"@safe-global/safe-contracts/contracts/interfaces/ERC777TokensRecipient.sol","exportedSymbols":{"ERC777TokensRecipient":[3763]},"id":3764,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3745,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:27"},{"abstract":false,"baseContracts":[],"canonicalName":"ERC777TokensRecipient","contractDependencies":[],"contractKind":"interface","documentation":{"id":3746,"nodeType":"StructuredDocumentation","src":"75:239:27","text":" @title ERC777TokensRecipient\n @dev Interface for contracts that will be called with the ERC777 token's `tokensReceived` method.\n The contract receiving the tokens must implement this interface in order to receive the tokens."},"fullyImplemented":false,"id":3763,"linearizedBaseContracts":[3763],"name":"ERC777TokensRecipient","nameLocation":"325:21:27","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3747,"nodeType":"StructuredDocumentation","src":"353:586:27","text":" @dev Called by the ERC777 token contract after a successful transfer or a minting operation.\n @param operator The address of the operator performing the transfer or minting operation.\n @param from The address of the sender.\n @param to The address of the recipient.\n @param amount The amount of tokens that were transferred or minted.\n @param data Additional data that was passed during the transfer or minting operation.\n @param operatorData Additional data that was passed by the operator during the transfer or minting operation."},"functionSelector":"0023de29","id":3762,"implemented":false,"kind":"function","modifiers":[],"name":"tokensReceived","nameLocation":"953:14:27","nodeType":"FunctionDefinition","parameters":{"id":3760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3749,"mutability":"mutable","name":"operator","nameLocation":"985:8:27","nodeType":"VariableDeclaration","scope":3762,"src":"977:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3748,"name":"address","nodeType":"ElementaryTypeName","src":"977:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3751,"mutability":"mutable","name":"from","nameLocation":"1011:4:27","nodeType":"VariableDeclaration","scope":3762,"src":"1003:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3750,"name":"address","nodeType":"ElementaryTypeName","src":"1003:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3753,"mutability":"mutable","name":"to","nameLocation":"1033:2:27","nodeType":"VariableDeclaration","scope":3762,"src":"1025:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3752,"name":"address","nodeType":"ElementaryTypeName","src":"1025:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3755,"mutability":"mutable","name":"amount","nameLocation":"1053:6:27","nodeType":"VariableDeclaration","scope":3762,"src":"1045:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3754,"name":"uint256","nodeType":"ElementaryTypeName","src":"1045:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3757,"mutability":"mutable","name":"data","nameLocation":"1084:4:27","nodeType":"VariableDeclaration","scope":3762,"src":"1069:19:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3756,"name":"bytes","nodeType":"ElementaryTypeName","src":"1069:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3759,"mutability":"mutable","name":"operatorData","nameLocation":"1113:12:27","nodeType":"VariableDeclaration","scope":3762,"src":"1098:27:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3758,"name":"bytes","nodeType":"ElementaryTypeName","src":"1098:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"967:164:27"},"returnParameters":{"id":3761,"nodeType":"ParameterList","parameters":[],"src":"1140:0:27"},"scope":3763,"src":"944:197:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3764,"src":"315:828:27","usedErrors":[],"usedEvents":[]}],"src":"42:1102:27"},"id":27},"@safe-global/safe-contracts/contracts/interfaces/IERC165.sol":{"ast":{"absolutePath":"@safe-global/safe-contracts/contracts/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[3775]},"id":3776,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3765,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:28"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":3766,"nodeType":"StructuredDocumentation","src":"75:137:28","text":"@notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol"},"fullyImplemented":false,"id":3775,"linearizedBaseContracts":[3775],"name":"IERC165","nameLocation":"222:7:28","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3767,"nodeType":"StructuredDocumentation","src":"236:339:28","text":" @dev Returns true if this contract implements the interface defined by `interfaceId`.\n See the corresponding EIP section\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":3774,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"589:17:28","nodeType":"FunctionDefinition","parameters":{"id":3770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3769,"mutability":"mutable","name":"interfaceId","nameLocation":"614:11:28","nodeType":"VariableDeclaration","scope":3774,"src":"607:18:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3768,"name":"bytes4","nodeType":"ElementaryTypeName","src":"607:6:28","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"606:20:28"},"returnParameters":{"id":3773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3772,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3774,"src":"650:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3771,"name":"bool","nodeType":"ElementaryTypeName","src":"650:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"649:6:28"},"scope":3775,"src":"580:76:28","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3776,"src":"212:446:28","usedErrors":[],"usedEvents":[]}],"src":"42:617:28"},"id":28},"@safe-global/safe-contracts/contracts/interfaces/ISignatureValidator.sol":{"ast":{"absolutePath":"@safe-global/safe-contracts/contracts/interfaces/ISignatureValidator.sol","exportedSymbols":{"ISignatureValidator":[3794],"ISignatureValidatorConstants":[3781]},"id":3795,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3777,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"42:31:29"},{"abstract":false,"baseContracts":[],"canonicalName":"ISignatureValidatorConstants","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3781,"linearizedBaseContracts":[3781],"name":"ISignatureValidatorConstants","nameLocation":"84:28:29","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3780,"mutability":"constant","name":"EIP1271_MAGIC_VALUE","nameLocation":"201:19:29","nodeType":"VariableDeclaration","scope":3781,"src":"176:57:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3778,"name":"bytes4","nodeType":"ElementaryTypeName","src":"176:6:29","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30783230633133623062","id":3779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"223:10:29","typeDescriptions":{"typeIdentifier":"t_rational_549534475_by_1","typeString":"int_const 549534475"},"value":"0x20c13b0b"},"visibility":"internal"}],"scope":3795,"src":"75:161:29","usedErrors":[],"usedEvents":[]},{"abstract":true,"baseContracts":[{"baseName":{"id":3782,"name":"ISignatureValidatorConstants","nameLocations":["279:28:29"],"nodeType":"IdentifierPath","referencedDeclaration":3781,"src":"279:28:29"},"id":3783,"nodeType":"InheritanceSpecifier","src":"279:28:29"}],"canonicalName":"ISignatureValidator","contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":3794,"linearizedBaseContracts":[3794,3781],"name":"ISignatureValidator","nameLocation":"256:19:29","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3784,"nodeType":"StructuredDocumentation","src":"314:431:29","text":" @notice Legacy EIP1271 method to validate a signature.\n @param _data Arbitrary length data signed on the behalf of address(this).\n @param _signature Signature byte array associated with _data.\n MUST return the bytes4 magic value 0x20c13b0b when function passes.\n MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n MUST allow external calls"},"functionSelector":"20c13b0b","id":3793,"implemented":false,"kind":"function","modifiers":[],"name":"isValidSignature","nameLocation":"759:16:29","nodeType":"FunctionDefinition","parameters":{"id":3789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3786,"mutability":"mutable","name":"_data","nameLocation":"789:5:29","nodeType":"VariableDeclaration","scope":3793,"src":"776:18:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3785,"name":"bytes","nodeType":"ElementaryTypeName","src":"776:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3788,"mutability":"mutable","name":"_signature","nameLocation":"809:10:29","nodeType":"VariableDeclaration","scope":3793,"src":"796:23:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3787,"name":"bytes","nodeType":"ElementaryTypeName","src":"796:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"775:45:29"},"returnParameters":{"id":3792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3791,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3793,"src":"850:6:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3790,"name":"bytes4","nodeType":"ElementaryTypeName","src":"850:6:29","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"849:8:29"},"scope":3794,"src":"750:108:29","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":3795,"src":"238:622:29","usedErrors":[],"usedEvents":[]}],"src":"42:819:29"},"id":29},"contracts/Lock.sol":{"ast":{"absolutePath":"contracts/Lock.sol","exportedSymbols":{"Lock":[3875],"V3SpokePoolInterface":[737]},"id":3876,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":3796,"literals":["solidity","^","0.8",".23"],"nodeType":"PragmaDirective","src":"39:24:30"},{"absolutePath":"@across-protocol/contracts-v2/contracts/interfaces/V3SpokePoolInterface.sol","file":"@across-protocol/contracts-v2/contracts/interfaces/V3SpokePoolInterface.sol","id":3798,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3876,"sourceUnit":738,"src":"65:113:30","symbolAliases":[{"foreign":{"id":3797,"name":"V3SpokePoolInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"73:20:30","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Lock","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3875,"linearizedBaseContracts":[3875],"name":"Lock","nameLocation":"265:4:30","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"251c1aa3","id":3800,"mutability":"mutable","name":"unlockTime","nameLocation":"288:10:30","nodeType":"VariableDeclaration","scope":3875,"src":"276:22:30","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3799,"name":"uint","nodeType":"ElementaryTypeName","src":"276:4:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"8da5cb5b","id":3802,"mutability":"mutable","name":"owner","nameLocation":"327:5:30","nodeType":"VariableDeclaration","scope":3875,"src":"304:28:30","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3801,"name":"address","nodeType":"ElementaryTypeName","src":"304:15:30","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"public"},{"anonymous":false,"eventSelector":"bf2ed60bd5b5965d685680c01195c9514e4382e28e3a5a2d2d5244bf59411b93","id":3808,"name":"Withdrawal","nameLocation":"345:10:30","nodeType":"EventDefinition","parameters":{"id":3807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3804,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"361:6:30","nodeType":"VariableDeclaration","scope":3808,"src":"356:11:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3803,"name":"uint","nodeType":"ElementaryTypeName","src":"356:4:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3806,"indexed":false,"mutability":"mutable","name":"when","nameLocation":"374:4:30","nodeType":"VariableDeclaration","scope":3808,"src":"369:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3805,"name":"uint","nodeType":"ElementaryTypeName","src":"369:4:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"355:24:30"},"src":"339:41:30"},{"body":{"id":3833,"nodeType":"Block","src":"424:200:30","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3814,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"455:5:30","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"461:9:30","memberName":"timestamp","nodeType":"MemberAccess","src":"455:15:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3816,"name":"_unlockTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3810,"src":"473:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"455:29:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e6c6f636b2074696d652073686f756c6420626520696e2074686520667574757265","id":3818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"498:37:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_f6fa9918d4578fba07be58c41841a4c6937c19725f7f4601884cd186799a8413","typeString":"literal_string \"Unlock time should be in the future\""},"value":"Unlock time should be in the future"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f6fa9918d4578fba07be58c41841a4c6937c19725f7f4601884cd186799a8413","typeString":"literal_string \"Unlock time should be in the future\""}],"id":3813,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"434:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"434:111:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3820,"nodeType":"ExpressionStatement","src":"434:111:30"},{"expression":{"id":3823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3821,"name":"unlockTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3800,"src":"556:10:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3822,"name":"_unlockTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3810,"src":"569:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"556:24:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3824,"nodeType":"ExpressionStatement","src":"556:24:30"},{"expression":{"id":3831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3825,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3802,"src":"590:5:30","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":3828,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"606:3:30","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"610:6:30","memberName":"sender","nodeType":"MemberAccess","src":"606:10:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3827,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"598:8:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":3826,"name":"address","nodeType":"ElementaryTypeName","src":"598:8:30","stateMutability":"payable","typeDescriptions":{}}},"id":3830,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"598:19:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"590:27:30","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3832,"nodeType":"ExpressionStatement","src":"590:27:30"}]},"id":3834,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3810,"mutability":"mutable","name":"_unlockTime","nameLocation":"403:11:30","nodeType":"VariableDeclaration","scope":3834,"src":"398:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3809,"name":"uint","nodeType":"ElementaryTypeName","src":"398:4:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"397:18:30"},"returnParameters":{"id":3812,"nodeType":"ParameterList","parameters":[],"src":"424:0:30"},"scope":3875,"src":"386:238:30","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":3873,"nodeType":"Block","src":"657:463:30","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3838,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"881:5:30","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"887:9:30","memberName":"timestamp","nodeType":"MemberAccess","src":"881:15:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3840,"name":"unlockTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3800,"src":"900:10:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"881:29:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"596f752063616e277420776974686472617720796574","id":3842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"912:24:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_09be2a1d7c98765b8c1bd9ab3700b54ab19d501eebe572af39b71382f17d12e8","typeString":"literal_string \"You can't withdraw yet\""},"value":"You can't withdraw yet"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_09be2a1d7c98765b8c1bd9ab3700b54ab19d501eebe572af39b71382f17d12e8","typeString":"literal_string \"You can't withdraw yet\""}],"id":3837,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"873:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"873:64:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3844,"nodeType":"ExpressionStatement","src":"873:64:30"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3846,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"955:3:30","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"959:6:30","memberName":"sender","nodeType":"MemberAccess","src":"955:10:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3848,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3802,"src":"969:5:30","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"955:19:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"596f75206172656e277420746865206f776e6572","id":3850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"976:22:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_345d93c1110e55177ee5f687f392a2e775da2aa3d491c8308e925f0505e3530a","typeString":"literal_string \"You aren't the owner\""},"value":"You aren't the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_345d93c1110e55177ee5f687f392a2e775da2aa3d491c8308e925f0505e3530a","typeString":"literal_string \"You aren't the owner\""}],"id":3845,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"947:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"947:52:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3852,"nodeType":"ExpressionStatement","src":"947:52:30"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":3856,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1034:4:30","typeDescriptions":{"typeIdentifier":"t_contract$_Lock_$3875","typeString":"contract Lock"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Lock_$3875","typeString":"contract Lock"}],"id":3855,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1026:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3854,"name":"address","nodeType":"ElementaryTypeName","src":"1026:7:30","typeDescriptions":{}}},"id":3857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1026:13:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1040:7:30","memberName":"balance","nodeType":"MemberAccess","src":"1026:21:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":3859,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"1049:5:30","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1055:9:30","memberName":"timestamp","nodeType":"MemberAccess","src":"1049:15:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3853,"name":"Withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3808,"src":"1015:10:30","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":3861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1015:50:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3862,"nodeType":"EmitStatement","src":"1010:55:30"},{"expression":{"arguments":[{"expression":{"arguments":[{"id":3868,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1099:4:30","typeDescriptions":{"typeIdentifier":"t_contract$_Lock_$3875","typeString":"contract Lock"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Lock_$3875","typeString":"contract Lock"}],"id":3867,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1091:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3866,"name":"address","nodeType":"ElementaryTypeName","src":"1091:7:30","typeDescriptions":{}}},"id":3869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1091:13:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1105:7:30","memberName":"balance","nodeType":"MemberAccess","src":"1091:21:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3863,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3802,"src":"1076:5:30","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1082:8:30","memberName":"transfer","nodeType":"MemberAccess","src":"1076:14:30","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":3871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1076:37:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3872,"nodeType":"ExpressionStatement","src":"1076:37:30"}]},"functionSelector":"3ccfd60b","id":3874,"implemented":true,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"639:8:30","nodeType":"FunctionDefinition","parameters":{"id":3835,"nodeType":"ParameterList","parameters":[],"src":"647:2:30"},"returnParameters":{"id":3836,"nodeType":"ParameterList","parameters":[],"src":"657:0:30"},"scope":3875,"src":"630:490:30","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":3876,"src":"256:866:30","usedErrors":[],"usedEvents":[3808]}],"src":"39:1084:30"},"id":30},"contracts/OmnaccountModule.sol":{"ast":{"absolutePath":"contracts/OmnaccountModule.sol","exportedSymbols":{"AcrossHookReceiver":[4016],"BaseModule":[4345],"CCIPHookReceiver":[4105],"CompatibilityFallbackHandler":[3541],"Errors":[4115],"HandlerContext":[3563],"IAccount":[255],"OmnaccountModule":[3905],"UserOperation":[283],"_packValidationData":[190,228]},"id":3906,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":3877,"literals":["solidity","0.8",".23"],"nodeType":"PragmaDirective","src":"39:23:31"},{"absolutePath":"contracts/safe/BaseModule.sol","file":"./safe/BaseModule.sol","id":3879,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3906,"sourceUnit":4346,"src":"64:49:31","symbolAliases":[{"foreign":{"id":3878,"name":"BaseModule","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4345,"src":"72:10:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/bridge/AcrossHookReceiver.sol","file":"./bridge/AcrossHookReceiver.sol","id":3881,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3906,"sourceUnit":4017,"src":"114:67:31","symbolAliases":[{"foreign":{"id":3880,"name":"AcrossHookReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4016,"src":"122:18:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/bridge/CCIPHookReceiver.sol","file":"./bridge/CCIPHookReceiver.sol","id":3883,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3906,"sourceUnit":4106,"src":"182:63:31","symbolAliases":[{"foreign":{"id":3882,"name":"CCIPHookReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4105,"src":"190:16:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interfaces/Errors.sol","file":"./interfaces/Errors.sol","id":3885,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3906,"sourceUnit":4116,"src":"246:67:31","symbolAliases":[{"foreign":{"id":3884,"name":"OmnaccountErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4115,"src":"254:16:31","typeDescriptions":{}},"local":"Errors","nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@safe-global/safe-contracts/contracts/handler/HandlerContext.sol","file":"@safe-global/safe-contracts/contracts/handler/HandlerContext.sol","id":3887,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3906,"sourceUnit":3564,"src":"314:96:31","symbolAliases":[{"foreign":{"id":3886,"name":"HandlerContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"322:14:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@safe-global/safe-contracts/contracts/handler/CompatibilityFallbackHandler.sol","file":"@safe-global/safe-contracts/contracts/handler/CompatibilityFallbackHandler.sol","id":3889,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3906,"sourceUnit":3542,"src":"411:124:31","symbolAliases":[{"foreign":{"id":3888,"name":"CompatibilityFallbackHandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3541,"src":"419:28:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@account-abstraction/contracts/interfaces/IAccount.sol","file":"@account-abstraction/contracts/interfaces/IAccount.sol","id":3891,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3906,"sourceUnit":256,"src":"536:80:31","symbolAliases":[{"foreign":{"id":3890,"name":"IAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"544:8:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@account-abstraction/contracts/interfaces/UserOperation.sol","file":"@account-abstraction/contracts/interfaces/UserOperation.sol","id":3893,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3906,"sourceUnit":454,"src":"617:90:31","symbolAliases":[{"foreign":{"id":3892,"name":"UserOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"625:13:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@account-abstraction/contracts/core/Helpers.sol","file":"@account-abstraction/contracts/core/Helpers.sol","id":3895,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3906,"sourceUnit":239,"src":"708:84:31","symbolAliases":[{"foreign":{"id":3894,"name":"_packValidationData","nodeType":"Identifier","overloadedDeclarations":[],"src":"716:19:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"OmnaccountModule","contractDependencies":[],"contractKind":"contract","documentation":{"id":3896,"nodeType":"StructuredDocumentation","src":"795:173:31","text":" @title OmnaccountModule\n @author KDon.eth\n @notice ERC-4337 abstract account module enabling cross-chain userOp execution powered by Across V3 Bridge and Safe"},"fullyImplemented":true,"id":3905,"linearizedBaseContracts":[3905],"name":"OmnaccountModule","nameLocation":"978:16:31","nodeType":"ContractDefinition","nodes":[{"body":{"id":3903,"nodeType":"Block","src":"1289:24:31","statements":[]},"id":3904,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3898,"mutability":"mutable","name":"entrypoint","nameLocation":"1179:10:31","nodeType":"VariableDeclaration","scope":3904,"src":"1171:18:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3897,"name":"address","nodeType":"ElementaryTypeName","src":"1171:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3900,"mutability":"mutable","name":"spokePool","nameLocation":"1207:9:31","nodeType":"VariableDeclaration","scope":3904,"src":"1199:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3899,"name":"address","nodeType":"ElementaryTypeName","src":"1199:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1161:61:31"},"returnParameters":{"id":3902,"nodeType":"ParameterList","parameters":[],"src":"1289:0:31"},"scope":3905,"src":"1150:163:31","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":3906,"src":"969:346:31","usedErrors":[],"usedEvents":[]}],"src":"39:1277:31"},"id":31},"contracts/bridge/AcrossHookReceiver.sol":{"ast":{"absolutePath":"contracts/bridge/AcrossHookReceiver.sol","exportedSymbols":{"AcrossHookReceiver":[4016],"BridgeReceiver":[4030],"Errors":[4115],"HandlerContext":[3563],"IAcrossMessageHandler":[4143]},"id":4017,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":3907,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"39:24:32"},{"absolutePath":"contracts/bridge/BridgeReceiver.sol","file":"./BridgeReceiver.sol","id":3909,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4017,"sourceUnit":4031,"src":"65:52:32","symbolAliases":[{"foreign":{"id":3908,"name":"BridgeReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4030,"src":"73:14:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interfaces/IAcrossMessageHandler.sol","file":"../interfaces/IAcrossMessageHandler.sol","id":3911,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4017,"sourceUnit":4144,"src":"118:78:32","symbolAliases":[{"foreign":{"id":3910,"name":"IAcrossMessageHandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"126:21:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@safe-global/safe-contracts/contracts/handler/HandlerContext.sol","file":"@safe-global/safe-contracts/contracts/handler/HandlerContext.sol","id":3913,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4017,"sourceUnit":3564,"src":"197:96:32","symbolAliases":[{"foreign":{"id":3912,"name":"HandlerContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"205:14:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interfaces/Errors.sol","file":"../interfaces/Errors.sol","id":3915,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4017,"sourceUnit":4116,"src":"294:68:32","symbolAliases":[{"foreign":{"id":3914,"name":"OmnaccountErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4115,"src":"302:16:32","typeDescriptions":{}},"local":"Errors","nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3917,"name":"BridgeReceiver","nameLocations":["653:14:32"],"nodeType":"IdentifierPath","referencedDeclaration":4030,"src":"653:14:32"},"id":3918,"nodeType":"InheritanceSpecifier","src":"653:14:32"},{"baseName":{"id":3919,"name":"IAcrossMessageHandler","nameLocations":["669:21:32"],"nodeType":"IdentifierPath","referencedDeclaration":4143,"src":"669:21:32"},"id":3920,"nodeType":"InheritanceSpecifier","src":"669:21:32"},{"baseName":{"id":3921,"name":"HandlerContext","nameLocations":["692:14:32"],"nodeType":"IdentifierPath","referencedDeclaration":3563,"src":"692:14:32"},"id":3922,"nodeType":"InheritanceSpecifier","src":"692:14:32"}],"canonicalName":"AcrossHookReceiver","contractDependencies":[],"contractKind":"contract","documentation":{"id":3916,"nodeType":"StructuredDocumentation","src":"364:248:32","text":" @title AcrossHookReceiver\n @author KDon.eth\n @notice Parses inbound Across (bridge) transfers and authenticates messages.\n @dev This contract is expected to be inherited by any contract that handle executing arbitrary message logic"},"fullyImplemented":false,"id":4016,"linearizedBaseContracts":[4016,3563,4143,4030],"name":"AcrossHookReceiver","nameLocation":"631:18:32","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"2f3ab804","id":3924,"mutability":"immutable","name":"ACROSS_BRIDGE","nameLocation":"739:13:32","nodeType":"VariableDeclaration","scope":4016,"src":"714:38:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3923,"name":"address","nodeType":"ElementaryTypeName","src":"714:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"body":{"id":3945,"nodeType":"Block","src":"787:107:32","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3929,"name":"bridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3926,"src":"801:6:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"307830","id":3932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"819:3:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3931,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"811:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3930,"name":"address","nodeType":"ElementaryTypeName","src":"811:7:32","typeDescriptions":{}}},"id":3933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"811:12:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"801:22:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3940,"nodeType":"IfStatement","src":"797:57:32","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3935,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4115,"src":"832:6:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_OmnaccountErrors_$4115_$","typeString":"type(contract OmnaccountErrors)"}},"id":3937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"839:13:32","memberName":"InvalidBridge","nodeType":"MemberAccess","referencedDeclaration":4114,"src":"832:20:32","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"832:22:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3939,"nodeType":"RevertStatement","src":"825:29:32"}},{"expression":{"id":3943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3941,"name":"ACROSS_BRIDGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3924,"src":"865:13:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3942,"name":"bridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3926,"src":"881:6:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"865:22:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3944,"nodeType":"ExpressionStatement","src":"865:22:32"}]},"id":3946,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3926,"mutability":"mutable","name":"bridge","nameLocation":"779:6:32","nodeType":"VariableDeclaration","scope":3946,"src":"771:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3925,"name":"address","nodeType":"ElementaryTypeName","src":"771:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"770:16:32"},"returnParameters":{"id":3928,"nodeType":"ParameterList","parameters":[],"src":"787:0:32"},"scope":4016,"src":"759:135:32","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[4131],"body":{"id":3967,"nodeType":"Block","src":"1602:64:32","statements":[{"expression":{"arguments":[{"id":3962,"name":"tokenSent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3948,"src":"1632:9:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3963,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3950,"src":"1643:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3964,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3956,"src":"1651:7:32","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3961,"name":"_afterTokensBridged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4029,"src":"1612:19:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":3965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1612:47:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3966,"nodeType":"ExpressionStatement","src":"1612:47:32"}]},"functionSelector":"0ea1f938","id":3968,"implemented":true,"kind":"function","modifiers":[{"id":3959,"kind":"modifierInvocation","modifierName":{"id":3958,"name":"onlyBridge","nameLocations":["1591:10:32"],"nodeType":"IdentifierPath","referencedDeclaration":4015,"src":"1591:10:32"},"nodeType":"ModifierInvocation","src":"1591:10:32"}],"name":"handleAcrossMessage","nameLocation":"1422:19:32","nodeType":"FunctionDefinition","parameters":{"id":3957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3948,"mutability":"mutable","name":"tokenSent","nameLocation":"1459:9:32","nodeType":"VariableDeclaration","scope":3968,"src":"1451:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3947,"name":"address","nodeType":"ElementaryTypeName","src":"1451:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3950,"mutability":"mutable","name":"amount","nameLocation":"1486:6:32","nodeType":"VariableDeclaration","scope":3968,"src":"1478:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3949,"name":"uint256","nodeType":"ElementaryTypeName","src":"1478:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3952,"mutability":"mutable","name":"fillCompleted","nameLocation":"1507:13:32","nodeType":"VariableDeclaration","scope":3968,"src":"1502:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3951,"name":"bool","nodeType":"ElementaryTypeName","src":"1502:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3954,"mutability":"mutable","name":"relayer","nameLocation":"1538:7:32","nodeType":"VariableDeclaration","scope":3968,"src":"1530:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3953,"name":"address","nodeType":"ElementaryTypeName","src":"1530:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3956,"mutability":"mutable","name":"message","nameLocation":"1568:7:32","nodeType":"VariableDeclaration","scope":3968,"src":"1555:20:32","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3955,"name":"bytes","nodeType":"ElementaryTypeName","src":"1555:5:32","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1441:140:32"},"returnParameters":{"id":3960,"nodeType":"ParameterList","parameters":[],"src":"1602:0:32"},"scope":4016,"src":"1413:253:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[4142],"body":{"id":3987,"nodeType":"Block","src":"1835:64:32","statements":[{"expression":{"arguments":[{"id":3982,"name":"tokenSent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3970,"src":"1865:9:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3983,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"1876:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3984,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3976,"src":"1884:7:32","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3981,"name":"_afterTokensBridged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4029,"src":"1845:19:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":3985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1845:47:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3986,"nodeType":"ExpressionStatement","src":"1845:47:32"}]},"functionSelector":"3a5be8cb","id":3988,"implemented":true,"kind":"function","modifiers":[{"id":3979,"kind":"modifierInvocation","modifierName":{"id":3978,"name":"onlyBridge","nameLocations":["1824:10:32"],"nodeType":"IdentifierPath","referencedDeclaration":4015,"src":"1824:10:32"},"nodeType":"ModifierInvocation","src":"1824:10:32"}],"name":"handleV3AcrossMessage","nameLocation":"1681:21:32","nodeType":"FunctionDefinition","parameters":{"id":3977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3970,"mutability":"mutable","name":"tokenSent","nameLocation":"1720:9:32","nodeType":"VariableDeclaration","scope":3988,"src":"1712:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3969,"name":"address","nodeType":"ElementaryTypeName","src":"1712:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3972,"mutability":"mutable","name":"amount","nameLocation":"1747:6:32","nodeType":"VariableDeclaration","scope":3988,"src":"1739:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3971,"name":"uint256","nodeType":"ElementaryTypeName","src":"1739:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3974,"mutability":"mutable","name":"relayer","nameLocation":"1771:7:32","nodeType":"VariableDeclaration","scope":3988,"src":"1763:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3973,"name":"address","nodeType":"ElementaryTypeName","src":"1763:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3976,"mutability":"mutable","name":"message","nameLocation":"1801:7:32","nodeType":"VariableDeclaration","scope":3988,"src":"1788:20:32","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3975,"name":"bytes","nodeType":"ElementaryTypeName","src":"1788:5:32","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1702:112:32"},"returnParameters":{"id":3980,"nodeType":"ParameterList","parameters":[],"src":"1835:0:32"},"scope":4016,"src":"1672:227:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3999,"nodeType":"Block","src":"2477:47:32","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3995,"name":"bridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3990,"src":"2494:6:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3996,"name":"ACROSS_BRIDGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3924,"src":"2504:13:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2494:23:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3994,"id":3998,"nodeType":"Return","src":"2487:30:32"}]},"id":4000,"implemented":true,"kind":"function","modifiers":[],"name":"_isBridge","nameLocation":"2422:9:32","nodeType":"FunctionDefinition","parameters":{"id":3991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3990,"mutability":"mutable","name":"bridge","nameLocation":"2440:6:32","nodeType":"VariableDeclaration","scope":4000,"src":"2432:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3989,"name":"address","nodeType":"ElementaryTypeName","src":"2432:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2431:16:32"},"returnParameters":{"id":3994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3993,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4000,"src":"2471:4:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3992,"name":"bool","nodeType":"ElementaryTypeName","src":"2471:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2470:6:32"},"scope":4016,"src":"2413:111:32","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4014,"nodeType":"Block","src":"2552:88:32","statements":[{"condition":{"id":4006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2566:24:32","subExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4003,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3552,"src":"2577:10:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":4004,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2577:12:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4002,"name":"_isBridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"2567:9:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":4005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2567:23:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4012,"nodeType":"IfStatement","src":"2562:59:32","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4007,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4115,"src":"2599:6:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_OmnaccountErrors_$4115_$","typeString":"type(contract OmnaccountErrors)"}},"id":4009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2606:13:32","memberName":"InvalidBridge","nodeType":"MemberAccess","referencedDeclaration":4114,"src":"2599:20:32","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2599:22:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4011,"nodeType":"RevertStatement","src":"2592:29:32"}},{"id":4013,"nodeType":"PlaceholderStatement","src":"2632:1:32"}]},"id":4015,"name":"onlyBridge","nameLocation":"2539:10:32","nodeType":"ModifierDefinition","parameters":{"id":4001,"nodeType":"ParameterList","parameters":[],"src":"2549:2:32"},"src":"2530:110:32","virtual":false,"visibility":"internal"}],"scope":4017,"src":"613:2029:32","usedErrors":[4114],"usedEvents":[]}],"src":"39:2604:32"},"id":32},"contracts/bridge/BridgeReceiver.sol":{"ast":{"absolutePath":"contracts/bridge/BridgeReceiver.sol","exportedSymbols":{"BridgeReceiver":[4030]},"id":4031,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":4018,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"39:24:33"},{"abstract":true,"baseContracts":[],"canonicalName":"BridgeReceiver","contractDependencies":[],"contractKind":"contract","documentation":{"id":4019,"nodeType":"StructuredDocumentation","src":"65:153:33","text":" @title BridgeReceiver\n @author KDon.eth\n @notice General abstract contract for bridge receivers to implement to standardize internal hooks"},"fullyImplemented":false,"id":4030,"linearizedBaseContracts":[4030],"name":"BridgeReceiver","nameLocation":"237:14:33","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4020,"nodeType":"StructuredDocumentation","src":"760:260:33","text":" @dev Internal hook called on implementing contracts to execute logic\n @param token Address of tokens received\n @param amount Number of tokens received\n @param message Unauthenticated calldata to parse, validate then execute"},"id":4029,"implemented":false,"kind":"function","modifiers":[],"name":"_afterTokensBridged","nameLocation":"1034:19:33","nodeType":"FunctionDefinition","parameters":{"id":4027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4022,"mutability":"mutable","name":"token","nameLocation":"1071:5:33","nodeType":"VariableDeclaration","scope":4029,"src":"1063:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4021,"name":"address","nodeType":"ElementaryTypeName","src":"1063:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4024,"mutability":"mutable","name":"amount","nameLocation":"1094:6:33","nodeType":"VariableDeclaration","scope":4029,"src":"1086:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4023,"name":"uint256","nodeType":"ElementaryTypeName","src":"1086:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4026,"mutability":"mutable","name":"message","nameLocation":"1123:7:33","nodeType":"VariableDeclaration","scope":4029,"src":"1110:20:33","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4025,"name":"bytes","nodeType":"ElementaryTypeName","src":"1110:5:33","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1053:83:33"},"returnParameters":{"id":4028,"nodeType":"ParameterList","parameters":[],"src":"1153:0:33"},"scope":4030,"src":"1025:129:33","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":4031,"src":"219:937:33","usedErrors":[],"usedEvents":[]}],"src":"39:1118:33"},"id":33},"contracts/bridge/CCIPHookReceiver.sol":{"ast":{"absolutePath":"contracts/bridge/CCIPHookReceiver.sol","exportedSymbols":{"BridgeReceiver":[4030],"CCIPHookReceiver":[4105],"CCIPReceiver":[857],"Client":[926]},"id":4106,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":4032,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"39:24:34"},{"absolutePath":"contracts/bridge/BridgeReceiver.sol","file":"./BridgeReceiver.sol","id":4034,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4106,"sourceUnit":4031,"src":"65:52:34","symbolAliases":[{"foreign":{"id":4033,"name":"BridgeReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4030,"src":"73:14:34","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol","file":"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol","id":4036,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4106,"sourceUnit":858,"src":"118:99:34","symbolAliases":[{"foreign":{"id":4035,"name":"CCIPReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"126:12:34","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol","file":"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol","id":4038,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4106,"sourceUnit":927,"src":"218:84:34","symbolAliases":[{"foreign":{"id":4037,"name":"Client","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"226:6:34","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4040,"name":"BridgeReceiver","nameLocations":["511:14:34"],"nodeType":"IdentifierPath","referencedDeclaration":4030,"src":"511:14:34"},"id":4041,"nodeType":"InheritanceSpecifier","src":"511:14:34"},{"baseName":{"id":4042,"name":"CCIPReceiver","nameLocations":["527:12:34"],"nodeType":"IdentifierPath","referencedDeclaration":857,"src":"527:12:34"},"id":4043,"nodeType":"InheritanceSpecifier","src":"527:12:34"}],"canonicalName":"CCIPHookReceiver","contractDependencies":[],"contractKind":"contract","documentation":{"id":4039,"nodeType":"StructuredDocumentation","src":"304:168:34","text":" @title CCIPHookReceiver\n @notice Standardized internal hooks for CCIP messages\n @dev This is demo of how CCIP could be handled and is not yet implemented"},"fullyImplemented":false,"id":4105,"linearizedBaseContracts":[4105,857,938,870,4030],"name":"CCIPHookReceiver","nameLocation":"491:16:34","nodeType":"ContractDefinition","nodes":[{"body":{"id":4051,"nodeType":"Block","src":"604:7:34","statements":[]},"id":4052,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":4048,"name":"ccipRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4045,"src":"592:10:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4049,"kind":"baseConstructorSpecifier","modifierName":{"id":4047,"name":"CCIPReceiver","nameLocations":["579:12:34"],"nodeType":"IdentifierPath","referencedDeclaration":857,"src":"579:12:34"},"nodeType":"ModifierInvocation","src":"579:24:34"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4045,"mutability":"mutable","name":"ccipRouter","nameLocation":"567:10:34","nodeType":"VariableDeclaration","scope":4052,"src":"559:18:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4044,"name":"address","nodeType":"ElementaryTypeName","src":"559:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"558:20:34"},"returnParameters":{"id":4050,"nodeType":"ParameterList","parameters":[],"src":"604:0:34"},"scope":4105,"src":"547:64:34","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[822],"body":{"id":4103,"nodeType":"Block","src":"1142:497:34","statements":[{"assignments":[4060],"declarations":[{"constant":false,"id":4060,"mutability":"mutable","name":"sender","nameLocation":"1160:6:34","nodeType":"VariableDeclaration","scope":4103,"src":"1152:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4059,"name":"address","nodeType":"ElementaryTypeName","src":"1152:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4069,"initialValue":{"arguments":[{"expression":{"id":4063,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4055,"src":"1180:7:34","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$891_memory_ptr","typeString":"struct Client.Any2EVMMessage memory"}},"id":4064,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1188:6:34","memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":884,"src":"1180:14:34","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":4066,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1197:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4065,"name":"address","nodeType":"ElementaryTypeName","src":"1197:7:34","typeDescriptions":{}}}],"id":4067,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1196:9:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"}],"expression":{"id":4061,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1169:3:34","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4062,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1173:6:34","memberName":"decode","nodeType":"MemberAccess","src":"1169:10:34","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":4068,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1169:37:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"1152:54:34"},{"body":{"id":4101,"nodeType":"Block","src":"1390:243:34","statements":[{"assignments":[4086],"declarations":[{"constant":false,"id":4086,"mutability":"mutable","name":"tokenAmount","nameLocation":"1433:11:34","nodeType":"VariableDeclaration","scope":4101,"src":"1404:40:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_EVMTokenAmount_$878_memory_ptr","typeString":"struct Client.EVMTokenAmount"},"typeName":{"id":4085,"nodeType":"UserDefinedTypeName","pathNode":{"id":4084,"name":"Client.EVMTokenAmount","nameLocations":["1404:6:34","1411:14:34"],"nodeType":"IdentifierPath","referencedDeclaration":878,"src":"1404:21:34"},"referencedDeclaration":878,"src":"1404:21:34","typeDescriptions":{"typeIdentifier":"t_struct$_EVMTokenAmount_$878_storage_ptr","typeString":"struct Client.EVMTokenAmount"}},"visibility":"internal"}],"id":4091,"initialValue":{"baseExpression":{"expression":{"id":4087,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4055,"src":"1447:7:34","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$891_memory_ptr","typeString":"struct Client.Any2EVMMessage memory"}},"id":4088,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1455:16:34","memberName":"destTokenAmounts","nodeType":"MemberAccess","referencedDeclaration":890,"src":"1447:24:34","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EVMTokenAmount_$878_memory_ptr_$dyn_memory_ptr","typeString":"struct Client.EVMTokenAmount memory[] memory"}},"id":4090,"indexExpression":{"id":4089,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"1472:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1447:27:34","typeDescriptions":{"typeIdentifier":"t_struct$_EVMTokenAmount_$878_memory_ptr","typeString":"struct Client.EVMTokenAmount memory"}},"nodeType":"VariableDeclarationStatement","src":"1404:70:34"},{"expression":{"arguments":[{"expression":{"id":4093,"name":"tokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4086,"src":"1525:11:34","typeDescriptions":{"typeIdentifier":"t_struct$_EVMTokenAmount_$878_memory_ptr","typeString":"struct Client.EVMTokenAmount memory"}},"id":4094,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1537:5:34","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":875,"src":"1525:17:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":4095,"name":"tokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4086,"src":"1560:11:34","typeDescriptions":{"typeIdentifier":"t_struct$_EVMTokenAmount_$878_memory_ptr","typeString":"struct Client.EVMTokenAmount memory"}},"id":4096,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1572:6:34","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":877,"src":"1560:18:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4097,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4055,"src":"1596:7:34","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$891_memory_ptr","typeString":"struct Client.Any2EVMMessage memory"}},"id":4098,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1604:4:34","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":886,"src":"1596:12:34","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4092,"name":"_afterTokensBridged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4029,"src":"1488:19:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":4099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1488:134:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4100,"nodeType":"ExpressionStatement","src":"1488:134:34"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4074,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"1348:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"expression":{"id":4075,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4055,"src":"1352:7:34","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$891_memory_ptr","typeString":"struct Client.Any2EVMMessage memory"}},"id":4076,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1360:16:34","memberName":"destTokenAmounts","nodeType":"MemberAccess","referencedDeclaration":890,"src":"1352:24:34","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EVMTokenAmount_$878_memory_ptr_$dyn_memory_ptr","typeString":"struct Client.EVMTokenAmount memory[] memory"}},"id":4077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1377:6:34","memberName":"length","nodeType":"MemberAccess","src":"1352:31:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1348:35:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4102,"initializationExpression":{"assignments":[4071],"declarations":[{"constant":false,"id":4071,"mutability":"mutable","name":"i","nameLocation":"1341:1:34","nodeType":"VariableDeclaration","scope":4102,"src":"1333:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4070,"name":"uint256","nodeType":"ElementaryTypeName","src":"1333:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4073,"initialValue":{"hexValue":"30","id":4072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1345:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1333:13:34"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":4080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1385:3:34","subExpression":{"id":4079,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"1385:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4081,"nodeType":"ExpressionStatement","src":"1385:3:34"},"nodeType":"ForStatement","src":"1328:305:34"}]},"id":4104,"implemented":true,"kind":"function","modifiers":[],"name":"_ccipReceive","nameLocation":"1059:12:34","nodeType":"FunctionDefinition","overrides":{"id":4057,"nodeType":"OverrideSpecifier","overrides":[],"src":"1133:8:34"},"parameters":{"id":4056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4055,"mutability":"mutable","name":"message","nameLocation":"1110:7:34","nodeType":"VariableDeclaration","scope":4104,"src":"1081:36:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$891_memory_ptr","typeString":"struct Client.Any2EVMMessage"},"typeName":{"id":4054,"nodeType":"UserDefinedTypeName","pathNode":{"id":4053,"name":"Client.Any2EVMMessage","nameLocations":["1081:6:34","1088:14:34"],"nodeType":"IdentifierPath","referencedDeclaration":891,"src":"1081:21:34"},"referencedDeclaration":891,"src":"1081:21:34","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$891_storage_ptr","typeString":"struct Client.Any2EVMMessage"}},"visibility":"internal"}],"src":"1071:52:34"},"returnParameters":{"id":4058,"nodeType":"ParameterList","parameters":[],"src":"1142:0:34"},"scope":4105,"src":"1050:589:34","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":4106,"src":"473:1168:34","usedErrors":[838],"usedEvents":[]}],"src":"39:1603:34"},"id":34},"contracts/interfaces/Errors.sol":{"ast":{"absolutePath":"contracts/interfaces/Errors.sol","exportedSymbols":{"OmnaccountErrors":[4115]},"id":4116,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":4107,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"39:24:35"},{"abstract":false,"baseContracts":[],"canonicalName":"OmnaccountErrors","contractDependencies":[],"contractKind":"interface","documentation":{"id":4108,"nodeType":"StructuredDocumentation","src":"65:111:35","text":" @title OmnaccountErrors\n @author KDon.eth\n @notice Standard interface for Omnaccount error codes"},"fullyImplemented":true,"id":4115,"linearizedBaseContracts":[4115],"name":"OmnaccountErrors","nameLocation":"187:16:35","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4109,"nodeType":"StructuredDocumentation","src":"211:72:35","text":"@notice Reverted if attempting to execute userOp from invalid sender"},"errorSelector":"2039d3c9","id":4111,"name":"InvalidEntryPoint","nameLocation":"294:17:35","nodeType":"ErrorDefinition","parameters":{"id":4110,"nodeType":"ParameterList","parameters":[],"src":"311:2:35"},"src":"288:26:35"},{"documentation":{"id":4112,"nodeType":"StructuredDocumentation","src":"320:45:35","text":"@notice Reverted if address is not bridge"},"errorSelector":"5b43e1a7","id":4114,"name":"InvalidBridge","nameLocation":"376:13:35","nodeType":"ErrorDefinition","parameters":{"id":4113,"nodeType":"ParameterList","parameters":[],"src":"389:2:35"},"src":"370:22:35"}],"scope":4116,"src":"177:218:35","usedErrors":[4111,4114],"usedEvents":[]}],"src":"39:357:35"},"id":35},"contracts/interfaces/IAcrossMessageHandler.sol":{"ast":{"absolutePath":"contracts/interfaces/IAcrossMessageHandler.sol","exportedSymbols":{"IAcrossMessageHandler":[4143]},"id":4144,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":4117,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"39:24:36"},{"abstract":false,"baseContracts":[],"canonicalName":"IAcrossMessageHandler","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4143,"linearizedBaseContracts":[4143],"name":"IAcrossMessageHandler","nameLocation":"193:21:36","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4118,"nodeType":"StructuredDocumentation","src":"221:53:36","text":"@custom:audit FOLLOWING FUNCTION TO BE DEPRECATED"},"functionSelector":"0ea1f938","id":4131,"implemented":false,"kind":"function","modifiers":[],"name":"handleAcrossMessage","nameLocation":"288:19:36","nodeType":"FunctionDefinition","parameters":{"id":4129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4120,"mutability":"mutable","name":"tokenSent","nameLocation":"325:9:36","nodeType":"VariableDeclaration","scope":4131,"src":"317:17:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4119,"name":"address","nodeType":"ElementaryTypeName","src":"317:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4122,"mutability":"mutable","name":"amount","nameLocation":"352:6:36","nodeType":"VariableDeclaration","scope":4131,"src":"344:14:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4121,"name":"uint256","nodeType":"ElementaryTypeName","src":"344:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4124,"mutability":"mutable","name":"fillCompleted","nameLocation":"373:13:36","nodeType":"VariableDeclaration","scope":4131,"src":"368:18:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4123,"name":"bool","nodeType":"ElementaryTypeName","src":"368:4:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4126,"mutability":"mutable","name":"relayer","nameLocation":"404:7:36","nodeType":"VariableDeclaration","scope":4131,"src":"396:15:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4125,"name":"address","nodeType":"ElementaryTypeName","src":"396:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4128,"mutability":"mutable","name":"message","nameLocation":"434:7:36","nodeType":"VariableDeclaration","scope":4131,"src":"421:20:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4127,"name":"bytes","nodeType":"ElementaryTypeName","src":"421:5:36","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"307:140:36"},"returnParameters":{"id":4130,"nodeType":"ParameterList","parameters":[],"src":"456:0:36"},"scope":4143,"src":"279:178:36","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"3a5be8cb","id":4142,"implemented":false,"kind":"function","modifiers":[],"name":"handleV3AcrossMessage","nameLocation":"623:21:36","nodeType":"FunctionDefinition","parameters":{"id":4140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4133,"mutability":"mutable","name":"tokenSent","nameLocation":"662:9:36","nodeType":"VariableDeclaration","scope":4142,"src":"654:17:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4132,"name":"address","nodeType":"ElementaryTypeName","src":"654:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4135,"mutability":"mutable","name":"amount","nameLocation":"689:6:36","nodeType":"VariableDeclaration","scope":4142,"src":"681:14:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4134,"name":"uint256","nodeType":"ElementaryTypeName","src":"681:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4137,"mutability":"mutable","name":"relayer","nameLocation":"713:7:36","nodeType":"VariableDeclaration","scope":4142,"src":"705:15:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4136,"name":"address","nodeType":"ElementaryTypeName","src":"705:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4139,"mutability":"mutable","name":"message","nameLocation":"743:7:36","nodeType":"VariableDeclaration","scope":4142,"src":"730:20:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4138,"name":"bytes","nodeType":"ElementaryTypeName","src":"730:5:36","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"644:112:36"},"returnParameters":{"id":4141,"nodeType":"ParameterList","parameters":[],"src":"765:0:36"},"scope":4143,"src":"614:152:36","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4144,"src":"183:585:36","usedErrors":[],"usedEvents":[]}],"src":"39:730:36"},"id":36},"contracts/interfaces/ISafe.sol":{"ast":{"absolutePath":"contracts/interfaces/ISafe.sol","exportedSymbols":{"ISafe":[4211]},"id":4212,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":4145,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"39:24:37"},{"abstract":false,"baseContracts":[],"canonicalName":"ISafe","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4211,"linearizedBaseContracts":[4211],"name":"ISafe","nameLocation":"75:5:37","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4146,"nodeType":"StructuredDocumentation","src":"87:336:37","text":" @dev Allows a Module to execute a Safe transaction without any further confirmations.\n @param to Destination address of module transaction.\n @param value Ether value of module transaction.\n @param data Data payload of module transaction.\n @param operation Operation type of module transaction."},"functionSelector":"468721a7","id":4159,"implemented":false,"kind":"function","modifiers":[],"name":"execTransactionFromModule","nameLocation":"437:25:37","nodeType":"FunctionDefinition","parameters":{"id":4155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4148,"mutability":"mutable","name":"to","nameLocation":"471:2:37","nodeType":"VariableDeclaration","scope":4159,"src":"463:10:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4147,"name":"address","nodeType":"ElementaryTypeName","src":"463:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4150,"mutability":"mutable","name":"value","nameLocation":"483:5:37","nodeType":"VariableDeclaration","scope":4159,"src":"475:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4149,"name":"uint256","nodeType":"ElementaryTypeName","src":"475:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4152,"mutability":"mutable","name":"data","nameLocation":"503:4:37","nodeType":"VariableDeclaration","scope":4159,"src":"490:17:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4151,"name":"bytes","nodeType":"ElementaryTypeName","src":"490:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4154,"mutability":"mutable","name":"operation","nameLocation":"515:9:37","nodeType":"VariableDeclaration","scope":4159,"src":"509:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4153,"name":"uint8","nodeType":"ElementaryTypeName","src":"509:5:37","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"462:63:37"},"returnParameters":{"id":4158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4157,"mutability":"mutable","name":"success","nameLocation":"549:7:37","nodeType":"VariableDeclaration","scope":4159,"src":"544:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4156,"name":"bool","nodeType":"ElementaryTypeName","src":"544:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"543:14:37"},"scope":4211,"src":"428:130:37","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4160,"nodeType":"StructuredDocumentation","src":"564:480:37","text":" @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\n @param to Destination address of module transaction.\n @param value Ether value of module transaction.\n @param data Data payload of module transaction.\n @param operation Operation type of module transaction.\n @return success Boolean flag indicating if the call succeeded.\n @return returnData Data returned by the call."},"functionSelector":"5229073f","id":4175,"implemented":false,"kind":"function","modifiers":[],"name":"execTransactionFromModuleReturnData","nameLocation":"1058:35:37","nodeType":"FunctionDefinition","parameters":{"id":4169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4162,"mutability":"mutable","name":"to","nameLocation":"1111:2:37","nodeType":"VariableDeclaration","scope":4175,"src":"1103:10:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4161,"name":"address","nodeType":"ElementaryTypeName","src":"1103:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4164,"mutability":"mutable","name":"value","nameLocation":"1131:5:37","nodeType":"VariableDeclaration","scope":4175,"src":"1123:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4163,"name":"uint256","nodeType":"ElementaryTypeName","src":"1123:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4166,"mutability":"mutable","name":"data","nameLocation":"1159:4:37","nodeType":"VariableDeclaration","scope":4175,"src":"1146:17:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4165,"name":"bytes","nodeType":"ElementaryTypeName","src":"1146:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4168,"mutability":"mutable","name":"operation","nameLocation":"1179:9:37","nodeType":"VariableDeclaration","scope":4175,"src":"1173:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4167,"name":"uint8","nodeType":"ElementaryTypeName","src":"1173:5:37","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"1093:101:37"},"returnParameters":{"id":4174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4171,"mutability":"mutable","name":"success","nameLocation":"1218:7:37","nodeType":"VariableDeclaration","scope":4175,"src":"1213:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4170,"name":"bool","nodeType":"ElementaryTypeName","src":"1213:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4173,"mutability":"mutable","name":"returnData","nameLocation":"1240:10:37","nodeType":"VariableDeclaration","scope":4175,"src":"1227:23:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4172,"name":"bytes","nodeType":"ElementaryTypeName","src":"1227:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1212:39:37"},"scope":4211,"src":"1049:203:37","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4176,"nodeType":"StructuredDocumentation","src":"1258:444:37","text":" @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\n @param dataHash Hash of the data (could be either a message hash or transaction hash)\n @param data That should be signed (this is passed to an external validator contract)\n @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash."},"functionSelector":"934f3a11","id":4185,"implemented":false,"kind":"function","modifiers":[],"name":"checkSignatures","nameLocation":"1716:15:37","nodeType":"FunctionDefinition","parameters":{"id":4183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4178,"mutability":"mutable","name":"dataHash","nameLocation":"1740:8:37","nodeType":"VariableDeclaration","scope":4185,"src":"1732:16:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4177,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1732:7:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4180,"mutability":"mutable","name":"data","nameLocation":"1763:4:37","nodeType":"VariableDeclaration","scope":4185,"src":"1750:17:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4179,"name":"bytes","nodeType":"ElementaryTypeName","src":"1750:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4182,"mutability":"mutable","name":"signatures","nameLocation":"1782:10:37","nodeType":"VariableDeclaration","scope":4185,"src":"1769:23:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4181,"name":"bytes","nodeType":"ElementaryTypeName","src":"1769:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1731:62:37"},"returnParameters":{"id":4184,"nodeType":"ParameterList","parameters":[],"src":"1807:0:37"},"scope":4211,"src":"1707:101:37","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4186,"nodeType":"StructuredDocumentation","src":"1814:157:37","text":" @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\n @return bytes32 The domain separator hash."},"functionSelector":"f698da25","id":4191,"implemented":false,"kind":"function","modifiers":[],"name":"domainSeparator","nameLocation":"1985:15:37","nodeType":"FunctionDefinition","parameters":{"id":4187,"nodeType":"ParameterList","parameters":[],"src":"2000:2:37"},"returnParameters":{"id":4190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4189,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4191,"src":"2026:7:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4188,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2026:7:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2025:9:37"},"scope":4211,"src":"1976:59:37","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4192,"nodeType":"StructuredDocumentation","src":"2041:245:37","text":" @dev Returns array of modules.\n @param start Start of the page.\n @param pageSize Maximum number of modules that should be returned.\n @return array Array of modules.\n @return next Start of the next page."},"functionSelector":"cc2f8452","id":4204,"implemented":false,"kind":"function","modifiers":[],"name":"getModulesPaginated","nameLocation":"2300:19:37","nodeType":"FunctionDefinition","parameters":{"id":4197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4194,"mutability":"mutable","name":"start","nameLocation":"2328:5:37","nodeType":"VariableDeclaration","scope":4204,"src":"2320:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4193,"name":"address","nodeType":"ElementaryTypeName","src":"2320:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4196,"mutability":"mutable","name":"pageSize","nameLocation":"2343:8:37","nodeType":"VariableDeclaration","scope":4204,"src":"2335:16:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4195,"name":"uint256","nodeType":"ElementaryTypeName","src":"2335:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2319:33:37"},"returnParameters":{"id":4203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4200,"mutability":"mutable","name":"array","nameLocation":"2393:5:37","nodeType":"VariableDeclaration","scope":4204,"src":"2376:22:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4198,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4199,"nodeType":"ArrayTypeName","src":"2376:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":4202,"mutability":"mutable","name":"next","nameLocation":"2408:4:37","nodeType":"VariableDeclaration","scope":4204,"src":"2400:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4201,"name":"address","nodeType":"ElementaryTypeName","src":"2400:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2375:38:37"},"scope":4211,"src":"2291:123:37","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4205,"nodeType":"StructuredDocumentation","src":"2420:169:37","text":" @notice Enables the module `module` for the Safe.\n @dev This can only be done via a Safe transaction.\n @param module Module to be enabled."},"functionSelector":"610b5925","id":4210,"implemented":false,"kind":"function","modifiers":[],"name":"enableModule","nameLocation":"2603:12:37","nodeType":"FunctionDefinition","parameters":{"id":4208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4207,"mutability":"mutable","name":"module","nameLocation":"2624:6:37","nodeType":"VariableDeclaration","scope":4210,"src":"2616:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4206,"name":"address","nodeType":"ElementaryTypeName","src":"2616:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2615:16:37"},"returnParameters":{"id":4209,"nodeType":"ParameterList","parameters":[],"src":"2640:0:37"},"scope":4211,"src":"2594:47:37","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4212,"src":"65:2578:37","usedErrors":[],"usedEvents":[]}],"src":"39:2604:37"},"id":37},"contracts/safe/AccountEntry.sol":{"ast":{"absolutePath":"contracts/safe/AccountEntry.sol","exportedSymbols":{"AccountEntry":[4274],"Errors":[4115],"HandlerContext":[3563]},"id":4275,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":4213,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"39:24:38"},{"absolutePath":"@safe-global/safe-contracts/contracts/handler/HandlerContext.sol","file":"@safe-global/safe-contracts/contracts/handler/HandlerContext.sol","id":4215,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4275,"sourceUnit":3564,"src":"65:96:38","symbolAliases":[{"foreign":{"id":4214,"name":"HandlerContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"73:14:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interfaces/Errors.sol","file":"../interfaces/Errors.sol","id":4217,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4275,"sourceUnit":4116,"src":"162:68:38","symbolAliases":[{"foreign":{"id":4216,"name":"OmnaccountErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4115,"src":"170:16:38","typeDescriptions":{}},"local":"Errors","nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4218,"name":"HandlerContext","nameLocations":["266:14:38"],"nodeType":"IdentifierPath","referencedDeclaration":3563,"src":"266:14:38"},"id":4219,"nodeType":"InheritanceSpecifier","src":"266:14:38"}],"canonicalName":"AccountEntry","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4274,"linearizedBaseContracts":[4274,3563],"name":"AccountEntry","nameLocation":"250:12:38","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":4220,"nodeType":"StructuredDocumentation","src":"287:91:38","text":" @notice The address of the EntryPoint contract supported by this module."},"functionSelector":"137e051e","id":4222,"mutability":"immutable","name":"SUPPORTED_ENTRYPOINT","nameLocation":"408:20:38","nodeType":"VariableDeclaration","scope":4274,"src":"383:45:38","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4221,"name":"address","nodeType":"ElementaryTypeName","src":"383:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"body":{"id":4243,"nodeType":"Block","src":"467:126:38","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4227,"name":"entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"481:10:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"307830","id":4230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"503:3:38","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4229,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"495:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4228,"name":"address","nodeType":"ElementaryTypeName","src":"495:7:38","typeDescriptions":{}}},"id":4231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"495:12:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"481:26:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4238,"nodeType":"IfStatement","src":"477:65:38","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4233,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4115,"src":"516:6:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_OmnaccountErrors_$4115_$","typeString":"type(contract OmnaccountErrors)"}},"id":4235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"523:17:38","memberName":"InvalidEntryPoint","nodeType":"MemberAccess","referencedDeclaration":4111,"src":"516:24:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"516:26:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4237,"nodeType":"RevertStatement","src":"509:33:38"}},{"expression":{"id":4241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4239,"name":"SUPPORTED_ENTRYPOINT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4222,"src":"553:20:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4240,"name":"entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"576:10:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"553:33:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4242,"nodeType":"ExpressionStatement","src":"553:33:38"}]},"id":4244,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4224,"mutability":"mutable","name":"entryPoint","nameLocation":"455:10:38","nodeType":"VariableDeclaration","scope":4244,"src":"447:18:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4223,"name":"address","nodeType":"ElementaryTypeName","src":"447:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"446:20:38"},"returnParameters":{"id":4226,"nodeType":"ParameterList","parameters":[],"src":"467:0:38"},"scope":4274,"src":"435:158:38","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4256,"nodeType":"Block","src":"779:58:38","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4252,"name":"entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4247,"src":"796:10:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4253,"name":"SUPPORTED_ENTRYPOINT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4222,"src":"810:20:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"796:34:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4251,"id":4255,"nodeType":"Return","src":"789:41:38"}]},"documentation":{"id":4245,"nodeType":"StructuredDocumentation","src":"599:86:38","text":"@notice Checks if a given address is a valid entry point for the abstract account."},"id":4257,"implemented":true,"kind":"function","modifiers":[],"name":"_isSupportedEntryPoint","nameLocation":"699:22:38","nodeType":"FunctionDefinition","parameters":{"id":4248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4247,"mutability":"mutable","name":"entryPoint","nameLocation":"730:10:38","nodeType":"VariableDeclaration","scope":4257,"src":"722:18:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4246,"name":"address","nodeType":"ElementaryTypeName","src":"722:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"721:20:38"},"returnParameters":{"id":4251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4250,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4257,"src":"773:4:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4249,"name":"bool","nodeType":"ElementaryTypeName","src":"773:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"772:6:38"},"scope":4274,"src":"690:147:38","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":4272,"nodeType":"Block","src":"965:105:38","statements":[{"condition":{"id":4264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"979:37:38","subExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4261,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3552,"src":"1003:10:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":4262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1003:12:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4260,"name":"_isSupportedEntryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4257,"src":"980:22:38","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":4263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"980:36:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4270,"nodeType":"IfStatement","src":"975:76:38","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4265,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4115,"src":"1025:6:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_OmnaccountErrors_$4115_$","typeString":"type(contract OmnaccountErrors)"}},"id":4267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1032:17:38","memberName":"InvalidEntryPoint","nodeType":"MemberAccess","referencedDeclaration":4111,"src":"1025:24:38","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1025:26:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4269,"nodeType":"RevertStatement","src":"1018:33:38"}},{"id":4271,"nodeType":"PlaceholderStatement","src":"1062:1:38"}]},"documentation":{"id":4258,"nodeType":"StructuredDocumentation","src":"843:82:38","text":" @notice Validates the call is initiated by a valid entry point."},"id":4273,"name":"onlySupportedEntryPoint","nameLocation":"939:23:38","nodeType":"ModifierDefinition","parameters":{"id":4259,"nodeType":"ParameterList","parameters":[],"src":"962:2:38"},"src":"930:140:38","virtual":false,"visibility":"internal"}],"scope":4275,"src":"232:840:38","usedErrors":[4111],"usedEvents":[]}],"src":"39:1034:38"},"id":38},"contracts/safe/BaseModule.sol":{"ast":{"absolutePath":"contracts/safe/BaseModule.sol","exportedSymbols":{"AccountEntry":[4274],"BaseModule":[4345],"BridgeReceiver":[4030],"Errors":[4115],"IAccount":[255],"ISafe":[4211],"UserOperation":[283],"_packValidationData":[190,228]},"id":4346,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":4276,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"39:24:39"},{"absolutePath":"@account-abstraction/contracts/interfaces/IAccount.sol","file":"@account-abstraction/contracts/interfaces/IAccount.sol","id":4278,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4346,"sourceUnit":256,"src":"65:80:39","symbolAliases":[{"foreign":{"id":4277,"name":"IAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"73:8:39","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/bridge/BridgeReceiver.sol","file":"../bridge/BridgeReceiver.sol","id":4280,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4346,"sourceUnit":4031,"src":"146:60:39","symbolAliases":[{"foreign":{"id":4279,"name":"BridgeReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4030,"src":"154:14:39","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interfaces/Errors.sol","file":"../interfaces/Errors.sol","id":4282,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4346,"sourceUnit":4116,"src":"207:68:39","symbolAliases":[{"foreign":{"id":4281,"name":"OmnaccountErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4115,"src":"215:16:39","typeDescriptions":{}},"local":"Errors","nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/safe/AccountEntry.sol","file":"./AccountEntry.sol","id":4284,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4346,"sourceUnit":4275,"src":"276:48:39","symbolAliases":[{"foreign":{"id":4283,"name":"AccountEntry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4274,"src":"284:12:39","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interfaces/ISafe.sol","file":"../interfaces/ISafe.sol","id":4286,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4346,"sourceUnit":4212,"src":"325:46:39","symbolAliases":[{"foreign":{"id":4285,"name":"ISafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4211,"src":"333:5:39","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@account-abstraction/contracts/interfaces/UserOperation.sol","file":"@account-abstraction/contracts/interfaces/UserOperation.sol","id":4288,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4346,"sourceUnit":454,"src":"372:90:39","symbolAliases":[{"foreign":{"id":4287,"name":"UserOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"380:13:39","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@account-abstraction/contracts/core/Helpers.sol","file":"@account-abstraction/contracts/core/Helpers.sol","id":4290,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4346,"sourceUnit":239,"src":"463:84:39","symbolAliases":[{"foreign":{"id":4289,"name":"_packValidationData","nodeType":"Identifier","overloadedDeclarations":[],"src":"471:19:39","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4291,"name":"IAccount","nameLocations":["582:8:39"],"nodeType":"IdentifierPath","referencedDeclaration":255,"src":"582:8:39"},"id":4292,"nodeType":"InheritanceSpecifier","src":"582:8:39"},{"baseName":{"id":4293,"name":"BridgeReceiver","nameLocations":["592:14:39"],"nodeType":"IdentifierPath","referencedDeclaration":4030,"src":"592:14:39"},"id":4294,"nodeType":"InheritanceSpecifier","src":"592:14:39"},{"baseName":{"id":4295,"name":"AccountEntry","nameLocations":["608:12:39"],"nodeType":"IdentifierPath","referencedDeclaration":4274,"src":"608:12:39"},"id":4296,"nodeType":"InheritanceSpecifier","src":"608:12:39"}],"canonicalName":"BaseModule","contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":4345,"linearizedBaseContracts":[4345,4274,3563,4030,255],"name":"BaseModule","nameLocation":"568:10:39","nodeType":"ContractDefinition","nodes":[{"canonicalName":"BaseModule.BridgeFallback","id":4307,"members":[{"constant":false,"id":4298,"mutability":"mutable","name":"target","nameLocation":"1165:6:39","nodeType":"VariableDeclaration","scope":4307,"src":"1157:14:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4297,"name":"address","nodeType":"ElementaryTypeName","src":"1157:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4300,"mutability":"mutable","name":"selector","nameLocation":"1188:8:39","nodeType":"VariableDeclaration","scope":4307,"src":"1181:15:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4299,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1181:6:39","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":4302,"mutability":"mutable","name":"data","nameLocation":"1212:4:39","nodeType":"VariableDeclaration","scope":4307,"src":"1206:10:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":4301,"name":"bytes","nodeType":"ElementaryTypeName","src":"1206:5:39","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4304,"mutability":"mutable","name":"addressIndex","nameLocation":"1233:12:39","nodeType":"VariableDeclaration","scope":4307,"src":"1226:19:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":4303,"name":"uint96","nodeType":"ElementaryTypeName","src":"1226:6:39","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":4306,"mutability":"mutable","name":"amountIndex","nameLocation":"1262:11:39","nodeType":"VariableDeclaration","scope":4307,"src":"1255:18:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":4305,"name":"uint96","nodeType":"ElementaryTypeName","src":"1255:6:39","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"name":"BridgeFallback","nameLocation":"1132:14:39","nodeType":"StructDefinition","scope":4345,"src":"1125:155:39","visibility":"public"},{"anonymous":false,"eventSelector":"3e77913f86654953c55557af20108ef6f7adfb983794638bab0a40f257837616","id":4313,"name":"TokensBridged","nameLocation":"1788:13:39","nodeType":"EventDefinition","parameters":{"id":4312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4309,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"1818:5:39","nodeType":"VariableDeclaration","scope":4313,"src":"1802:21:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4308,"name":"address","nodeType":"ElementaryTypeName","src":"1802:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4311,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1833:6:39","nodeType":"VariableDeclaration","scope":4313,"src":"1825:14:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4310,"name":"uint256","nodeType":"ElementaryTypeName","src":"1825:7:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1801:39:39"},"src":"1782:59:39"},{"constant":false,"documentation":{"id":4314,"nodeType":"StructuredDocumentation","src":"2343:59:39","text":"@notice Maps token address to default fallback behavior"},"functionSelector":"fea0f489","id":4319,"mutability":"mutable","name":"bridgeFallbacks","nameLocation":"2468:15:39","nodeType":"VariableDeclaration","scope":4345,"src":"2407:76:39","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_BridgeFallback_$4307_storage_$","typeString":"mapping(address => struct BaseModule.BridgeFallback)"},"typeName":{"id":4318,"keyName":"token","keyNameLocation":"2423:5:39","keyType":{"id":4315,"name":"address","nodeType":"ElementaryTypeName","src":"2415:7:39","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2407:53:39","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_BridgeFallback_$4307_storage_$","typeString":"mapping(address => struct BaseModule.BridgeFallback)"},"valueName":"fallbackData","valueNameLocation":"2447:12:39","valueType":{"id":4317,"nodeType":"UserDefinedTypeName","pathNode":{"id":4316,"name":"BridgeFallback","nameLocations":["2432:14:39"],"nodeType":"IdentifierPath","referencedDeclaration":4307,"src":"2432:14:39"},"referencedDeclaration":4307,"src":"2432:14:39","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeFallback_$4307_storage_ptr","typeString":"struct BaseModule.BridgeFallback"}}},"visibility":"public"},{"body":{"id":4327,"nodeType":"Block","src":"3048:24:39","statements":[]},"id":4328,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":4324,"name":"entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4321,"src":"3036:10:39","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4325,"kind":"baseConstructorSpecifier","modifierName":{"id":4323,"name":"AccountEntry","nameLocations":["3023:12:39"],"nodeType":"IdentifierPath","referencedDeclaration":4274,"src":"3023:12:39"},"nodeType":"ModifierInvocation","src":"3023:24:39"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4321,"mutability":"mutable","name":"entryPoint","nameLocation":"3011:10:39","nodeType":"VariableDeclaration","scope":4328,"src":"3003:18:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4320,"name":"address","nodeType":"ElementaryTypeName","src":"3003:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3002:20:39"},"returnParameters":{"id":4326,"nodeType":"ParameterList","parameters":[],"src":"3048:0:39"},"scope":4345,"src":"2991:81:39","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[4029],"body":{"id":4343,"nodeType":"Block","src":"3736:132:39","statements":[{"eventCall":{"arguments":[{"id":4339,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4330,"src":"3847:5:39","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4340,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4332,"src":"3854:6:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4338,"name":"TokensBridged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4313,"src":"3833:13:39","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3833:28:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4342,"nodeType":"EmitStatement","src":"3828:33:39"}]},"id":4344,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokensBridged","nameLocation":"3607:19:39","nodeType":"FunctionDefinition","overrides":{"id":4336,"nodeType":"OverrideSpecifier","overrides":[],"src":"3719:8:39"},"parameters":{"id":4335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4330,"mutability":"mutable","name":"token","nameLocation":"3644:5:39","nodeType":"VariableDeclaration","scope":4344,"src":"3636:13:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4329,"name":"address","nodeType":"ElementaryTypeName","src":"3636:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4332,"mutability":"mutable","name":"amount","nameLocation":"3667:6:39","nodeType":"VariableDeclaration","scope":4344,"src":"3659:14:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4331,"name":"uint256","nodeType":"ElementaryTypeName","src":"3659:7:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4334,"mutability":"mutable","name":"message","nameLocation":"3696:7:39","nodeType":"VariableDeclaration","scope":4344,"src":"3683:20:39","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4333,"name":"bytes","nodeType":"ElementaryTypeName","src":"3683:5:39","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3626:83:39"},"returnParameters":{"id":4337,"nodeType":"ParameterList","parameters":[],"src":"3736:0:39"},"scope":4345,"src":"3598:270:39","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":4346,"src":"550:3320:39","usedErrors":[4111],"usedEvents":[4313]}],"src":"39:3832:39"},"id":39}},"contracts":{"@account-abstraction/contracts/interfaces/IAccount.sol":{"IAccount":{"abi":[{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation","name":"userOp","type":"tuple"},{"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"internalType":"uint256","name":"missingAccountFunds","type":"uint256"}],"name":"validateUserOp","outputs":[{"internalType":"uint256","name":"validationData","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":{"details":"Must validate caller is the entryPoint.      Must validate the signature and nonce","params":{"missingAccountFunds":"missing funds on the account's deposit in the entrypoint.      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.      The excess is left as a deposit in the entrypoint, for future calls.      can be withdrawn anytime using \"entryPoint.withdrawTo()\"      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.","userOp":"the operation that is about to be executed.","userOpHash":"hash of the user's request data. can be used as the basis for signature."},"returns":{"validationData":"packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,         otherwise, an address of an \"authorizer\" contract.      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"      <6-byte> validAfter - first timestamp this operation is valid      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.      Note that the validation code cannot use block.timestamp (or block.number) directly."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":"3a871cdd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"missingAccountFunds\",\"type\":\"uint256\"}],\"name\":\"validateUserOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"details\":\"Must validate caller is the entryPoint.      Must validate the signature and nonce\",\"params\":{\"missingAccountFunds\":\"missing funds on the account's deposit in the entrypoint.      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.      The excess is left as a deposit in the entrypoint, for future calls.      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\",\"userOp\":\"the operation that is about to be executed.\",\"userOpHash\":\"hash of the user's request data. can be used as the basis for signature.\"},\"returns\":{\"validationData\":\"packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,         otherwise, an address of an \\\"authorizer\\\" contract.      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"      <6-byte> validAfter - first timestamp this operation is valid      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.      Note that the validation code cannot use block.timestamp (or block.number) directly.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"notice\":\"Validate user's signature and nonce the entryPoint will make the call to the recipient only if this validation call returns successfully. signature failure should be reported by returning SIG_VALIDATION_FAILED (1). This allows making a \\\"simulation call\\\" without a valid signature Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@account-abstraction/contracts/interfaces/IAccount.sol\":\"IAccount\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@account-abstraction/contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\\n\",\"keccak256\":\"0x591c87519f7155d1909210276b77925ab2722a99b7b5d5649aecc36ebbdb045a\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\ninterface IAccount {\\n\\n    /**\\n     * Validate user's signature and nonce\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\\n     * This allows making a \\\"simulation call\\\" without a valid signature\\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\\n     *\\n     * @dev Must validate caller is the entryPoint.\\n     *      Must validate the signature and nonce\\n     * @param userOp the operation that is about to be executed.\\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\n    external returns (uint256 validationData);\\n}\\n\",\"keccak256\":\"0x556a0e5980de18e90b115553ed502408155ba35f58642823010d9288047bc418\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n/**\\n * User Operation struct\\n * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x61374003361059087fdcf17967a7bba052badeaf5c7f0ae689166f8aafd3a45c\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":{"notice":"Validate user's signature and nonce the entryPoint will make the call to the recipient only if this validation call returns successfully. signature failure should be reported by returning SIG_VALIDATION_FAILED (1). This allows making a \"simulation call\" without a valid signature Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure."}},"version":1}}},"@account-abstraction/contracts/interfaces/UserOperation.sol":{"UserOperationLib":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ede5b732b7f205d72085ee3d1b5d7475c558b65f0760ac0cf61cddbffdaa9c7d64736f6c63430008170033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xED 0xE5 0xB7 ORIGIN 0xB7 CALLCODE SDIV 0xD7 KECCAK256 DUP6 0xEE RETURNDATASIZE SHL 0x5D PUSH21 0x75C558B65F0760AC0CF61CDDBFFDAA9C7D64736F6C PUSH4 0x43000817 STOP CALLER ","sourceMap":"1630:2115:2:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1630:2115:2;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ede5b732b7f205d72085ee3d1b5d7475c558b65f0760ac0cf61cddbffdaa9c7d64736f6c63430008170033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xED 0xE5 0xB7 ORIGIN 0xB7 CALLCODE SDIV 0xD7 KECCAK256 DUP6 0xEE RETURNDATASIZE SHL 0x5D PUSH21 0x75C558B65F0760AC0CF61CDDBFFDAA9C7D64736F6C PUSH4 0x43000817 STOP CALLER ","sourceMap":"1630:2115:2:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"gasPrice(struct UserOperation calldata)":"infinite","getSender(struct UserOperation calldata)":"infinite","hash(struct UserOperation calldata)":"infinite","min(uint256,uint256)":"infinite","pack(struct UserOperation calldata)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Utility functions helpful when working with UserOperation structs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@account-abstraction/contracts/interfaces/UserOperation.sol\":\"UserOperationLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@account-abstraction/contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\\n\",\"keccak256\":\"0x591c87519f7155d1909210276b77925ab2722a99b7b5d5649aecc36ebbdb045a\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n/**\\n * User Operation struct\\n * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x61374003361059087fdcf17967a7bba052badeaf5c7f0ae689166f8aafd3a45c\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Utility functions helpful when working with UserOperation structs.","version":1}}},"@across-protocol/contracts-v2/contracts/interfaces/V3SpokePoolInterface.sol":{"V3SpokePoolInterface":{"abi":[{"inputs":[],"name":"ClaimedMerkleLeaf","type":"error"},{"inputs":[],"name":"DisabledRoute","type":"error"},{"inputs":[],"name":"ExpiredFillDeadline","type":"error"},{"inputs":[],"name":"InvalidChainId","type":"error"},{"inputs":[],"name":"InvalidExclusiveRelayer","type":"error"},{"inputs":[],"name":"InvalidExclusivityDeadline","type":"error"},{"inputs":[],"name":"InvalidFillDeadline","type":"error"},{"inputs":[],"name":"InvalidMerkleLeaf","type":"error"},{"inputs":[],"name":"InvalidMerkleProof","type":"error"},{"inputs":[],"name":"InvalidPayoutAdjustmentPct","type":"error"},{"inputs":[],"name":"InvalidQuoteTimestamp","type":"error"},{"inputs":[],"name":"InvalidSlowFillRequest","type":"error"},{"inputs":[],"name":"MsgValueDoesNotMatchInputAmount","type":"error"},{"inputs":[],"name":"NoSlowFillsInExclusivityWindow","type":"error"},{"inputs":[],"name":"NotExclusiveRelayer","type":"error"},{"inputs":[],"name":"RelayFilled","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"inputToken","type":"address"},{"indexed":false,"internalType":"address","name":"outputToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"inputAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"outputAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"repaymentChainId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"originChainId","type":"uint256"},{"indexed":true,"internalType":"uint32","name":"depositId","type":"uint32"},{"indexed":false,"internalType":"uint32","name":"fillDeadline","type":"uint32"},{"indexed":false,"internalType":"uint32","name":"exclusivityDeadline","type":"uint32"},{"indexed":false,"internalType":"address","name":"exclusiveRelayer","type":"address"},{"indexed":true,"internalType":"address","name":"relayer","type":"address"},{"indexed":false,"internalType":"address","name":"depositor","type":"address"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"bytes","name":"message","type":"bytes"},{"components":[{"internalType":"address","name":"updatedRecipient","type":"address"},{"internalType":"bytes","name":"updatedMessage","type":"bytes"},{"internalType":"uint256","name":"updatedOutputAmount","type":"uint256"},{"internalType":"enum V3SpokePoolInterface.FillType","name":"fillType","type":"uint8"}],"indexed":false,"internalType":"struct V3SpokePoolInterface.V3RelayExecutionEventInfo","name":"relayExecutionInfo","type":"tuple"}],"name":"FilledV3Relay","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"updatedOutputAmount","type":"uint256"},{"indexed":true,"internalType":"uint32","name":"depositId","type":"uint32"},{"indexed":true,"internalType":"address","name":"depositor","type":"address"},{"indexed":false,"internalType":"address","name":"updatedRecipient","type":"address"},{"indexed":false,"internalType":"bytes","name":"updatedMessage","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"depositorSignature","type":"bytes"}],"name":"RequestedSpeedUpV3Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"inputToken","type":"address"},{"indexed":false,"internalType":"address","name":"outputToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"inputAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"outputAmount","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"originChainId","type":"uint256"},{"indexed":true,"internalType":"uint32","name":"depositId","type":"uint32"},{"indexed":false,"internalType":"uint32","name":"fillDeadline","type":"uint32"},{"indexed":false,"internalType":"uint32","name":"exclusivityDeadline","type":"uint32"},{"indexed":false,"internalType":"address","name":"exclusiveRelayer","type":"address"},{"indexed":false,"internalType":"address","name":"depositor","type":"address"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"bytes","name":"message","type":"bytes"}],"name":"RequestedV3SlowFill","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"inputToken","type":"address"},{"indexed":false,"internalType":"address","name":"outputToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"inputAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"outputAmount","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"destinationChainId","type":"uint256"},{"indexed":true,"internalType":"uint32","name":"depositId","type":"uint32"},{"indexed":false,"internalType":"uint32","name":"quoteTimestamp","type":"uint32"},{"indexed":false,"internalType":"uint32","name":"fillDeadline","type":"uint32"},{"indexed":false,"internalType":"uint32","name":"exclusivityDeadline","type":"uint32"},{"indexed":true,"internalType":"address","name":"depositor","type":"address"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"address","name":"exclusiveRelayer","type":"address"},{"indexed":false,"internalType":"bytes","name":"message","type":"bytes"}],"name":"V3FundsDeposited","type":"event"},{"inputs":[{"internalType":"address","name":"depositor","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"inputToken","type":"address"},{"internalType":"address","name":"outputToken","type":"address"},{"internalType":"uint256","name":"inputAmount","type":"uint256"},{"internalType":"uint256","name":"outputAmount","type":"uint256"},{"internalType":"uint256","name":"destinationChainId","type":"uint256"},{"internalType":"address","name":"exclusiveRelayer","type":"address"},{"internalType":"uint32","name":"quoteTimestamp","type":"uint32"},{"internalType":"uint32","name":"fillDeadline","type":"uint32"},{"internalType":"uint32","name":"exclusivityDeadline","type":"uint32"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"depositV3","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"components":[{"internalType":"address","name":"depositor","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"exclusiveRelayer","type":"address"},{"internalType":"address","name":"inputToken","type":"address"},{"internalType":"address","name":"outputToken","type":"address"},{"internalType":"uint256","name":"inputAmount","type":"uint256"},{"internalType":"uint256","name":"outputAmount","type":"uint256"},{"internalType":"uint256","name":"originChainId","type":"uint256"},{"internalType":"uint32","name":"depositId","type":"uint32"},{"internalType":"uint32","name":"fillDeadline","type":"uint32"},{"internalType":"uint32","name":"exclusivityDeadline","type":"uint32"},{"internalType":"bytes","name":"message","type":"bytes"}],"internalType":"struct V3SpokePoolInterface.V3RelayData","name":"relayData","type":"tuple"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"uint256","name":"updatedOutputAmount","type":"uint256"}],"internalType":"struct V3SpokePoolInterface.V3SlowFill","name":"slowFillLeaf","type":"tuple"},{"internalType":"uint32","name":"rootBundleId","type":"uint32"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"executeV3SlowRelayLeaf","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"depositor","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"exclusiveRelayer","type":"address"},{"internalType":"address","name":"inputToken","type":"address"},{"internalType":"address","name":"outputToken","type":"address"},{"internalType":"uint256","name":"inputAmount","type":"uint256"},{"internalType":"uint256","name":"outputAmount","type":"uint256"},{"internalType":"uint256","name":"originChainId","type":"uint256"},{"internalType":"uint32","name":"depositId","type":"uint32"},{"internalType":"uint32","name":"fillDeadline","type":"uint32"},{"internalType":"uint32","name":"exclusivityDeadline","type":"uint32"},{"internalType":"bytes","name":"message","type":"bytes"}],"internalType":"struct V3SpokePoolInterface.V3RelayData","name":"relayData","type":"tuple"},{"internalType":"uint256","name":"repaymentChainId","type":"uint256"}],"name":"fillV3Relay","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"depositor","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"exclusiveRelayer","type":"address"},{"internalType":"address","name":"inputToken","type":"address"},{"internalType":"address","name":"outputToken","type":"address"},{"internalType":"uint256","name":"inputAmount","type":"uint256"},{"internalType":"uint256","name":"outputAmount","type":"uint256"},{"internalType":"uint256","name":"originChainId","type":"uint256"},{"internalType":"uint32","name":"depositId","type":"uint32"},{"internalType":"uint32","name":"fillDeadline","type":"uint32"},{"internalType":"uint32","name":"exclusivityDeadline","type":"uint32"},{"internalType":"bytes","name":"message","type":"bytes"}],"internalType":"struct V3SpokePoolInterface.V3RelayData","name":"relayData","type":"tuple"},{"internalType":"uint256","name":"repaymentChainId","type":"uint256"},{"internalType":"uint256","name":"updatedOutputAmount","type":"uint256"},{"internalType":"address","name":"updatedRecipient","type":"address"},{"internalType":"bytes","name":"updatedMessage","type":"bytes"},{"internalType":"bytes","name":"depositorSignature","type":"bytes"}],"name":"fillV3RelayWithUpdatedDeposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"depositor","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"exclusiveRelayer","type":"address"},{"internalType":"address","name":"inputToken","type":"address"},{"internalType":"address","name":"outputToken","type":"address"},{"internalType":"uint256","name":"inputAmount","type":"uint256"},{"internalType":"uint256","name":"outputAmount","type":"uint256"},{"internalType":"uint256","name":"originChainId","type":"uint256"},{"internalType":"uint32","name":"depositId","type":"uint32"},{"internalType":"uint32","name":"fillDeadline","type":"uint32"},{"internalType":"uint32","name":"exclusivityDeadline","type":"uint32"},{"internalType":"bytes","name":"message","type":"bytes"}],"internalType":"struct V3SpokePoolInterface.V3RelayData","name":"relayData","type":"tuple"}],"name":"requestV3SlowFill","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"depositor","type":"address"},{"internalType":"uint32","name":"depositId","type":"uint32"},{"internalType":"uint256","name":"updatedOutputAmount","type":"uint256"},{"internalType":"address","name":"updatedRecipient","type":"address"},{"internalType":"bytes","name":"updatedMessage","type":"bytes"},{"internalType":"bytes","name":"depositorSignature","type":"bytes"}],"name":"speedUpV3Deposit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"depositV3(address,address,address,address,uint256,uint256,uint256,address,uint32,uint32,uint32,bytes)":"7b939232","executeV3SlowRelayLeaf(((address,address,address,address,address,uint256,uint256,uint256,uint32,uint32,uint32,bytes),uint256,uint256),uint32,bytes32[])":"bbca7db0","fillV3Relay((address,address,address,address,address,uint256,uint256,uint256,uint32,uint32,uint32,bytes),uint256)":"2e378115","fillV3RelayWithUpdatedDeposit((address,address,address,address,address,uint256,uint256,uint256,uint32,uint32,uint32,bytes),uint256,uint256,address,bytes,bytes)":"ccfa5971","requestV3SlowFill((address,address,address,address,address,uint256,uint256,uint256,uint32,uint32,uint32,bytes))":"9963e5a8","speedUpV3Deposit(address,uint32,uint256,address,bytes,bytes)":"4e0fb8f5"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ClaimedMerkleLeaf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisabledRoute\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpiredFillDeadline\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidChainId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExclusiveRelayer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExclusivityDeadline\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFillDeadline\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMerkleLeaf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMerkleProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPayoutAdjustmentPct\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQuoteTimestamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSlowFillRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MsgValueDoesNotMatchInputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSlowFillsInExclusivityWindow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotExclusiveRelayer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RelayFilled\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repaymentChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"depositId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"fillDeadline\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"exclusivityDeadline\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exclusiveRelayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"updatedRecipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"updatedMessage\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"updatedOutputAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum V3SpokePoolInterface.FillType\",\"name\":\"fillType\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct V3SpokePoolInterface.V3RelayExecutionEventInfo\",\"name\":\"relayExecutionInfo\",\"type\":\"tuple\"}],\"name\":\"FilledV3Relay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedOutputAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"depositId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updatedRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"updatedMessage\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"depositorSignature\",\"type\":\"bytes\"}],\"name\":\"RequestedSpeedUpV3Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"depositId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"fillDeadline\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"exclusivityDeadline\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exclusiveRelayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"RequestedV3SlowFill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"depositId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"quoteTimestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"fillDeadline\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"exclusivityDeadline\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exclusiveRelayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"V3FundsDeposited\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exclusiveRelayer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"quoteTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fillDeadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"exclusivityDeadline\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"depositV3\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exclusiveRelayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"depositId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fillDeadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"exclusivityDeadline\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"internalType\":\"struct V3SpokePoolInterface.V3RelayData\",\"name\":\"relayData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedOutputAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct V3SpokePoolInterface.V3SlowFill\",\"name\":\"slowFillLeaf\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"rootBundleId\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"executeV3SlowRelayLeaf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exclusiveRelayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"depositId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fillDeadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"exclusivityDeadline\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"internalType\":\"struct V3SpokePoolInterface.V3RelayData\",\"name\":\"relayData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"repaymentChainId\",\"type\":\"uint256\"}],\"name\":\"fillV3Relay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exclusiveRelayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"depositId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fillDeadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"exclusivityDeadline\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"internalType\":\"struct V3SpokePoolInterface.V3RelayData\",\"name\":\"relayData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"repaymentChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedOutputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"updatedRecipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"updatedMessage\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"depositorSignature\",\"type\":\"bytes\"}],\"name\":\"fillV3RelayWithUpdatedDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exclusiveRelayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"depositId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fillDeadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"exclusivityDeadline\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"internalType\":\"struct V3SpokePoolInterface.V3RelayData\",\"name\":\"relayData\",\"type\":\"tuple\"}],\"name\":\"requestV3SlowFill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"depositId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"updatedOutputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"updatedRecipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"updatedMessage\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"depositorSignature\",\"type\":\"bytes\"}],\"name\":\"speedUpV3Deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@across-protocol/contracts-v2/contracts/interfaces/V3SpokePoolInterface.sol\":\"V3SpokePoolInterface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@across-protocol/contracts-v2/contracts/interfaces/V3SpokePoolInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n// Contains structs and functions used by SpokePool contracts to facilitate universal settlement.\\ninterface V3SpokePoolInterface {\\n    /**************************************\\n     *              ENUMS                 *\\n     **************************************/\\n\\n    // Fill status tracks on-chain state of deposit, uniquely identified by relayHash.\\n    enum FillStatus {\\n        Unfilled,\\n        RequestedSlowFill,\\n        Filled\\n    }\\n    // Fill type is emitted in the FilledRelay event to assist Dataworker with determining which types of\\n    // fills to refund (e.g. only fast fills) and whether a fast fill created a sow fill excess.\\n    enum FillType {\\n        FastFill,\\n        // Fast fills are normal fills that do not replace a slow fill request.\\n        ReplacedSlowFill,\\n        // Replaced slow fills are fast fills that replace a slow fill request. This type is used by the Dataworker\\n        // to know when to send excess funds from the SpokePool to the HubPool because they can no longer be used\\n        // for a slow fill execution.\\n        SlowFill\\n        // Slow fills are requested via requestSlowFill and executed by executeSlowRelayLeaf after a bundle containing\\n        // the slow fill is validated.\\n    }\\n\\n    /**************************************\\n     *              STRUCTS               *\\n     **************************************/\\n\\n    // This struct represents the data to fully specify a **unique** relay submitted on this chain.\\n    // This data is hashed with the chainId() and saved by the SpokePool to prevent collisions and protect against\\n    // replay attacks on other chains. If any portion of this data differs, the relay is considered to be\\n    // completely distinct.\\n    struct V3RelayData {\\n        // The address that made the deposit on the origin chain.\\n        address depositor;\\n        // The recipient address on the destination chain.\\n        address recipient;\\n        // This is the exclusive relayer who can fill the deposit before the exclusivity deadline.\\n        address exclusiveRelayer;\\n        // Token that is deposited on origin chain by depositor.\\n        address inputToken;\\n        // Token that is received on destination chain by recipient.\\n        address outputToken;\\n        // The amount of input token deposited by depositor.\\n        uint256 inputAmount;\\n        // The amount of output token to be received by recipient.\\n        uint256 outputAmount;\\n        // Origin chain id.\\n        uint256 originChainId;\\n        // The id uniquely identifying this deposit on the origin chain.\\n        uint32 depositId;\\n        // The timestamp on the destination chain after which this deposit can no longer be filled.\\n        uint32 fillDeadline;\\n        // The timestamp on the destination chain after which any relayer can fill the deposit.\\n        uint32 exclusivityDeadline;\\n        // Data that is forwarded to the recipient.\\n        bytes message;\\n    }\\n\\n    // Contains parameters passed in by someone who wants to execute a slow relay leaf.\\n    struct V3SlowFill {\\n        V3RelayData relayData;\\n        uint256 chainId;\\n        uint256 updatedOutputAmount;\\n    }\\n\\n    // Contains information about a relay to be sent along with additional information that is not unique to the\\n    // relay itself but is required to know how to process the relay. For example, \\\"updatedX\\\" fields can be used\\n    // by the relayer to modify fields of the relay with the depositor's permission, and \\\"repaymentChainId\\\" is specified\\n    // by the relayer to determine where to take a relayer refund, but doesn't affect the uniqueness of the relay.\\n    struct V3RelayExecutionParams {\\n        V3RelayData relay;\\n        bytes32 relayHash;\\n        uint256 updatedOutputAmount;\\n        address updatedRecipient;\\n        bytes updatedMessage;\\n        uint256 repaymentChainId;\\n    }\\n\\n    // Packs together parameters emitted in FilledV3Relay because there are too many emitted otherwise.\\n    // Similar to V3RelayExecutionParams, these parameters are not used to uniquely identify the deposit being\\n    // filled so they don't have to be unpacked by all clients.\\n    struct V3RelayExecutionEventInfo {\\n        address updatedRecipient;\\n        bytes updatedMessage;\\n        uint256 updatedOutputAmount;\\n        FillType fillType;\\n    }\\n\\n    /**************************************\\n     *              EVENTS                *\\n     **************************************/\\n\\n    event V3FundsDeposited(\\n        address inputToken,\\n        address outputToken,\\n        uint256 inputAmount,\\n        uint256 outputAmount,\\n        uint256 indexed destinationChainId,\\n        uint32 indexed depositId,\\n        uint32 quoteTimestamp,\\n        uint32 fillDeadline,\\n        uint32 exclusivityDeadline,\\n        address indexed depositor,\\n        address recipient,\\n        address exclusiveRelayer,\\n        bytes message\\n    );\\n\\n    event RequestedSpeedUpV3Deposit(\\n        uint256 updatedOutputAmount,\\n        uint32 indexed depositId,\\n        address indexed depositor,\\n        address updatedRecipient,\\n        bytes updatedMessage,\\n        bytes depositorSignature\\n    );\\n\\n    event FilledV3Relay(\\n        address inputToken,\\n        address outputToken,\\n        uint256 inputAmount,\\n        uint256 outputAmount,\\n        uint256 repaymentChainId,\\n        uint256 indexed originChainId,\\n        uint32 indexed depositId,\\n        uint32 fillDeadline,\\n        uint32 exclusivityDeadline,\\n        address exclusiveRelayer,\\n        address indexed relayer,\\n        address depositor,\\n        address recipient,\\n        bytes message,\\n        V3RelayExecutionEventInfo relayExecutionInfo\\n    );\\n\\n    event RequestedV3SlowFill(\\n        address inputToken,\\n        address outputToken,\\n        uint256 inputAmount,\\n        uint256 outputAmount,\\n        uint256 indexed originChainId,\\n        uint32 indexed depositId,\\n        uint32 fillDeadline,\\n        uint32 exclusivityDeadline,\\n        address exclusiveRelayer,\\n        address depositor,\\n        address recipient,\\n        bytes message\\n    );\\n\\n    /**************************************\\n     *              FUNCTIONS             *\\n     **************************************/\\n\\n    function depositV3(\\n        address depositor,\\n        address recipient,\\n        address inputToken,\\n        address outputToken,\\n        uint256 inputAmount,\\n        uint256 outputAmount,\\n        uint256 destinationChainId,\\n        address exclusiveRelayer,\\n        uint32 quoteTimestamp,\\n        uint32 fillDeadline,\\n        uint32 exclusivityDeadline,\\n        bytes calldata message\\n    ) external payable;\\n\\n    function speedUpV3Deposit(\\n        address depositor,\\n        uint32 depositId,\\n        uint256 updatedOutputAmount,\\n        address updatedRecipient,\\n        bytes calldata updatedMessage,\\n        bytes calldata depositorSignature\\n    ) external;\\n\\n    function fillV3Relay(V3RelayData calldata relayData, uint256 repaymentChainId) external;\\n\\n    function fillV3RelayWithUpdatedDeposit(\\n        V3RelayData calldata relayData,\\n        uint256 repaymentChainId,\\n        uint256 updatedOutputAmount,\\n        address updatedRecipient,\\n        bytes calldata updatedMessage,\\n        bytes calldata depositorSignature\\n    ) external;\\n\\n    function requestV3SlowFill(V3RelayData calldata relayData) external;\\n\\n    function executeV3SlowRelayLeaf(\\n        V3SlowFill calldata slowFillLeaf,\\n        uint32 rootBundleId,\\n        bytes32[] calldata proof\\n    ) external;\\n\\n    /**************************************\\n     *              ERRORS                *\\n     **************************************/\\n\\n    error DisabledRoute();\\n    error InvalidQuoteTimestamp();\\n    error InvalidFillDeadline();\\n    error InvalidExclusiveRelayer();\\n    error InvalidExclusivityDeadline();\\n    error MsgValueDoesNotMatchInputAmount();\\n    error NotExclusiveRelayer();\\n    error NoSlowFillsInExclusivityWindow();\\n    error RelayFilled();\\n    error InvalidSlowFillRequest();\\n    error ExpiredFillDeadline();\\n    error InvalidMerkleProof();\\n    error InvalidChainId();\\n    error InvalidMerkleLeaf();\\n    error ClaimedMerkleLeaf();\\n    error InvalidPayoutAdjustmentPct();\\n}\\n\",\"keccak256\":\"0xdd33112f0dc8f8462307cda7d7753cb9be49cd209b6520abd69273ac015f7ab6\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol":{"CCIPReceiver":{"abi":[{"inputs":[{"internalType":"address","name":"router","type":"address"}],"name":"InvalidRouter","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"messageId","type":"bytes32"},{"internalType":"uint64","name":"sourceChainSelector","type":"uint64"},{"internalType":"bytes","name":"sender","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct Client.EVMTokenAmount[]","name":"destTokenAmounts","type":"tuple[]"}],"internalType":"struct Client.Any2EVMMessage","name":"message","type":"tuple"}],"name":"ccipReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRouter","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))":{"details":"Note ensure you check the msg.sender is the OffRampRouter","params":{"message":"CCIP Message"}},"getRouter()":{"returns":{"_0":"i_router address"}},"supportsInterface(bytes4)":{"details":"Should indicate whether the contract implements IAny2EVMMessageReceiver e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId This allows CCIP to check if ccipReceive is available before calling it. If this returns false or reverts, only tokens are transferred to the receiver. If this returns true, tokens are transferred and ccipReceive is called atomically. Additionally, if the receiver address does not have code associated with it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.","params":{"interfaceId":"The interfaceId to check"},"returns":{"_0":"true if the interfaceId is supported"}}},"title":"CCIPReceiver - Base contract for CCIP applications that can receive messages.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))":"85572ffb","getRouter()":"b0f479a1","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"InvalidRouter\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Client.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"ccipReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"details\":\"Note ensure you check the msg.sender is the OffRampRouter\",\"params\":{\"message\":\"CCIP Message\"}},\"getRouter()\":{\"returns\":{\"_0\":\"i_router address\"}},\"supportsInterface(bytes4)\":{\"details\":\"Should indicate whether the contract implements IAny2EVMMessageReceiver e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId This allows CCIP to check if ccipReceive is available before calling it. If this returns false or reverts, only tokens are transferred to the receiver. If this returns true, tokens are transferred and ccipReceive is called atomically. Additionally, if the receiver address does not have code associated with it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\",\"params\":{\"interfaceId\":\"The interfaceId to check\"},\"returns\":{\"_0\":\"true if the interfaceId is supported\"}}},\"title\":\"CCIPReceiver - Base contract for CCIP applications that can receive messages.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"notice\":\"Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution.\"},\"getRouter()\":{\"notice\":\"Return the current router\"},\"supportsInterface(bytes4)\":{\"notice\":\"IERC165 supports an interfaceId\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\":\"CCIPReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAny2EVMMessageReceiver} from \\\"../interfaces/IAny2EVMMessageReceiver.sol\\\";\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\nimport {IERC165} from \\\"../../vendor/openzeppelin-solidity/v4.8.0/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\\n  address internal immutable i_router;\\n\\n  constructor(address router) {\\n    if (router == address(0)) revert InvalidRouter(address(0));\\n    i_router = router;\\n  }\\n\\n  /// @notice IERC165 supports an interfaceId\\n  /// @param interfaceId The interfaceId to check\\n  /// @return true if the interfaceId is supported\\n  /// @dev Should indicate whether the contract implements IAny2EVMMessageReceiver\\n  /// e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId\\n  /// This allows CCIP to check if ccipReceive is available before calling it.\\n  /// If this returns false or reverts, only tokens are transferred to the receiver.\\n  /// If this returns true, tokens are transferred and ccipReceive is called atomically.\\n  /// Additionally, if the receiver address does not have code associated with\\n  /// it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\\n  function supportsInterface(bytes4 interfaceId) public pure virtual override returns (bool) {\\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  /// @inheritdoc IAny2EVMMessageReceiver\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\\n    _ccipReceive(message);\\n  }\\n\\n  /// @notice Override this function in your implementation.\\n  /// @param message Any2EVMMessage\\n  function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  // Plumbing\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Return the current router\\n  /// @return i_router address\\n  function getRouter() public view returns (address) {\\n    return address(i_router);\\n  }\\n\\n  error InvalidRouter(address router);\\n\\n  /// @dev only calls from the set router are accepted.\\n  modifier onlyRouter() {\\n    if (msg.sender != address(i_router)) revert InvalidRouter(msg.sender);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xd59dbf083bfad8fe95248cac59822ade0bc7d70e50ab05e366cb35a2b2ea99f6\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from\\n/// the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message.\\n  /// If this reverts, any token transfers also revert. The message\\n  /// will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\\n}\\n\",\"keccak256\":\"0xd2a05a4f58a453cbf8cfa6aa78f58cb8e42091b3a025f711a0aa51f584e16b48\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x8af3ac1085c87342373772fb1a0107c7b90258e6bfed318ab2a601a14477e679\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\",\"keccak256\":\"0xa36a31b4bb17fad88d023474893b3b895fa421650543b1ce5aefc78efbd43244\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))":{"notice":"Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution."},"getRouter()":{"notice":"Return the current router"},"supportsInterface(bytes4)":{"notice":"IERC165 supports an interfaceId"}},"version":1}}},"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol":{"IAny2EVMMessageReceiver":{"abi":[{"inputs":[{"components":[{"internalType":"bytes32","name":"messageId","type":"bytes32"},{"internalType":"uint64","name":"sourceChainSelector","type":"uint64"},{"internalType":"bytes","name":"sender","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct Client.EVMTokenAmount[]","name":"destTokenAmounts","type":"tuple[]"}],"internalType":"struct Client.Any2EVMMessage","name":"message","type":"tuple"}],"name":"ccipReceive","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))":{"details":"Note ensure you check the msg.sender is the OffRampRouter","params":{"message":"CCIP Message"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))":"85572ffb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Client.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"ccipReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"details\":\"Note ensure you check the msg.sender is the OffRampRouter\",\"params\":{\"message\":\"CCIP Message\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"notice\":\"Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution.\"}},\"notice\":\"Application contracts that intend to receive messages from the router should implement this interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\":\"IAny2EVMMessageReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from\\n/// the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message.\\n  /// If this reverts, any token transfers also revert. The message\\n  /// will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\\n}\\n\",\"keccak256\":\"0xd2a05a4f58a453cbf8cfa6aa78f58cb8e42091b3a025f711a0aa51f584e16b48\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x8af3ac1085c87342373772fb1a0107c7b90258e6bfed318ab2a601a14477e679\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))":{"notice":"Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution."}},"notice":"Application contracts that intend to receive messages from the router should implement this interface.","version":1}}},"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol":{"Client":{"abi":[{"inputs":[],"name":"EVM_EXTRA_ARGS_V1_TAG","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6098610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c80633ab8c0d0146038575b600080fd5b60456397a657c960e01b81565b6040516001600160e01b0319909116815260200160405180910390f3fea2646970667358221220fa03968361da1166fbada50708d0771644f1a6167fbf3456ace1c49696ffb9dc64736f6c63430008170033","opcodes":"PUSH1 0x98 PUSH2 0x38 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x33 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3AB8C0D0 EQ PUSH1 0x38 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x45 PUSH4 0x97A657C9 PUSH1 0xE0 SHL DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL SUB SWAP7 DUP4 PUSH2 0xDA11 PUSH7 0xFBADA50708D077 AND PREVRANDAO CALL 0xA6 AND PUSH32 0xBF3456ACE1C49696FFB9DC64736F6C6343000817003300000000000000000000 ","sourceMap":"82:1375:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;82:1375:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@EVM_EXTRA_ARGS_V1_TAG_907":{"entryPoint":null,"id":907,"parameterSlots":0,"returnSlots":0},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_library_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:226:40","nodeType":"YulBlock","src":"0:226:40","statements":[{"nativeSrc":"6:3:40","nodeType":"YulBlock","src":"6:3:40","statements":[]},{"body":{"nativeSrc":"121:103:40","nodeType":"YulBlock","src":"121:103:40","statements":[{"nativeSrc":"131:26:40","nodeType":"YulAssignment","src":"131:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"143:9:40","nodeType":"YulIdentifier","src":"143:9:40"},{"kind":"number","nativeSrc":"154:2:40","nodeType":"YulLiteral","src":"154:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"139:3:40","nodeType":"YulIdentifier","src":"139:3:40"},"nativeSrc":"139:18:40","nodeType":"YulFunctionCall","src":"139:18:40"},"variableNames":[{"name":"tail","nativeSrc":"131:4:40","nodeType":"YulIdentifier","src":"131:4:40"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"173:9:40","nodeType":"YulIdentifier","src":"173:9:40"},{"arguments":[{"name":"value0","nativeSrc":"188:6:40","nodeType":"YulIdentifier","src":"188:6:40"},{"arguments":[{"kind":"number","nativeSrc":"200:3:40","nodeType":"YulLiteral","src":"200:3:40","type":"","value":"224"},{"kind":"number","nativeSrc":"205:10:40","nodeType":"YulLiteral","src":"205:10:40","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nativeSrc":"196:3:40","nodeType":"YulIdentifier","src":"196:3:40"},"nativeSrc":"196:20:40","nodeType":"YulFunctionCall","src":"196:20:40"}],"functionName":{"name":"and","nativeSrc":"184:3:40","nodeType":"YulIdentifier","src":"184:3:40"},"nativeSrc":"184:33:40","nodeType":"YulFunctionCall","src":"184:33:40"}],"functionName":{"name":"mstore","nativeSrc":"166:6:40","nodeType":"YulIdentifier","src":"166:6:40"},"nativeSrc":"166:52:40","nodeType":"YulFunctionCall","src":"166:52:40"},"nativeSrc":"166:52:40","nodeType":"YulExpressionStatement","src":"166:52:40"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_library_reversed","nativeSrc":"14:210:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"90:9:40","nodeType":"YulTypedName","src":"90:9:40","type":""},{"name":"value0","nativeSrc":"101:6:40","nodeType":"YulTypedName","src":"101:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"112:4:40","nodeType":"YulTypedName","src":"112:4:40","type":""}],"src":"14:210:40"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_library_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, shl(224, 0xffffffff)))\n    }\n}","id":40,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040526004361060335760003560e01c80633ab8c0d0146038575b600080fd5b60456397a657c960e01b81565b6040516001600160e01b0319909116815260200160405180910390f3fea2646970667358221220fa03968361da1166fbada50708d0771644f1a6167fbf3456ace1c49696ffb9dc64736f6c63430008170033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x33 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3AB8C0D0 EQ PUSH1 0x38 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x45 PUSH4 0x97A657C9 PUSH1 0xE0 SHL DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL SUB SWAP7 DUP4 PUSH2 0xDA11 PUSH7 0xFBADA50708D077 AND PREVRANDAO CALL 0xA6 AND PUSH32 0xBF3456ACE1C49696FFB9DC64736F6C6343000817003300000000000000000000 ","sourceMap":"82:1375:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;1171:57;;-1:-1:-1;;;1171:57:6;;;;;-1:-1:-1;;;;;;184:33:40;;;166:52;;154:2;139:18;1171:57:6;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"30400","executionCost":"115","totalCost":"30515"},"external":{"EVM_EXTRA_ARGS_V1_TAG()":"175"},"internal":{"_argsToBytes(struct Client.EVMExtraArgsV1 memory)":"infinite"}},"methodIdentifiers":{"EVM_EXTRA_ARGS_V1_TAG()":"3ab8c0d0"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EVM_EXTRA_ARGS_V1_TAG\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":\"Client\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x8af3ac1085c87342373772fb1a0107c7b90258e6bfed318ab2a601a14477e679\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\",\"keccak256\":\"0xa36a31b4bb17fad88d023474893b3b895fa421650543b1ce5aefc78efbd43244\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@safe-global/safe-contracts/contracts/Safe.sol":{"Safe":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"AddedOwner","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"approvedHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"ApproveHash","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"handler","type":"address"}],"name":"ChangedFallbackHandler","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"guard","type":"address"}],"name":"ChangedGuard","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"threshold","type":"uint256"}],"name":"ChangedThreshold","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"DisabledModule","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"EnabledModule","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"txHash","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"payment","type":"uint256"}],"name":"ExecutionFailure","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"ExecutionFromModuleFailure","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"ExecutionFromModuleSuccess","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"txHash","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"payment","type":"uint256"}],"name":"ExecutionSuccess","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"RemovedOwner","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"initiator","type":"address"},{"indexed":false,"internalType":"address[]","name":"owners","type":"address[]"},{"indexed":false,"internalType":"uint256","name":"threshold","type":"uint256"},{"indexed":false,"internalType":"address","name":"initializer","type":"address"},{"indexed":false,"internalType":"address","name":"fallbackHandler","type":"address"}],"name":"SafeSetup","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"msgHash","type":"bytes32"}],"name":"SignMsg","type":"event"},{"stateMutability":"nonpayable","type":"fallback"},{"inputs":[],"name":"VERSION","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"addOwnerWithThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hashToApprove","type":"bytes32"}],"name":"approveHash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"approvedHashes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"changeThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataHash","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signatures","type":"bytes"},{"internalType":"uint256","name":"requiredSignatures","type":"uint256"}],"name":"checkNSignatures","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataHash","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signatures","type":"bytes"}],"name":"checkSignatures","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"prevModule","type":"address"},{"internalType":"address","name":"module","type":"address"}],"name":"disableModule","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"domainSeparator","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"module","type":"address"}],"name":"enableModule","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"uint256","name":"safeTxGas","type":"uint256"},{"internalType":"uint256","name":"baseGas","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"gasToken","type":"address"},{"internalType":"address","name":"refundReceiver","type":"address"},{"internalType":"uint256","name":"_nonce","type":"uint256"}],"name":"encodeTransactionData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"uint256","name":"safeTxGas","type":"uint256"},{"internalType":"uint256","name":"baseGas","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"gasToken","type":"address"},{"internalType":"address payable","name":"refundReceiver","type":"address"},{"internalType":"bytes","name":"signatures","type":"bytes"}],"name":"execTransaction","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"}],"name":"execTransactionFromModule","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"}],"name":"execTransactionFromModuleReturnData","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getChainId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"start","type":"address"},{"internalType":"uint256","name":"pageSize","type":"uint256"}],"name":"getModulesPaginated","outputs":[{"internalType":"address[]","name":"array","type":"address[]"},{"internalType":"address","name":"next","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getOwners","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"offset","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"name":"getStorageAt","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getThreshold","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"uint256","name":"safeTxGas","type":"uint256"},{"internalType":"uint256","name":"baseGas","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"gasToken","type":"address"},{"internalType":"address","name":"refundReceiver","type":"address"},{"internalType":"uint256","name":"_nonce","type":"uint256"}],"name":"getTransactionHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"module","type":"address"}],"name":"isModuleEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"prevOwner","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"removeOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"handler","type":"address"}],"name":"setFallbackHandler","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"guard","type":"address"}],"name":"setGuard","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_owners","type":"address[]"},{"internalType":"uint256","name":"_threshold","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"address","name":"fallbackHandler","type":"address"},{"internalType":"address","name":"paymentToken","type":"address"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"address payable","name":"paymentReceiver","type":"address"}],"name":"setup","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"signedMessages","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"targetContract","type":"address"},{"internalType":"bytes","name":"calldataPayload","type":"bytes"}],"name":"simulateAndRevert","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"prevOwner","type":"address"},{"internalType":"address","name":"oldOwner","type":"address"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"swapOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"author":"Stefan George - @Georgi87Richard Meissner - @rmeissner","details":"Most important concepts:      - Threshold: Number of required confirmations for a Safe transaction.      - Owners: List of addresses that control the Safe. They are the only ones that can add/remove owners, change the threshold and        approve transactions. Managed in `OwnerManager`.      - Transaction Hash: Hash of a transaction is calculated using the EIP-712 typed structured data hashing scheme.      - Nonce: Each transaction should have a different nonce to prevent replay attacks.      - Signature: A valid signature of an owner of the Safe for a transaction hash.      - Guard: Guard is a contract that can execute pre- and post- transaction checks. Managed in `GuardManager`.      - Modules: Modules are contracts that can be used to extend the write functionality of a Safe. Managed in `ModuleManager`.      - Fallback: Fallback handler is a contract that can provide additional read-only functional for Safe. Managed in `FallbackManager`.      Note: This version of the implementation contract doesn't emit events for the sake of gas efficiency and therefore requires a tracing node for indexing/      For the events-based implementation see `SafeL2.sol`.","kind":"dev","methods":{"addOwnerWithThreshold(address,uint256)":{"details":"This can only be done via a Safe transaction.","params":{"_threshold":"New threshold.","owner":"New owner address."}},"approveHash(bytes32)":{"details":"This can be used with a pre-approved hash transaction signature.      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures","params":{"hashToApprove":"The hash to mark as approved for signatures that are verified by this contract."}},"changeThreshold(uint256)":{"details":"This can only be done via a Safe transaction.","params":{"_threshold":"New threshold."}},"checkNSignatures(bytes32,bytes,bytes,uint256)":{"details":"Since the EIP-1271 does an external call, be mindful of reentrancy attacks.","params":{"data":"That should be signed (this is passed to an external validator contract)","dataHash":"Hash of the data (could be either a message hash or transaction hash)","requiredSignatures":"Amount of required valid signatures.","signatures":"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash."}},"checkSignatures(bytes32,bytes,bytes)":{"params":{"data":"That should be signed (this is passed to an external validator contract)","dataHash":"Hash of the data (could be either a message hash or transaction hash)","signatures":"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash."}},"disableModule(address,address)":{"details":"This can only be done via a Safe transaction.","params":{"module":"Module to be removed.","prevModule":"Previous module in the modules linked list."}},"domainSeparator()":{"details":"Returns the domain separator for this contract, as defined in the EIP-712 standard.","returns":{"_0":"bytes32 The domain separator hash."}},"enableModule(address)":{"details":"This can only be done via a Safe transaction.","params":{"module":"Module to be whitelisted."}},"encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)":{"params":{"_nonce":"Transaction nonce.","baseGas":"Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)","data":"Data payload.","gasPrice":"Maximum gas price that should be used for this transaction.","gasToken":"Token address (or 0 if ETH) that is used for the payment.","operation":"Operation type.","refundReceiver":"Address of receiver of gas payment (or 0 if tx.origin).","safeTxGas":"Gas that should be used for the safe transaction.","to":"Destination address.","value":"Ether value."},"returns":{"_0":"Transaction hash bytes."}},"execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)":{"details":"The fees are always transferred, even if the user transaction fails.      This method doesn't perform any sanity check of the transaction, such as:      - if the contract at `to` address has code or not      - if the `gasToken` is a contract or not      It is the responsibility of the caller to perform such checks.","params":{"baseGas":"Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)","data":"Data payload of Safe transaction.","gasPrice":"Gas price that should be used for the payment calculation.","gasToken":"Token address (or 0 if ETH) that is used for the payment.","operation":"Operation type of Safe transaction.","refundReceiver":"Address of receiver of gas payment (or 0 if tx.origin).","safeTxGas":"Gas that should be used for the Safe transaction.","signatures":"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.","to":"Destination address of Safe transaction.","value":"Ether value of Safe transaction."},"returns":{"success":"Boolean indicating transaction's success."}},"execTransactionFromModule(address,uint256,bytes,uint8)":{"details":"Function is virtual to allow overriding for L2 singleton to emit an event for indexing.","params":{"data":"Data payload of module transaction.","operation":"Operation type of module transaction.","to":"Destination address of module transaction.","value":"Ether value of module transaction."},"returns":{"success":"Boolean flag indicating if the call succeeded."}},"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":{"params":{"data":"Data payload of module transaction.","operation":"Operation type of module transaction.","to":"Destination address of module transaction.","value":"Ether value of module transaction."},"returns":{"returnData":"Data returned by the call.","success":"Boolean flag indicating if the call succeeded."}},"getChainId()":{"returns":{"_0":"The ID of the current chain as a uint256."}},"getModulesPaginated(address,uint256)":{"params":{"pageSize":"Maximum number of modules that should be returned. Has to be > 0","start":"Start of the page. Has to be a module or start pointer (0x1 address)"},"returns":{"array":"Array of modules.","next":"Start of the next page."}},"getOwners()":{"returns":{"_0":"Array of Safe owners."}},"getStorageAt(uint256,uint256)":{"params":{"length":"- the number of words (32 bytes) of data to read","offset":"- the offset in the current contract's storage in words to start reading from"},"returns":{"_0":"the bytes that were read."}},"getThreshold()":{"returns":{"_0":"Threshold number."}},"getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)":{"params":{"_nonce":"Transaction nonce.","baseGas":"Gas costs for data used to trigger the safe transaction.","data":"Data payload.","gasPrice":"Maximum gas price that should be used for this transaction.","gasToken":"Token address (or 0 if ETH) that is used for the payment.","operation":"Operation type.","refundReceiver":"Address of receiver of gas payment (or 0 if tx.origin).","safeTxGas":"Fas that should be used for the safe transaction.","to":"Destination address.","value":"Ether value."},"returns":{"_0":"Transaction hash."}},"isModuleEnabled(address)":{"returns":{"_0":"True if the module is enabled"}},"isOwner(address)":{"returns":{"_0":"Boolean if owner is an owner of the Safe."}},"removeOwner(address,address,uint256)":{"details":"This can only be done via a Safe transaction.","params":{"_threshold":"New threshold.","owner":"Owner address to be removed.","prevOwner":"Owner that pointed to the owner to be removed in the linked list"}},"setFallbackHandler(address)":{"details":"Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.      Cannot be set to the Safe itself.","params":{"handler":"contract to handle fallback calls."}},"setGuard(address)":{"details":"Set a guard that checks transactions before execution      This can only be done via a Safe transaction.      ⚠️ IMPORTANT: Since a guard has full power to block Safe transaction execution,        a broken guard can cause a denial of service for the Safe. Make sure to carefully        audit the guard code and design recovery mechanisms.","params":{"guard":"The address of the guard to be used or the 0 address to disable the guard"}},"setup(address[],uint256,address,bytes,address,address,uint256,address)":{"details":"This method can only be called once.      If a proxy was created without setting up, anyone can call setup and claim the proxy.","params":{"_owners":"List of Safe owners.","_threshold":"Number of required confirmations for a Safe transaction.","data":"Data payload for optional delegate call.","fallbackHandler":"Handler for fallback calls to this contract","payment":"Value that should be paid","paymentReceiver":"Address that should receive the payment (or 0 if tx.origin)","paymentToken":"Token that should be used for the payment (0 is ETH)","to":"Contract address for optional delegate call."}},"simulateAndRevert(address,bytes)":{"details":"Performs a delegatecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to `abi.encode(bool(success), bytes(response))`. Specifically, the `returndata` after a call to this method will be: `success:bool || response.length:uint256 || response:bytes`.","params":{"calldataPayload":"Calldata that should be sent to the target contract (encoded method name and arguments).","targetContract":"Address of the contract containing the code to execute."}},"swapOwner(address,address,address)":{"details":"This can only be done via a Safe transaction.","params":{"newOwner":"New owner address.","oldOwner":"Owner address to be replaced.","prevOwner":"Owner that pointed to the owner to be replaced in the linked list"}}},"title":"Safe - A multisignature wallet with support for confirmations using signed messages based on EIP-712.","version":1},"evm":{"bytecode":{"functionDebugData":{"@_1041":{"entryPoint":null,"id":1041,"parameterSlots":0,"returnSlots":0}},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b5060016004556130c4806100256000396000f3fe6080604052600436106101d15760003560e01c8063affed0e0116100f7578063e19a9dd911610095578063f08a032311610064578063f08a0323146105f5578063f698da2514610615578063f8dc5dd91461062a578063ffa1ad741461064a5761020d565b8063e19a9dd914610580578063e318b52b146105a0578063e75235b8146105c0578063e86637db146105d55761020d565b8063cc2f8452116100d1578063cc2f8452146104f2578063d4d9bdcd14610520578063d8d11f7814610540578063e009cfde146105605761020d565b8063affed0e01461049c578063b4faba09146104b2578063b63e800d146104d25761020d565b80635624b25b1161016f5780636a7612021161013e5780636a7612021461040f5780637d83297414610422578063934f3a111461045a578063a0e67e2b1461047a5761020d565b80635624b25b146103755780635ae6bd37146103a2578063610b5925146103cf578063694e80c3146103ef5761020d565b80632f54bf6e116101ab5780632f54bf6e146102ea5780633408e4701461030a578063468721a7146103275780635229073f146103475761020d565b80630d582f131461027357806312fb68e0146102955780632d9ad53d146102b55761020d565b3661020d5760405134815233907f3d0ce9bfc3ed7d6862dbb28b2dea94561fe714a1b4d019aa8af39730d1ad7c3d9060200160405180910390a2005b34801561021957600080fd5b507f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d580548061024457005b36600080373360601b365260008060143601600080855af190503d6000803e8061026d573d6000fd5b503d6000f35b34801561027f57600080fd5b5061029361028e36600461259f565b61067b565b005b3480156102a157600080fd5b506102936102b036600461266e565b6107d3565b3480156102c157600080fd5b506102d56102d03660046126e3565b610c72565b60405190151581526020015b60405180910390f35b3480156102f657600080fd5b506102d56103053660046126e3565b610cad565b34801561031657600080fd5b50465b6040519081526020016102e1565b34801561033357600080fd5b506102d561034236600461270f565b610ce5565b34801561035357600080fd5b5061036761036236600461270f565b610dbe565b6040516102e19291906127bf565b34801561038157600080fd5b506103956103903660046127da565b610df4565b6040516102e191906127fc565b3480156103ae57600080fd5b506103196103bd36600461280f565b60076020526000908152604090205481565b3480156103db57600080fd5b506102936103ea3660046126e3565b610e70565b3480156103fb57600080fd5b5061029361040a36600461280f565b610fa9565b6102d561041d366004612871565b611047565b34801561042e57600080fd5b5061031961043d36600461259f565b600860209081526000928352604080842090915290825290205481565b34801561046657600080fd5b5061029361047536600461294a565b611392565b34801561048657600080fd5b5061048f6113dc565b6040516102e191906129fc565b3480156104a857600080fd5b5061031960055481565b3480156104be57600080fd5b506102936104cd366004612a0f565b6114cd565b3480156104de57600080fd5b506102936104ed366004612a5f565b6114f0565b3480156104fe57600080fd5b5061051261050d36600461259f565b6115f2565b6040516102e1929190612b54565b34801561052c57600080fd5b5061029361053b36600461280f565b6117ae565b34801561054c57600080fd5b5061031961055b366004612b7e565b611843565b34801561056c57600080fd5b5061029361057b366004612c3f565b611870565b34801561058c57600080fd5b5061029361059b3660046126e3565b611992565b3480156105ac57600080fd5b506102936105bb366004612c78565b611aa8565b3480156105cc57600080fd5b50600454610319565b3480156105e157600080fd5b506103956105f0366004612b7e565b611c83565b34801561060157600080fd5b506102936106103660046126e3565b611d5c565b34801561062157600080fd5b50610319611da4565b34801561063657600080fd5b50610293610645366004612cc3565b611dfb565b34801561065657600080fd5b5061039560405180604001604052806005815260200164312e342e3160d81b81525081565b610683611f66565b6001600160a01b038216158015906106a557506001600160a01b038216600114155b80156106ba57506001600160a01b0382163014155b6106df5760405162461bcd60e51b81526004016106d690612d04565b60405180910390fd5b6001600160a01b0382811660009081526002602052604090205416156107175760405162461bcd60e51b81526004016106d690612d23565b60026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e080546001600160a01b038481166000818152604081208054939094166001600160a01b03199384161790935560018352835490911617909155600380549161078483612d58565b90915550506040516001600160a01b038316907f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea2690600090a280600454146107cf576107cf81610fa9565b5050565b6107de816041611f9f565b825110156108165760405162461bcd60e51b8152602060048201526005602482015264047533032360dc1b60448201526064016106d6565b6000808060008060005b86811015610c66576041818102890160208101516040820151919092015160ff16955090935091506000849003610a2e57885160208a01208a1461088e5760405162461bcd60e51b8152602060048201526005602482015264475330323760d81b60448201526064016106d6565b919350839161089e876041611f9f565b8210156108d55760405162461bcd60e51b8152602060048201526005602482015264475330323160d81b60448201526064016106d6565b87516108e2836020611fdb565b11156109185760405162461bcd60e51b815260206004820152600560248201526423a998191960d91b60448201526064016106d6565b60208289018101518951909161093b908390610935908790611fdb565b90611fdb565b11156109715760405162461bcd60e51b8152602060048201526005602482015264475330323360d81b60448201526064016106d6565b6040516320c13b0b60e01b8082528a8501602001916001600160a01b038916906320c13b0b906109a7908f908690600401612d71565b602060405180830381865afa1580156109c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e89190612d96565b6001600160e01b03191614610a275760405162461bcd60e51b815260206004820152600560248201526411d4cc0c8d60da1b60448201526064016106d6565b5050610bd5565b8360ff16600103610ab0579193508391336001600160a01b0384161480610a7757506001600160a01b03851660009081526008602090815260408083208d845290915290205415155b610aab5760405162461bcd60e51b8152602060048201526005602482015264475330323560d81b60448201526064016106d6565b610bd5565b601e8460ff161115610b75576040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c81018b9052600190605c0160405160208183030381529060405280519060200120600486610b159190612dc0565b6040805160008152602081018083529390935260ff90911690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015610b64573d6000803e3d6000fd5b505050602060405103519450610bd5565b6040805160008152602081018083528c905260ff861691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015610bc8573d6000803e3d6000fd5b5050506020604051035194505b856001600160a01b0316856001600160a01b0316118015610c0f57506001600160a01b038581166000908152600260205260409020541615155b8015610c2557506001600160a01b038516600114155b610c595760405162461bcd60e51b815260206004820152600560248201526423a998191b60d91b60448201526064016106d6565b9394508493600101610820565b50505050505050505050565b600060016001600160a01b03831614801590610ca757506001600160a01b038281166000908152600160205260409020541615155b92915050565b60006001600160a01b038216600114801590610ca75750506001600160a01b0390811660009081526002602052604090205416151590565b600033600114801590610d0f5750336000908152600160205260409020546001600160a01b031615155b610d435760405162461bcd60e51b815260206004820152600560248201526411d4cc4c0d60da1b60448201526064016106d6565b610d5285858585600019611ff7565b90508015610d8a5760405133907f6895c13664aa4f67288b25d7a21d7aaa34916e355fb9b6fae0a139a9085becb890600090a2610db6565b60405133907facd2c8702804128fdb0db2bb49f6d127dd0181c13fd45dbfe16de0930e2bd37590600090a25b949350505050565b60006060610dce86868686610ce5565b915060405160203d0181016040523d81523d6000602083013e8091505094509492505050565b60606000610e03836020612dd9565b67ffffffffffffffff811115610e1b57610e1b6125cb565b6040519080825280601f01601f191660200182016040528015610e45576020820181803683370190505b50905060005b83811015610e685784810154602080830284010152600101610e4b565b509392505050565b610e78611f66565b6001600160a01b03811615801590610e9a57506001600160a01b038116600114155b610ece5760405162461bcd60e51b8152602060048201526005602482015264475331303160d81b60448201526064016106d6565b6001600160a01b038181166000908152600160205260409020541615610f1e5760405162461bcd60e51b815260206004820152600560248201526423a998981960d91b60448201526064016106d6565b600160208190527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f80546001600160a01b03848116600081815260408082208054949095166001600160a01b031994851617909455948552835490911681179092555190917fecdf3a3effea5783a3c4c2140e677577666428d44ed9d474a0b3a4c9943f844091a250565b610fb1611f66565b600354811115610fd35760405162461bcd60e51b81526004016106d690612df0565b600181101561100c5760405162461bcd60e51b815260206004820152600560248201526423a999181960d91b60448201526064016106d6565b60048190556040518181527f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c939060200160405180910390a150565b60008060006110618e8e8e8e8e8e8e8e8e8e600554611c83565b60058054919250600061107383612d58565b909155505080516020820120915061108c828286611392565b5060006110b77f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c85490565b90506001600160a01b0381161561113d57806001600160a01b03166375f0bb528f8f8f8f8f8f8f8f8f8f8f336040518d63ffffffff1660e01b815260040161110a9c9b9a99989796959493929190612e47565b600060405180830381600087803b15801561112457600080fd5b505af1158015611138573d6000803e3d6000fd5b505050505b61116961114c8a6109c4612f0c565b603f6111598c6040612dd9565b6111639190612f1f565b9061203e565b611175906101f4612f0c565b5a10156111ac5760405162461bcd60e51b8152602060048201526005602482015264047533031360dc1b60448201526064016106d6565b60005a905061121d8f8f8f8f8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508e8c60001461120a578e611ff7565b6109c45a6112189190612f41565b611ff7565b935061122a5a8290612055565b9050838061123757508915155b8061124157508715155b6112755760405162461bcd60e51b8152602060048201526005602482015264475330313360d81b60448201526064016106d6565b6000881561128d5761128a828b8b8b8b612070565b90505b84156112d257837f442e715f626346e8c54381002da614f62bee8d27386535b2521ec8540898556e826040516112c591815260200190565b60405180910390a261130d565b837f23428b18acfb3ea64b08dc0c1d296ea9c09702c09083ca5272e64d115b687d238260405161130491815260200190565b60405180910390a25b50506001600160a01b0381161561138157604051631264e26d60e31b81526004810183905283151560248201526001600160a01b03821690639327136890604401600060405180830381600087803b15801561136857600080fd5b505af115801561137c573d6000803e3d6000fd5b505050505b50509b9a5050505050505050505050565b600454806113ca5760405162461bcd60e51b8152602060048201526005602482015264475330303160d81b60448201526064016106d6565b6113d6848484846107d3565b50505050565b6060600060035467ffffffffffffffff8111156113fb576113fb6125cb565b604051908082528060200260200182016040528015611424578160200160208202803683370190505b506001600090815260026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e054919250906001600160a01b03165b6001600160a01b0381166001146114c5578083838151811061148557611485612f54565b6001600160a01b039283166020918202929092018101919091529181166000908152600290925260409091205416816114bd81612d58565b925050611461565b509092915050565b600080825160208401855af480600052503d6020523d600060403e60403d016000fd5b61152e8a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508c9250612176915050565b6001600160a01b038416156115465761154684612352565b6115868787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506123b692505050565b811561159d5761159b82600060018685612070565b505b336001600160a01b03167f141df868a6331af528e38c83b7aa03edc19be66e37ae67f9285bf4f8e3c6a1a88b8b8b8b896040516115de959493929190612f6a565b60405180910390a250505050505050505050565b606060006001600160a01b03841660011480611612575061161284610c72565b6116465760405162461bcd60e51b8152602060048201526005602482015264475331303560d81b60448201526064016106d6565b6000831161167e5760405162461bcd60e51b815260206004820152600560248201526423a998981b60d91b60448201526064016106d6565b8267ffffffffffffffff811115611697576116976125cb565b6040519080825280602002602001820160405280156116c0578160200160208202803683370190505b506001600160a01b03808616600090815260016020526040812054929450911691505b6001600160a01b0382161580159061170557506001600160a01b038216600114155b801561171057508381105b1561176b578183828151811061172857611728612f54565b6001600160a01b0392831660209182029290920181019190915292811660009081526001909352604090922054909116908061176381612d58565b9150506116e3565b6001600160a01b0382166001146117a35782611788600183612f41565b8151811061179857611798612f54565b602002602001015191505b808352509250929050565b336000908152600260205260409020546001600160a01b03166117fb5760405162461bcd60e51b8152602060048201526005602482015264047533033360dc1b60448201526064016106d6565b336000818152600860209081526040808320858452909152808220600190555183917ff2a0eb156472d1440255b0d7c1e19cc07115d1051fe605b0dce69acfec884d9c91a350565b60006118588c8c8c8c8c8c8c8c8c8c8c611c83565b8051906020012090509b9a5050505050505050505050565b611878611f66565b6001600160a01b0381161580159061189a57506001600160a01b038116600114155b6118ce5760405162461bcd60e51b8152602060048201526005602482015264475331303160d81b60448201526064016106d6565b6001600160a01b038281166000908152600160205260409020548116908216146119225760405162461bcd60e51b8152602060048201526005602482015264475331303360d81b60448201526064016106d6565b6001600160a01b03818116600081815260016020526040808220805487861684528284208054919096166001600160a01b0319918216179095558383528054909416909355915190917faab4fa2b463f581b2b32cb3b7e3b704b9ce37cc209b5fb4d77e593ace405427691a25050565b61199a611f66565b6001600160a01b03811615611a4c576040516301ffc9a760e01b815263736bd41d60e11b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa1580156119f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a189190612fd6565b611a4c5760405162461bcd60e51b8152602060048201526005602482015264047533330360dc1b60448201526064016106d6565b7f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c88181556040516001600160a01b038316907f1151116914515bc0891ff9047a6cb32cf902546f83066499bcf8ba33d2353fa290600090a25050565b611ab0611f66565b6001600160a01b03811615801590611ad257506001600160a01b038116600114155b8015611ae757506001600160a01b0381163014155b611b035760405162461bcd60e51b81526004016106d690612d04565b6001600160a01b038181166000908152600260205260409020541615611b3b5760405162461bcd60e51b81526004016106d690612d23565b6001600160a01b03821615801590611b5d57506001600160a01b038216600114155b611b795760405162461bcd60e51b81526004016106d690612d04565b6001600160a01b03838116600090815260026020526040902054811690831614611bcd5760405162461bcd60e51b8152602060048201526005602482015264475332303560d81b60448201526064016106d6565b6001600160a01b03828116600081815260026020526040808220805486861680855283852080549288166001600160a01b03199384161790559589168452828420805482169096179095558383528054909416909355915190917ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf91a26040516001600160a01b038216907f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea2690600090a2505050565b606060007fbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d860001b8d8d8d8d604051611cbd929190612ff8565b604051908190038120611ce3949392918e908e908e908e908e908e908e90602001613008565b60408051601f1981840301815291905280516020909101209050601960f81b600160f81b611d0f611da4565b6040516001600160f81b031993841660208201529290911660218301526022820152604281018290526062016040516020818303038152906040529150509b9a5050505050505050505050565b611d64611f66565b611d6d81612352565b6040516001600160a01b038216907f5ac6c46c93c8d0e53714ba3b53db3e7c046da994313d7ed0d192028bc7c228b090600090a250565b60007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692184660408051602081019390935282015230606082015260800160405160208183030381529060405280519060200120905090565b611e03611f66565b806001600354611e139190612f41565b1015611e315760405162461bcd60e51b81526004016106d690612df0565b6001600160a01b03821615801590611e5357506001600160a01b038216600114155b611e6f5760405162461bcd60e51b81526004016106d690612d04565b6001600160a01b03838116600090815260026020526040902054811690831614611ec35760405162461bcd60e51b8152602060048201526005602482015264475332303560d81b60448201526064016106d6565b6001600160a01b03828116600081815260026020526040808220805488861684529183208054929095166001600160a01b03199283161790945591815282549091169091556003805491611f1683613077565b90915550506040516001600160a01b038316907ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf90600090a28060045414611f6157611f6181610fa9565b505050565b333014611f9d5760405162461bcd60e51b8152602060048201526005602482015264475330333160d81b60448201526064016106d6565b565b600082600003611fb157506000610ca7565b6000611fbd8385612dd9565b905082611fca8583612f1f565b14611fd457600080fd5b9392505050565b600080611fe88385612f0c565b905083811015611fd457600080fd5b6000600183600181111561200d5761200d612e0f565b03612025576000808551602087018986f49050612035565b600080855160208701888a87f190505b95945050505050565b60008183101561204e5781611fd4565b5090919050565b60008282111561206457600080fd5b6000610db68385612f41565b6000806001600160a01b03831615612088578261208a565b325b90506001600160a01b03841661211d576120bc3a86106120aa573a6120ac565b855b6120b68989611fdb565b90611f9f565b6040519092506001600160a01b0382169083156108fc029084906000818181858888f193505050506121185760405162461bcd60e51b8152602060048201526005602482015264475330313160d81b60448201526064016106d6565b61216c565b61212b856120b68989611fdb565b91506121388482846124e8565b61216c5760405162461bcd60e51b815260206004820152600560248201526423a998189960d91b60448201526064016106d6565b5095945050505050565b600454156121ae5760405162461bcd60e51b8152602060048201526005602482015264047533230360dc1b60448201526064016106d6565b81518111156121cf5760405162461bcd60e51b81526004016106d690612df0565b60018110156122085760405162461bcd60e51b815260206004820152600560248201526423a999181960d91b60448201526064016106d6565b600160005b835181101561231f57600084828151811061222a5761222a612f54565b6020026020010151905060006001600160a01b0316816001600160a01b03161415801561226157506001600160a01b038116600114155b801561227657506001600160a01b0381163014155b80156122945750806001600160a01b0316836001600160a01b031614155b6122b05760405162461bcd60e51b81526004016106d690612d04565b6001600160a01b0381811660009081526002602052604090205416156122e85760405162461bcd60e51b81526004016106d690612d23565b6001600160a01b03928316600090815260026020526040902080546001600160a01b0319169382169390931790925560010161220d565b506001600160a01b0316600090815260026020526040902080546001600160a01b03191660011790559051600355600455565b306001600160a01b038216036123925760405162461bcd60e51b8152602060048201526005602482015264047533430360dc1b60448201526064016106d6565b7f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d555565b600160008190526020527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f546001600160a01b0316156124205760405162461bcd60e51b8152602060048201526005602482015264047533130360dc1b60448201526064016106d6565b6001600081905260208190527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f80546001600160a01b03191690911790556001600160a01b038216156107cf57813b6124a35760405162461bcd60e51b815260206004820152600560248201526423a998181960d91b60448201526064016106d6565b6124b4826000836001600019611ff7565b6107cf5760405162461bcd60e51b8152602060048201526005602482015264047533030360dc1b60448201526064016106d6565b604080516001600160a01b03841660248201526044808201849052825180830390910181526064909101909152602080820180516001600160e01b031663a9059cbb60e01b1781528251600093929184919082896127105a03f13d801561255a5760208114612562576000935061256d565b81935061256d565b600051158215171593505b5050509392505050565b6001600160a01b038116811461258c57600080fd5b50565b803561259a81612577565b919050565b600080604083850312156125b257600080fd5b82356125bd81612577565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126125f257600080fd5b813567ffffffffffffffff8082111561260d5761260d6125cb565b604051601f8301601f19908116603f01168101908282118183101715612635576126356125cb565b8160405283815286602085880101111561264e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561268457600080fd5b84359350602085013567ffffffffffffffff808211156126a357600080fd5b6126af888389016125e1565b945060408701359150808211156126c557600080fd5b506126d2878288016125e1565b949793965093946060013593505050565b6000602082840312156126f557600080fd5b8135611fd481612577565b80356002811061259a57600080fd5b6000806000806080858703121561272557600080fd5b843561273081612577565b935060208501359250604085013567ffffffffffffffff81111561275357600080fd5b61275f878288016125e1565b92505061276e60608601612700565b905092959194509250565b6000815180845260005b8181101561279f57602081850181015186830182015201612783565b506000602082860101526020601f19601f83011685010191505092915050565b8215158152604060208201526000610db66040830184612779565b600080604083850312156127ed57600080fd5b50508035926020909101359150565b602081526000611fd46020830184612779565b60006020828403121561282157600080fd5b5035919050565b60008083601f84011261283a57600080fd5b50813567ffffffffffffffff81111561285257600080fd5b60208301915083602082850101111561286a57600080fd5b9250929050565b60008060008060008060008060008060006101408c8e03121561289357600080fd5b61289c8c61258f565b9a5060208c0135995067ffffffffffffffff8060408e013511156128bf57600080fd5b6128cf8e60408f01358f01612828565b909a5098506128e060608e01612700565b975060808d0135965060a08d0135955060c08d0135945061290360e08e0161258f565b93506129126101008e0161258f565b9250806101208e0135111561292657600080fd5b506129388d6101208e01358e016125e1565b90509295989b509295989b9093969950565b60008060006060848603121561295f57600080fd5b83359250602084013567ffffffffffffffff8082111561297e57600080fd5b61298a878388016125e1565b935060408601359150808211156129a057600080fd5b506129ad868287016125e1565b9150509250925092565b60008151808452602080850194506020840160005b838110156129f15781516001600160a01b0316875295820195908201906001016129cc565b509495945050505050565b602081526000611fd460208301846129b7565b60008060408385031215612a2257600080fd5b8235612a2d81612577565b9150602083013567ffffffffffffffff811115612a4957600080fd5b612a55858286016125e1565b9150509250929050565b6000806000806000806000806000806101008b8d031215612a7f57600080fd5b8a3567ffffffffffffffff80821115612a9757600080fd5b818d0191508d601f830112612aab57600080fd5b813581811115612aba57600080fd5b8e60208260051b8501011115612acf57600080fd5b60208381019d50909b508d01359950612aea60408e0161258f565b985060608d0135915080821115612b0057600080fd5b50612b0d8d828e01612828565b9097509550612b20905060808c0161258f565b9350612b2e60a08c0161258f565b925060c08b01359150612b4360e08c0161258f565b90509295989b9194979a5092959850565b604081526000612b6760408301856129b7565b905060018060a01b03831660208301529392505050565b60008060008060008060008060008060006101408c8e031215612ba057600080fd5b8b35612bab81612577565b9a5060208c0135995060408c013567ffffffffffffffff811115612bce57600080fd5b612bda8e828f01612828565b909a509850612bed905060608d01612700565b965060808c0135955060a08c0135945060c08c0135935060e08c0135612c1281612577565b92506101008c0135612c2381612577565b809250506101208c013590509295989b509295989b9093969950565b60008060408385031215612c5257600080fd5b8235612c5d81612577565b91506020830135612c6d81612577565b809150509250929050565b600080600060608486031215612c8d57600080fd5b8335612c9881612577565b92506020840135612ca881612577565b91506040840135612cb881612577565b809150509250925092565b600080600060608486031215612cd857600080fd5b8335612ce381612577565b92506020840135612cf381612577565b929592945050506040919091013590565b602080825260059082015264475332303360d81b604082015260600190565b60208082526005908201526411d4cc8c0d60da1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600060018201612d6a57612d6a612d42565b5060010190565b604081526000612d846040830185612779565b82810360208401526120358185612779565b600060208284031215612da857600080fd5b81516001600160e01b031981168114611fd457600080fd5b60ff8281168282160390811115610ca757610ca7612d42565b8082028115828204841417610ca757610ca7612d42565b602080825260059082015264475332303160d81b604082015260600190565b634e487b7160e01b600052602160045260246000fd5b60028110612e4357634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b038d168152602081018c90526101606040820181905281018a905260006101808b8d828501376000838d01820152601f8c01601f19168301612e93606085018d612e25565b8a60808501528960a08501528860c0850152612eba60e08501896001600160a01b03169052565b6001600160a01b0387166101008501528184820301610120850152612ee182820187612779565b92505050612efb6101408301846001600160a01b03169052565b9d9c50505050505050505050505050565b80820180821115610ca757610ca7612d42565b600082612f3c57634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610ca757610ca7612d42565b634e487b7160e01b600052603260045260246000fd5b6080808252810185905260008660a08301825b88811015612fad578235612f9081612577565b6001600160a01b0316825260209283019290910190600101612f7d565b50602084019690965250506001600160a01b039283166040820152911660609091015292915050565b600060208284031215612fe857600080fd5b81518015158114611fd457600080fd5b8183823760009101908152919050565b8b81526001600160a01b038b81166020830152604082018b9052606082018a905261016082019061303c608084018b612e25565b60a083019890985260c082019690965260e0810194909452918516610100840152909316610120820152610140019190915295945050505050565b60008161308657613086612d42565b50600019019056fea2646970667358221220e141bbff628305491758e84f5f7a394e7f6461aa9942d70dbe77ce44d1094c2464736f6c63430008170033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x4 SSTORE PUSH2 0x30C4 DUP1 PUSH2 0x25 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1D1 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAFFED0E0 GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xE19A9DD9 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xF08A0323 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xF08A0323 EQ PUSH2 0x5F5 JUMPI DUP1 PUSH4 0xF698DA25 EQ PUSH2 0x615 JUMPI DUP1 PUSH4 0xF8DC5DD9 EQ PUSH2 0x62A JUMPI DUP1 PUSH4 0xFFA1AD74 EQ PUSH2 0x64A JUMPI PUSH2 0x20D JUMP JUMPDEST DUP1 PUSH4 0xE19A9DD9 EQ PUSH2 0x580 JUMPI DUP1 PUSH4 0xE318B52B EQ PUSH2 0x5A0 JUMPI DUP1 PUSH4 0xE75235B8 EQ PUSH2 0x5C0 JUMPI DUP1 PUSH4 0xE86637DB EQ PUSH2 0x5D5 JUMPI PUSH2 0x20D JUMP JUMPDEST DUP1 PUSH4 0xCC2F8452 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xCC2F8452 EQ PUSH2 0x4F2 JUMPI DUP1 PUSH4 0xD4D9BDCD EQ PUSH2 0x520 JUMPI DUP1 PUSH4 0xD8D11F78 EQ PUSH2 0x540 JUMPI DUP1 PUSH4 0xE009CFDE EQ PUSH2 0x560 JUMPI PUSH2 0x20D JUMP JUMPDEST DUP1 PUSH4 0xAFFED0E0 EQ PUSH2 0x49C JUMPI DUP1 PUSH4 0xB4FABA09 EQ PUSH2 0x4B2 JUMPI DUP1 PUSH4 0xB63E800D EQ PUSH2 0x4D2 JUMPI PUSH2 0x20D JUMP JUMPDEST DUP1 PUSH4 0x5624B25B GT PUSH2 0x16F JUMPI DUP1 PUSH4 0x6A761202 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x6A761202 EQ PUSH2 0x40F JUMPI DUP1 PUSH4 0x7D832974 EQ PUSH2 0x422 JUMPI DUP1 PUSH4 0x934F3A11 EQ PUSH2 0x45A JUMPI DUP1 PUSH4 0xA0E67E2B EQ PUSH2 0x47A JUMPI PUSH2 0x20D JUMP JUMPDEST DUP1 PUSH4 0x5624B25B EQ PUSH2 0x375 JUMPI DUP1 PUSH4 0x5AE6BD37 EQ PUSH2 0x3A2 JUMPI DUP1 PUSH4 0x610B5925 EQ PUSH2 0x3CF JUMPI DUP1 PUSH4 0x694E80C3 EQ PUSH2 0x3EF JUMPI PUSH2 0x20D JUMP JUMPDEST DUP1 PUSH4 0x2F54BF6E GT PUSH2 0x1AB JUMPI DUP1 PUSH4 0x2F54BF6E EQ PUSH2 0x2EA JUMPI DUP1 PUSH4 0x3408E470 EQ PUSH2 0x30A JUMPI DUP1 PUSH4 0x468721A7 EQ PUSH2 0x327 JUMPI DUP1 PUSH4 0x5229073F EQ PUSH2 0x347 JUMPI PUSH2 0x20D JUMP JUMPDEST DUP1 PUSH4 0xD582F13 EQ PUSH2 0x273 JUMPI DUP1 PUSH4 0x12FB68E0 EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0x2D9AD53D EQ PUSH2 0x2B5 JUMPI PUSH2 0x20D JUMP JUMPDEST CALLDATASIZE PUSH2 0x20D JUMPI PUSH1 0x40 MLOAD CALLVALUE DUP2 MSTORE CALLER SWAP1 PUSH32 0x3D0CE9BFC3ED7D6862DBB28B2DEA94561FE714A1B4D019AA8AF39730D1AD7C3D SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x219 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x6C9A6C4A39284E37ED1CF53D337577D14212A4870FB976A4366C693B939918D5 DUP1 SLOAD DUP1 PUSH2 0x244 JUMPI STOP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY CALLER PUSH1 0x60 SHL CALLDATASIZE MSTORE PUSH1 0x0 DUP1 PUSH1 0x14 CALLDATASIZE ADD PUSH1 0x0 DUP1 DUP6 GAS CALL SWAP1 POP RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 PUSH2 0x26D JUMPI RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x28E CALLDATASIZE PUSH1 0x4 PUSH2 0x259F JUMP JUMPDEST PUSH2 0x67B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x2B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x266E JUMP JUMPDEST PUSH2 0x7D3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D5 PUSH2 0x2D0 CALLDATASIZE PUSH1 0x4 PUSH2 0x26E3 JUMP JUMPDEST PUSH2 0xC72 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D5 PUSH2 0x305 CALLDATASIZE PUSH1 0x4 PUSH2 0x26E3 JUMP JUMPDEST PUSH2 0xCAD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CHAINID JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2E1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x333 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D5 PUSH2 0x342 CALLDATASIZE PUSH1 0x4 PUSH2 0x270F JUMP JUMPDEST PUSH2 0xCE5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x367 PUSH2 0x362 CALLDATASIZE PUSH1 0x4 PUSH2 0x270F JUMP JUMPDEST PUSH2 0xDBE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E1 SWAP3 SWAP2 SWAP1 PUSH2 0x27BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x381 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x395 PUSH2 0x390 CALLDATASIZE PUSH1 0x4 PUSH2 0x27DA JUMP JUMPDEST PUSH2 0xDF4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E1 SWAP2 SWAP1 PUSH2 0x27FC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x319 PUSH2 0x3BD CALLDATASIZE PUSH1 0x4 PUSH2 0x280F JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x3EA CALLDATASIZE PUSH1 0x4 PUSH2 0x26E3 JUMP JUMPDEST PUSH2 0xE70 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x40A CALLDATASIZE PUSH1 0x4 PUSH2 0x280F JUMP JUMPDEST PUSH2 0xFA9 JUMP JUMPDEST PUSH2 0x2D5 PUSH2 0x41D CALLDATASIZE PUSH1 0x4 PUSH2 0x2871 JUMP JUMPDEST PUSH2 0x1047 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x319 PUSH2 0x43D CALLDATASIZE PUSH1 0x4 PUSH2 0x259F JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x466 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x475 CALLDATASIZE PUSH1 0x4 PUSH2 0x294A JUMP JUMPDEST PUSH2 0x1392 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x486 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x48F PUSH2 0x13DC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E1 SWAP2 SWAP1 PUSH2 0x29FC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x319 PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x4CD CALLDATASIZE PUSH1 0x4 PUSH2 0x2A0F JUMP JUMPDEST PUSH2 0x14CD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x4ED CALLDATASIZE PUSH1 0x4 PUSH2 0x2A5F JUMP JUMPDEST PUSH2 0x14F0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x512 PUSH2 0x50D CALLDATASIZE PUSH1 0x4 PUSH2 0x259F JUMP JUMPDEST PUSH2 0x15F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E1 SWAP3 SWAP2 SWAP1 PUSH2 0x2B54 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x52C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x53B CALLDATASIZE PUSH1 0x4 PUSH2 0x280F JUMP JUMPDEST PUSH2 0x17AE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x54C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x319 PUSH2 0x55B CALLDATASIZE PUSH1 0x4 PUSH2 0x2B7E JUMP JUMPDEST PUSH2 0x1843 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x57B CALLDATASIZE PUSH1 0x4 PUSH2 0x2C3F JUMP JUMPDEST PUSH2 0x1870 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x59B CALLDATASIZE PUSH1 0x4 PUSH2 0x26E3 JUMP JUMPDEST PUSH2 0x1992 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x5BB CALLDATASIZE PUSH1 0x4 PUSH2 0x2C78 JUMP JUMPDEST PUSH2 0x1AA8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 SLOAD PUSH2 0x319 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x395 PUSH2 0x5F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B7E JUMP JUMPDEST PUSH2 0x1C83 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x601 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x610 CALLDATASIZE PUSH1 0x4 PUSH2 0x26E3 JUMP JUMPDEST PUSH2 0x1D5C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x621 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x319 PUSH2 0x1DA4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x636 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x645 CALLDATASIZE PUSH1 0x4 PUSH2 0x2CC3 JUMP JUMPDEST PUSH2 0x1DFB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x656 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x395 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x312E342E31 PUSH1 0xD8 SHL DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH2 0x683 PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x6A5 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x1 EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x6BA JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ADDRESS EQ ISZERO JUMPDEST PUSH2 0x6DF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D6 SWAP1 PUSH2 0x2D04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND ISZERO PUSH2 0x717 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D6 SWAP1 PUSH2 0x2D23 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH32 0xE90B7BCEB6E7DF5418FB78D8EE546E97C83A08BBCCC01A0644D599CCD2A7C2E0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP4 SWAP1 SWAP5 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP4 DUP5 AND OR SWAP1 SWAP4 SSTORE PUSH1 0x1 DUP4 MSTORE DUP4 SLOAD SWAP1 SWAP2 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x3 DUP1 SLOAD SWAP2 PUSH2 0x784 DUP4 PUSH2 0x2D58 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0x9465FA0C962CC76958E6373A993326400C1C94F8BE2FE3A952ADFA7F60B2EA26 SWAP1 PUSH1 0x0 SWAP1 LOG2 DUP1 PUSH1 0x4 SLOAD EQ PUSH2 0x7CF JUMPI PUSH2 0x7CF DUP2 PUSH2 0xFA9 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x7DE DUP2 PUSH1 0x41 PUSH2 0x1F9F JUMP JUMPDEST DUP3 MLOAD LT ISZERO PUSH2 0x816 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x475330323 PUSH1 0xDC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0xC66 JUMPI PUSH1 0x41 DUP2 DUP2 MUL DUP10 ADD PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x40 DUP3 ADD MLOAD SWAP2 SWAP1 SWAP3 ADD MLOAD PUSH1 0xFF AND SWAP6 POP SWAP1 SWAP4 POP SWAP2 POP PUSH1 0x0 DUP5 SWAP1 SUB PUSH2 0xA2E JUMPI DUP9 MLOAD PUSH1 0x20 DUP11 ADD KECCAK256 DUP11 EQ PUSH2 0x88E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753303237 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST SWAP2 SWAP4 POP DUP4 SWAP2 PUSH2 0x89E DUP8 PUSH1 0x41 PUSH2 0x1F9F JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x8D5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753303231 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST DUP8 MLOAD PUSH2 0x8E2 DUP4 PUSH1 0x20 PUSH2 0x1FDB JUMP JUMPDEST GT ISZERO PUSH2 0x918 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x23A9981919 PUSH1 0xD9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x20 DUP3 DUP10 ADD DUP2 ADD MLOAD DUP10 MLOAD SWAP1 SWAP2 PUSH2 0x93B SWAP1 DUP4 SWAP1 PUSH2 0x935 SWAP1 DUP8 SWAP1 PUSH2 0x1FDB JUMP JUMPDEST SWAP1 PUSH2 0x1FDB JUMP JUMPDEST GT ISZERO PUSH2 0x971 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753303233 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x20C13B0B PUSH1 0xE0 SHL DUP1 DUP3 MSTORE DUP11 DUP6 ADD PUSH1 0x20 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0x20C13B0B SWAP1 PUSH2 0x9A7 SWAP1 DUP16 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D71 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9C4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9E8 SWAP2 SWAP1 PUSH2 0x2D96 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ PUSH2 0xA27 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x11D4CC0C8D PUSH1 0xDA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST POP POP PUSH2 0xBD5 JUMP JUMPDEST DUP4 PUSH1 0xFF AND PUSH1 0x1 SUB PUSH2 0xAB0 JUMPI SWAP2 SWAP4 POP DUP4 SWAP2 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EQ DUP1 PUSH2 0xA77 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP14 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD ISZERO ISZERO JUMPDEST PUSH2 0xAAB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753303235 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH2 0xBD5 JUMP JUMPDEST PUSH1 0x1E DUP5 PUSH1 0xFF AND GT ISZERO PUSH2 0xB75 JUMPI PUSH1 0x40 MLOAD PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3C DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0x5C ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x4 DUP7 PUSH2 0xB15 SWAP2 SWAP1 PUSH2 0x2DC0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 DUP4 MSTORE SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xFF SWAP1 SWAP2 AND SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB64 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP5 POP PUSH2 0xBD5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 DUP4 MSTORE DUP13 SWAP1 MSTORE PUSH1 0xFF DUP7 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBC8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP5 POP JUMPDEST DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT DUP1 ISZERO PUSH2 0xC0F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0xC25 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x1 EQ ISZERO JUMPDEST PUSH2 0xC59 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x23A998191B PUSH1 0xD9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST SWAP4 SWAP5 POP DUP5 SWAP4 PUSH1 0x1 ADD PUSH2 0x820 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EQ DUP1 ISZERO SWAP1 PUSH2 0xCA7 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND ISZERO ISZERO JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x1 EQ DUP1 ISZERO SWAP1 PUSH2 0xCA7 JUMPI POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH1 0x1 EQ DUP1 ISZERO SWAP1 PUSH2 0xD0F JUMPI POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO JUMPDEST PUSH2 0xD43 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x11D4CC4C0D PUSH1 0xDA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH2 0xD52 DUP6 DUP6 DUP6 DUP6 PUSH1 0x0 NOT PUSH2 0x1FF7 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xD8A JUMPI PUSH1 0x40 MLOAD CALLER SWAP1 PUSH32 0x6895C13664AA4F67288B25D7A21D7AAA34916E355FB9B6FAE0A139A9085BECB8 SWAP1 PUSH1 0x0 SWAP1 LOG2 PUSH2 0xDB6 JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 PUSH32 0xACD2C8702804128FDB0DB2BB49F6D127DD0181C13FD45DBFE16DE0930E2BD375 SWAP1 PUSH1 0x0 SWAP1 LOG2 JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0xDCE DUP7 DUP7 DUP7 DUP7 PUSH2 0xCE5 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 MLOAD PUSH1 0x20 RETURNDATASIZE ADD DUP2 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP2 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP4 ADD RETURNDATACOPY DUP1 SWAP2 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xE03 DUP4 PUSH1 0x20 PUSH2 0x2DD9 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE1B JUMPI PUSH2 0xE1B PUSH2 0x25CB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xE45 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE68 JUMPI DUP5 DUP2 ADD SLOAD PUSH1 0x20 DUP1 DUP4 MUL DUP5 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0xE4B JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xE78 PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0xE9A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x1 EQ ISZERO JUMPDEST PUSH2 0xECE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753313031 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND ISZERO PUSH2 0xF1E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x23A9989819 PUSH1 0xD9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH32 0xCC69885FDA6BCC1A4ACE058B4A62BF5E179EA78FD58A1CCD71C22CC9B688792F DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD SWAP5 SWAP1 SWAP6 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP5 DUP6 AND OR SWAP1 SWAP5 SSTORE SWAP5 DUP6 MSTORE DUP4 SLOAD SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP3 SSTORE MLOAD SWAP1 SWAP2 PUSH32 0xECDF3A3EFFEA5783A3C4C2140E677577666428D44ED9D474A0B3A4C9943F8440 SWAP2 LOG2 POP JUMP JUMPDEST PUSH2 0xFB1 PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 GT ISZERO PUSH2 0xFD3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D6 SWAP1 PUSH2 0x2DF0 JUMP JUMPDEST PUSH1 0x1 DUP2 LT ISZERO PUSH2 0x100C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x23A9991819 PUSH1 0xD9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0x610F7FF2B304AE8903C3DE74C60C6AB1F7D6226B3F52C5161905BB5AD4039C93 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1061 DUP15 DUP15 DUP15 DUP15 DUP15 DUP15 DUP15 DUP15 DUP15 DUP15 PUSH1 0x5 SLOAD PUSH2 0x1C83 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD SWAP2 SWAP3 POP PUSH1 0x0 PUSH2 0x1073 DUP4 PUSH2 0x2D58 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD KECCAK256 SWAP2 POP PUSH2 0x108C DUP3 DUP3 DUP7 PUSH2 0x1392 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x10B7 PUSH32 0x4A204F620C8C5CCDCA3FD54D003BADD85BA500436A431F0CBDA4F558C93C34C8 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x113D JUMPI DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x75F0BB52 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 CALLER PUSH1 0x40 MLOAD DUP14 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x110A SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2E47 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1138 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH2 0x1169 PUSH2 0x114C DUP11 PUSH2 0x9C4 PUSH2 0x2F0C JUMP JUMPDEST PUSH1 0x3F PUSH2 0x1159 DUP13 PUSH1 0x40 PUSH2 0x2DD9 JUMP JUMPDEST PUSH2 0x1163 SWAP2 SWAP1 PUSH2 0x2F1F JUMP JUMPDEST SWAP1 PUSH2 0x203E JUMP JUMPDEST PUSH2 0x1175 SWAP1 PUSH2 0x1F4 PUSH2 0x2F0C JUMP JUMPDEST GAS LT ISZERO PUSH2 0x11AC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x475330313 PUSH1 0xDC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x0 GAS SWAP1 POP PUSH2 0x121D DUP16 DUP16 DUP16 DUP16 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP15 DUP13 PUSH1 0x0 EQ PUSH2 0x120A JUMPI DUP15 PUSH2 0x1FF7 JUMP JUMPDEST PUSH2 0x9C4 GAS PUSH2 0x1218 SWAP2 SWAP1 PUSH2 0x2F41 JUMP JUMPDEST PUSH2 0x1FF7 JUMP JUMPDEST SWAP4 POP PUSH2 0x122A GAS DUP3 SWAP1 PUSH2 0x2055 JUMP JUMPDEST SWAP1 POP DUP4 DUP1 PUSH2 0x1237 JUMPI POP DUP10 ISZERO ISZERO JUMPDEST DUP1 PUSH2 0x1241 JUMPI POP DUP8 ISZERO ISZERO JUMPDEST PUSH2 0x1275 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753303133 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x0 DUP9 ISZERO PUSH2 0x128D JUMPI PUSH2 0x128A DUP3 DUP12 DUP12 DUP12 DUP12 PUSH2 0x2070 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0x12D2 JUMPI DUP4 PUSH32 0x442E715F626346E8C54381002DA614F62BEE8D27386535B2521EC8540898556E DUP3 PUSH1 0x40 MLOAD PUSH2 0x12C5 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x130D JUMP JUMPDEST DUP4 PUSH32 0x23428B18ACFB3EA64B08DC0C1D296EA9C09702C09083CA5272E64D115B687D23 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1304 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x1381 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1264E26D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE DUP4 ISZERO ISZERO PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x93271368 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1368 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x137C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP POP SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD DUP1 PUSH2 0x13CA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753303031 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH2 0x13D6 DUP5 DUP5 DUP5 DUP5 PUSH2 0x7D3 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x3 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x13FB JUMPI PUSH2 0x13FB PUSH2 0x25CB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1424 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x1 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH32 0xE90B7BCEB6E7DF5418FB78D8EE546E97C83A08BBCCC01A0644D599CCD2A7C2E0 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x1 EQ PUSH2 0x14C5 JUMPI DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1485 JUMPI PUSH2 0x1485 PUSH2 0x2F54 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD AND DUP2 PUSH2 0x14BD DUP2 PUSH2 0x2D58 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x1461 JUMP JUMPDEST POP SWAP1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x20 DUP5 ADD DUP6 GAS DELEGATECALL DUP1 PUSH1 0x0 MSTORE POP RETURNDATASIZE PUSH1 0x20 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x40 RETURNDATACOPY PUSH1 0x40 RETURNDATASIZE ADD PUSH1 0x0 REVERT JUMPDEST PUSH2 0x152E DUP11 DUP11 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP13 SWAP3 POP PUSH2 0x2176 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1546 JUMPI PUSH2 0x1546 DUP5 PUSH2 0x2352 JUMP JUMPDEST PUSH2 0x1586 DUP8 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x23B6 SWAP3 POP POP POP JUMP JUMPDEST DUP2 ISZERO PUSH2 0x159D JUMPI PUSH2 0x159B DUP3 PUSH1 0x0 PUSH1 0x1 DUP7 DUP6 PUSH2 0x2070 JUMP JUMPDEST POP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x141DF868A6331AF528E38C83B7AA03EDC19BE66E37AE67F9285BF4F8E3C6A1A8 DUP12 DUP12 DUP12 DUP12 DUP10 PUSH1 0x40 MLOAD PUSH2 0x15DE SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2F6A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x1 EQ DUP1 PUSH2 0x1612 JUMPI POP PUSH2 0x1612 DUP5 PUSH2 0xC72 JUMP JUMPDEST PUSH2 0x1646 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753313035 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x0 DUP4 GT PUSH2 0x167E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x23A998981B PUSH1 0xD9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST DUP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1697 JUMPI PUSH2 0x1697 PUSH2 0x25CB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x16C0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP3 SWAP5 POP SWAP2 AND SWAP2 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1705 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x1 EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1710 JUMPI POP DUP4 DUP2 LT JUMPDEST ISZERO PUSH2 0x176B JUMPI DUP2 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1728 JUMPI PUSH2 0x1728 PUSH2 0x2F54 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SLOAD SWAP1 SWAP2 AND SWAP1 DUP1 PUSH2 0x1763 DUP2 PUSH2 0x2D58 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x16E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x1 EQ PUSH2 0x17A3 JUMPI DUP3 PUSH2 0x1788 PUSH1 0x1 DUP4 PUSH2 0x2F41 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x1798 JUMPI PUSH2 0x1798 PUSH2 0x2F54 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP JUMPDEST DUP1 DUP4 MSTORE POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x17FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x475330333 PUSH1 0xDC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 PUSH1 0x1 SWAP1 SSTORE MLOAD DUP4 SWAP2 PUSH32 0xF2A0EB156472D1440255B0D7C1E19CC07115D1051FE605B0DCE69ACFEC884D9C SWAP2 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1858 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 PUSH2 0x1C83 JUMP JUMPDEST DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1878 PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x189A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x1 EQ ISZERO JUMPDEST PUSH2 0x18CE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753313031 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 AND SWAP1 DUP3 AND EQ PUSH2 0x1922 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753313033 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD DUP8 DUP7 AND DUP5 MSTORE DUP3 DUP5 KECCAK256 DUP1 SLOAD SWAP2 SWAP1 SWAP7 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP6 SSTORE DUP4 DUP4 MSTORE DUP1 SLOAD SWAP1 SWAP5 AND SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 SWAP2 PUSH32 0xAAB4FA2B463F581B2B32CB3B7E3B704B9CE37CC209B5FB4D77E593ACE4054276 SWAP2 LOG2 POP POP JUMP JUMPDEST PUSH2 0x199A PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x1A4C JUMPI PUSH1 0x40 MLOAD PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH4 0x736BD41D PUSH1 0xE1 SHL PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x1FFC9A7 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x19F4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A18 SWAP2 SWAP1 PUSH2 0x2FD6 JUMP JUMPDEST PUSH2 0x1A4C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x475333303 PUSH1 0xDC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH32 0x4A204F620C8C5CCDCA3FD54D003BADD85BA500436A431F0CBDA4F558C93C34C8 DUP2 DUP2 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0x1151116914515BC0891FF9047A6CB32CF902546F83066499BCF8BA33D2353FA2 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x1AB0 PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1AD2 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x1 EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1AE7 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ADDRESS EQ ISZERO JUMPDEST PUSH2 0x1B03 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D6 SWAP1 PUSH2 0x2D04 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND ISZERO PUSH2 0x1B3B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D6 SWAP1 PUSH2 0x2D23 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1B5D JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x1 EQ ISZERO JUMPDEST PUSH2 0x1B79 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D6 SWAP1 PUSH2 0x2D04 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 AND SWAP1 DUP4 AND EQ PUSH2 0x1BCD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753323035 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD DUP7 DUP7 AND DUP1 DUP6 MSTORE DUP4 DUP6 KECCAK256 DUP1 SLOAD SWAP3 DUP9 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP4 DUP5 AND OR SWAP1 SSTORE SWAP6 DUP10 AND DUP5 MSTORE DUP3 DUP5 KECCAK256 DUP1 SLOAD DUP3 AND SWAP1 SWAP7 OR SWAP1 SWAP6 SSTORE DUP4 DUP4 MSTORE DUP1 SLOAD SWAP1 SWAP5 AND SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 SWAP2 PUSH32 0xF8D49FC529812E9A7C5C50E69C20F0DCCC0DB8FA95C98BC58CC9A4F1C1299EAF SWAP2 LOG2 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0x9465FA0C962CC76958E6373A993326400C1C94F8BE2FE3A952ADFA7F60B2EA26 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH32 0xBB8310D486368DB6BD6F849402FDD73AD53D316B5A4B2644AD6EFE0F941286D8 PUSH1 0x0 SHL DUP14 DUP14 DUP14 DUP14 PUSH1 0x40 MLOAD PUSH2 0x1CBD SWAP3 SWAP2 SWAP1 PUSH2 0x2FF8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB DUP2 KECCAK256 PUSH2 0x1CE3 SWAP5 SWAP4 SWAP3 SWAP2 DUP15 SWAP1 DUP15 SWAP1 DUP15 SWAP1 DUP15 SWAP1 DUP15 SWAP1 DUP15 SWAP1 DUP15 SWAP1 PUSH1 0x20 ADD PUSH2 0x3008 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH1 0x19 PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0xF8 SHL PUSH2 0x1D0F PUSH2 0x1DA4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT SWAP4 DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x21 DUP4 ADD MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x62 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP POP SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1D64 PUSH2 0x1F66 JUMP JUMPDEST PUSH2 0x1D6D DUP2 PUSH2 0x2352 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0x5AC6C46C93C8D0E53714BA3B53DB3E7C046DA994313D7ED0D192028BC7C228B0 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x47E79534A245952E8B16893A336B85A3D9EA9FA8C573F3D803AFB92A79469218 CHAINID PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP3 ADD MSTORE ADDRESS PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1E03 PUSH2 0x1F66 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x3 SLOAD PUSH2 0x1E13 SWAP2 SWAP1 PUSH2 0x2F41 JUMP JUMPDEST LT ISZERO PUSH2 0x1E31 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D6 SWAP1 PUSH2 0x2DF0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1E53 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x1 EQ ISZERO JUMPDEST PUSH2 0x1E6F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D6 SWAP1 PUSH2 0x2D04 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 AND SWAP1 DUP4 AND EQ PUSH2 0x1EC3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753323035 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD DUP9 DUP7 AND DUP5 MSTORE SWAP2 DUP4 KECCAK256 DUP1 SLOAD SWAP3 SWAP1 SWAP6 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP5 SSTORE SWAP2 DUP2 MSTORE DUP3 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x3 DUP1 SLOAD SWAP2 PUSH2 0x1F16 DUP4 PUSH2 0x3077 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0xF8D49FC529812E9A7C5C50E69C20F0DCCC0DB8FA95C98BC58CC9A4F1C1299EAF SWAP1 PUSH1 0x0 SWAP1 LOG2 DUP1 PUSH1 0x4 SLOAD EQ PUSH2 0x1F61 JUMPI PUSH2 0x1F61 DUP2 PUSH2 0xFA9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST CALLER ADDRESS EQ PUSH2 0x1F9D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753303331 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 SUB PUSH2 0x1FB1 JUMPI POP PUSH1 0x0 PUSH2 0xCA7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FBD DUP4 DUP6 PUSH2 0x2DD9 JUMP JUMPDEST SWAP1 POP DUP3 PUSH2 0x1FCA DUP6 DUP4 PUSH2 0x2F1F JUMP JUMPDEST EQ PUSH2 0x1FD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1FE8 DUP4 DUP6 PUSH2 0x2F0C JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x1FD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x200D JUMPI PUSH2 0x200D PUSH2 0x2E0F JUMP JUMPDEST SUB PUSH2 0x2025 JUMPI PUSH1 0x0 DUP1 DUP6 MLOAD PUSH1 0x20 DUP8 ADD DUP10 DUP7 DELEGATECALL SWAP1 POP PUSH2 0x2035 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 MLOAD PUSH1 0x20 DUP8 ADD DUP9 DUP11 DUP8 CALL SWAP1 POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT ISZERO PUSH2 0x204E JUMPI DUP2 PUSH2 0x1FD4 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x2064 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xDB6 DUP4 DUP6 PUSH2 0x2F41 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x2088 JUMPI DUP3 PUSH2 0x208A JUMP JUMPDEST ORIGIN JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x211D JUMPI PUSH2 0x20BC GASPRICE DUP7 LT PUSH2 0x20AA JUMPI GASPRICE PUSH2 0x20AC JUMP JUMPDEST DUP6 JUMPDEST PUSH2 0x20B6 DUP10 DUP10 PUSH2 0x1FDB JUMP JUMPDEST SWAP1 PUSH2 0x1F9F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP4 ISZERO PUSH2 0x8FC MUL SWAP1 DUP5 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP PUSH2 0x2118 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753303131 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH2 0x216C JUMP JUMPDEST PUSH2 0x212B DUP6 PUSH2 0x20B6 DUP10 DUP10 PUSH2 0x1FDB JUMP JUMPDEST SWAP2 POP PUSH2 0x2138 DUP5 DUP3 DUP5 PUSH2 0x24E8 JUMP JUMPDEST PUSH2 0x216C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x23A9981899 PUSH1 0xD9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD ISZERO PUSH2 0x21AE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x475332303 PUSH1 0xDC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST DUP2 MLOAD DUP2 GT ISZERO PUSH2 0x21CF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D6 SWAP1 PUSH2 0x2DF0 JUMP JUMPDEST PUSH1 0x1 DUP2 LT ISZERO PUSH2 0x2208 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x23A9991819 PUSH1 0xD9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x231F JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x222A JUMPI PUSH2 0x222A PUSH2 0x2F54 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x2261 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x1 EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x2276 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ADDRESS EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x2294 JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST PUSH2 0x22B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D6 SWAP1 PUSH2 0x2D04 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND ISZERO PUSH2 0x22E8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D6 SWAP1 PUSH2 0x2D23 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP4 DUP3 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE PUSH1 0x1 ADD PUSH2 0x220D JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP1 MLOAD PUSH1 0x3 SSTORE PUSH1 0x4 SSTORE JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x2392 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x475334303 PUSH1 0xDC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH32 0x6C9A6C4A39284E37ED1CF53D337577D14212A4870FB976A4366C693B939918D5 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 MSTORE PUSH1 0x20 MSTORE PUSH32 0xCC69885FDA6BCC1A4ACE058B4A62BF5E179EA78FD58A1CCD71C22CC9B688792F SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x2420 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x475331303 PUSH1 0xDC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH32 0xCC69885FDA6BCC1A4ACE058B4A62BF5E179EA78FD58A1CCD71C22CC9B688792F DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0x7CF JUMPI DUP2 EXTCODESIZE PUSH2 0x24A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x23A9981819 PUSH1 0xD9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH2 0x24B4 DUP3 PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x0 NOT PUSH2 0x1FF7 JUMP JUMPDEST PUSH2 0x7CF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x475330303 PUSH1 0xDC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR DUP2 MSTORE DUP3 MLOAD PUSH1 0x0 SWAP4 SWAP3 SWAP2 DUP5 SWAP2 SWAP1 DUP3 DUP10 PUSH2 0x2710 GAS SUB CALL RETURNDATASIZE DUP1 ISZERO PUSH2 0x255A JUMPI PUSH1 0x20 DUP2 EQ PUSH2 0x2562 JUMPI PUSH1 0x0 SWAP4 POP PUSH2 0x256D JUMP JUMPDEST DUP2 SWAP4 POP PUSH2 0x256D JUMP JUMPDEST PUSH1 0x0 MLOAD ISZERO DUP3 ISZERO OR ISZERO SWAP4 POP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x258C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x259A DUP2 PUSH2 0x2577 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x25B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x25BD DUP2 PUSH2 0x2577 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x25F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x260D JUMPI PUSH2 0x260D PUSH2 0x25CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x2635 JUMPI PUSH2 0x2635 PUSH2 0x25CB JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x264E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2684 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x26A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x26AF DUP9 DUP4 DUP10 ADD PUSH2 0x25E1 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x26C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D2 DUP8 DUP3 DUP9 ADD PUSH2 0x25E1 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1FD4 DUP2 PUSH2 0x2577 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x2 DUP2 LT PUSH2 0x259A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2725 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x2730 DUP2 PUSH2 0x2577 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2753 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x275F DUP8 DUP3 DUP9 ADD PUSH2 0x25E1 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x276E PUSH1 0x60 DUP7 ADD PUSH2 0x2700 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x279F JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x2783 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xDB6 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2779 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x27ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1FD4 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2779 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2821 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x283A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2852 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x286A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x140 DUP13 DUP15 SUB SLT ISZERO PUSH2 0x2893 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x289C DUP13 PUSH2 0x258F JUMP JUMPDEST SWAP11 POP PUSH1 0x20 DUP13 ADD CALLDATALOAD SWAP10 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP1 PUSH1 0x40 DUP15 ADD CALLDATALOAD GT ISZERO PUSH2 0x28BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x28CF DUP15 PUSH1 0x40 DUP16 ADD CALLDATALOAD DUP16 ADD PUSH2 0x2828 JUMP JUMPDEST SWAP1 SWAP11 POP SWAP9 POP PUSH2 0x28E0 PUSH1 0x60 DUP15 ADD PUSH2 0x2700 JUMP JUMPDEST SWAP8 POP PUSH1 0x80 DUP14 ADD CALLDATALOAD SWAP7 POP PUSH1 0xA0 DUP14 ADD CALLDATALOAD SWAP6 POP PUSH1 0xC0 DUP14 ADD CALLDATALOAD SWAP5 POP PUSH2 0x2903 PUSH1 0xE0 DUP15 ADD PUSH2 0x258F JUMP JUMPDEST SWAP4 POP PUSH2 0x2912 PUSH2 0x100 DUP15 ADD PUSH2 0x258F JUMP JUMPDEST SWAP3 POP DUP1 PUSH2 0x120 DUP15 ADD CALLDATALOAD GT ISZERO PUSH2 0x2926 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2938 DUP14 PUSH2 0x120 DUP15 ADD CALLDATALOAD DUP15 ADD PUSH2 0x25E1 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP1 SWAP4 SWAP7 SWAP10 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x295F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x297E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x298A DUP8 DUP4 DUP9 ADD PUSH2 0x25E1 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x29A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29AD DUP7 DUP3 DUP8 ADD PUSH2 0x25E1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x29F1 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x29CC JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1FD4 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x29B7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2A22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2A2D DUP2 PUSH2 0x2577 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A55 DUP6 DUP3 DUP7 ADD PUSH2 0x25E1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP12 DUP14 SUB SLT ISZERO PUSH2 0x2A7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP11 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2A97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP14 ADD SWAP2 POP DUP14 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2AAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x2ABA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP15 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x2ACF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 DUP2 ADD SWAP14 POP SWAP1 SWAP12 POP DUP14 ADD CALLDATALOAD SWAP10 POP PUSH2 0x2AEA PUSH1 0x40 DUP15 ADD PUSH2 0x258F JUMP JUMPDEST SWAP9 POP PUSH1 0x60 DUP14 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2B00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B0D DUP14 DUP3 DUP15 ADD PUSH2 0x2828 JUMP JUMPDEST SWAP1 SWAP8 POP SWAP6 POP PUSH2 0x2B20 SWAP1 POP PUSH1 0x80 DUP13 ADD PUSH2 0x258F JUMP JUMPDEST SWAP4 POP PUSH2 0x2B2E PUSH1 0xA0 DUP13 ADD PUSH2 0x258F JUMP JUMPDEST SWAP3 POP PUSH1 0xC0 DUP12 ADD CALLDATALOAD SWAP2 POP PUSH2 0x2B43 PUSH1 0xE0 DUP13 ADD PUSH2 0x258F JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP2 SWAP5 SWAP8 SWAP11 POP SWAP3 SWAP6 SWAP9 POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2B67 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x29B7 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x140 DUP13 DUP15 SUB SLT ISZERO PUSH2 0x2BA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP12 CALLDATALOAD PUSH2 0x2BAB DUP2 PUSH2 0x2577 JUMP JUMPDEST SWAP11 POP PUSH1 0x20 DUP13 ADD CALLDATALOAD SWAP10 POP PUSH1 0x40 DUP13 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2BCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2BDA DUP15 DUP3 DUP16 ADD PUSH2 0x2828 JUMP JUMPDEST SWAP1 SWAP11 POP SWAP9 POP PUSH2 0x2BED SWAP1 POP PUSH1 0x60 DUP14 ADD PUSH2 0x2700 JUMP JUMPDEST SWAP7 POP PUSH1 0x80 DUP13 ADD CALLDATALOAD SWAP6 POP PUSH1 0xA0 DUP13 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 DUP13 ADD CALLDATALOAD SWAP4 POP PUSH1 0xE0 DUP13 ADD CALLDATALOAD PUSH2 0x2C12 DUP2 PUSH2 0x2577 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 DUP13 ADD CALLDATALOAD PUSH2 0x2C23 DUP2 PUSH2 0x2577 JUMP JUMPDEST DUP1 SWAP3 POP POP PUSH2 0x120 DUP13 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP1 SWAP4 SWAP7 SWAP10 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2C52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2C5D DUP2 PUSH2 0x2577 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2C6D DUP2 PUSH2 0x2577 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2C8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2C98 DUP2 PUSH2 0x2577 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x2CA8 DUP2 PUSH2 0x2577 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x2CB8 DUP2 PUSH2 0x2577 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2CD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2CE3 DUP2 PUSH2 0x2577 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x2CF3 DUP2 PUSH2 0x2577 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x5 SWAP1 DUP3 ADD MSTORE PUSH5 0x4753323033 PUSH1 0xD8 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x5 SWAP1 DUP3 ADD MSTORE PUSH5 0x11D4CC8C0D PUSH1 0xDA SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2D6A JUMPI PUSH2 0x2D6A PUSH2 0x2D42 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2D84 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2779 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2035 DUP2 DUP6 PUSH2 0x2779 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2DA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1FD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xFF DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP2 GT ISZERO PUSH2 0xCA7 JUMPI PUSH2 0xCA7 PUSH2 0x2D42 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0xCA7 JUMPI PUSH2 0xCA7 PUSH2 0x2D42 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x5 SWAP1 DUP3 ADD MSTORE PUSH5 0x4753323031 PUSH1 0xD8 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0x2E43 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP13 SWAP1 MSTORE PUSH2 0x160 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x0 PUSH2 0x180 DUP12 DUP14 DUP3 DUP6 ADD CALLDATACOPY PUSH1 0x0 DUP4 DUP14 ADD DUP3 ADD MSTORE PUSH1 0x1F DUP13 ADD PUSH1 0x1F NOT AND DUP4 ADD PUSH2 0x2E93 PUSH1 0x60 DUP6 ADD DUP14 PUSH2 0x2E25 JUMP JUMPDEST DUP11 PUSH1 0x80 DUP6 ADD MSTORE DUP10 PUSH1 0xA0 DUP6 ADD MSTORE DUP9 PUSH1 0xC0 DUP6 ADD MSTORE PUSH2 0x2EBA PUSH1 0xE0 DUP6 ADD DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH2 0x100 DUP6 ADD MSTORE DUP2 DUP5 DUP3 SUB ADD PUSH2 0x120 DUP6 ADD MSTORE PUSH2 0x2EE1 DUP3 DUP3 ADD DUP8 PUSH2 0x2779 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x2EFB PUSH2 0x140 DUP4 ADD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0xCA7 JUMPI PUSH2 0xCA7 PUSH2 0x2D42 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2F3C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0xCA7 JUMPI PUSH2 0xCA7 PUSH2 0x2D42 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 DUP1 DUP3 MSTORE DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 DUP7 PUSH1 0xA0 DUP4 ADD DUP3 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x2FAD JUMPI DUP3 CALLDATALOAD PUSH2 0x2F90 DUP2 PUSH2 0x2577 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2F7D JUMP JUMPDEST POP PUSH1 0x20 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2FE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1FD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST DUP12 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD DUP12 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP11 SWAP1 MSTORE PUSH2 0x160 DUP3 ADD SWAP1 PUSH2 0x303C PUSH1 0x80 DUP5 ADD DUP12 PUSH2 0x2E25 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD SWAP9 SWAP1 SWAP9 MSTORE PUSH1 0xC0 DUP3 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0xE0 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP2 DUP6 AND PUSH2 0x100 DUP5 ADD MSTORE SWAP1 SWAP4 AND PUSH2 0x120 DUP3 ADD MSTORE PUSH2 0x140 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x3086 JUMPI PUSH2 0x3086 PUSH2 0x2D42 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 COINBASE 0xBB SELFDESTRUCT PUSH3 0x830549 OR PC 0xE8 0x4F PUSH0 PUSH27 0x394E7F6461AA9942D70DBE77CE44D1094C2464736F6C6343000817 STOP CALLER ","sourceMap":"1919:19946:8:-:0;;;3700:271;;;;;;;;;-1:-1:-1;3963:1:8;3951:9;:13;1919:19946;;;;;;"},"deployedBytecode":{"functionDebugData":{"@VERSION_978":{"entryPoint":null,"id":978,"parameterSlots":0,"returnSlots":0},"@_1947":{"entryPoint":null,"id":1947,"parameterSlots":0,"returnSlots":0},"@_3044":{"entryPoint":null,"id":3044,"parameterSlots":0,"returnSlots":0},"@addOwnerWithThreshold_2725":{"entryPoint":1659,"id":2725,"parameterSlots":2,"returnSlots":0},"@add_3260":{"entryPoint":8155,"id":3260,"parameterSlots":2,"returnSlots":1},"@approveHash_1715":{"entryPoint":6062,"id":1715,"parameterSlots":1,"returnSlots":0},"@approvedHashes_1033":{"entryPoint":null,"id":1033,"parameterSlots":0,"returnSlots":0},"@changeThreshold_2933":{"entryPoint":4009,"id":2933,"parameterSlots":1,"returnSlots":0},"@checkNSignatures_1680":{"entryPoint":2003,"id":1680,"parameterSlots":4,"returnSlots":0},"@checkSignatures_1430":{"entryPoint":5010,"id":1430,"parameterSlots":3,"returnSlots":0},"@disableModule_2280":{"entryPoint":6256,"id":2280,"parameterSlots":2,"returnSlots":0},"@domainSeparator_1745":{"entryPoint":7588,"id":1745,"parameterSlots":0,"returnSlots":1},"@enableModule_2225":{"entryPoint":3696,"id":2225,"parameterSlots":1,"returnSlots":0},"@encodeTransactionData_1809":{"entryPoint":7299,"id":1809,"parameterSlots":11,"returnSlots":1},"@execTransactionFromModuleReturnData_2368":{"entryPoint":3518,"id":2368,"parameterSlots":4,"returnSlots":2},"@execTransactionFromModule_2340":{"entryPoint":3301,"id":2340,"parameterSlots":4,"returnSlots":1},"@execTransaction_1315":{"entryPoint":4167,"id":1315,"parameterSlots":11,"returnSlots":1},"@execute_1885":{"entryPoint":8183,"id":1885,"parameterSlots":5,"returnSlots":1},"@getChainId_1728":{"entryPoint":null,"id":1728,"parameterSlots":0,"returnSlots":1},"@getGuard_2076":{"entryPoint":null,"id":2076,"parameterSlots":0,"returnSlots":1},"@getModulesPaginated_2485":{"entryPoint":5618,"id":2485,"parameterSlots":2,"returnSlots":2},"@getOwners_3015":{"entryPoint":5084,"id":3015,"parameterSlots":0,"returnSlots":1},"@getStorageAt_3162":{"entryPoint":3572,"id":3162,"parameterSlots":2,"returnSlots":1},"@getThreshold_2942":{"entryPoint":null,"id":2942,"parameterSlots":0,"returnSlots":1},"@getTransactionHash_1852":{"entryPoint":6211,"id":1852,"parameterSlots":11,"returnSlots":1},"@handlePayment_1401":{"entryPoint":8304,"id":1401,"parameterSlots":5,"returnSlots":1},"@internalSetFallbackHandler_1921":{"entryPoint":9042,"id":1921,"parameterSlots":1,"returnSlots":0},"@isContract_2502":{"entryPoint":null,"id":2502,"parameterSlots":1,"returnSlots":1},"@isModuleEnabled_2390":{"entryPoint":3186,"id":2390,"parameterSlots":1,"returnSlots":1},"@isOwner_2964":{"entryPoint":3245,"id":2964,"parameterSlots":1,"returnSlots":1},"@max_3278":{"entryPoint":8254,"id":3278,"parameterSlots":2,"returnSlots":1},"@mul_3210":{"entryPoint":8095,"id":3210,"parameterSlots":2,"returnSlots":1},"@nonce_1021":{"entryPoint":null,"id":1021,"parameterSlots":0,"returnSlots":0},"@removeOwner_2802":{"entryPoint":7675,"id":2802,"parameterSlots":3,"returnSlots":0},"@requireSelfCall_3090":{"entryPoint":8038,"id":3090,"parameterSlots":0,"returnSlots":0},"@setFallbackHandler_1938":{"entryPoint":7516,"id":1938,"parameterSlots":1,"returnSlots":0},"@setGuard_2064":{"entryPoint":6546,"id":2064,"parameterSlots":1,"returnSlots":0},"@setupModules_2172":{"entryPoint":9142,"id":2172,"parameterSlots":2,"returnSlots":0},"@setupOwners_2652":{"entryPoint":8566,"id":2652,"parameterSlots":2,"returnSlots":0},"@setup_1106":{"entryPoint":5360,"id":1106,"parameterSlots":10,"returnSlots":0},"@signatureSplit_3117":{"entryPoint":null,"id":3117,"parameterSlots":2,"returnSlots":3},"@signedMessages_1027":{"entryPoint":null,"id":1027,"parameterSlots":0,"returnSlots":0},"@simulateAndRevert_3172":{"entryPoint":5325,"id":3172,"parameterSlots":2,"returnSlots":0},"@sub_3235":{"entryPoint":8277,"id":3235,"parameterSlots":2,"returnSlots":1},"@swapOwner_2902":{"entryPoint":6824,"id":2902,"parameterSlots":3,"returnSlots":0},"@transferToken_3071":{"entryPoint":9448,"id":3071,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":9615,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bytes":{"entryPoint":9697,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes_calldata":{"entryPoint":10280,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_enum_Operation":{"entryPoint":9984,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":9955,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":11327,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_address":{"entryPoint":11384,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":11459,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_bytes_memory_ptr":{"entryPoint":10767,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":9631,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptrt_enum$_Operation_$3022t_uint256t_uint256t_uint256t_addresst_address_payablet_bytes_memory_ptr":{"entryPoint":10353,"id":null,"parameterSlots":2,"returnSlots":11},"abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptrt_enum$_Operation_$3022t_uint256t_uint256t_uint256t_addresst_addresst_uint256":{"entryPoint":11134,"id":null,"parameterSlots":2,"returnSlots":11},"abi_decode_tuple_t_addresst_uint256t_bytes_memory_ptrt_enum$_Operation_$3022":{"entryPoint":9999,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_uint256t_addresst_bytes_calldata_ptrt_addresst_addresst_uint256t_address_payable":{"entryPoint":10847,"id":null,"parameterSlots":2,"returnSlots":10},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":12246,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":10255,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_bytes_memory_ptrt_bytes_memory_ptr":{"entryPoint":10570,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_bytes_memory_ptrt_bytes_memory_ptrt_uint256":{"entryPoint":9838,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":11670,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":10202,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_array_address_dyn":{"entryPoint":10679,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes":{"entryPoint":10105,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_enum_Operation":{"entryPoint":11813,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_bytes1_t_bytes1_t_bytes32_t_bytes32__to_t_bytes1_t_bytes1_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":12280,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73_t_bytes32__to_t_string_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_bytes_calldata_ptr_t_enum$_Operation_$3022_t_uint256_t_uint256_t_uint256_t_address_t_address_payable_t_bytes_memory_ptr_t_address__to_t_address_t_uint256_t_bytes_memory_ptr_t_uint8_t_uint256_t_uint256_t_uint256_t_address_t_address_payable_t_bytes_memory_ptr_t_address__fromStack_reversed":{"entryPoint":11847,"id":null,"parameterSlots":13,"returnSlots":1},"abi_encode_tuple_t_array$_t_address_$dyn_calldata_ptr_t_uint256_t_address_t_address__to_t_array$_t_address_$dyn_memory_ptr_t_uint256_t_address_t_address__fromStack_reversed":{"entryPoint":12138,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":10748,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_address__to_t_array$_t_address_$dyn_memory_ptr_t_address__fromStack_reversed":{"entryPoint":11092,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":10175,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_uint256_t_bytes32_t_enum$_Operation_$3022_t_uint256_t_uint256_t_uint256_t_address_t_address_t_uint256__to_t_bytes32_t_address_t_uint256_t_bytes32_t_uint8_t_uint256_t_uint256_t_uint256_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":12296,"id":null,"parameterSlots":12,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bool__to_t_bytes32_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256_t_contract$_Safe_$1853__to_t_bytes32_t_uint256_t_address_payable__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":10236,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":11633,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_00aecc0fa22d38afc0f465808a9fee188ba139fb53b2ca550ea01d91d6ecf29f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_14032cc06a7a2043c1b961d6b7d6cbfaea1511224ce5ca723af49fa68e55c159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1d9dfad0f7e80ccb3a898324566cbd9ed8451678d229622c4c1b5f1f19330139__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_21e9127eafd366d4171d9c7f3375ca996507e4dd231bd2c13b243a626f992d4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_26b7fa7d947085035b53de5c25693e568c405e1e894ad22389a1528045f35ba8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2ed3cfd606bc0ca63de16ac40539251d9539eb77db0a0d075dd487d4cf1c74c7__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11760,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_372498b513e17609439d064ce0277017b054c808f722c83ff57cee4e06a9e457__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3a328c389014707497c45ecba7527a678d30fabfd6868fe8bade352062f7774b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3be12fd8170783d77e95b898996a64d9da524b4d1491db467a4cf43987cf214d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3d415fb64f163720f719509288c33af2675ad2c80f86a95800d94f19c802a300__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11524,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3fdb21530a98d914fa570cd548d7a3608c11195b5a11ec44ecd149309d9dcced__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4353e9bcd8ea99b4d56990ac4b8777f1ab67cada8356790f30e482f2408a44b0__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6815e8af672f0836acc6449b9d3a4cb88965a5b47ac95c5e5335f73ab586c8d0__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_71cf63766ccc857998a36e6f1707e507e2e8921214ba4b8df65713cc885a8888__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7295c339622429fbd8194417b44c0a2c972675caa6bf424cf588d99024c608be__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_74edef16877c9a34a97f281dbea2805f9198008e7df330ab6416449a66143b07__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8c9c6f726a0896ef73f47c5bcc7192641db350a8b0b2e1f61e0f0c694ec59426__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_93293a4a2e4cde533ea81b8912d8934c2d7892ceb975e9ad2c25f4abf449a730__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_99333b4627cde46d9c53d7148b33b8b1f4f065f5dceb2cb210893e67e551978e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9d970fd9adbe3047cd5b7a20406b6bf2e613338cfe3a19aca4ca1810b67fad10__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a5f8340ff5526fa73c9197322cd5a1c742b87b5fdfeb41a9c278b80dab01159b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b44c13dad2cf265cdd10f957c112238232519dfdaff7245a6824a63db294cf23__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b7248be3e8887f14d79f63d350787adcdb5e12b47898ebd6ef2aacf660fc9f17__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_bc2491dc7fc5c71a630e01bcb9c3e39f61f559ab54f6528d2adb67d65ed9ff6b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_bd322b68614692ef7b503763b6ccedf066a7ae3f91196a908df3c549d078f597__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11555,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_bfe16ebc2bd5d2fdfe588255b31e648718f9ede037848519acb772cd4f042f12__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c2a4c0da6073a4ef35f113e24388fa780c351ad02fefd784ffba62884174edf0__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d153a9d5a0d4e2c2b7d4e887f02c1da6287d6d54f20f4d8ce40382a23140787a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_eab5e6af6960e6bb32b59bfd1d877c9c1728e4c18fa7a83eb40baa1c0f05f61f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f27dba96666375fe844b71e8ea4f388db2ce9f87fa9882d36a17036a7478b232__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f31aea2d758c1bc976ea4b6db8005af34a1f6d8fd0cba0d31e0228d78d6a5ae2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f86d3c4b40d399421f213105cf28bb5b688028c0e3d9bd9eb6f879f0bebe6c39__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":12044,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":12063,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":11737,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":12097,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint8":{"entryPoint":11712,"id":null,"parameterSlots":2,"returnSlots":1},"decrement_t_uint256":{"entryPoint":12407,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":11608,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":11586,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":11791,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":12116,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":9675,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":9591,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:33028:40","nodeType":"YulBlock","src":"0:33028:40","statements":[{"nativeSrc":"6:3:40","nodeType":"YulBlock","src":"6:3:40","statements":[]},{"body":{"nativeSrc":"115:76:40","nodeType":"YulBlock","src":"115:76:40","statements":[{"nativeSrc":"125:26:40","nodeType":"YulAssignment","src":"125:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"137:9:40","nodeType":"YulIdentifier","src":"137:9:40"},{"kind":"number","nativeSrc":"148:2:40","nodeType":"YulLiteral","src":"148:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"133:3:40","nodeType":"YulIdentifier","src":"133:3:40"},"nativeSrc":"133:18:40","nodeType":"YulFunctionCall","src":"133:18:40"},"variableNames":[{"name":"tail","nativeSrc":"125:4:40","nodeType":"YulIdentifier","src":"125:4:40"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"167:9:40","nodeType":"YulIdentifier","src":"167:9:40"},{"name":"value0","nativeSrc":"178:6:40","nodeType":"YulIdentifier","src":"178:6:40"}],"functionName":{"name":"mstore","nativeSrc":"160:6:40","nodeType":"YulIdentifier","src":"160:6:40"},"nativeSrc":"160:25:40","nodeType":"YulFunctionCall","src":"160:25:40"},"nativeSrc":"160:25:40","nodeType":"YulExpressionStatement","src":"160:25:40"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"14:177:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"84:9:40","nodeType":"YulTypedName","src":"84:9:40","type":""},{"name":"value0","nativeSrc":"95:6:40","nodeType":"YulTypedName","src":"95:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"106:4:40","nodeType":"YulTypedName","src":"106:4:40","type":""}],"src":"14:177:40"},{"body":{"nativeSrc":"241:86:40","nodeType":"YulBlock","src":"241:86:40","statements":[{"body":{"nativeSrc":"305:16:40","nodeType":"YulBlock","src":"305:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"314:1:40","nodeType":"YulLiteral","src":"314:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"317:1:40","nodeType":"YulLiteral","src":"317:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"307:6:40","nodeType":"YulIdentifier","src":"307:6:40"},"nativeSrc":"307:12:40","nodeType":"YulFunctionCall","src":"307:12:40"},"nativeSrc":"307:12:40","nodeType":"YulExpressionStatement","src":"307:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"264:5:40","nodeType":"YulIdentifier","src":"264:5:40"},{"arguments":[{"name":"value","nativeSrc":"275:5:40","nodeType":"YulIdentifier","src":"275:5:40"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"290:3:40","nodeType":"YulLiteral","src":"290:3:40","type":"","value":"160"},{"kind":"number","nativeSrc":"295:1:40","nodeType":"YulLiteral","src":"295:1:40","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"286:3:40","nodeType":"YulIdentifier","src":"286:3:40"},"nativeSrc":"286:11:40","nodeType":"YulFunctionCall","src":"286:11:40"},{"kind":"number","nativeSrc":"299:1:40","nodeType":"YulLiteral","src":"299:1:40","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"282:3:40","nodeType":"YulIdentifier","src":"282:3:40"},"nativeSrc":"282:19:40","nodeType":"YulFunctionCall","src":"282:19:40"}],"functionName":{"name":"and","nativeSrc":"271:3:40","nodeType":"YulIdentifier","src":"271:3:40"},"nativeSrc":"271:31:40","nodeType":"YulFunctionCall","src":"271:31:40"}],"functionName":{"name":"eq","nativeSrc":"261:2:40","nodeType":"YulIdentifier","src":"261:2:40"},"nativeSrc":"261:42:40","nodeType":"YulFunctionCall","src":"261:42:40"}],"functionName":{"name":"iszero","nativeSrc":"254:6:40","nodeType":"YulIdentifier","src":"254:6:40"},"nativeSrc":"254:50:40","nodeType":"YulFunctionCall","src":"254:50:40"},"nativeSrc":"251:70:40","nodeType":"YulIf","src":"251:70:40"}]},"name":"validator_revert_address","nativeSrc":"196:131:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"230:5:40","nodeType":"YulTypedName","src":"230:5:40","type":""}],"src":"196:131:40"},{"body":{"nativeSrc":"381:85:40","nodeType":"YulBlock","src":"381:85:40","statements":[{"nativeSrc":"391:29:40","nodeType":"YulAssignment","src":"391:29:40","value":{"arguments":[{"name":"offset","nativeSrc":"413:6:40","nodeType":"YulIdentifier","src":"413:6:40"}],"functionName":{"name":"calldataload","nativeSrc":"400:12:40","nodeType":"YulIdentifier","src":"400:12:40"},"nativeSrc":"400:20:40","nodeType":"YulFunctionCall","src":"400:20:40"},"variableNames":[{"name":"value","nativeSrc":"391:5:40","nodeType":"YulIdentifier","src":"391:5:40"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"454:5:40","nodeType":"YulIdentifier","src":"454:5:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"429:24:40","nodeType":"YulIdentifier","src":"429:24:40"},"nativeSrc":"429:31:40","nodeType":"YulFunctionCall","src":"429:31:40"},"nativeSrc":"429:31:40","nodeType":"YulExpressionStatement","src":"429:31:40"}]},"name":"abi_decode_address","nativeSrc":"332:134:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"360:6:40","nodeType":"YulTypedName","src":"360:6:40","type":""}],"returnVariables":[{"name":"value","nativeSrc":"371:5:40","nodeType":"YulTypedName","src":"371:5:40","type":""}],"src":"332:134:40"},{"body":{"nativeSrc":"558:228:40","nodeType":"YulBlock","src":"558:228:40","statements":[{"body":{"nativeSrc":"604:16:40","nodeType":"YulBlock","src":"604:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"613:1:40","nodeType":"YulLiteral","src":"613:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"616:1:40","nodeType":"YulLiteral","src":"616:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"606:6:40","nodeType":"YulIdentifier","src":"606:6:40"},"nativeSrc":"606:12:40","nodeType":"YulFunctionCall","src":"606:12:40"},"nativeSrc":"606:12:40","nodeType":"YulExpressionStatement","src":"606:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"579:7:40","nodeType":"YulIdentifier","src":"579:7:40"},{"name":"headStart","nativeSrc":"588:9:40","nodeType":"YulIdentifier","src":"588:9:40"}],"functionName":{"name":"sub","nativeSrc":"575:3:40","nodeType":"YulIdentifier","src":"575:3:40"},"nativeSrc":"575:23:40","nodeType":"YulFunctionCall","src":"575:23:40"},{"kind":"number","nativeSrc":"600:2:40","nodeType":"YulLiteral","src":"600:2:40","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"571:3:40","nodeType":"YulIdentifier","src":"571:3:40"},"nativeSrc":"571:32:40","nodeType":"YulFunctionCall","src":"571:32:40"},"nativeSrc":"568:52:40","nodeType":"YulIf","src":"568:52:40"},{"nativeSrc":"629:36:40","nodeType":"YulVariableDeclaration","src":"629:36:40","value":{"arguments":[{"name":"headStart","nativeSrc":"655:9:40","nodeType":"YulIdentifier","src":"655:9:40"}],"functionName":{"name":"calldataload","nativeSrc":"642:12:40","nodeType":"YulIdentifier","src":"642:12:40"},"nativeSrc":"642:23:40","nodeType":"YulFunctionCall","src":"642:23:40"},"variables":[{"name":"value","nativeSrc":"633:5:40","nodeType":"YulTypedName","src":"633:5:40","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"699:5:40","nodeType":"YulIdentifier","src":"699:5:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"674:24:40","nodeType":"YulIdentifier","src":"674:24:40"},"nativeSrc":"674:31:40","nodeType":"YulFunctionCall","src":"674:31:40"},"nativeSrc":"674:31:40","nodeType":"YulExpressionStatement","src":"674:31:40"},{"nativeSrc":"714:15:40","nodeType":"YulAssignment","src":"714:15:40","value":{"name":"value","nativeSrc":"724:5:40","nodeType":"YulIdentifier","src":"724:5:40"},"variableNames":[{"name":"value0","nativeSrc":"714:6:40","nodeType":"YulIdentifier","src":"714:6:40"}]},{"nativeSrc":"738:42:40","nodeType":"YulAssignment","src":"738:42:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"765:9:40","nodeType":"YulIdentifier","src":"765:9:40"},{"kind":"number","nativeSrc":"776:2:40","nodeType":"YulLiteral","src":"776:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"761:3:40","nodeType":"YulIdentifier","src":"761:3:40"},"nativeSrc":"761:18:40","nodeType":"YulFunctionCall","src":"761:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"748:12:40","nodeType":"YulIdentifier","src":"748:12:40"},"nativeSrc":"748:32:40","nodeType":"YulFunctionCall","src":"748:32:40"},"variableNames":[{"name":"value1","nativeSrc":"738:6:40","nodeType":"YulIdentifier","src":"738:6:40"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nativeSrc":"471:315:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"516:9:40","nodeType":"YulTypedName","src":"516:9:40","type":""},{"name":"dataEnd","nativeSrc":"527:7:40","nodeType":"YulTypedName","src":"527:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"539:6:40","nodeType":"YulTypedName","src":"539:6:40","type":""},{"name":"value1","nativeSrc":"547:6:40","nodeType":"YulTypedName","src":"547:6:40","type":""}],"src":"471:315:40"},{"body":{"nativeSrc":"823:95:40","nodeType":"YulBlock","src":"823:95:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"840:1:40","nodeType":"YulLiteral","src":"840:1:40","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"847:3:40","nodeType":"YulLiteral","src":"847:3:40","type":"","value":"224"},{"kind":"number","nativeSrc":"852:10:40","nodeType":"YulLiteral","src":"852:10:40","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"843:3:40","nodeType":"YulIdentifier","src":"843:3:40"},"nativeSrc":"843:20:40","nodeType":"YulFunctionCall","src":"843:20:40"}],"functionName":{"name":"mstore","nativeSrc":"833:6:40","nodeType":"YulIdentifier","src":"833:6:40"},"nativeSrc":"833:31:40","nodeType":"YulFunctionCall","src":"833:31:40"},"nativeSrc":"833:31:40","nodeType":"YulExpressionStatement","src":"833:31:40"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"880:1:40","nodeType":"YulLiteral","src":"880:1:40","type":"","value":"4"},{"kind":"number","nativeSrc":"883:4:40","nodeType":"YulLiteral","src":"883:4:40","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"873:6:40","nodeType":"YulIdentifier","src":"873:6:40"},"nativeSrc":"873:15:40","nodeType":"YulFunctionCall","src":"873:15:40"},"nativeSrc":"873:15:40","nodeType":"YulExpressionStatement","src":"873:15:40"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"904:1:40","nodeType":"YulLiteral","src":"904:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"907:4:40","nodeType":"YulLiteral","src":"907:4:40","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"897:6:40","nodeType":"YulIdentifier","src":"897:6:40"},"nativeSrc":"897:15:40","nodeType":"YulFunctionCall","src":"897:15:40"},"nativeSrc":"897:15:40","nodeType":"YulExpressionStatement","src":"897:15:40"}]},"name":"panic_error_0x41","nativeSrc":"791:127:40","nodeType":"YulFunctionDefinition","src":"791:127:40"},{"body":{"nativeSrc":"975:666:40","nodeType":"YulBlock","src":"975:666:40","statements":[{"body":{"nativeSrc":"1024:16:40","nodeType":"YulBlock","src":"1024:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1033:1:40","nodeType":"YulLiteral","src":"1033:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"1036:1:40","nodeType":"YulLiteral","src":"1036:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1026:6:40","nodeType":"YulIdentifier","src":"1026:6:40"},"nativeSrc":"1026:12:40","nodeType":"YulFunctionCall","src":"1026:12:40"},"nativeSrc":"1026:12:40","nodeType":"YulExpressionStatement","src":"1026:12:40"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1003:6:40","nodeType":"YulIdentifier","src":"1003:6:40"},{"kind":"number","nativeSrc":"1011:4:40","nodeType":"YulLiteral","src":"1011:4:40","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"999:3:40","nodeType":"YulIdentifier","src":"999:3:40"},"nativeSrc":"999:17:40","nodeType":"YulFunctionCall","src":"999:17:40"},{"name":"end","nativeSrc":"1018:3:40","nodeType":"YulIdentifier","src":"1018:3:40"}],"functionName":{"name":"slt","nativeSrc":"995:3:40","nodeType":"YulIdentifier","src":"995:3:40"},"nativeSrc":"995:27:40","nodeType":"YulFunctionCall","src":"995:27:40"}],"functionName":{"name":"iszero","nativeSrc":"988:6:40","nodeType":"YulIdentifier","src":"988:6:40"},"nativeSrc":"988:35:40","nodeType":"YulFunctionCall","src":"988:35:40"},"nativeSrc":"985:55:40","nodeType":"YulIf","src":"985:55:40"},{"nativeSrc":"1049:30:40","nodeType":"YulVariableDeclaration","src":"1049:30:40","value":{"arguments":[{"name":"offset","nativeSrc":"1072:6:40","nodeType":"YulIdentifier","src":"1072:6:40"}],"functionName":{"name":"calldataload","nativeSrc":"1059:12:40","nodeType":"YulIdentifier","src":"1059:12:40"},"nativeSrc":"1059:20:40","nodeType":"YulFunctionCall","src":"1059:20:40"},"variables":[{"name":"_1","nativeSrc":"1053:2:40","nodeType":"YulTypedName","src":"1053:2:40","type":""}]},{"nativeSrc":"1088:28:40","nodeType":"YulVariableDeclaration","src":"1088:28:40","value":{"kind":"number","nativeSrc":"1098:18:40","nodeType":"YulLiteral","src":"1098:18:40","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nativeSrc":"1092:2:40","nodeType":"YulTypedName","src":"1092:2:40","type":""}]},{"body":{"nativeSrc":"1139:22:40","nodeType":"YulBlock","src":"1139:22:40","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"1141:16:40","nodeType":"YulIdentifier","src":"1141:16:40"},"nativeSrc":"1141:18:40","nodeType":"YulFunctionCall","src":"1141:18:40"},"nativeSrc":"1141:18:40","nodeType":"YulExpressionStatement","src":"1141:18:40"}]},"condition":{"arguments":[{"name":"_1","nativeSrc":"1131:2:40","nodeType":"YulIdentifier","src":"1131:2:40"},{"name":"_2","nativeSrc":"1135:2:40","nodeType":"YulIdentifier","src":"1135:2:40"}],"functionName":{"name":"gt","nativeSrc":"1128:2:40","nodeType":"YulIdentifier","src":"1128:2:40"},"nativeSrc":"1128:10:40","nodeType":"YulFunctionCall","src":"1128:10:40"},"nativeSrc":"1125:36:40","nodeType":"YulIf","src":"1125:36:40"},{"nativeSrc":"1170:17:40","nodeType":"YulVariableDeclaration","src":"1170:17:40","value":{"arguments":[{"kind":"number","nativeSrc":"1184:2:40","nodeType":"YulLiteral","src":"1184:2:40","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"1180:3:40","nodeType":"YulIdentifier","src":"1180:3:40"},"nativeSrc":"1180:7:40","nodeType":"YulFunctionCall","src":"1180:7:40"},"variables":[{"name":"_3","nativeSrc":"1174:2:40","nodeType":"YulTypedName","src":"1174:2:40","type":""}]},{"nativeSrc":"1196:23:40","nodeType":"YulVariableDeclaration","src":"1196:23:40","value":{"arguments":[{"kind":"number","nativeSrc":"1216:2:40","nodeType":"YulLiteral","src":"1216:2:40","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"1210:5:40","nodeType":"YulIdentifier","src":"1210:5:40"},"nativeSrc":"1210:9:40","nodeType":"YulFunctionCall","src":"1210:9:40"},"variables":[{"name":"memPtr","nativeSrc":"1200:6:40","nodeType":"YulTypedName","src":"1200:6:40","type":""}]},{"nativeSrc":"1228:71:40","nodeType":"YulVariableDeclaration","src":"1228:71:40","value":{"arguments":[{"name":"memPtr","nativeSrc":"1250:6:40","nodeType":"YulIdentifier","src":"1250:6:40"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"1274:2:40","nodeType":"YulIdentifier","src":"1274:2:40"},{"kind":"number","nativeSrc":"1278:4:40","nodeType":"YulLiteral","src":"1278:4:40","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"1270:3:40","nodeType":"YulIdentifier","src":"1270:3:40"},"nativeSrc":"1270:13:40","nodeType":"YulFunctionCall","src":"1270:13:40"},{"name":"_3","nativeSrc":"1285:2:40","nodeType":"YulIdentifier","src":"1285:2:40"}],"functionName":{"name":"and","nativeSrc":"1266:3:40","nodeType":"YulIdentifier","src":"1266:3:40"},"nativeSrc":"1266:22:40","nodeType":"YulFunctionCall","src":"1266:22:40"},{"kind":"number","nativeSrc":"1290:2:40","nodeType":"YulLiteral","src":"1290:2:40","type":"","value":"63"}],"functionName":{"name":"add","nativeSrc":"1262:3:40","nodeType":"YulIdentifier","src":"1262:3:40"},"nativeSrc":"1262:31:40","nodeType":"YulFunctionCall","src":"1262:31:40"},{"name":"_3","nativeSrc":"1295:2:40","nodeType":"YulIdentifier","src":"1295:2:40"}],"functionName":{"name":"and","nativeSrc":"1258:3:40","nodeType":"YulIdentifier","src":"1258:3:40"},"nativeSrc":"1258:40:40","nodeType":"YulFunctionCall","src":"1258:40:40"}],"functionName":{"name":"add","nativeSrc":"1246:3:40","nodeType":"YulIdentifier","src":"1246:3:40"},"nativeSrc":"1246:53:40","nodeType":"YulFunctionCall","src":"1246:53:40"},"variables":[{"name":"newFreePtr","nativeSrc":"1232:10:40","nodeType":"YulTypedName","src":"1232:10:40","type":""}]},{"body":{"nativeSrc":"1358:22:40","nodeType":"YulBlock","src":"1358:22:40","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"1360:16:40","nodeType":"YulIdentifier","src":"1360:16:40"},"nativeSrc":"1360:18:40","nodeType":"YulFunctionCall","src":"1360:18:40"},"nativeSrc":"1360:18:40","nodeType":"YulExpressionStatement","src":"1360:18:40"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"1317:10:40","nodeType":"YulIdentifier","src":"1317:10:40"},{"name":"_2","nativeSrc":"1329:2:40","nodeType":"YulIdentifier","src":"1329:2:40"}],"functionName":{"name":"gt","nativeSrc":"1314:2:40","nodeType":"YulIdentifier","src":"1314:2:40"},"nativeSrc":"1314:18:40","nodeType":"YulFunctionCall","src":"1314:18:40"},{"arguments":[{"name":"newFreePtr","nativeSrc":"1337:10:40","nodeType":"YulIdentifier","src":"1337:10:40"},{"name":"memPtr","nativeSrc":"1349:6:40","nodeType":"YulIdentifier","src":"1349:6:40"}],"functionName":{"name":"lt","nativeSrc":"1334:2:40","nodeType":"YulIdentifier","src":"1334:2:40"},"nativeSrc":"1334:22:40","nodeType":"YulFunctionCall","src":"1334:22:40"}],"functionName":{"name":"or","nativeSrc":"1311:2:40","nodeType":"YulIdentifier","src":"1311:2:40"},"nativeSrc":"1311:46:40","nodeType":"YulFunctionCall","src":"1311:46:40"},"nativeSrc":"1308:72:40","nodeType":"YulIf","src":"1308:72:40"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1396:2:40","nodeType":"YulLiteral","src":"1396:2:40","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"1400:10:40","nodeType":"YulIdentifier","src":"1400:10:40"}],"functionName":{"name":"mstore","nativeSrc":"1389:6:40","nodeType":"YulIdentifier","src":"1389:6:40"},"nativeSrc":"1389:22:40","nodeType":"YulFunctionCall","src":"1389:22:40"},"nativeSrc":"1389:22:40","nodeType":"YulExpressionStatement","src":"1389:22:40"},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"1427:6:40","nodeType":"YulIdentifier","src":"1427:6:40"},{"name":"_1","nativeSrc":"1435:2:40","nodeType":"YulIdentifier","src":"1435:2:40"}],"functionName":{"name":"mstore","nativeSrc":"1420:6:40","nodeType":"YulIdentifier","src":"1420:6:40"},"nativeSrc":"1420:18:40","nodeType":"YulFunctionCall","src":"1420:18:40"},"nativeSrc":"1420:18:40","nodeType":"YulExpressionStatement","src":"1420:18:40"},{"body":{"nativeSrc":"1486:16:40","nodeType":"YulBlock","src":"1486:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1495:1:40","nodeType":"YulLiteral","src":"1495:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"1498:1:40","nodeType":"YulLiteral","src":"1498:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1488:6:40","nodeType":"YulIdentifier","src":"1488:6:40"},"nativeSrc":"1488:12:40","nodeType":"YulFunctionCall","src":"1488:12:40"},"nativeSrc":"1488:12:40","nodeType":"YulExpressionStatement","src":"1488:12:40"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1461:6:40","nodeType":"YulIdentifier","src":"1461:6:40"},{"name":"_1","nativeSrc":"1469:2:40","nodeType":"YulIdentifier","src":"1469:2:40"}],"functionName":{"name":"add","nativeSrc":"1457:3:40","nodeType":"YulIdentifier","src":"1457:3:40"},"nativeSrc":"1457:15:40","nodeType":"YulFunctionCall","src":"1457:15:40"},{"kind":"number","nativeSrc":"1474:4:40","nodeType":"YulLiteral","src":"1474:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1453:3:40","nodeType":"YulIdentifier","src":"1453:3:40"},"nativeSrc":"1453:26:40","nodeType":"YulFunctionCall","src":"1453:26:40"},{"name":"end","nativeSrc":"1481:3:40","nodeType":"YulIdentifier","src":"1481:3:40"}],"functionName":{"name":"gt","nativeSrc":"1450:2:40","nodeType":"YulIdentifier","src":"1450:2:40"},"nativeSrc":"1450:35:40","nodeType":"YulFunctionCall","src":"1450:35:40"},"nativeSrc":"1447:55:40","nodeType":"YulIf","src":"1447:55:40"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"1528:6:40","nodeType":"YulIdentifier","src":"1528:6:40"},{"kind":"number","nativeSrc":"1536:4:40","nodeType":"YulLiteral","src":"1536:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1524:3:40","nodeType":"YulIdentifier","src":"1524:3:40"},"nativeSrc":"1524:17:40","nodeType":"YulFunctionCall","src":"1524:17:40"},{"arguments":[{"name":"offset","nativeSrc":"1547:6:40","nodeType":"YulIdentifier","src":"1547:6:40"},{"kind":"number","nativeSrc":"1555:4:40","nodeType":"YulLiteral","src":"1555:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1543:3:40","nodeType":"YulIdentifier","src":"1543:3:40"},"nativeSrc":"1543:17:40","nodeType":"YulFunctionCall","src":"1543:17:40"},{"name":"_1","nativeSrc":"1562:2:40","nodeType":"YulIdentifier","src":"1562:2:40"}],"functionName":{"name":"calldatacopy","nativeSrc":"1511:12:40","nodeType":"YulIdentifier","src":"1511:12:40"},"nativeSrc":"1511:54:40","nodeType":"YulFunctionCall","src":"1511:54:40"},"nativeSrc":"1511:54:40","nodeType":"YulExpressionStatement","src":"1511:54:40"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"1589:6:40","nodeType":"YulIdentifier","src":"1589:6:40"},{"name":"_1","nativeSrc":"1597:2:40","nodeType":"YulIdentifier","src":"1597:2:40"}],"functionName":{"name":"add","nativeSrc":"1585:3:40","nodeType":"YulIdentifier","src":"1585:3:40"},"nativeSrc":"1585:15:40","nodeType":"YulFunctionCall","src":"1585:15:40"},{"kind":"number","nativeSrc":"1602:4:40","nodeType":"YulLiteral","src":"1602:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1581:3:40","nodeType":"YulIdentifier","src":"1581:3:40"},"nativeSrc":"1581:26:40","nodeType":"YulFunctionCall","src":"1581:26:40"},{"kind":"number","nativeSrc":"1609:1:40","nodeType":"YulLiteral","src":"1609:1:40","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"1574:6:40","nodeType":"YulIdentifier","src":"1574:6:40"},"nativeSrc":"1574:37:40","nodeType":"YulFunctionCall","src":"1574:37:40"},"nativeSrc":"1574:37:40","nodeType":"YulExpressionStatement","src":"1574:37:40"},{"nativeSrc":"1620:15:40","nodeType":"YulAssignment","src":"1620:15:40","value":{"name":"memPtr","nativeSrc":"1629:6:40","nodeType":"YulIdentifier","src":"1629:6:40"},"variableNames":[{"name":"array","nativeSrc":"1620:5:40","nodeType":"YulIdentifier","src":"1620:5:40"}]}]},"name":"abi_decode_bytes","nativeSrc":"923:718:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"949:6:40","nodeType":"YulTypedName","src":"949:6:40","type":""},{"name":"end","nativeSrc":"957:3:40","nodeType":"YulTypedName","src":"957:3:40","type":""}],"returnVariables":[{"name":"array","nativeSrc":"965:5:40","nodeType":"YulTypedName","src":"965:5:40","type":""}],"src":"923:718:40"},{"body":{"nativeSrc":"1785:537:40","nodeType":"YulBlock","src":"1785:537:40","statements":[{"body":{"nativeSrc":"1832:16:40","nodeType":"YulBlock","src":"1832:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1841:1:40","nodeType":"YulLiteral","src":"1841:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"1844:1:40","nodeType":"YulLiteral","src":"1844:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1834:6:40","nodeType":"YulIdentifier","src":"1834:6:40"},"nativeSrc":"1834:12:40","nodeType":"YulFunctionCall","src":"1834:12:40"},"nativeSrc":"1834:12:40","nodeType":"YulExpressionStatement","src":"1834:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1806:7:40","nodeType":"YulIdentifier","src":"1806:7:40"},{"name":"headStart","nativeSrc":"1815:9:40","nodeType":"YulIdentifier","src":"1815:9:40"}],"functionName":{"name":"sub","nativeSrc":"1802:3:40","nodeType":"YulIdentifier","src":"1802:3:40"},"nativeSrc":"1802:23:40","nodeType":"YulFunctionCall","src":"1802:23:40"},{"kind":"number","nativeSrc":"1827:3:40","nodeType":"YulLiteral","src":"1827:3:40","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"1798:3:40","nodeType":"YulIdentifier","src":"1798:3:40"},"nativeSrc":"1798:33:40","nodeType":"YulFunctionCall","src":"1798:33:40"},"nativeSrc":"1795:53:40","nodeType":"YulIf","src":"1795:53:40"},{"nativeSrc":"1857:33:40","nodeType":"YulAssignment","src":"1857:33:40","value":{"arguments":[{"name":"headStart","nativeSrc":"1880:9:40","nodeType":"YulIdentifier","src":"1880:9:40"}],"functionName":{"name":"calldataload","nativeSrc":"1867:12:40","nodeType":"YulIdentifier","src":"1867:12:40"},"nativeSrc":"1867:23:40","nodeType":"YulFunctionCall","src":"1867:23:40"},"variableNames":[{"name":"value0","nativeSrc":"1857:6:40","nodeType":"YulIdentifier","src":"1857:6:40"}]},{"nativeSrc":"1899:46:40","nodeType":"YulVariableDeclaration","src":"1899:46:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1930:9:40","nodeType":"YulIdentifier","src":"1930:9:40"},{"kind":"number","nativeSrc":"1941:2:40","nodeType":"YulLiteral","src":"1941:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1926:3:40","nodeType":"YulIdentifier","src":"1926:3:40"},"nativeSrc":"1926:18:40","nodeType":"YulFunctionCall","src":"1926:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"1913:12:40","nodeType":"YulIdentifier","src":"1913:12:40"},"nativeSrc":"1913:32:40","nodeType":"YulFunctionCall","src":"1913:32:40"},"variables":[{"name":"offset","nativeSrc":"1903:6:40","nodeType":"YulTypedName","src":"1903:6:40","type":""}]},{"nativeSrc":"1954:28:40","nodeType":"YulVariableDeclaration","src":"1954:28:40","value":{"kind":"number","nativeSrc":"1964:18:40","nodeType":"YulLiteral","src":"1964:18:40","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"1958:2:40","nodeType":"YulTypedName","src":"1958:2:40","type":""}]},{"body":{"nativeSrc":"2009:16:40","nodeType":"YulBlock","src":"2009:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2018:1:40","nodeType":"YulLiteral","src":"2018:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"2021:1:40","nodeType":"YulLiteral","src":"2021:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2011:6:40","nodeType":"YulIdentifier","src":"2011:6:40"},"nativeSrc":"2011:12:40","nodeType":"YulFunctionCall","src":"2011:12:40"},"nativeSrc":"2011:12:40","nodeType":"YulExpressionStatement","src":"2011:12:40"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"1997:6:40","nodeType":"YulIdentifier","src":"1997:6:40"},{"name":"_1","nativeSrc":"2005:2:40","nodeType":"YulIdentifier","src":"2005:2:40"}],"functionName":{"name":"gt","nativeSrc":"1994:2:40","nodeType":"YulIdentifier","src":"1994:2:40"},"nativeSrc":"1994:14:40","nodeType":"YulFunctionCall","src":"1994:14:40"},"nativeSrc":"1991:34:40","nodeType":"YulIf","src":"1991:34:40"},{"nativeSrc":"2034:59:40","nodeType":"YulAssignment","src":"2034:59:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2065:9:40","nodeType":"YulIdentifier","src":"2065:9:40"},{"name":"offset","nativeSrc":"2076:6:40","nodeType":"YulIdentifier","src":"2076:6:40"}],"functionName":{"name":"add","nativeSrc":"2061:3:40","nodeType":"YulIdentifier","src":"2061:3:40"},"nativeSrc":"2061:22:40","nodeType":"YulFunctionCall","src":"2061:22:40"},{"name":"dataEnd","nativeSrc":"2085:7:40","nodeType":"YulIdentifier","src":"2085:7:40"}],"functionName":{"name":"abi_decode_bytes","nativeSrc":"2044:16:40","nodeType":"YulIdentifier","src":"2044:16:40"},"nativeSrc":"2044:49:40","nodeType":"YulFunctionCall","src":"2044:49:40"},"variableNames":[{"name":"value1","nativeSrc":"2034:6:40","nodeType":"YulIdentifier","src":"2034:6:40"}]},{"nativeSrc":"2102:48:40","nodeType":"YulVariableDeclaration","src":"2102:48:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2135:9:40","nodeType":"YulIdentifier","src":"2135:9:40"},{"kind":"number","nativeSrc":"2146:2:40","nodeType":"YulLiteral","src":"2146:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2131:3:40","nodeType":"YulIdentifier","src":"2131:3:40"},"nativeSrc":"2131:18:40","nodeType":"YulFunctionCall","src":"2131:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"2118:12:40","nodeType":"YulIdentifier","src":"2118:12:40"},"nativeSrc":"2118:32:40","nodeType":"YulFunctionCall","src":"2118:32:40"},"variables":[{"name":"offset_1","nativeSrc":"2106:8:40","nodeType":"YulTypedName","src":"2106:8:40","type":""}]},{"body":{"nativeSrc":"2179:16:40","nodeType":"YulBlock","src":"2179:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2188:1:40","nodeType":"YulLiteral","src":"2188:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"2191:1:40","nodeType":"YulLiteral","src":"2191:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2181:6:40","nodeType":"YulIdentifier","src":"2181:6:40"},"nativeSrc":"2181:12:40","nodeType":"YulFunctionCall","src":"2181:12:40"},"nativeSrc":"2181:12:40","nodeType":"YulExpressionStatement","src":"2181:12:40"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"2165:8:40","nodeType":"YulIdentifier","src":"2165:8:40"},{"name":"_1","nativeSrc":"2175:2:40","nodeType":"YulIdentifier","src":"2175:2:40"}],"functionName":{"name":"gt","nativeSrc":"2162:2:40","nodeType":"YulIdentifier","src":"2162:2:40"},"nativeSrc":"2162:16:40","nodeType":"YulFunctionCall","src":"2162:16:40"},"nativeSrc":"2159:36:40","nodeType":"YulIf","src":"2159:36:40"},{"nativeSrc":"2204:61:40","nodeType":"YulAssignment","src":"2204:61:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2235:9:40","nodeType":"YulIdentifier","src":"2235:9:40"},{"name":"offset_1","nativeSrc":"2246:8:40","nodeType":"YulIdentifier","src":"2246:8:40"}],"functionName":{"name":"add","nativeSrc":"2231:3:40","nodeType":"YulIdentifier","src":"2231:3:40"},"nativeSrc":"2231:24:40","nodeType":"YulFunctionCall","src":"2231:24:40"},{"name":"dataEnd","nativeSrc":"2257:7:40","nodeType":"YulIdentifier","src":"2257:7:40"}],"functionName":{"name":"abi_decode_bytes","nativeSrc":"2214:16:40","nodeType":"YulIdentifier","src":"2214:16:40"},"nativeSrc":"2214:51:40","nodeType":"YulFunctionCall","src":"2214:51:40"},"variableNames":[{"name":"value2","nativeSrc":"2204:6:40","nodeType":"YulIdentifier","src":"2204:6:40"}]},{"nativeSrc":"2274:42:40","nodeType":"YulAssignment","src":"2274:42:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2301:9:40","nodeType":"YulIdentifier","src":"2301:9:40"},{"kind":"number","nativeSrc":"2312:2:40","nodeType":"YulLiteral","src":"2312:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"2297:3:40","nodeType":"YulIdentifier","src":"2297:3:40"},"nativeSrc":"2297:18:40","nodeType":"YulFunctionCall","src":"2297:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"2284:12:40","nodeType":"YulIdentifier","src":"2284:12:40"},"nativeSrc":"2284:32:40","nodeType":"YulFunctionCall","src":"2284:32:40"},"variableNames":[{"name":"value3","nativeSrc":"2274:6:40","nodeType":"YulIdentifier","src":"2274:6:40"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes_memory_ptrt_bytes_memory_ptrt_uint256","nativeSrc":"1646:676:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1727:9:40","nodeType":"YulTypedName","src":"1727:9:40","type":""},{"name":"dataEnd","nativeSrc":"1738:7:40","nodeType":"YulTypedName","src":"1738:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1750:6:40","nodeType":"YulTypedName","src":"1750:6:40","type":""},{"name":"value1","nativeSrc":"1758:6:40","nodeType":"YulTypedName","src":"1758:6:40","type":""},{"name":"value2","nativeSrc":"1766:6:40","nodeType":"YulTypedName","src":"1766:6:40","type":""},{"name":"value3","nativeSrc":"1774:6:40","nodeType":"YulTypedName","src":"1774:6:40","type":""}],"src":"1646:676:40"},{"body":{"nativeSrc":"2397:177:40","nodeType":"YulBlock","src":"2397:177:40","statements":[{"body":{"nativeSrc":"2443:16:40","nodeType":"YulBlock","src":"2443:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2452:1:40","nodeType":"YulLiteral","src":"2452:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"2455:1:40","nodeType":"YulLiteral","src":"2455:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2445:6:40","nodeType":"YulIdentifier","src":"2445:6:40"},"nativeSrc":"2445:12:40","nodeType":"YulFunctionCall","src":"2445:12:40"},"nativeSrc":"2445:12:40","nodeType":"YulExpressionStatement","src":"2445:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2418:7:40","nodeType":"YulIdentifier","src":"2418:7:40"},{"name":"headStart","nativeSrc":"2427:9:40","nodeType":"YulIdentifier","src":"2427:9:40"}],"functionName":{"name":"sub","nativeSrc":"2414:3:40","nodeType":"YulIdentifier","src":"2414:3:40"},"nativeSrc":"2414:23:40","nodeType":"YulFunctionCall","src":"2414:23:40"},{"kind":"number","nativeSrc":"2439:2:40","nodeType":"YulLiteral","src":"2439:2:40","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2410:3:40","nodeType":"YulIdentifier","src":"2410:3:40"},"nativeSrc":"2410:32:40","nodeType":"YulFunctionCall","src":"2410:32:40"},"nativeSrc":"2407:52:40","nodeType":"YulIf","src":"2407:52:40"},{"nativeSrc":"2468:36:40","nodeType":"YulVariableDeclaration","src":"2468:36:40","value":{"arguments":[{"name":"headStart","nativeSrc":"2494:9:40","nodeType":"YulIdentifier","src":"2494:9:40"}],"functionName":{"name":"calldataload","nativeSrc":"2481:12:40","nodeType":"YulIdentifier","src":"2481:12:40"},"nativeSrc":"2481:23:40","nodeType":"YulFunctionCall","src":"2481:23:40"},"variables":[{"name":"value","nativeSrc":"2472:5:40","nodeType":"YulTypedName","src":"2472:5:40","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2538:5:40","nodeType":"YulIdentifier","src":"2538:5:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"2513:24:40","nodeType":"YulIdentifier","src":"2513:24:40"},"nativeSrc":"2513:31:40","nodeType":"YulFunctionCall","src":"2513:31:40"},"nativeSrc":"2513:31:40","nodeType":"YulExpressionStatement","src":"2513:31:40"},{"nativeSrc":"2553:15:40","nodeType":"YulAssignment","src":"2553:15:40","value":{"name":"value","nativeSrc":"2563:5:40","nodeType":"YulIdentifier","src":"2563:5:40"},"variableNames":[{"name":"value0","nativeSrc":"2553:6:40","nodeType":"YulIdentifier","src":"2553:6:40"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"2327:247:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2363:9:40","nodeType":"YulTypedName","src":"2363:9:40","type":""},{"name":"dataEnd","nativeSrc":"2374:7:40","nodeType":"YulTypedName","src":"2374:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2386:6:40","nodeType":"YulTypedName","src":"2386:6:40","type":""}],"src":"2327:247:40"},{"body":{"nativeSrc":"2674:92:40","nodeType":"YulBlock","src":"2674:92:40","statements":[{"nativeSrc":"2684:26:40","nodeType":"YulAssignment","src":"2684:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"2696:9:40","nodeType":"YulIdentifier","src":"2696:9:40"},{"kind":"number","nativeSrc":"2707:2:40","nodeType":"YulLiteral","src":"2707:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2692:3:40","nodeType":"YulIdentifier","src":"2692:3:40"},"nativeSrc":"2692:18:40","nodeType":"YulFunctionCall","src":"2692:18:40"},"variableNames":[{"name":"tail","nativeSrc":"2684:4:40","nodeType":"YulIdentifier","src":"2684:4:40"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2726:9:40","nodeType":"YulIdentifier","src":"2726:9:40"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"2751:6:40","nodeType":"YulIdentifier","src":"2751:6:40"}],"functionName":{"name":"iszero","nativeSrc":"2744:6:40","nodeType":"YulIdentifier","src":"2744:6:40"},"nativeSrc":"2744:14:40","nodeType":"YulFunctionCall","src":"2744:14:40"}],"functionName":{"name":"iszero","nativeSrc":"2737:6:40","nodeType":"YulIdentifier","src":"2737:6:40"},"nativeSrc":"2737:22:40","nodeType":"YulFunctionCall","src":"2737:22:40"}],"functionName":{"name":"mstore","nativeSrc":"2719:6:40","nodeType":"YulIdentifier","src":"2719:6:40"},"nativeSrc":"2719:41:40","nodeType":"YulFunctionCall","src":"2719:41:40"},"nativeSrc":"2719:41:40","nodeType":"YulExpressionStatement","src":"2719:41:40"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"2579:187:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2643:9:40","nodeType":"YulTypedName","src":"2643:9:40","type":""},{"name":"value0","nativeSrc":"2654:6:40","nodeType":"YulTypedName","src":"2654:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2665:4:40","nodeType":"YulTypedName","src":"2665:4:40","type":""}],"src":"2579:187:40"},{"body":{"nativeSrc":"2827:94:40","nodeType":"YulBlock","src":"2827:94:40","statements":[{"nativeSrc":"2837:29:40","nodeType":"YulAssignment","src":"2837:29:40","value":{"arguments":[{"name":"offset","nativeSrc":"2859:6:40","nodeType":"YulIdentifier","src":"2859:6:40"}],"functionName":{"name":"calldataload","nativeSrc":"2846:12:40","nodeType":"YulIdentifier","src":"2846:12:40"},"nativeSrc":"2846:20:40","nodeType":"YulFunctionCall","src":"2846:20:40"},"variableNames":[{"name":"value","nativeSrc":"2837:5:40","nodeType":"YulIdentifier","src":"2837:5:40"}]},{"body":{"nativeSrc":"2899:16:40","nodeType":"YulBlock","src":"2899:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2908:1:40","nodeType":"YulLiteral","src":"2908:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"2911:1:40","nodeType":"YulLiteral","src":"2911:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2901:6:40","nodeType":"YulIdentifier","src":"2901:6:40"},"nativeSrc":"2901:12:40","nodeType":"YulFunctionCall","src":"2901:12:40"},"nativeSrc":"2901:12:40","nodeType":"YulExpressionStatement","src":"2901:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2888:5:40","nodeType":"YulIdentifier","src":"2888:5:40"},{"kind":"number","nativeSrc":"2895:1:40","nodeType":"YulLiteral","src":"2895:1:40","type":"","value":"2"}],"functionName":{"name":"lt","nativeSrc":"2885:2:40","nodeType":"YulIdentifier","src":"2885:2:40"},"nativeSrc":"2885:12:40","nodeType":"YulFunctionCall","src":"2885:12:40"}],"functionName":{"name":"iszero","nativeSrc":"2878:6:40","nodeType":"YulIdentifier","src":"2878:6:40"},"nativeSrc":"2878:20:40","nodeType":"YulFunctionCall","src":"2878:20:40"},"nativeSrc":"2875:40:40","nodeType":"YulIf","src":"2875:40:40"}]},"name":"abi_decode_enum_Operation","nativeSrc":"2771:150:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2806:6:40","nodeType":"YulTypedName","src":"2806:6:40","type":""}],"returnVariables":[{"name":"value","nativeSrc":"2817:5:40","nodeType":"YulTypedName","src":"2817:5:40","type":""}],"src":"2771:150:40"},{"body":{"nativeSrc":"3070:475:40","nodeType":"YulBlock","src":"3070:475:40","statements":[{"body":{"nativeSrc":"3117:16:40","nodeType":"YulBlock","src":"3117:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3126:1:40","nodeType":"YulLiteral","src":"3126:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"3129:1:40","nodeType":"YulLiteral","src":"3129:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3119:6:40","nodeType":"YulIdentifier","src":"3119:6:40"},"nativeSrc":"3119:12:40","nodeType":"YulFunctionCall","src":"3119:12:40"},"nativeSrc":"3119:12:40","nodeType":"YulExpressionStatement","src":"3119:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3091:7:40","nodeType":"YulIdentifier","src":"3091:7:40"},{"name":"headStart","nativeSrc":"3100:9:40","nodeType":"YulIdentifier","src":"3100:9:40"}],"functionName":{"name":"sub","nativeSrc":"3087:3:40","nodeType":"YulIdentifier","src":"3087:3:40"},"nativeSrc":"3087:23:40","nodeType":"YulFunctionCall","src":"3087:23:40"},{"kind":"number","nativeSrc":"3112:3:40","nodeType":"YulLiteral","src":"3112:3:40","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"3083:3:40","nodeType":"YulIdentifier","src":"3083:3:40"},"nativeSrc":"3083:33:40","nodeType":"YulFunctionCall","src":"3083:33:40"},"nativeSrc":"3080:53:40","nodeType":"YulIf","src":"3080:53:40"},{"nativeSrc":"3142:36:40","nodeType":"YulVariableDeclaration","src":"3142:36:40","value":{"arguments":[{"name":"headStart","nativeSrc":"3168:9:40","nodeType":"YulIdentifier","src":"3168:9:40"}],"functionName":{"name":"calldataload","nativeSrc":"3155:12:40","nodeType":"YulIdentifier","src":"3155:12:40"},"nativeSrc":"3155:23:40","nodeType":"YulFunctionCall","src":"3155:23:40"},"variables":[{"name":"value","nativeSrc":"3146:5:40","nodeType":"YulTypedName","src":"3146:5:40","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3212:5:40","nodeType":"YulIdentifier","src":"3212:5:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"3187:24:40","nodeType":"YulIdentifier","src":"3187:24:40"},"nativeSrc":"3187:31:40","nodeType":"YulFunctionCall","src":"3187:31:40"},"nativeSrc":"3187:31:40","nodeType":"YulExpressionStatement","src":"3187:31:40"},{"nativeSrc":"3227:15:40","nodeType":"YulAssignment","src":"3227:15:40","value":{"name":"value","nativeSrc":"3237:5:40","nodeType":"YulIdentifier","src":"3237:5:40"},"variableNames":[{"name":"value0","nativeSrc":"3227:6:40","nodeType":"YulIdentifier","src":"3227:6:40"}]},{"nativeSrc":"3251:42:40","nodeType":"YulAssignment","src":"3251:42:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3278:9:40","nodeType":"YulIdentifier","src":"3278:9:40"},{"kind":"number","nativeSrc":"3289:2:40","nodeType":"YulLiteral","src":"3289:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3274:3:40","nodeType":"YulIdentifier","src":"3274:3:40"},"nativeSrc":"3274:18:40","nodeType":"YulFunctionCall","src":"3274:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"3261:12:40","nodeType":"YulIdentifier","src":"3261:12:40"},"nativeSrc":"3261:32:40","nodeType":"YulFunctionCall","src":"3261:32:40"},"variableNames":[{"name":"value1","nativeSrc":"3251:6:40","nodeType":"YulIdentifier","src":"3251:6:40"}]},{"nativeSrc":"3302:46:40","nodeType":"YulVariableDeclaration","src":"3302:46:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3333:9:40","nodeType":"YulIdentifier","src":"3333:9:40"},{"kind":"number","nativeSrc":"3344:2:40","nodeType":"YulLiteral","src":"3344:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3329:3:40","nodeType":"YulIdentifier","src":"3329:3:40"},"nativeSrc":"3329:18:40","nodeType":"YulFunctionCall","src":"3329:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"3316:12:40","nodeType":"YulIdentifier","src":"3316:12:40"},"nativeSrc":"3316:32:40","nodeType":"YulFunctionCall","src":"3316:32:40"},"variables":[{"name":"offset","nativeSrc":"3306:6:40","nodeType":"YulTypedName","src":"3306:6:40","type":""}]},{"body":{"nativeSrc":"3391:16:40","nodeType":"YulBlock","src":"3391:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3400:1:40","nodeType":"YulLiteral","src":"3400:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"3403:1:40","nodeType":"YulLiteral","src":"3403:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3393:6:40","nodeType":"YulIdentifier","src":"3393:6:40"},"nativeSrc":"3393:12:40","nodeType":"YulFunctionCall","src":"3393:12:40"},"nativeSrc":"3393:12:40","nodeType":"YulExpressionStatement","src":"3393:12:40"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3363:6:40","nodeType":"YulIdentifier","src":"3363:6:40"},{"kind":"number","nativeSrc":"3371:18:40","nodeType":"YulLiteral","src":"3371:18:40","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3360:2:40","nodeType":"YulIdentifier","src":"3360:2:40"},"nativeSrc":"3360:30:40","nodeType":"YulFunctionCall","src":"3360:30:40"},"nativeSrc":"3357:50:40","nodeType":"YulIf","src":"3357:50:40"},{"nativeSrc":"3416:59:40","nodeType":"YulAssignment","src":"3416:59:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3447:9:40","nodeType":"YulIdentifier","src":"3447:9:40"},{"name":"offset","nativeSrc":"3458:6:40","nodeType":"YulIdentifier","src":"3458:6:40"}],"functionName":{"name":"add","nativeSrc":"3443:3:40","nodeType":"YulIdentifier","src":"3443:3:40"},"nativeSrc":"3443:22:40","nodeType":"YulFunctionCall","src":"3443:22:40"},{"name":"dataEnd","nativeSrc":"3467:7:40","nodeType":"YulIdentifier","src":"3467:7:40"}],"functionName":{"name":"abi_decode_bytes","nativeSrc":"3426:16:40","nodeType":"YulIdentifier","src":"3426:16:40"},"nativeSrc":"3426:49:40","nodeType":"YulFunctionCall","src":"3426:49:40"},"variableNames":[{"name":"value2","nativeSrc":"3416:6:40","nodeType":"YulIdentifier","src":"3416:6:40"}]},{"nativeSrc":"3484:55:40","nodeType":"YulAssignment","src":"3484:55:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3524:9:40","nodeType":"YulIdentifier","src":"3524:9:40"},{"kind":"number","nativeSrc":"3535:2:40","nodeType":"YulLiteral","src":"3535:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3520:3:40","nodeType":"YulIdentifier","src":"3520:3:40"},"nativeSrc":"3520:18:40","nodeType":"YulFunctionCall","src":"3520:18:40"}],"functionName":{"name":"abi_decode_enum_Operation","nativeSrc":"3494:25:40","nodeType":"YulIdentifier","src":"3494:25:40"},"nativeSrc":"3494:45:40","nodeType":"YulFunctionCall","src":"3494:45:40"},"variableNames":[{"name":"value3","nativeSrc":"3484:6:40","nodeType":"YulIdentifier","src":"3484:6:40"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_bytes_memory_ptrt_enum$_Operation_$3022","nativeSrc":"2926:619:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3012:9:40","nodeType":"YulTypedName","src":"3012:9:40","type":""},{"name":"dataEnd","nativeSrc":"3023:7:40","nodeType":"YulTypedName","src":"3023:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3035:6:40","nodeType":"YulTypedName","src":"3035:6:40","type":""},{"name":"value1","nativeSrc":"3043:6:40","nodeType":"YulTypedName","src":"3043:6:40","type":""},{"name":"value2","nativeSrc":"3051:6:40","nodeType":"YulTypedName","src":"3051:6:40","type":""},{"name":"value3","nativeSrc":"3059:6:40","nodeType":"YulTypedName","src":"3059:6:40","type":""}],"src":"2926:619:40"},{"body":{"nativeSrc":"3599:373:40","nodeType":"YulBlock","src":"3599:373:40","statements":[{"nativeSrc":"3609:26:40","nodeType":"YulVariableDeclaration","src":"3609:26:40","value":{"arguments":[{"name":"value","nativeSrc":"3629:5:40","nodeType":"YulIdentifier","src":"3629:5:40"}],"functionName":{"name":"mload","nativeSrc":"3623:5:40","nodeType":"YulIdentifier","src":"3623:5:40"},"nativeSrc":"3623:12:40","nodeType":"YulFunctionCall","src":"3623:12:40"},"variables":[{"name":"length","nativeSrc":"3613:6:40","nodeType":"YulTypedName","src":"3613:6:40","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"3651:3:40","nodeType":"YulIdentifier","src":"3651:3:40"},{"name":"length","nativeSrc":"3656:6:40","nodeType":"YulIdentifier","src":"3656:6:40"}],"functionName":{"name":"mstore","nativeSrc":"3644:6:40","nodeType":"YulIdentifier","src":"3644:6:40"},"nativeSrc":"3644:19:40","nodeType":"YulFunctionCall","src":"3644:19:40"},"nativeSrc":"3644:19:40","nodeType":"YulExpressionStatement","src":"3644:19:40"},{"nativeSrc":"3672:10:40","nodeType":"YulVariableDeclaration","src":"3672:10:40","value":{"kind":"number","nativeSrc":"3681:1:40","nodeType":"YulLiteral","src":"3681:1:40","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"3676:1:40","nodeType":"YulTypedName","src":"3676:1:40","type":""}]},{"body":{"nativeSrc":"3743:110:40","nodeType":"YulBlock","src":"3743:110:40","statements":[{"nativeSrc":"3757:14:40","nodeType":"YulVariableDeclaration","src":"3757:14:40","value":{"kind":"number","nativeSrc":"3767:4:40","nodeType":"YulLiteral","src":"3767:4:40","type":"","value":"0x20"},"variables":[{"name":"_1","nativeSrc":"3761:2:40","nodeType":"YulTypedName","src":"3761:2:40","type":""}]},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"3799:3:40","nodeType":"YulIdentifier","src":"3799:3:40"},{"name":"i","nativeSrc":"3804:1:40","nodeType":"YulIdentifier","src":"3804:1:40"}],"functionName":{"name":"add","nativeSrc":"3795:3:40","nodeType":"YulIdentifier","src":"3795:3:40"},"nativeSrc":"3795:11:40","nodeType":"YulFunctionCall","src":"3795:11:40"},{"name":"_1","nativeSrc":"3808:2:40","nodeType":"YulIdentifier","src":"3808:2:40"}],"functionName":{"name":"add","nativeSrc":"3791:3:40","nodeType":"YulIdentifier","src":"3791:3:40"},"nativeSrc":"3791:20:40","nodeType":"YulFunctionCall","src":"3791:20:40"},{"arguments":[{"arguments":[{"arguments":[{"name":"value","nativeSrc":"3827:5:40","nodeType":"YulIdentifier","src":"3827:5:40"},{"name":"i","nativeSrc":"3834:1:40","nodeType":"YulIdentifier","src":"3834:1:40"}],"functionName":{"name":"add","nativeSrc":"3823:3:40","nodeType":"YulIdentifier","src":"3823:3:40"},"nativeSrc":"3823:13:40","nodeType":"YulFunctionCall","src":"3823:13:40"},{"name":"_1","nativeSrc":"3838:2:40","nodeType":"YulIdentifier","src":"3838:2:40"}],"functionName":{"name":"add","nativeSrc":"3819:3:40","nodeType":"YulIdentifier","src":"3819:3:40"},"nativeSrc":"3819:22:40","nodeType":"YulFunctionCall","src":"3819:22:40"}],"functionName":{"name":"mload","nativeSrc":"3813:5:40","nodeType":"YulIdentifier","src":"3813:5:40"},"nativeSrc":"3813:29:40","nodeType":"YulFunctionCall","src":"3813:29:40"}],"functionName":{"name":"mstore","nativeSrc":"3784:6:40","nodeType":"YulIdentifier","src":"3784:6:40"},"nativeSrc":"3784:59:40","nodeType":"YulFunctionCall","src":"3784:59:40"},"nativeSrc":"3784:59:40","nodeType":"YulExpressionStatement","src":"3784:59:40"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"3702:1:40","nodeType":"YulIdentifier","src":"3702:1:40"},{"name":"length","nativeSrc":"3705:6:40","nodeType":"YulIdentifier","src":"3705:6:40"}],"functionName":{"name":"lt","nativeSrc":"3699:2:40","nodeType":"YulIdentifier","src":"3699:2:40"},"nativeSrc":"3699:13:40","nodeType":"YulFunctionCall","src":"3699:13:40"},"nativeSrc":"3691:162:40","nodeType":"YulForLoop","post":{"nativeSrc":"3713:21:40","nodeType":"YulBlock","src":"3713:21:40","statements":[{"nativeSrc":"3715:17:40","nodeType":"YulAssignment","src":"3715:17:40","value":{"arguments":[{"name":"i","nativeSrc":"3724:1:40","nodeType":"YulIdentifier","src":"3724:1:40"},{"kind":"number","nativeSrc":"3727:4:40","nodeType":"YulLiteral","src":"3727:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3720:3:40","nodeType":"YulIdentifier","src":"3720:3:40"},"nativeSrc":"3720:12:40","nodeType":"YulFunctionCall","src":"3720:12:40"},"variableNames":[{"name":"i","nativeSrc":"3715:1:40","nodeType":"YulIdentifier","src":"3715:1:40"}]}]},"pre":{"nativeSrc":"3695:3:40","nodeType":"YulBlock","src":"3695:3:40","statements":[]},"src":"3691:162:40"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"3877:3:40","nodeType":"YulIdentifier","src":"3877:3:40"},{"name":"length","nativeSrc":"3882:6:40","nodeType":"YulIdentifier","src":"3882:6:40"}],"functionName":{"name":"add","nativeSrc":"3873:3:40","nodeType":"YulIdentifier","src":"3873:3:40"},"nativeSrc":"3873:16:40","nodeType":"YulFunctionCall","src":"3873:16:40"},{"kind":"number","nativeSrc":"3891:4:40","nodeType":"YulLiteral","src":"3891:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3869:3:40","nodeType":"YulIdentifier","src":"3869:3:40"},"nativeSrc":"3869:27:40","nodeType":"YulFunctionCall","src":"3869:27:40"},{"kind":"number","nativeSrc":"3898:1:40","nodeType":"YulLiteral","src":"3898:1:40","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"3862:6:40","nodeType":"YulIdentifier","src":"3862:6:40"},"nativeSrc":"3862:38:40","nodeType":"YulFunctionCall","src":"3862:38:40"},"nativeSrc":"3862:38:40","nodeType":"YulExpressionStatement","src":"3862:38:40"},{"nativeSrc":"3909:57:40","nodeType":"YulAssignment","src":"3909:57:40","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"3924:3:40","nodeType":"YulIdentifier","src":"3924:3:40"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"3937:6:40","nodeType":"YulIdentifier","src":"3937:6:40"},{"kind":"number","nativeSrc":"3945:2:40","nodeType":"YulLiteral","src":"3945:2:40","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"3933:3:40","nodeType":"YulIdentifier","src":"3933:3:40"},"nativeSrc":"3933:15:40","nodeType":"YulFunctionCall","src":"3933:15:40"},{"arguments":[{"kind":"number","nativeSrc":"3954:2:40","nodeType":"YulLiteral","src":"3954:2:40","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"3950:3:40","nodeType":"YulIdentifier","src":"3950:3:40"},"nativeSrc":"3950:7:40","nodeType":"YulFunctionCall","src":"3950:7:40"}],"functionName":{"name":"and","nativeSrc":"3929:3:40","nodeType":"YulIdentifier","src":"3929:3:40"},"nativeSrc":"3929:29:40","nodeType":"YulFunctionCall","src":"3929:29:40"}],"functionName":{"name":"add","nativeSrc":"3920:3:40","nodeType":"YulIdentifier","src":"3920:3:40"},"nativeSrc":"3920:39:40","nodeType":"YulFunctionCall","src":"3920:39:40"},{"kind":"number","nativeSrc":"3961:4:40","nodeType":"YulLiteral","src":"3961:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3916:3:40","nodeType":"YulIdentifier","src":"3916:3:40"},"nativeSrc":"3916:50:40","nodeType":"YulFunctionCall","src":"3916:50:40"},"variableNames":[{"name":"end","nativeSrc":"3909:3:40","nodeType":"YulIdentifier","src":"3909:3:40"}]}]},"name":"abi_encode_bytes","nativeSrc":"3550:422:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3576:5:40","nodeType":"YulTypedName","src":"3576:5:40","type":""},{"name":"pos","nativeSrc":"3583:3:40","nodeType":"YulTypedName","src":"3583:3:40","type":""}],"returnVariables":[{"name":"end","nativeSrc":"3591:3:40","nodeType":"YulTypedName","src":"3591:3:40","type":""}],"src":"3550:422:40"},{"body":{"nativeSrc":"4118:157:40","nodeType":"YulBlock","src":"4118:157:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4135:9:40","nodeType":"YulIdentifier","src":"4135:9:40"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"4160:6:40","nodeType":"YulIdentifier","src":"4160:6:40"}],"functionName":{"name":"iszero","nativeSrc":"4153:6:40","nodeType":"YulIdentifier","src":"4153:6:40"},"nativeSrc":"4153:14:40","nodeType":"YulFunctionCall","src":"4153:14:40"}],"functionName":{"name":"iszero","nativeSrc":"4146:6:40","nodeType":"YulIdentifier","src":"4146:6:40"},"nativeSrc":"4146:22:40","nodeType":"YulFunctionCall","src":"4146:22:40"}],"functionName":{"name":"mstore","nativeSrc":"4128:6:40","nodeType":"YulIdentifier","src":"4128:6:40"},"nativeSrc":"4128:41:40","nodeType":"YulFunctionCall","src":"4128:41:40"},"nativeSrc":"4128:41:40","nodeType":"YulExpressionStatement","src":"4128:41:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4189:9:40","nodeType":"YulIdentifier","src":"4189:9:40"},{"kind":"number","nativeSrc":"4200:2:40","nodeType":"YulLiteral","src":"4200:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4185:3:40","nodeType":"YulIdentifier","src":"4185:3:40"},"nativeSrc":"4185:18:40","nodeType":"YulFunctionCall","src":"4185:18:40"},{"kind":"number","nativeSrc":"4205:2:40","nodeType":"YulLiteral","src":"4205:2:40","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"4178:6:40","nodeType":"YulIdentifier","src":"4178:6:40"},"nativeSrc":"4178:30:40","nodeType":"YulFunctionCall","src":"4178:30:40"},"nativeSrc":"4178:30:40","nodeType":"YulExpressionStatement","src":"4178:30:40"},{"nativeSrc":"4217:52:40","nodeType":"YulAssignment","src":"4217:52:40","value":{"arguments":[{"name":"value1","nativeSrc":"4242:6:40","nodeType":"YulIdentifier","src":"4242:6:40"},{"arguments":[{"name":"headStart","nativeSrc":"4254:9:40","nodeType":"YulIdentifier","src":"4254:9:40"},{"kind":"number","nativeSrc":"4265:2:40","nodeType":"YulLiteral","src":"4265:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4250:3:40","nodeType":"YulIdentifier","src":"4250:3:40"},"nativeSrc":"4250:18:40","nodeType":"YulFunctionCall","src":"4250:18:40"}],"functionName":{"name":"abi_encode_bytes","nativeSrc":"4225:16:40","nodeType":"YulIdentifier","src":"4225:16:40"},"nativeSrc":"4225:44:40","nodeType":"YulFunctionCall","src":"4225:44:40"},"variableNames":[{"name":"tail","nativeSrc":"4217:4:40","nodeType":"YulIdentifier","src":"4217:4:40"}]}]},"name":"abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"3977:298:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4079:9:40","nodeType":"YulTypedName","src":"4079:9:40","type":""},{"name":"value1","nativeSrc":"4090:6:40","nodeType":"YulTypedName","src":"4090:6:40","type":""},{"name":"value0","nativeSrc":"4098:6:40","nodeType":"YulTypedName","src":"4098:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4109:4:40","nodeType":"YulTypedName","src":"4109:4:40","type":""}],"src":"3977:298:40"},{"body":{"nativeSrc":"4367:161:40","nodeType":"YulBlock","src":"4367:161:40","statements":[{"body":{"nativeSrc":"4413:16:40","nodeType":"YulBlock","src":"4413:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4422:1:40","nodeType":"YulLiteral","src":"4422:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"4425:1:40","nodeType":"YulLiteral","src":"4425:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4415:6:40","nodeType":"YulIdentifier","src":"4415:6:40"},"nativeSrc":"4415:12:40","nodeType":"YulFunctionCall","src":"4415:12:40"},"nativeSrc":"4415:12:40","nodeType":"YulExpressionStatement","src":"4415:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4388:7:40","nodeType":"YulIdentifier","src":"4388:7:40"},{"name":"headStart","nativeSrc":"4397:9:40","nodeType":"YulIdentifier","src":"4397:9:40"}],"functionName":{"name":"sub","nativeSrc":"4384:3:40","nodeType":"YulIdentifier","src":"4384:3:40"},"nativeSrc":"4384:23:40","nodeType":"YulFunctionCall","src":"4384:23:40"},{"kind":"number","nativeSrc":"4409:2:40","nodeType":"YulLiteral","src":"4409:2:40","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"4380:3:40","nodeType":"YulIdentifier","src":"4380:3:40"},"nativeSrc":"4380:32:40","nodeType":"YulFunctionCall","src":"4380:32:40"},"nativeSrc":"4377:52:40","nodeType":"YulIf","src":"4377:52:40"},{"nativeSrc":"4438:33:40","nodeType":"YulAssignment","src":"4438:33:40","value":{"arguments":[{"name":"headStart","nativeSrc":"4461:9:40","nodeType":"YulIdentifier","src":"4461:9:40"}],"functionName":{"name":"calldataload","nativeSrc":"4448:12:40","nodeType":"YulIdentifier","src":"4448:12:40"},"nativeSrc":"4448:23:40","nodeType":"YulFunctionCall","src":"4448:23:40"},"variableNames":[{"name":"value0","nativeSrc":"4438:6:40","nodeType":"YulIdentifier","src":"4438:6:40"}]},{"nativeSrc":"4480:42:40","nodeType":"YulAssignment","src":"4480:42:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4507:9:40","nodeType":"YulIdentifier","src":"4507:9:40"},{"kind":"number","nativeSrc":"4518:2:40","nodeType":"YulLiteral","src":"4518:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4503:3:40","nodeType":"YulIdentifier","src":"4503:3:40"},"nativeSrc":"4503:18:40","nodeType":"YulFunctionCall","src":"4503:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"4490:12:40","nodeType":"YulIdentifier","src":"4490:12:40"},"nativeSrc":"4490:32:40","nodeType":"YulFunctionCall","src":"4490:32:40"},"variableNames":[{"name":"value1","nativeSrc":"4480:6:40","nodeType":"YulIdentifier","src":"4480:6:40"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nativeSrc":"4280:248:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4325:9:40","nodeType":"YulTypedName","src":"4325:9:40","type":""},{"name":"dataEnd","nativeSrc":"4336:7:40","nodeType":"YulTypedName","src":"4336:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4348:6:40","nodeType":"YulTypedName","src":"4348:6:40","type":""},{"name":"value1","nativeSrc":"4356:6:40","nodeType":"YulTypedName","src":"4356:6:40","type":""}],"src":"4280:248:40"},{"body":{"nativeSrc":"4652:98:40","nodeType":"YulBlock","src":"4652:98:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4669:9:40","nodeType":"YulIdentifier","src":"4669:9:40"},{"kind":"number","nativeSrc":"4680:2:40","nodeType":"YulLiteral","src":"4680:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"4662:6:40","nodeType":"YulIdentifier","src":"4662:6:40"},"nativeSrc":"4662:21:40","nodeType":"YulFunctionCall","src":"4662:21:40"},"nativeSrc":"4662:21:40","nodeType":"YulExpressionStatement","src":"4662:21:40"},{"nativeSrc":"4692:52:40","nodeType":"YulAssignment","src":"4692:52:40","value":{"arguments":[{"name":"value0","nativeSrc":"4717:6:40","nodeType":"YulIdentifier","src":"4717:6:40"},{"arguments":[{"name":"headStart","nativeSrc":"4729:9:40","nodeType":"YulIdentifier","src":"4729:9:40"},{"kind":"number","nativeSrc":"4740:2:40","nodeType":"YulLiteral","src":"4740:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4725:3:40","nodeType":"YulIdentifier","src":"4725:3:40"},"nativeSrc":"4725:18:40","nodeType":"YulFunctionCall","src":"4725:18:40"}],"functionName":{"name":"abi_encode_bytes","nativeSrc":"4700:16:40","nodeType":"YulIdentifier","src":"4700:16:40"},"nativeSrc":"4700:44:40","nodeType":"YulFunctionCall","src":"4700:44:40"},"variableNames":[{"name":"tail","nativeSrc":"4692:4:40","nodeType":"YulIdentifier","src":"4692:4:40"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"4533:217:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4621:9:40","nodeType":"YulTypedName","src":"4621:9:40","type":""},{"name":"value0","nativeSrc":"4632:6:40","nodeType":"YulTypedName","src":"4632:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4643:4:40","nodeType":"YulTypedName","src":"4643:4:40","type":""}],"src":"4533:217:40"},{"body":{"nativeSrc":"4825:110:40","nodeType":"YulBlock","src":"4825:110:40","statements":[{"body":{"nativeSrc":"4871:16:40","nodeType":"YulBlock","src":"4871:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4880:1:40","nodeType":"YulLiteral","src":"4880:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"4883:1:40","nodeType":"YulLiteral","src":"4883:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4873:6:40","nodeType":"YulIdentifier","src":"4873:6:40"},"nativeSrc":"4873:12:40","nodeType":"YulFunctionCall","src":"4873:12:40"},"nativeSrc":"4873:12:40","nodeType":"YulExpressionStatement","src":"4873:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4846:7:40","nodeType":"YulIdentifier","src":"4846:7:40"},{"name":"headStart","nativeSrc":"4855:9:40","nodeType":"YulIdentifier","src":"4855:9:40"}],"functionName":{"name":"sub","nativeSrc":"4842:3:40","nodeType":"YulIdentifier","src":"4842:3:40"},"nativeSrc":"4842:23:40","nodeType":"YulFunctionCall","src":"4842:23:40"},{"kind":"number","nativeSrc":"4867:2:40","nodeType":"YulLiteral","src":"4867:2:40","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"4838:3:40","nodeType":"YulIdentifier","src":"4838:3:40"},"nativeSrc":"4838:32:40","nodeType":"YulFunctionCall","src":"4838:32:40"},"nativeSrc":"4835:52:40","nodeType":"YulIf","src":"4835:52:40"},{"nativeSrc":"4896:33:40","nodeType":"YulAssignment","src":"4896:33:40","value":{"arguments":[{"name":"headStart","nativeSrc":"4919:9:40","nodeType":"YulIdentifier","src":"4919:9:40"}],"functionName":{"name":"calldataload","nativeSrc":"4906:12:40","nodeType":"YulIdentifier","src":"4906:12:40"},"nativeSrc":"4906:23:40","nodeType":"YulFunctionCall","src":"4906:23:40"},"variableNames":[{"name":"value0","nativeSrc":"4896:6:40","nodeType":"YulIdentifier","src":"4896:6:40"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"4755:180:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4791:9:40","nodeType":"YulTypedName","src":"4791:9:40","type":""},{"name":"dataEnd","nativeSrc":"4802:7:40","nodeType":"YulTypedName","src":"4802:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4814:6:40","nodeType":"YulTypedName","src":"4814:6:40","type":""}],"src":"4755:180:40"},{"body":{"nativeSrc":"5010:110:40","nodeType":"YulBlock","src":"5010:110:40","statements":[{"body":{"nativeSrc":"5056:16:40","nodeType":"YulBlock","src":"5056:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5065:1:40","nodeType":"YulLiteral","src":"5065:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"5068:1:40","nodeType":"YulLiteral","src":"5068:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5058:6:40","nodeType":"YulIdentifier","src":"5058:6:40"},"nativeSrc":"5058:12:40","nodeType":"YulFunctionCall","src":"5058:12:40"},"nativeSrc":"5058:12:40","nodeType":"YulExpressionStatement","src":"5058:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5031:7:40","nodeType":"YulIdentifier","src":"5031:7:40"},{"name":"headStart","nativeSrc":"5040:9:40","nodeType":"YulIdentifier","src":"5040:9:40"}],"functionName":{"name":"sub","nativeSrc":"5027:3:40","nodeType":"YulIdentifier","src":"5027:3:40"},"nativeSrc":"5027:23:40","nodeType":"YulFunctionCall","src":"5027:23:40"},{"kind":"number","nativeSrc":"5052:2:40","nodeType":"YulLiteral","src":"5052:2:40","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"5023:3:40","nodeType":"YulIdentifier","src":"5023:3:40"},"nativeSrc":"5023:32:40","nodeType":"YulFunctionCall","src":"5023:32:40"},"nativeSrc":"5020:52:40","nodeType":"YulIf","src":"5020:52:40"},{"nativeSrc":"5081:33:40","nodeType":"YulAssignment","src":"5081:33:40","value":{"arguments":[{"name":"headStart","nativeSrc":"5104:9:40","nodeType":"YulIdentifier","src":"5104:9:40"}],"functionName":{"name":"calldataload","nativeSrc":"5091:12:40","nodeType":"YulIdentifier","src":"5091:12:40"},"nativeSrc":"5091:23:40","nodeType":"YulFunctionCall","src":"5091:23:40"},"variableNames":[{"name":"value0","nativeSrc":"5081:6:40","nodeType":"YulIdentifier","src":"5081:6:40"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"4940:180:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4976:9:40","nodeType":"YulTypedName","src":"4976:9:40","type":""},{"name":"dataEnd","nativeSrc":"4987:7:40","nodeType":"YulTypedName","src":"4987:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4999:6:40","nodeType":"YulTypedName","src":"4999:6:40","type":""}],"src":"4940:180:40"},{"body":{"nativeSrc":"5197:275:40","nodeType":"YulBlock","src":"5197:275:40","statements":[{"body":{"nativeSrc":"5246:16:40","nodeType":"YulBlock","src":"5246:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5255:1:40","nodeType":"YulLiteral","src":"5255:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"5258:1:40","nodeType":"YulLiteral","src":"5258:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5248:6:40","nodeType":"YulIdentifier","src":"5248:6:40"},"nativeSrc":"5248:12:40","nodeType":"YulFunctionCall","src":"5248:12:40"},"nativeSrc":"5248:12:40","nodeType":"YulExpressionStatement","src":"5248:12:40"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"5225:6:40","nodeType":"YulIdentifier","src":"5225:6:40"},{"kind":"number","nativeSrc":"5233:4:40","nodeType":"YulLiteral","src":"5233:4:40","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"5221:3:40","nodeType":"YulIdentifier","src":"5221:3:40"},"nativeSrc":"5221:17:40","nodeType":"YulFunctionCall","src":"5221:17:40"},{"name":"end","nativeSrc":"5240:3:40","nodeType":"YulIdentifier","src":"5240:3:40"}],"functionName":{"name":"slt","nativeSrc":"5217:3:40","nodeType":"YulIdentifier","src":"5217:3:40"},"nativeSrc":"5217:27:40","nodeType":"YulFunctionCall","src":"5217:27:40"}],"functionName":{"name":"iszero","nativeSrc":"5210:6:40","nodeType":"YulIdentifier","src":"5210:6:40"},"nativeSrc":"5210:35:40","nodeType":"YulFunctionCall","src":"5210:35:40"},"nativeSrc":"5207:55:40","nodeType":"YulIf","src":"5207:55:40"},{"nativeSrc":"5271:30:40","nodeType":"YulAssignment","src":"5271:30:40","value":{"arguments":[{"name":"offset","nativeSrc":"5294:6:40","nodeType":"YulIdentifier","src":"5294:6:40"}],"functionName":{"name":"calldataload","nativeSrc":"5281:12:40","nodeType":"YulIdentifier","src":"5281:12:40"},"nativeSrc":"5281:20:40","nodeType":"YulFunctionCall","src":"5281:20:40"},"variableNames":[{"name":"length","nativeSrc":"5271:6:40","nodeType":"YulIdentifier","src":"5271:6:40"}]},{"body":{"nativeSrc":"5344:16:40","nodeType":"YulBlock","src":"5344:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5353:1:40","nodeType":"YulLiteral","src":"5353:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"5356:1:40","nodeType":"YulLiteral","src":"5356:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5346:6:40","nodeType":"YulIdentifier","src":"5346:6:40"},"nativeSrc":"5346:12:40","nodeType":"YulFunctionCall","src":"5346:12:40"},"nativeSrc":"5346:12:40","nodeType":"YulExpressionStatement","src":"5346:12:40"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"5316:6:40","nodeType":"YulIdentifier","src":"5316:6:40"},{"kind":"number","nativeSrc":"5324:18:40","nodeType":"YulLiteral","src":"5324:18:40","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"5313:2:40","nodeType":"YulIdentifier","src":"5313:2:40"},"nativeSrc":"5313:30:40","nodeType":"YulFunctionCall","src":"5313:30:40"},"nativeSrc":"5310:50:40","nodeType":"YulIf","src":"5310:50:40"},{"nativeSrc":"5369:29:40","nodeType":"YulAssignment","src":"5369:29:40","value":{"arguments":[{"name":"offset","nativeSrc":"5385:6:40","nodeType":"YulIdentifier","src":"5385:6:40"},{"kind":"number","nativeSrc":"5393:4:40","nodeType":"YulLiteral","src":"5393:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5381:3:40","nodeType":"YulIdentifier","src":"5381:3:40"},"nativeSrc":"5381:17:40","nodeType":"YulFunctionCall","src":"5381:17:40"},"variableNames":[{"name":"arrayPos","nativeSrc":"5369:8:40","nodeType":"YulIdentifier","src":"5369:8:40"}]},{"body":{"nativeSrc":"5450:16:40","nodeType":"YulBlock","src":"5450:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5459:1:40","nodeType":"YulLiteral","src":"5459:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"5462:1:40","nodeType":"YulLiteral","src":"5462:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5452:6:40","nodeType":"YulIdentifier","src":"5452:6:40"},"nativeSrc":"5452:12:40","nodeType":"YulFunctionCall","src":"5452:12:40"},"nativeSrc":"5452:12:40","nodeType":"YulExpressionStatement","src":"5452:12:40"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"5421:6:40","nodeType":"YulIdentifier","src":"5421:6:40"},{"name":"length","nativeSrc":"5429:6:40","nodeType":"YulIdentifier","src":"5429:6:40"}],"functionName":{"name":"add","nativeSrc":"5417:3:40","nodeType":"YulIdentifier","src":"5417:3:40"},"nativeSrc":"5417:19:40","nodeType":"YulFunctionCall","src":"5417:19:40"},{"kind":"number","nativeSrc":"5438:4:40","nodeType":"YulLiteral","src":"5438:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5413:3:40","nodeType":"YulIdentifier","src":"5413:3:40"},"nativeSrc":"5413:30:40","nodeType":"YulFunctionCall","src":"5413:30:40"},{"name":"end","nativeSrc":"5445:3:40","nodeType":"YulIdentifier","src":"5445:3:40"}],"functionName":{"name":"gt","nativeSrc":"5410:2:40","nodeType":"YulIdentifier","src":"5410:2:40"},"nativeSrc":"5410:39:40","nodeType":"YulFunctionCall","src":"5410:39:40"},"nativeSrc":"5407:59:40","nodeType":"YulIf","src":"5407:59:40"}]},"name":"abi_decode_bytes_calldata","nativeSrc":"5125:347:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"5160:6:40","nodeType":"YulTypedName","src":"5160:6:40","type":""},{"name":"end","nativeSrc":"5168:3:40","nodeType":"YulTypedName","src":"5168:3:40","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"5176:8:40","nodeType":"YulTypedName","src":"5176:8:40","type":""},{"name":"length","nativeSrc":"5186:6:40","nodeType":"YulTypedName","src":"5186:6:40","type":""}],"src":"5125:347:40"},{"body":{"nativeSrc":"5751:949:40","nodeType":"YulBlock","src":"5751:949:40","statements":[{"body":{"nativeSrc":"5798:16:40","nodeType":"YulBlock","src":"5798:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5807:1:40","nodeType":"YulLiteral","src":"5807:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"5810:1:40","nodeType":"YulLiteral","src":"5810:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5800:6:40","nodeType":"YulIdentifier","src":"5800:6:40"},"nativeSrc":"5800:12:40","nodeType":"YulFunctionCall","src":"5800:12:40"},"nativeSrc":"5800:12:40","nodeType":"YulExpressionStatement","src":"5800:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5772:7:40","nodeType":"YulIdentifier","src":"5772:7:40"},{"name":"headStart","nativeSrc":"5781:9:40","nodeType":"YulIdentifier","src":"5781:9:40"}],"functionName":{"name":"sub","nativeSrc":"5768:3:40","nodeType":"YulIdentifier","src":"5768:3:40"},"nativeSrc":"5768:23:40","nodeType":"YulFunctionCall","src":"5768:23:40"},{"kind":"number","nativeSrc":"5793:3:40","nodeType":"YulLiteral","src":"5793:3:40","type":"","value":"320"}],"functionName":{"name":"slt","nativeSrc":"5764:3:40","nodeType":"YulIdentifier","src":"5764:3:40"},"nativeSrc":"5764:33:40","nodeType":"YulFunctionCall","src":"5764:33:40"},"nativeSrc":"5761:53:40","nodeType":"YulIf","src":"5761:53:40"},{"nativeSrc":"5823:39:40","nodeType":"YulAssignment","src":"5823:39:40","value":{"arguments":[{"name":"headStart","nativeSrc":"5852:9:40","nodeType":"YulIdentifier","src":"5852:9:40"}],"functionName":{"name":"abi_decode_address","nativeSrc":"5833:18:40","nodeType":"YulIdentifier","src":"5833:18:40"},"nativeSrc":"5833:29:40","nodeType":"YulFunctionCall","src":"5833:29:40"},"variableNames":[{"name":"value0","nativeSrc":"5823:6:40","nodeType":"YulIdentifier","src":"5823:6:40"}]},{"nativeSrc":"5871:42:40","nodeType":"YulAssignment","src":"5871:42:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5898:9:40","nodeType":"YulIdentifier","src":"5898:9:40"},{"kind":"number","nativeSrc":"5909:2:40","nodeType":"YulLiteral","src":"5909:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5894:3:40","nodeType":"YulIdentifier","src":"5894:3:40"},"nativeSrc":"5894:18:40","nodeType":"YulFunctionCall","src":"5894:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"5881:12:40","nodeType":"YulIdentifier","src":"5881:12:40"},"nativeSrc":"5881:32:40","nodeType":"YulFunctionCall","src":"5881:32:40"},"variableNames":[{"name":"value1","nativeSrc":"5871:6:40","nodeType":"YulIdentifier","src":"5871:6:40"}]},{"nativeSrc":"5922:28:40","nodeType":"YulVariableDeclaration","src":"5922:28:40","value":{"kind":"number","nativeSrc":"5932:18:40","nodeType":"YulLiteral","src":"5932:18:40","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"5926:2:40","nodeType":"YulTypedName","src":"5926:2:40","type":""}]},{"body":{"nativeSrc":"6003:16:40","nodeType":"YulBlock","src":"6003:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6012:1:40","nodeType":"YulLiteral","src":"6012:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"6015:1:40","nodeType":"YulLiteral","src":"6015:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6005:6:40","nodeType":"YulIdentifier","src":"6005:6:40"},"nativeSrc":"6005:12:40","nodeType":"YulFunctionCall","src":"6005:12:40"},"nativeSrc":"6005:12:40","nodeType":"YulExpressionStatement","src":"6005:12:40"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5982:9:40","nodeType":"YulIdentifier","src":"5982:9:40"},{"kind":"number","nativeSrc":"5993:2:40","nodeType":"YulLiteral","src":"5993:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5978:3:40","nodeType":"YulIdentifier","src":"5978:3:40"},"nativeSrc":"5978:18:40","nodeType":"YulFunctionCall","src":"5978:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"5965:12:40","nodeType":"YulIdentifier","src":"5965:12:40"},"nativeSrc":"5965:32:40","nodeType":"YulFunctionCall","src":"5965:32:40"},{"name":"_1","nativeSrc":"5999:2:40","nodeType":"YulIdentifier","src":"5999:2:40"}],"functionName":{"name":"gt","nativeSrc":"5962:2:40","nodeType":"YulIdentifier","src":"5962:2:40"},"nativeSrc":"5962:40:40","nodeType":"YulFunctionCall","src":"5962:40:40"},"nativeSrc":"5959:60:40","nodeType":"YulIf","src":"5959:60:40"},{"nativeSrc":"6028:110:40","nodeType":"YulVariableDeclaration","src":"6028:110:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6084:9:40","nodeType":"YulIdentifier","src":"6084:9:40"},{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6112:9:40","nodeType":"YulIdentifier","src":"6112:9:40"},{"kind":"number","nativeSrc":"6123:2:40","nodeType":"YulLiteral","src":"6123:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6108:3:40","nodeType":"YulIdentifier","src":"6108:3:40"},"nativeSrc":"6108:18:40","nodeType":"YulFunctionCall","src":"6108:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"6095:12:40","nodeType":"YulIdentifier","src":"6095:12:40"},"nativeSrc":"6095:32:40","nodeType":"YulFunctionCall","src":"6095:32:40"}],"functionName":{"name":"add","nativeSrc":"6080:3:40","nodeType":"YulIdentifier","src":"6080:3:40"},"nativeSrc":"6080:48:40","nodeType":"YulFunctionCall","src":"6080:48:40"},{"name":"dataEnd","nativeSrc":"6130:7:40","nodeType":"YulIdentifier","src":"6130:7:40"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"6054:25:40","nodeType":"YulIdentifier","src":"6054:25:40"},"nativeSrc":"6054:84:40","nodeType":"YulFunctionCall","src":"6054:84:40"},"variables":[{"name":"value2_1","nativeSrc":"6032:8:40","nodeType":"YulTypedName","src":"6032:8:40","type":""},{"name":"value3_1","nativeSrc":"6042:8:40","nodeType":"YulTypedName","src":"6042:8:40","type":""}]},{"nativeSrc":"6147:18:40","nodeType":"YulAssignment","src":"6147:18:40","value":{"name":"value2_1","nativeSrc":"6157:8:40","nodeType":"YulIdentifier","src":"6157:8:40"},"variableNames":[{"name":"value2","nativeSrc":"6147:6:40","nodeType":"YulIdentifier","src":"6147:6:40"}]},{"nativeSrc":"6174:18:40","nodeType":"YulAssignment","src":"6174:18:40","value":{"name":"value3_1","nativeSrc":"6184:8:40","nodeType":"YulIdentifier","src":"6184:8:40"},"variableNames":[{"name":"value3","nativeSrc":"6174:6:40","nodeType":"YulIdentifier","src":"6174:6:40"}]},{"nativeSrc":"6201:55:40","nodeType":"YulAssignment","src":"6201:55:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6241:9:40","nodeType":"YulIdentifier","src":"6241:9:40"},{"kind":"number","nativeSrc":"6252:2:40","nodeType":"YulLiteral","src":"6252:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6237:3:40","nodeType":"YulIdentifier","src":"6237:3:40"},"nativeSrc":"6237:18:40","nodeType":"YulFunctionCall","src":"6237:18:40"}],"functionName":{"name":"abi_decode_enum_Operation","nativeSrc":"6211:25:40","nodeType":"YulIdentifier","src":"6211:25:40"},"nativeSrc":"6211:45:40","nodeType":"YulFunctionCall","src":"6211:45:40"},"variableNames":[{"name":"value4","nativeSrc":"6201:6:40","nodeType":"YulIdentifier","src":"6201:6:40"}]},{"nativeSrc":"6265:43:40","nodeType":"YulAssignment","src":"6265:43:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6292:9:40","nodeType":"YulIdentifier","src":"6292:9:40"},{"kind":"number","nativeSrc":"6303:3:40","nodeType":"YulLiteral","src":"6303:3:40","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"6288:3:40","nodeType":"YulIdentifier","src":"6288:3:40"},"nativeSrc":"6288:19:40","nodeType":"YulFunctionCall","src":"6288:19:40"}],"functionName":{"name":"calldataload","nativeSrc":"6275:12:40","nodeType":"YulIdentifier","src":"6275:12:40"},"nativeSrc":"6275:33:40","nodeType":"YulFunctionCall","src":"6275:33:40"},"variableNames":[{"name":"value5","nativeSrc":"6265:6:40","nodeType":"YulIdentifier","src":"6265:6:40"}]},{"nativeSrc":"6317:43:40","nodeType":"YulAssignment","src":"6317:43:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6344:9:40","nodeType":"YulIdentifier","src":"6344:9:40"},{"kind":"number","nativeSrc":"6355:3:40","nodeType":"YulLiteral","src":"6355:3:40","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"6340:3:40","nodeType":"YulIdentifier","src":"6340:3:40"},"nativeSrc":"6340:19:40","nodeType":"YulFunctionCall","src":"6340:19:40"}],"functionName":{"name":"calldataload","nativeSrc":"6327:12:40","nodeType":"YulIdentifier","src":"6327:12:40"},"nativeSrc":"6327:33:40","nodeType":"YulFunctionCall","src":"6327:33:40"},"variableNames":[{"name":"value6","nativeSrc":"6317:6:40","nodeType":"YulIdentifier","src":"6317:6:40"}]},{"nativeSrc":"6369:43:40","nodeType":"YulAssignment","src":"6369:43:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6396:9:40","nodeType":"YulIdentifier","src":"6396:9:40"},{"kind":"number","nativeSrc":"6407:3:40","nodeType":"YulLiteral","src":"6407:3:40","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"6392:3:40","nodeType":"YulIdentifier","src":"6392:3:40"},"nativeSrc":"6392:19:40","nodeType":"YulFunctionCall","src":"6392:19:40"}],"functionName":{"name":"calldataload","nativeSrc":"6379:12:40","nodeType":"YulIdentifier","src":"6379:12:40"},"nativeSrc":"6379:33:40","nodeType":"YulFunctionCall","src":"6379:33:40"},"variableNames":[{"name":"value7","nativeSrc":"6369:6:40","nodeType":"YulIdentifier","src":"6369:6:40"}]},{"nativeSrc":"6421:49:40","nodeType":"YulAssignment","src":"6421:49:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6454:9:40","nodeType":"YulIdentifier","src":"6454:9:40"},{"kind":"number","nativeSrc":"6465:3:40","nodeType":"YulLiteral","src":"6465:3:40","type":"","value":"224"}],"functionName":{"name":"add","nativeSrc":"6450:3:40","nodeType":"YulIdentifier","src":"6450:3:40"},"nativeSrc":"6450:19:40","nodeType":"YulFunctionCall","src":"6450:19:40"}],"functionName":{"name":"abi_decode_address","nativeSrc":"6431:18:40","nodeType":"YulIdentifier","src":"6431:18:40"},"nativeSrc":"6431:39:40","nodeType":"YulFunctionCall","src":"6431:39:40"},"variableNames":[{"name":"value8","nativeSrc":"6421:6:40","nodeType":"YulIdentifier","src":"6421:6:40"}]},{"nativeSrc":"6479:49:40","nodeType":"YulAssignment","src":"6479:49:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6512:9:40","nodeType":"YulIdentifier","src":"6512:9:40"},{"kind":"number","nativeSrc":"6523:3:40","nodeType":"YulLiteral","src":"6523:3:40","type":"","value":"256"}],"functionName":{"name":"add","nativeSrc":"6508:3:40","nodeType":"YulIdentifier","src":"6508:3:40"},"nativeSrc":"6508:19:40","nodeType":"YulFunctionCall","src":"6508:19:40"}],"functionName":{"name":"abi_decode_address","nativeSrc":"6489:18:40","nodeType":"YulIdentifier","src":"6489:18:40"},"nativeSrc":"6489:39:40","nodeType":"YulFunctionCall","src":"6489:39:40"},"variableNames":[{"name":"value9","nativeSrc":"6479:6:40","nodeType":"YulIdentifier","src":"6479:6:40"}]},{"body":{"nativeSrc":"6582:16:40","nodeType":"YulBlock","src":"6582:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6591:1:40","nodeType":"YulLiteral","src":"6591:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"6594:1:40","nodeType":"YulLiteral","src":"6594:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6584:6:40","nodeType":"YulIdentifier","src":"6584:6:40"},"nativeSrc":"6584:12:40","nodeType":"YulFunctionCall","src":"6584:12:40"},"nativeSrc":"6584:12:40","nodeType":"YulExpressionStatement","src":"6584:12:40"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6560:9:40","nodeType":"YulIdentifier","src":"6560:9:40"},{"kind":"number","nativeSrc":"6571:3:40","nodeType":"YulLiteral","src":"6571:3:40","type":"","value":"288"}],"functionName":{"name":"add","nativeSrc":"6556:3:40","nodeType":"YulIdentifier","src":"6556:3:40"},"nativeSrc":"6556:19:40","nodeType":"YulFunctionCall","src":"6556:19:40"}],"functionName":{"name":"calldataload","nativeSrc":"6543:12:40","nodeType":"YulIdentifier","src":"6543:12:40"},"nativeSrc":"6543:33:40","nodeType":"YulFunctionCall","src":"6543:33:40"},{"name":"_1","nativeSrc":"6578:2:40","nodeType":"YulIdentifier","src":"6578:2:40"}],"functionName":{"name":"gt","nativeSrc":"6540:2:40","nodeType":"YulIdentifier","src":"6540:2:40"},"nativeSrc":"6540:41:40","nodeType":"YulFunctionCall","src":"6540:41:40"},"nativeSrc":"6537:61:40","nodeType":"YulIf","src":"6537:61:40"},{"nativeSrc":"6607:87:40","nodeType":"YulAssignment","src":"6607:87:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6639:9:40","nodeType":"YulIdentifier","src":"6639:9:40"},{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6667:9:40","nodeType":"YulIdentifier","src":"6667:9:40"},{"kind":"number","nativeSrc":"6678:3:40","nodeType":"YulLiteral","src":"6678:3:40","type":"","value":"288"}],"functionName":{"name":"add","nativeSrc":"6663:3:40","nodeType":"YulIdentifier","src":"6663:3:40"},"nativeSrc":"6663:19:40","nodeType":"YulFunctionCall","src":"6663:19:40"}],"functionName":{"name":"calldataload","nativeSrc":"6650:12:40","nodeType":"YulIdentifier","src":"6650:12:40"},"nativeSrc":"6650:33:40","nodeType":"YulFunctionCall","src":"6650:33:40"}],"functionName":{"name":"add","nativeSrc":"6635:3:40","nodeType":"YulIdentifier","src":"6635:3:40"},"nativeSrc":"6635:49:40","nodeType":"YulFunctionCall","src":"6635:49:40"},{"name":"dataEnd","nativeSrc":"6686:7:40","nodeType":"YulIdentifier","src":"6686:7:40"}],"functionName":{"name":"abi_decode_bytes","nativeSrc":"6618:16:40","nodeType":"YulIdentifier","src":"6618:16:40"},"nativeSrc":"6618:76:40","nodeType":"YulFunctionCall","src":"6618:76:40"},"variableNames":[{"name":"value10","nativeSrc":"6607:7:40","nodeType":"YulIdentifier","src":"6607:7:40"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptrt_enum$_Operation_$3022t_uint256t_uint256t_uint256t_addresst_address_payablet_bytes_memory_ptr","nativeSrc":"5477:1223:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5636:9:40","nodeType":"YulTypedName","src":"5636:9:40","type":""},{"name":"dataEnd","nativeSrc":"5647:7:40","nodeType":"YulTypedName","src":"5647:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5659:6:40","nodeType":"YulTypedName","src":"5659:6:40","type":""},{"name":"value1","nativeSrc":"5667:6:40","nodeType":"YulTypedName","src":"5667:6:40","type":""},{"name":"value2","nativeSrc":"5675:6:40","nodeType":"YulTypedName","src":"5675:6:40","type":""},{"name":"value3","nativeSrc":"5683:6:40","nodeType":"YulTypedName","src":"5683:6:40","type":""},{"name":"value4","nativeSrc":"5691:6:40","nodeType":"YulTypedName","src":"5691:6:40","type":""},{"name":"value5","nativeSrc":"5699:6:40","nodeType":"YulTypedName","src":"5699:6:40","type":""},{"name":"value6","nativeSrc":"5707:6:40","nodeType":"YulTypedName","src":"5707:6:40","type":""},{"name":"value7","nativeSrc":"5715:6:40","nodeType":"YulTypedName","src":"5715:6:40","type":""},{"name":"value8","nativeSrc":"5723:6:40","nodeType":"YulTypedName","src":"5723:6:40","type":""},{"name":"value9","nativeSrc":"5731:6:40","nodeType":"YulTypedName","src":"5731:6:40","type":""},{"name":"value10","nativeSrc":"5739:7:40","nodeType":"YulTypedName","src":"5739:7:40","type":""}],"src":"5477:1223:40"},{"body":{"nativeSrc":"6792:228:40","nodeType":"YulBlock","src":"6792:228:40","statements":[{"body":{"nativeSrc":"6838:16:40","nodeType":"YulBlock","src":"6838:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6847:1:40","nodeType":"YulLiteral","src":"6847:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"6850:1:40","nodeType":"YulLiteral","src":"6850:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6840:6:40","nodeType":"YulIdentifier","src":"6840:6:40"},"nativeSrc":"6840:12:40","nodeType":"YulFunctionCall","src":"6840:12:40"},"nativeSrc":"6840:12:40","nodeType":"YulExpressionStatement","src":"6840:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6813:7:40","nodeType":"YulIdentifier","src":"6813:7:40"},{"name":"headStart","nativeSrc":"6822:9:40","nodeType":"YulIdentifier","src":"6822:9:40"}],"functionName":{"name":"sub","nativeSrc":"6809:3:40","nodeType":"YulIdentifier","src":"6809:3:40"},"nativeSrc":"6809:23:40","nodeType":"YulFunctionCall","src":"6809:23:40"},{"kind":"number","nativeSrc":"6834:2:40","nodeType":"YulLiteral","src":"6834:2:40","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"6805:3:40","nodeType":"YulIdentifier","src":"6805:3:40"},"nativeSrc":"6805:32:40","nodeType":"YulFunctionCall","src":"6805:32:40"},"nativeSrc":"6802:52:40","nodeType":"YulIf","src":"6802:52:40"},{"nativeSrc":"6863:36:40","nodeType":"YulVariableDeclaration","src":"6863:36:40","value":{"arguments":[{"name":"headStart","nativeSrc":"6889:9:40","nodeType":"YulIdentifier","src":"6889:9:40"}],"functionName":{"name":"calldataload","nativeSrc":"6876:12:40","nodeType":"YulIdentifier","src":"6876:12:40"},"nativeSrc":"6876:23:40","nodeType":"YulFunctionCall","src":"6876:23:40"},"variables":[{"name":"value","nativeSrc":"6867:5:40","nodeType":"YulTypedName","src":"6867:5:40","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"6933:5:40","nodeType":"YulIdentifier","src":"6933:5:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"6908:24:40","nodeType":"YulIdentifier","src":"6908:24:40"},"nativeSrc":"6908:31:40","nodeType":"YulFunctionCall","src":"6908:31:40"},"nativeSrc":"6908:31:40","nodeType":"YulExpressionStatement","src":"6908:31:40"},{"nativeSrc":"6948:15:40","nodeType":"YulAssignment","src":"6948:15:40","value":{"name":"value","nativeSrc":"6958:5:40","nodeType":"YulIdentifier","src":"6958:5:40"},"variableNames":[{"name":"value0","nativeSrc":"6948:6:40","nodeType":"YulIdentifier","src":"6948:6:40"}]},{"nativeSrc":"6972:42:40","nodeType":"YulAssignment","src":"6972:42:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6999:9:40","nodeType":"YulIdentifier","src":"6999:9:40"},{"kind":"number","nativeSrc":"7010:2:40","nodeType":"YulLiteral","src":"7010:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6995:3:40","nodeType":"YulIdentifier","src":"6995:3:40"},"nativeSrc":"6995:18:40","nodeType":"YulFunctionCall","src":"6995:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"6982:12:40","nodeType":"YulIdentifier","src":"6982:12:40"},"nativeSrc":"6982:32:40","nodeType":"YulFunctionCall","src":"6982:32:40"},"variableNames":[{"name":"value1","nativeSrc":"6972:6:40","nodeType":"YulIdentifier","src":"6972:6:40"}]}]},"name":"abi_decode_tuple_t_addresst_bytes32","nativeSrc":"6705:315:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6750:9:40","nodeType":"YulTypedName","src":"6750:9:40","type":""},{"name":"dataEnd","nativeSrc":"6761:7:40","nodeType":"YulTypedName","src":"6761:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6773:6:40","nodeType":"YulTypedName","src":"6773:6:40","type":""},{"name":"value1","nativeSrc":"6781:6:40","nodeType":"YulTypedName","src":"6781:6:40","type":""}],"src":"6705:315:40"},{"body":{"nativeSrc":"7147:485:40","nodeType":"YulBlock","src":"7147:485:40","statements":[{"body":{"nativeSrc":"7193:16:40","nodeType":"YulBlock","src":"7193:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7202:1:40","nodeType":"YulLiteral","src":"7202:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"7205:1:40","nodeType":"YulLiteral","src":"7205:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7195:6:40","nodeType":"YulIdentifier","src":"7195:6:40"},"nativeSrc":"7195:12:40","nodeType":"YulFunctionCall","src":"7195:12:40"},"nativeSrc":"7195:12:40","nodeType":"YulExpressionStatement","src":"7195:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7168:7:40","nodeType":"YulIdentifier","src":"7168:7:40"},{"name":"headStart","nativeSrc":"7177:9:40","nodeType":"YulIdentifier","src":"7177:9:40"}],"functionName":{"name":"sub","nativeSrc":"7164:3:40","nodeType":"YulIdentifier","src":"7164:3:40"},"nativeSrc":"7164:23:40","nodeType":"YulFunctionCall","src":"7164:23:40"},{"kind":"number","nativeSrc":"7189:2:40","nodeType":"YulLiteral","src":"7189:2:40","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"7160:3:40","nodeType":"YulIdentifier","src":"7160:3:40"},"nativeSrc":"7160:32:40","nodeType":"YulFunctionCall","src":"7160:32:40"},"nativeSrc":"7157:52:40","nodeType":"YulIf","src":"7157:52:40"},{"nativeSrc":"7218:33:40","nodeType":"YulAssignment","src":"7218:33:40","value":{"arguments":[{"name":"headStart","nativeSrc":"7241:9:40","nodeType":"YulIdentifier","src":"7241:9:40"}],"functionName":{"name":"calldataload","nativeSrc":"7228:12:40","nodeType":"YulIdentifier","src":"7228:12:40"},"nativeSrc":"7228:23:40","nodeType":"YulFunctionCall","src":"7228:23:40"},"variableNames":[{"name":"value0","nativeSrc":"7218:6:40","nodeType":"YulIdentifier","src":"7218:6:40"}]},{"nativeSrc":"7260:46:40","nodeType":"YulVariableDeclaration","src":"7260:46:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7291:9:40","nodeType":"YulIdentifier","src":"7291:9:40"},{"kind":"number","nativeSrc":"7302:2:40","nodeType":"YulLiteral","src":"7302:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7287:3:40","nodeType":"YulIdentifier","src":"7287:3:40"},"nativeSrc":"7287:18:40","nodeType":"YulFunctionCall","src":"7287:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"7274:12:40","nodeType":"YulIdentifier","src":"7274:12:40"},"nativeSrc":"7274:32:40","nodeType":"YulFunctionCall","src":"7274:32:40"},"variables":[{"name":"offset","nativeSrc":"7264:6:40","nodeType":"YulTypedName","src":"7264:6:40","type":""}]},{"nativeSrc":"7315:28:40","nodeType":"YulVariableDeclaration","src":"7315:28:40","value":{"kind":"number","nativeSrc":"7325:18:40","nodeType":"YulLiteral","src":"7325:18:40","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"7319:2:40","nodeType":"YulTypedName","src":"7319:2:40","type":""}]},{"body":{"nativeSrc":"7370:16:40","nodeType":"YulBlock","src":"7370:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7379:1:40","nodeType":"YulLiteral","src":"7379:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"7382:1:40","nodeType":"YulLiteral","src":"7382:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7372:6:40","nodeType":"YulIdentifier","src":"7372:6:40"},"nativeSrc":"7372:12:40","nodeType":"YulFunctionCall","src":"7372:12:40"},"nativeSrc":"7372:12:40","nodeType":"YulExpressionStatement","src":"7372:12:40"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"7358:6:40","nodeType":"YulIdentifier","src":"7358:6:40"},{"name":"_1","nativeSrc":"7366:2:40","nodeType":"YulIdentifier","src":"7366:2:40"}],"functionName":{"name":"gt","nativeSrc":"7355:2:40","nodeType":"YulIdentifier","src":"7355:2:40"},"nativeSrc":"7355:14:40","nodeType":"YulFunctionCall","src":"7355:14:40"},"nativeSrc":"7352:34:40","nodeType":"YulIf","src":"7352:34:40"},{"nativeSrc":"7395:59:40","nodeType":"YulAssignment","src":"7395:59:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7426:9:40","nodeType":"YulIdentifier","src":"7426:9:40"},{"name":"offset","nativeSrc":"7437:6:40","nodeType":"YulIdentifier","src":"7437:6:40"}],"functionName":{"name":"add","nativeSrc":"7422:3:40","nodeType":"YulIdentifier","src":"7422:3:40"},"nativeSrc":"7422:22:40","nodeType":"YulFunctionCall","src":"7422:22:40"},{"name":"dataEnd","nativeSrc":"7446:7:40","nodeType":"YulIdentifier","src":"7446:7:40"}],"functionName":{"name":"abi_decode_bytes","nativeSrc":"7405:16:40","nodeType":"YulIdentifier","src":"7405:16:40"},"nativeSrc":"7405:49:40","nodeType":"YulFunctionCall","src":"7405:49:40"},"variableNames":[{"name":"value1","nativeSrc":"7395:6:40","nodeType":"YulIdentifier","src":"7395:6:40"}]},{"nativeSrc":"7463:48:40","nodeType":"YulVariableDeclaration","src":"7463:48:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7496:9:40","nodeType":"YulIdentifier","src":"7496:9:40"},{"kind":"number","nativeSrc":"7507:2:40","nodeType":"YulLiteral","src":"7507:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7492:3:40","nodeType":"YulIdentifier","src":"7492:3:40"},"nativeSrc":"7492:18:40","nodeType":"YulFunctionCall","src":"7492:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"7479:12:40","nodeType":"YulIdentifier","src":"7479:12:40"},"nativeSrc":"7479:32:40","nodeType":"YulFunctionCall","src":"7479:32:40"},"variables":[{"name":"offset_1","nativeSrc":"7467:8:40","nodeType":"YulTypedName","src":"7467:8:40","type":""}]},{"body":{"nativeSrc":"7540:16:40","nodeType":"YulBlock","src":"7540:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7549:1:40","nodeType":"YulLiteral","src":"7549:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"7552:1:40","nodeType":"YulLiteral","src":"7552:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7542:6:40","nodeType":"YulIdentifier","src":"7542:6:40"},"nativeSrc":"7542:12:40","nodeType":"YulFunctionCall","src":"7542:12:40"},"nativeSrc":"7542:12:40","nodeType":"YulExpressionStatement","src":"7542:12:40"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"7526:8:40","nodeType":"YulIdentifier","src":"7526:8:40"},{"name":"_1","nativeSrc":"7536:2:40","nodeType":"YulIdentifier","src":"7536:2:40"}],"functionName":{"name":"gt","nativeSrc":"7523:2:40","nodeType":"YulIdentifier","src":"7523:2:40"},"nativeSrc":"7523:16:40","nodeType":"YulFunctionCall","src":"7523:16:40"},"nativeSrc":"7520:36:40","nodeType":"YulIf","src":"7520:36:40"},{"nativeSrc":"7565:61:40","nodeType":"YulAssignment","src":"7565:61:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7596:9:40","nodeType":"YulIdentifier","src":"7596:9:40"},{"name":"offset_1","nativeSrc":"7607:8:40","nodeType":"YulIdentifier","src":"7607:8:40"}],"functionName":{"name":"add","nativeSrc":"7592:3:40","nodeType":"YulIdentifier","src":"7592:3:40"},"nativeSrc":"7592:24:40","nodeType":"YulFunctionCall","src":"7592:24:40"},{"name":"dataEnd","nativeSrc":"7618:7:40","nodeType":"YulIdentifier","src":"7618:7:40"}],"functionName":{"name":"abi_decode_bytes","nativeSrc":"7575:16:40","nodeType":"YulIdentifier","src":"7575:16:40"},"nativeSrc":"7575:51:40","nodeType":"YulFunctionCall","src":"7575:51:40"},"variableNames":[{"name":"value2","nativeSrc":"7565:6:40","nodeType":"YulIdentifier","src":"7565:6:40"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes_memory_ptrt_bytes_memory_ptr","nativeSrc":"7025:607:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7097:9:40","nodeType":"YulTypedName","src":"7097:9:40","type":""},{"name":"dataEnd","nativeSrc":"7108:7:40","nodeType":"YulTypedName","src":"7108:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7120:6:40","nodeType":"YulTypedName","src":"7120:6:40","type":""},{"name":"value1","nativeSrc":"7128:6:40","nodeType":"YulTypedName","src":"7128:6:40","type":""},{"name":"value2","nativeSrc":"7136:6:40","nodeType":"YulTypedName","src":"7136:6:40","type":""}],"src":"7025:607:40"},{"body":{"nativeSrc":"7681:60:40","nodeType":"YulBlock","src":"7681:60:40","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"7698:3:40","nodeType":"YulIdentifier","src":"7698:3:40"},{"arguments":[{"name":"value","nativeSrc":"7707:5:40","nodeType":"YulIdentifier","src":"7707:5:40"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"7722:3:40","nodeType":"YulLiteral","src":"7722:3:40","type":"","value":"160"},{"kind":"number","nativeSrc":"7727:1:40","nodeType":"YulLiteral","src":"7727:1:40","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"7718:3:40","nodeType":"YulIdentifier","src":"7718:3:40"},"nativeSrc":"7718:11:40","nodeType":"YulFunctionCall","src":"7718:11:40"},{"kind":"number","nativeSrc":"7731:1:40","nodeType":"YulLiteral","src":"7731:1:40","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"7714:3:40","nodeType":"YulIdentifier","src":"7714:3:40"},"nativeSrc":"7714:19:40","nodeType":"YulFunctionCall","src":"7714:19:40"}],"functionName":{"name":"and","nativeSrc":"7703:3:40","nodeType":"YulIdentifier","src":"7703:3:40"},"nativeSrc":"7703:31:40","nodeType":"YulFunctionCall","src":"7703:31:40"}],"functionName":{"name":"mstore","nativeSrc":"7691:6:40","nodeType":"YulIdentifier","src":"7691:6:40"},"nativeSrc":"7691:44:40","nodeType":"YulFunctionCall","src":"7691:44:40"},"nativeSrc":"7691:44:40","nodeType":"YulExpressionStatement","src":"7691:44:40"}]},"name":"abi_encode_address","nativeSrc":"7637:104:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"7665:5:40","nodeType":"YulTypedName","src":"7665:5:40","type":""},{"name":"pos","nativeSrc":"7672:3:40","nodeType":"YulTypedName","src":"7672:3:40","type":""}],"src":"7637:104:40"},{"body":{"nativeSrc":"7807:404:40","nodeType":"YulBlock","src":"7807:404:40","statements":[{"nativeSrc":"7817:26:40","nodeType":"YulVariableDeclaration","src":"7817:26:40","value":{"arguments":[{"name":"value","nativeSrc":"7837:5:40","nodeType":"YulIdentifier","src":"7837:5:40"}],"functionName":{"name":"mload","nativeSrc":"7831:5:40","nodeType":"YulIdentifier","src":"7831:5:40"},"nativeSrc":"7831:12:40","nodeType":"YulFunctionCall","src":"7831:12:40"},"variables":[{"name":"length","nativeSrc":"7821:6:40","nodeType":"YulTypedName","src":"7821:6:40","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"7859:3:40","nodeType":"YulIdentifier","src":"7859:3:40"},{"name":"length","nativeSrc":"7864:6:40","nodeType":"YulIdentifier","src":"7864:6:40"}],"functionName":{"name":"mstore","nativeSrc":"7852:6:40","nodeType":"YulIdentifier","src":"7852:6:40"},"nativeSrc":"7852:19:40","nodeType":"YulFunctionCall","src":"7852:19:40"},"nativeSrc":"7852:19:40","nodeType":"YulExpressionStatement","src":"7852:19:40"},{"nativeSrc":"7880:14:40","nodeType":"YulVariableDeclaration","src":"7880:14:40","value":{"kind":"number","nativeSrc":"7890:4:40","nodeType":"YulLiteral","src":"7890:4:40","type":"","value":"0x20"},"variables":[{"name":"_1","nativeSrc":"7884:2:40","nodeType":"YulTypedName","src":"7884:2:40","type":""}]},{"nativeSrc":"7903:21:40","nodeType":"YulAssignment","src":"7903:21:40","value":{"arguments":[{"name":"pos","nativeSrc":"7914:3:40","nodeType":"YulIdentifier","src":"7914:3:40"},{"kind":"number","nativeSrc":"7919:4:40","nodeType":"YulLiteral","src":"7919:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"7910:3:40","nodeType":"YulIdentifier","src":"7910:3:40"},"nativeSrc":"7910:14:40","nodeType":"YulFunctionCall","src":"7910:14:40"},"variableNames":[{"name":"pos","nativeSrc":"7903:3:40","nodeType":"YulIdentifier","src":"7903:3:40"}]},{"nativeSrc":"7933:30:40","nodeType":"YulVariableDeclaration","src":"7933:30:40","value":{"arguments":[{"name":"value","nativeSrc":"7951:5:40","nodeType":"YulIdentifier","src":"7951:5:40"},{"kind":"number","nativeSrc":"7958:4:40","nodeType":"YulLiteral","src":"7958:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"7947:3:40","nodeType":"YulIdentifier","src":"7947:3:40"},"nativeSrc":"7947:16:40","nodeType":"YulFunctionCall","src":"7947:16:40"},"variables":[{"name":"srcPtr","nativeSrc":"7937:6:40","nodeType":"YulTypedName","src":"7937:6:40","type":""}]},{"nativeSrc":"7972:10:40","nodeType":"YulVariableDeclaration","src":"7972:10:40","value":{"kind":"number","nativeSrc":"7981:1:40","nodeType":"YulLiteral","src":"7981:1:40","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"7976:1:40","nodeType":"YulTypedName","src":"7976:1:40","type":""}]},{"body":{"nativeSrc":"8040:146:40","nodeType":"YulBlock","src":"8040:146:40","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"8061:3:40","nodeType":"YulIdentifier","src":"8061:3:40"},{"arguments":[{"arguments":[{"name":"srcPtr","nativeSrc":"8076:6:40","nodeType":"YulIdentifier","src":"8076:6:40"}],"functionName":{"name":"mload","nativeSrc":"8070:5:40","nodeType":"YulIdentifier","src":"8070:5:40"},"nativeSrc":"8070:13:40","nodeType":"YulFunctionCall","src":"8070:13:40"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"8093:3:40","nodeType":"YulLiteral","src":"8093:3:40","type":"","value":"160"},{"kind":"number","nativeSrc":"8098:1:40","nodeType":"YulLiteral","src":"8098:1:40","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"8089:3:40","nodeType":"YulIdentifier","src":"8089:3:40"},"nativeSrc":"8089:11:40","nodeType":"YulFunctionCall","src":"8089:11:40"},{"kind":"number","nativeSrc":"8102:1:40","nodeType":"YulLiteral","src":"8102:1:40","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"8085:3:40","nodeType":"YulIdentifier","src":"8085:3:40"},"nativeSrc":"8085:19:40","nodeType":"YulFunctionCall","src":"8085:19:40"}],"functionName":{"name":"and","nativeSrc":"8066:3:40","nodeType":"YulIdentifier","src":"8066:3:40"},"nativeSrc":"8066:39:40","nodeType":"YulFunctionCall","src":"8066:39:40"}],"functionName":{"name":"mstore","nativeSrc":"8054:6:40","nodeType":"YulIdentifier","src":"8054:6:40"},"nativeSrc":"8054:52:40","nodeType":"YulFunctionCall","src":"8054:52:40"},"nativeSrc":"8054:52:40","nodeType":"YulExpressionStatement","src":"8054:52:40"},{"nativeSrc":"8119:19:40","nodeType":"YulAssignment","src":"8119:19:40","value":{"arguments":[{"name":"pos","nativeSrc":"8130:3:40","nodeType":"YulIdentifier","src":"8130:3:40"},{"name":"_1","nativeSrc":"8135:2:40","nodeType":"YulIdentifier","src":"8135:2:40"}],"functionName":{"name":"add","nativeSrc":"8126:3:40","nodeType":"YulIdentifier","src":"8126:3:40"},"nativeSrc":"8126:12:40","nodeType":"YulFunctionCall","src":"8126:12:40"},"variableNames":[{"name":"pos","nativeSrc":"8119:3:40","nodeType":"YulIdentifier","src":"8119:3:40"}]},{"nativeSrc":"8151:25:40","nodeType":"YulAssignment","src":"8151:25:40","value":{"arguments":[{"name":"srcPtr","nativeSrc":"8165:6:40","nodeType":"YulIdentifier","src":"8165:6:40"},{"name":"_1","nativeSrc":"8173:2:40","nodeType":"YulIdentifier","src":"8173:2:40"}],"functionName":{"name":"add","nativeSrc":"8161:3:40","nodeType":"YulIdentifier","src":"8161:3:40"},"nativeSrc":"8161:15:40","nodeType":"YulFunctionCall","src":"8161:15:40"},"variableNames":[{"name":"srcPtr","nativeSrc":"8151:6:40","nodeType":"YulIdentifier","src":"8151:6:40"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"8002:1:40","nodeType":"YulIdentifier","src":"8002:1:40"},{"name":"length","nativeSrc":"8005:6:40","nodeType":"YulIdentifier","src":"8005:6:40"}],"functionName":{"name":"lt","nativeSrc":"7999:2:40","nodeType":"YulIdentifier","src":"7999:2:40"},"nativeSrc":"7999:13:40","nodeType":"YulFunctionCall","src":"7999:13:40"},"nativeSrc":"7991:195:40","nodeType":"YulForLoop","post":{"nativeSrc":"8013:18:40","nodeType":"YulBlock","src":"8013:18:40","statements":[{"nativeSrc":"8015:14:40","nodeType":"YulAssignment","src":"8015:14:40","value":{"arguments":[{"name":"i","nativeSrc":"8024:1:40","nodeType":"YulIdentifier","src":"8024:1:40"},{"kind":"number","nativeSrc":"8027:1:40","nodeType":"YulLiteral","src":"8027:1:40","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"8020:3:40","nodeType":"YulIdentifier","src":"8020:3:40"},"nativeSrc":"8020:9:40","nodeType":"YulFunctionCall","src":"8020:9:40"},"variableNames":[{"name":"i","nativeSrc":"8015:1:40","nodeType":"YulIdentifier","src":"8015:1:40"}]}]},"pre":{"nativeSrc":"7995:3:40","nodeType":"YulBlock","src":"7995:3:40","statements":[]},"src":"7991:195:40"},{"nativeSrc":"8195:10:40","nodeType":"YulAssignment","src":"8195:10:40","value":{"name":"pos","nativeSrc":"8202:3:40","nodeType":"YulIdentifier","src":"8202:3:40"},"variableNames":[{"name":"end","nativeSrc":"8195:3:40","nodeType":"YulIdentifier","src":"8195:3:40"}]}]},"name":"abi_encode_array_address_dyn","nativeSrc":"7746:465:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"7784:5:40","nodeType":"YulTypedName","src":"7784:5:40","type":""},{"name":"pos","nativeSrc":"7791:3:40","nodeType":"YulTypedName","src":"7791:3:40","type":""}],"returnVariables":[{"name":"end","nativeSrc":"7799:3:40","nodeType":"YulTypedName","src":"7799:3:40","type":""}],"src":"7746:465:40"},{"body":{"nativeSrc":"8367:110:40","nodeType":"YulBlock","src":"8367:110:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8384:9:40","nodeType":"YulIdentifier","src":"8384:9:40"},{"kind":"number","nativeSrc":"8395:2:40","nodeType":"YulLiteral","src":"8395:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"8377:6:40","nodeType":"YulIdentifier","src":"8377:6:40"},"nativeSrc":"8377:21:40","nodeType":"YulFunctionCall","src":"8377:21:40"},"nativeSrc":"8377:21:40","nodeType":"YulExpressionStatement","src":"8377:21:40"},{"nativeSrc":"8407:64:40","nodeType":"YulAssignment","src":"8407:64:40","value":{"arguments":[{"name":"value0","nativeSrc":"8444:6:40","nodeType":"YulIdentifier","src":"8444:6:40"},{"arguments":[{"name":"headStart","nativeSrc":"8456:9:40","nodeType":"YulIdentifier","src":"8456:9:40"},{"kind":"number","nativeSrc":"8467:2:40","nodeType":"YulLiteral","src":"8467:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8452:3:40","nodeType":"YulIdentifier","src":"8452:3:40"},"nativeSrc":"8452:18:40","nodeType":"YulFunctionCall","src":"8452:18:40"}],"functionName":{"name":"abi_encode_array_address_dyn","nativeSrc":"8415:28:40","nodeType":"YulIdentifier","src":"8415:28:40"},"nativeSrc":"8415:56:40","nodeType":"YulFunctionCall","src":"8415:56:40"},"variableNames":[{"name":"tail","nativeSrc":"8407:4:40","nodeType":"YulIdentifier","src":"8407:4:40"}]}]},"name":"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"8216:261:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8336:9:40","nodeType":"YulTypedName","src":"8336:9:40","type":""},{"name":"value0","nativeSrc":"8347:6:40","nodeType":"YulTypedName","src":"8347:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8358:4:40","nodeType":"YulTypedName","src":"8358:4:40","type":""}],"src":"8216:261:40"},{"body":{"nativeSrc":"8578:359:40","nodeType":"YulBlock","src":"8578:359:40","statements":[{"body":{"nativeSrc":"8624:16:40","nodeType":"YulBlock","src":"8624:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8633:1:40","nodeType":"YulLiteral","src":"8633:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"8636:1:40","nodeType":"YulLiteral","src":"8636:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8626:6:40","nodeType":"YulIdentifier","src":"8626:6:40"},"nativeSrc":"8626:12:40","nodeType":"YulFunctionCall","src":"8626:12:40"},"nativeSrc":"8626:12:40","nodeType":"YulExpressionStatement","src":"8626:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8599:7:40","nodeType":"YulIdentifier","src":"8599:7:40"},{"name":"headStart","nativeSrc":"8608:9:40","nodeType":"YulIdentifier","src":"8608:9:40"}],"functionName":{"name":"sub","nativeSrc":"8595:3:40","nodeType":"YulIdentifier","src":"8595:3:40"},"nativeSrc":"8595:23:40","nodeType":"YulFunctionCall","src":"8595:23:40"},{"kind":"number","nativeSrc":"8620:2:40","nodeType":"YulLiteral","src":"8620:2:40","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"8591:3:40","nodeType":"YulIdentifier","src":"8591:3:40"},"nativeSrc":"8591:32:40","nodeType":"YulFunctionCall","src":"8591:32:40"},"nativeSrc":"8588:52:40","nodeType":"YulIf","src":"8588:52:40"},{"nativeSrc":"8649:36:40","nodeType":"YulVariableDeclaration","src":"8649:36:40","value":{"arguments":[{"name":"headStart","nativeSrc":"8675:9:40","nodeType":"YulIdentifier","src":"8675:9:40"}],"functionName":{"name":"calldataload","nativeSrc":"8662:12:40","nodeType":"YulIdentifier","src":"8662:12:40"},"nativeSrc":"8662:23:40","nodeType":"YulFunctionCall","src":"8662:23:40"},"variables":[{"name":"value","nativeSrc":"8653:5:40","nodeType":"YulTypedName","src":"8653:5:40","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"8719:5:40","nodeType":"YulIdentifier","src":"8719:5:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"8694:24:40","nodeType":"YulIdentifier","src":"8694:24:40"},"nativeSrc":"8694:31:40","nodeType":"YulFunctionCall","src":"8694:31:40"},"nativeSrc":"8694:31:40","nodeType":"YulExpressionStatement","src":"8694:31:40"},{"nativeSrc":"8734:15:40","nodeType":"YulAssignment","src":"8734:15:40","value":{"name":"value","nativeSrc":"8744:5:40","nodeType":"YulIdentifier","src":"8744:5:40"},"variableNames":[{"name":"value0","nativeSrc":"8734:6:40","nodeType":"YulIdentifier","src":"8734:6:40"}]},{"nativeSrc":"8758:46:40","nodeType":"YulVariableDeclaration","src":"8758:46:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8789:9:40","nodeType":"YulIdentifier","src":"8789:9:40"},{"kind":"number","nativeSrc":"8800:2:40","nodeType":"YulLiteral","src":"8800:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8785:3:40","nodeType":"YulIdentifier","src":"8785:3:40"},"nativeSrc":"8785:18:40","nodeType":"YulFunctionCall","src":"8785:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"8772:12:40","nodeType":"YulIdentifier","src":"8772:12:40"},"nativeSrc":"8772:32:40","nodeType":"YulFunctionCall","src":"8772:32:40"},"variables":[{"name":"offset","nativeSrc":"8762:6:40","nodeType":"YulTypedName","src":"8762:6:40","type":""}]},{"body":{"nativeSrc":"8847:16:40","nodeType":"YulBlock","src":"8847:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8856:1:40","nodeType":"YulLiteral","src":"8856:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"8859:1:40","nodeType":"YulLiteral","src":"8859:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8849:6:40","nodeType":"YulIdentifier","src":"8849:6:40"},"nativeSrc":"8849:12:40","nodeType":"YulFunctionCall","src":"8849:12:40"},"nativeSrc":"8849:12:40","nodeType":"YulExpressionStatement","src":"8849:12:40"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"8819:6:40","nodeType":"YulIdentifier","src":"8819:6:40"},{"kind":"number","nativeSrc":"8827:18:40","nodeType":"YulLiteral","src":"8827:18:40","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"8816:2:40","nodeType":"YulIdentifier","src":"8816:2:40"},"nativeSrc":"8816:30:40","nodeType":"YulFunctionCall","src":"8816:30:40"},"nativeSrc":"8813:50:40","nodeType":"YulIf","src":"8813:50:40"},{"nativeSrc":"8872:59:40","nodeType":"YulAssignment","src":"8872:59:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8903:9:40","nodeType":"YulIdentifier","src":"8903:9:40"},{"name":"offset","nativeSrc":"8914:6:40","nodeType":"YulIdentifier","src":"8914:6:40"}],"functionName":{"name":"add","nativeSrc":"8899:3:40","nodeType":"YulIdentifier","src":"8899:3:40"},"nativeSrc":"8899:22:40","nodeType":"YulFunctionCall","src":"8899:22:40"},{"name":"dataEnd","nativeSrc":"8923:7:40","nodeType":"YulIdentifier","src":"8923:7:40"}],"functionName":{"name":"abi_decode_bytes","nativeSrc":"8882:16:40","nodeType":"YulIdentifier","src":"8882:16:40"},"nativeSrc":"8882:49:40","nodeType":"YulFunctionCall","src":"8882:49:40"},"variableNames":[{"name":"value1","nativeSrc":"8872:6:40","nodeType":"YulIdentifier","src":"8872:6:40"}]}]},"name":"abi_decode_tuple_t_addresst_bytes_memory_ptr","nativeSrc":"8482:455:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8536:9:40","nodeType":"YulTypedName","src":"8536:9:40","type":""},{"name":"dataEnd","nativeSrc":"8547:7:40","nodeType":"YulTypedName","src":"8547:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8559:6:40","nodeType":"YulTypedName","src":"8559:6:40","type":""},{"name":"value1","nativeSrc":"8567:6:40","nodeType":"YulTypedName","src":"8567:6:40","type":""}],"src":"8482:455:40"},{"body":{"nativeSrc":"9193:1102:40","nodeType":"YulBlock","src":"9193:1102:40","statements":[{"body":{"nativeSrc":"9240:16:40","nodeType":"YulBlock","src":"9240:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9249:1:40","nodeType":"YulLiteral","src":"9249:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"9252:1:40","nodeType":"YulLiteral","src":"9252:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9242:6:40","nodeType":"YulIdentifier","src":"9242:6:40"},"nativeSrc":"9242:12:40","nodeType":"YulFunctionCall","src":"9242:12:40"},"nativeSrc":"9242:12:40","nodeType":"YulExpressionStatement","src":"9242:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"9214:7:40","nodeType":"YulIdentifier","src":"9214:7:40"},{"name":"headStart","nativeSrc":"9223:9:40","nodeType":"YulIdentifier","src":"9223:9:40"}],"functionName":{"name":"sub","nativeSrc":"9210:3:40","nodeType":"YulIdentifier","src":"9210:3:40"},"nativeSrc":"9210:23:40","nodeType":"YulFunctionCall","src":"9210:23:40"},{"kind":"number","nativeSrc":"9235:3:40","nodeType":"YulLiteral","src":"9235:3:40","type":"","value":"256"}],"functionName":{"name":"slt","nativeSrc":"9206:3:40","nodeType":"YulIdentifier","src":"9206:3:40"},"nativeSrc":"9206:33:40","nodeType":"YulFunctionCall","src":"9206:33:40"},"nativeSrc":"9203:53:40","nodeType":"YulIf","src":"9203:53:40"},{"nativeSrc":"9265:37:40","nodeType":"YulVariableDeclaration","src":"9265:37:40","value":{"arguments":[{"name":"headStart","nativeSrc":"9292:9:40","nodeType":"YulIdentifier","src":"9292:9:40"}],"functionName":{"name":"calldataload","nativeSrc":"9279:12:40","nodeType":"YulIdentifier","src":"9279:12:40"},"nativeSrc":"9279:23:40","nodeType":"YulFunctionCall","src":"9279:23:40"},"variables":[{"name":"offset","nativeSrc":"9269:6:40","nodeType":"YulTypedName","src":"9269:6:40","type":""}]},{"nativeSrc":"9311:28:40","nodeType":"YulVariableDeclaration","src":"9311:28:40","value":{"kind":"number","nativeSrc":"9321:18:40","nodeType":"YulLiteral","src":"9321:18:40","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"9315:2:40","nodeType":"YulTypedName","src":"9315:2:40","type":""}]},{"body":{"nativeSrc":"9366:16:40","nodeType":"YulBlock","src":"9366:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9375:1:40","nodeType":"YulLiteral","src":"9375:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"9378:1:40","nodeType":"YulLiteral","src":"9378:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9368:6:40","nodeType":"YulIdentifier","src":"9368:6:40"},"nativeSrc":"9368:12:40","nodeType":"YulFunctionCall","src":"9368:12:40"},"nativeSrc":"9368:12:40","nodeType":"YulExpressionStatement","src":"9368:12:40"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"9354:6:40","nodeType":"YulIdentifier","src":"9354:6:40"},{"name":"_1","nativeSrc":"9362:2:40","nodeType":"YulIdentifier","src":"9362:2:40"}],"functionName":{"name":"gt","nativeSrc":"9351:2:40","nodeType":"YulIdentifier","src":"9351:2:40"},"nativeSrc":"9351:14:40","nodeType":"YulFunctionCall","src":"9351:14:40"},"nativeSrc":"9348:34:40","nodeType":"YulIf","src":"9348:34:40"},{"nativeSrc":"9391:32:40","nodeType":"YulVariableDeclaration","src":"9391:32:40","value":{"arguments":[{"name":"headStart","nativeSrc":"9405:9:40","nodeType":"YulIdentifier","src":"9405:9:40"},{"name":"offset","nativeSrc":"9416:6:40","nodeType":"YulIdentifier","src":"9416:6:40"}],"functionName":{"name":"add","nativeSrc":"9401:3:40","nodeType":"YulIdentifier","src":"9401:3:40"},"nativeSrc":"9401:22:40","nodeType":"YulFunctionCall","src":"9401:22:40"},"variables":[{"name":"_2","nativeSrc":"9395:2:40","nodeType":"YulTypedName","src":"9395:2:40","type":""}]},{"body":{"nativeSrc":"9471:16:40","nodeType":"YulBlock","src":"9471:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9480:1:40","nodeType":"YulLiteral","src":"9480:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"9483:1:40","nodeType":"YulLiteral","src":"9483:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9473:6:40","nodeType":"YulIdentifier","src":"9473:6:40"},"nativeSrc":"9473:12:40","nodeType":"YulFunctionCall","src":"9473:12:40"},"nativeSrc":"9473:12:40","nodeType":"YulExpressionStatement","src":"9473:12:40"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"9450:2:40","nodeType":"YulIdentifier","src":"9450:2:40"},{"kind":"number","nativeSrc":"9454:4:40","nodeType":"YulLiteral","src":"9454:4:40","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"9446:3:40","nodeType":"YulIdentifier","src":"9446:3:40"},"nativeSrc":"9446:13:40","nodeType":"YulFunctionCall","src":"9446:13:40"},{"name":"dataEnd","nativeSrc":"9461:7:40","nodeType":"YulIdentifier","src":"9461:7:40"}],"functionName":{"name":"slt","nativeSrc":"9442:3:40","nodeType":"YulIdentifier","src":"9442:3:40"},"nativeSrc":"9442:27:40","nodeType":"YulFunctionCall","src":"9442:27:40"}],"functionName":{"name":"iszero","nativeSrc":"9435:6:40","nodeType":"YulIdentifier","src":"9435:6:40"},"nativeSrc":"9435:35:40","nodeType":"YulFunctionCall","src":"9435:35:40"},"nativeSrc":"9432:55:40","nodeType":"YulIf","src":"9432:55:40"},{"nativeSrc":"9496:30:40","nodeType":"YulVariableDeclaration","src":"9496:30:40","value":{"arguments":[{"name":"_2","nativeSrc":"9523:2:40","nodeType":"YulIdentifier","src":"9523:2:40"}],"functionName":{"name":"calldataload","nativeSrc":"9510:12:40","nodeType":"YulIdentifier","src":"9510:12:40"},"nativeSrc":"9510:16:40","nodeType":"YulFunctionCall","src":"9510:16:40"},"variables":[{"name":"length","nativeSrc":"9500:6:40","nodeType":"YulTypedName","src":"9500:6:40","type":""}]},{"body":{"nativeSrc":"9553:16:40","nodeType":"YulBlock","src":"9553:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9562:1:40","nodeType":"YulLiteral","src":"9562:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"9565:1:40","nodeType":"YulLiteral","src":"9565:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9555:6:40","nodeType":"YulIdentifier","src":"9555:6:40"},"nativeSrc":"9555:12:40","nodeType":"YulFunctionCall","src":"9555:12:40"},"nativeSrc":"9555:12:40","nodeType":"YulExpressionStatement","src":"9555:12:40"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"9541:6:40","nodeType":"YulIdentifier","src":"9541:6:40"},{"name":"_1","nativeSrc":"9549:2:40","nodeType":"YulIdentifier","src":"9549:2:40"}],"functionName":{"name":"gt","nativeSrc":"9538:2:40","nodeType":"YulIdentifier","src":"9538:2:40"},"nativeSrc":"9538:14:40","nodeType":"YulFunctionCall","src":"9538:14:40"},"nativeSrc":"9535:34:40","nodeType":"YulIf","src":"9535:34:40"},{"body":{"nativeSrc":"9629:16:40","nodeType":"YulBlock","src":"9629:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9638:1:40","nodeType":"YulLiteral","src":"9638:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"9641:1:40","nodeType":"YulLiteral","src":"9641:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9631:6:40","nodeType":"YulIdentifier","src":"9631:6:40"},"nativeSrc":"9631:12:40","nodeType":"YulFunctionCall","src":"9631:12:40"},"nativeSrc":"9631:12:40","nodeType":"YulExpressionStatement","src":"9631:12:40"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"9592:2:40","nodeType":"YulIdentifier","src":"9592:2:40"},{"arguments":[{"kind":"number","nativeSrc":"9600:1:40","nodeType":"YulLiteral","src":"9600:1:40","type":"","value":"5"},{"name":"length","nativeSrc":"9603:6:40","nodeType":"YulIdentifier","src":"9603:6:40"}],"functionName":{"name":"shl","nativeSrc":"9596:3:40","nodeType":"YulIdentifier","src":"9596:3:40"},"nativeSrc":"9596:14:40","nodeType":"YulFunctionCall","src":"9596:14:40"}],"functionName":{"name":"add","nativeSrc":"9588:3:40","nodeType":"YulIdentifier","src":"9588:3:40"},"nativeSrc":"9588:23:40","nodeType":"YulFunctionCall","src":"9588:23:40"},{"kind":"number","nativeSrc":"9613:4:40","nodeType":"YulLiteral","src":"9613:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"9584:3:40","nodeType":"YulIdentifier","src":"9584:3:40"},"nativeSrc":"9584:34:40","nodeType":"YulFunctionCall","src":"9584:34:40"},{"name":"dataEnd","nativeSrc":"9620:7:40","nodeType":"YulIdentifier","src":"9620:7:40"}],"functionName":{"name":"gt","nativeSrc":"9581:2:40","nodeType":"YulIdentifier","src":"9581:2:40"},"nativeSrc":"9581:47:40","nodeType":"YulFunctionCall","src":"9581:47:40"},"nativeSrc":"9578:67:40","nodeType":"YulIf","src":"9578:67:40"},{"nativeSrc":"9654:23:40","nodeType":"YulAssignment","src":"9654:23:40","value":{"arguments":[{"name":"_2","nativeSrc":"9668:2:40","nodeType":"YulIdentifier","src":"9668:2:40"},{"kind":"number","nativeSrc":"9672:4:40","nodeType":"YulLiteral","src":"9672:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"9664:3:40","nodeType":"YulIdentifier","src":"9664:3:40"},"nativeSrc":"9664:13:40","nodeType":"YulFunctionCall","src":"9664:13:40"},"variableNames":[{"name":"value0","nativeSrc":"9654:6:40","nodeType":"YulIdentifier","src":"9654:6:40"}]},{"nativeSrc":"9686:16:40","nodeType":"YulAssignment","src":"9686:16:40","value":{"name":"length","nativeSrc":"9696:6:40","nodeType":"YulIdentifier","src":"9696:6:40"},"variableNames":[{"name":"value1","nativeSrc":"9686:6:40","nodeType":"YulIdentifier","src":"9686:6:40"}]},{"nativeSrc":"9711:44:40","nodeType":"YulAssignment","src":"9711:44:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9738:9:40","nodeType":"YulIdentifier","src":"9738:9:40"},{"kind":"number","nativeSrc":"9749:4:40","nodeType":"YulLiteral","src":"9749:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"9734:3:40","nodeType":"YulIdentifier","src":"9734:3:40"},"nativeSrc":"9734:20:40","nodeType":"YulFunctionCall","src":"9734:20:40"}],"functionName":{"name":"calldataload","nativeSrc":"9721:12:40","nodeType":"YulIdentifier","src":"9721:12:40"},"nativeSrc":"9721:34:40","nodeType":"YulFunctionCall","src":"9721:34:40"},"variableNames":[{"name":"value2","nativeSrc":"9711:6:40","nodeType":"YulIdentifier","src":"9711:6:40"}]},{"nativeSrc":"9764:48:40","nodeType":"YulAssignment","src":"9764:48:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9797:9:40","nodeType":"YulIdentifier","src":"9797:9:40"},{"kind":"number","nativeSrc":"9808:2:40","nodeType":"YulLiteral","src":"9808:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9793:3:40","nodeType":"YulIdentifier","src":"9793:3:40"},"nativeSrc":"9793:18:40","nodeType":"YulFunctionCall","src":"9793:18:40"}],"functionName":{"name":"abi_decode_address","nativeSrc":"9774:18:40","nodeType":"YulIdentifier","src":"9774:18:40"},"nativeSrc":"9774:38:40","nodeType":"YulFunctionCall","src":"9774:38:40"},"variableNames":[{"name":"value3","nativeSrc":"9764:6:40","nodeType":"YulIdentifier","src":"9764:6:40"}]},{"nativeSrc":"9821:48:40","nodeType":"YulVariableDeclaration","src":"9821:48:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9854:9:40","nodeType":"YulIdentifier","src":"9854:9:40"},{"kind":"number","nativeSrc":"9865:2:40","nodeType":"YulLiteral","src":"9865:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9850:3:40","nodeType":"YulIdentifier","src":"9850:3:40"},"nativeSrc":"9850:18:40","nodeType":"YulFunctionCall","src":"9850:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"9837:12:40","nodeType":"YulIdentifier","src":"9837:12:40"},"nativeSrc":"9837:32:40","nodeType":"YulFunctionCall","src":"9837:32:40"},"variables":[{"name":"offset_1","nativeSrc":"9825:8:40","nodeType":"YulTypedName","src":"9825:8:40","type":""}]},{"body":{"nativeSrc":"9898:16:40","nodeType":"YulBlock","src":"9898:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9907:1:40","nodeType":"YulLiteral","src":"9907:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"9910:1:40","nodeType":"YulLiteral","src":"9910:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9900:6:40","nodeType":"YulIdentifier","src":"9900:6:40"},"nativeSrc":"9900:12:40","nodeType":"YulFunctionCall","src":"9900:12:40"},"nativeSrc":"9900:12:40","nodeType":"YulExpressionStatement","src":"9900:12:40"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"9884:8:40","nodeType":"YulIdentifier","src":"9884:8:40"},{"name":"_1","nativeSrc":"9894:2:40","nodeType":"YulIdentifier","src":"9894:2:40"}],"functionName":{"name":"gt","nativeSrc":"9881:2:40","nodeType":"YulIdentifier","src":"9881:2:40"},"nativeSrc":"9881:16:40","nodeType":"YulFunctionCall","src":"9881:16:40"},"nativeSrc":"9878:36:40","nodeType":"YulIf","src":"9878:36:40"},{"nativeSrc":"9923:86:40","nodeType":"YulVariableDeclaration","src":"9923:86:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9979:9:40","nodeType":"YulIdentifier","src":"9979:9:40"},{"name":"offset_1","nativeSrc":"9990:8:40","nodeType":"YulIdentifier","src":"9990:8:40"}],"functionName":{"name":"add","nativeSrc":"9975:3:40","nodeType":"YulIdentifier","src":"9975:3:40"},"nativeSrc":"9975:24:40","nodeType":"YulFunctionCall","src":"9975:24:40"},{"name":"dataEnd","nativeSrc":"10001:7:40","nodeType":"YulIdentifier","src":"10001:7:40"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"9949:25:40","nodeType":"YulIdentifier","src":"9949:25:40"},"nativeSrc":"9949:60:40","nodeType":"YulFunctionCall","src":"9949:60:40"},"variables":[{"name":"value4_1","nativeSrc":"9927:8:40","nodeType":"YulTypedName","src":"9927:8:40","type":""},{"name":"value5_1","nativeSrc":"9937:8:40","nodeType":"YulTypedName","src":"9937:8:40","type":""}]},{"nativeSrc":"10018:18:40","nodeType":"YulAssignment","src":"10018:18:40","value":{"name":"value4_1","nativeSrc":"10028:8:40","nodeType":"YulIdentifier","src":"10028:8:40"},"variableNames":[{"name":"value4","nativeSrc":"10018:6:40","nodeType":"YulIdentifier","src":"10018:6:40"}]},{"nativeSrc":"10045:18:40","nodeType":"YulAssignment","src":"10045:18:40","value":{"name":"value5_1","nativeSrc":"10055:8:40","nodeType":"YulIdentifier","src":"10055:8:40"},"variableNames":[{"name":"value5","nativeSrc":"10045:6:40","nodeType":"YulIdentifier","src":"10045:6:40"}]},{"nativeSrc":"10072:49:40","nodeType":"YulAssignment","src":"10072:49:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10105:9:40","nodeType":"YulIdentifier","src":"10105:9:40"},{"kind":"number","nativeSrc":"10116:3:40","nodeType":"YulLiteral","src":"10116:3:40","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"10101:3:40","nodeType":"YulIdentifier","src":"10101:3:40"},"nativeSrc":"10101:19:40","nodeType":"YulFunctionCall","src":"10101:19:40"}],"functionName":{"name":"abi_decode_address","nativeSrc":"10082:18:40","nodeType":"YulIdentifier","src":"10082:18:40"},"nativeSrc":"10082:39:40","nodeType":"YulFunctionCall","src":"10082:39:40"},"variableNames":[{"name":"value6","nativeSrc":"10072:6:40","nodeType":"YulIdentifier","src":"10072:6:40"}]},{"nativeSrc":"10130:49:40","nodeType":"YulAssignment","src":"10130:49:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10163:9:40","nodeType":"YulIdentifier","src":"10163:9:40"},{"kind":"number","nativeSrc":"10174:3:40","nodeType":"YulLiteral","src":"10174:3:40","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"10159:3:40","nodeType":"YulIdentifier","src":"10159:3:40"},"nativeSrc":"10159:19:40","nodeType":"YulFunctionCall","src":"10159:19:40"}],"functionName":{"name":"abi_decode_address","nativeSrc":"10140:18:40","nodeType":"YulIdentifier","src":"10140:18:40"},"nativeSrc":"10140:39:40","nodeType":"YulFunctionCall","src":"10140:39:40"},"variableNames":[{"name":"value7","nativeSrc":"10130:6:40","nodeType":"YulIdentifier","src":"10130:6:40"}]},{"nativeSrc":"10188:43:40","nodeType":"YulAssignment","src":"10188:43:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10215:9:40","nodeType":"YulIdentifier","src":"10215:9:40"},{"kind":"number","nativeSrc":"10226:3:40","nodeType":"YulLiteral","src":"10226:3:40","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"10211:3:40","nodeType":"YulIdentifier","src":"10211:3:40"},"nativeSrc":"10211:19:40","nodeType":"YulFunctionCall","src":"10211:19:40"}],"functionName":{"name":"calldataload","nativeSrc":"10198:12:40","nodeType":"YulIdentifier","src":"10198:12:40"},"nativeSrc":"10198:33:40","nodeType":"YulFunctionCall","src":"10198:33:40"},"variableNames":[{"name":"value8","nativeSrc":"10188:6:40","nodeType":"YulIdentifier","src":"10188:6:40"}]},{"nativeSrc":"10240:49:40","nodeType":"YulAssignment","src":"10240:49:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10273:9:40","nodeType":"YulIdentifier","src":"10273:9:40"},{"kind":"number","nativeSrc":"10284:3:40","nodeType":"YulLiteral","src":"10284:3:40","type":"","value":"224"}],"functionName":{"name":"add","nativeSrc":"10269:3:40","nodeType":"YulIdentifier","src":"10269:3:40"},"nativeSrc":"10269:19:40","nodeType":"YulFunctionCall","src":"10269:19:40"}],"functionName":{"name":"abi_decode_address","nativeSrc":"10250:18:40","nodeType":"YulIdentifier","src":"10250:18:40"},"nativeSrc":"10250:39:40","nodeType":"YulFunctionCall","src":"10250:39:40"},"variableNames":[{"name":"value9","nativeSrc":"10240:6:40","nodeType":"YulIdentifier","src":"10240:6:40"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_uint256t_addresst_bytes_calldata_ptrt_addresst_addresst_uint256t_address_payable","nativeSrc":"8942:1353:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9087:9:40","nodeType":"YulTypedName","src":"9087:9:40","type":""},{"name":"dataEnd","nativeSrc":"9098:7:40","nodeType":"YulTypedName","src":"9098:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"9110:6:40","nodeType":"YulTypedName","src":"9110:6:40","type":""},{"name":"value1","nativeSrc":"9118:6:40","nodeType":"YulTypedName","src":"9118:6:40","type":""},{"name":"value2","nativeSrc":"9126:6:40","nodeType":"YulTypedName","src":"9126:6:40","type":""},{"name":"value3","nativeSrc":"9134:6:40","nodeType":"YulTypedName","src":"9134:6:40","type":""},{"name":"value4","nativeSrc":"9142:6:40","nodeType":"YulTypedName","src":"9142:6:40","type":""},{"name":"value5","nativeSrc":"9150:6:40","nodeType":"YulTypedName","src":"9150:6:40","type":""},{"name":"value6","nativeSrc":"9158:6:40","nodeType":"YulTypedName","src":"9158:6:40","type":""},{"name":"value7","nativeSrc":"9166:6:40","nodeType":"YulTypedName","src":"9166:6:40","type":""},{"name":"value8","nativeSrc":"9174:6:40","nodeType":"YulTypedName","src":"9174:6:40","type":""},{"name":"value9","nativeSrc":"9182:6:40","nodeType":"YulTypedName","src":"9182:6:40","type":""}],"src":"8942:1353:40"},{"body":{"nativeSrc":"10479:179:40","nodeType":"YulBlock","src":"10479:179:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10496:9:40","nodeType":"YulIdentifier","src":"10496:9:40"},{"kind":"number","nativeSrc":"10507:2:40","nodeType":"YulLiteral","src":"10507:2:40","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"10489:6:40","nodeType":"YulIdentifier","src":"10489:6:40"},"nativeSrc":"10489:21:40","nodeType":"YulFunctionCall","src":"10489:21:40"},"nativeSrc":"10489:21:40","nodeType":"YulExpressionStatement","src":"10489:21:40"},{"nativeSrc":"10519:64:40","nodeType":"YulAssignment","src":"10519:64:40","value":{"arguments":[{"name":"value0","nativeSrc":"10556:6:40","nodeType":"YulIdentifier","src":"10556:6:40"},{"arguments":[{"name":"headStart","nativeSrc":"10568:9:40","nodeType":"YulIdentifier","src":"10568:9:40"},{"kind":"number","nativeSrc":"10579:2:40","nodeType":"YulLiteral","src":"10579:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10564:3:40","nodeType":"YulIdentifier","src":"10564:3:40"},"nativeSrc":"10564:18:40","nodeType":"YulFunctionCall","src":"10564:18:40"}],"functionName":{"name":"abi_encode_array_address_dyn","nativeSrc":"10527:28:40","nodeType":"YulIdentifier","src":"10527:28:40"},"nativeSrc":"10527:56:40","nodeType":"YulFunctionCall","src":"10527:56:40"},"variableNames":[{"name":"tail","nativeSrc":"10519:4:40","nodeType":"YulIdentifier","src":"10519:4:40"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10603:9:40","nodeType":"YulIdentifier","src":"10603:9:40"},{"kind":"number","nativeSrc":"10614:2:40","nodeType":"YulLiteral","src":"10614:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10599:3:40","nodeType":"YulIdentifier","src":"10599:3:40"},"nativeSrc":"10599:18:40","nodeType":"YulFunctionCall","src":"10599:18:40"},{"arguments":[{"name":"value1","nativeSrc":"10623:6:40","nodeType":"YulIdentifier","src":"10623:6:40"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"10639:3:40","nodeType":"YulLiteral","src":"10639:3:40","type":"","value":"160"},{"kind":"number","nativeSrc":"10644:1:40","nodeType":"YulLiteral","src":"10644:1:40","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"10635:3:40","nodeType":"YulIdentifier","src":"10635:3:40"},"nativeSrc":"10635:11:40","nodeType":"YulFunctionCall","src":"10635:11:40"},{"kind":"number","nativeSrc":"10648:1:40","nodeType":"YulLiteral","src":"10648:1:40","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"10631:3:40","nodeType":"YulIdentifier","src":"10631:3:40"},"nativeSrc":"10631:19:40","nodeType":"YulFunctionCall","src":"10631:19:40"}],"functionName":{"name":"and","nativeSrc":"10619:3:40","nodeType":"YulIdentifier","src":"10619:3:40"},"nativeSrc":"10619:32:40","nodeType":"YulFunctionCall","src":"10619:32:40"}],"functionName":{"name":"mstore","nativeSrc":"10592:6:40","nodeType":"YulIdentifier","src":"10592:6:40"},"nativeSrc":"10592:60:40","nodeType":"YulFunctionCall","src":"10592:60:40"},"nativeSrc":"10592:60:40","nodeType":"YulExpressionStatement","src":"10592:60:40"}]},"name":"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_address__to_t_array$_t_address_$dyn_memory_ptr_t_address__fromStack_reversed","nativeSrc":"10300:358:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10440:9:40","nodeType":"YulTypedName","src":"10440:9:40","type":""},{"name":"value1","nativeSrc":"10451:6:40","nodeType":"YulTypedName","src":"10451:6:40","type":""},{"name":"value0","nativeSrc":"10459:6:40","nodeType":"YulTypedName","src":"10459:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10470:4:40","nodeType":"YulTypedName","src":"10470:4:40","type":""}],"src":"10300:358:40"},{"body":{"nativeSrc":"10920:1013:40","nodeType":"YulBlock","src":"10920:1013:40","statements":[{"body":{"nativeSrc":"10967:16:40","nodeType":"YulBlock","src":"10967:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10976:1:40","nodeType":"YulLiteral","src":"10976:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"10979:1:40","nodeType":"YulLiteral","src":"10979:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10969:6:40","nodeType":"YulIdentifier","src":"10969:6:40"},"nativeSrc":"10969:12:40","nodeType":"YulFunctionCall","src":"10969:12:40"},"nativeSrc":"10969:12:40","nodeType":"YulExpressionStatement","src":"10969:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"10941:7:40","nodeType":"YulIdentifier","src":"10941:7:40"},{"name":"headStart","nativeSrc":"10950:9:40","nodeType":"YulIdentifier","src":"10950:9:40"}],"functionName":{"name":"sub","nativeSrc":"10937:3:40","nodeType":"YulIdentifier","src":"10937:3:40"},"nativeSrc":"10937:23:40","nodeType":"YulFunctionCall","src":"10937:23:40"},{"kind":"number","nativeSrc":"10962:3:40","nodeType":"YulLiteral","src":"10962:3:40","type":"","value":"320"}],"functionName":{"name":"slt","nativeSrc":"10933:3:40","nodeType":"YulIdentifier","src":"10933:3:40"},"nativeSrc":"10933:33:40","nodeType":"YulFunctionCall","src":"10933:33:40"},"nativeSrc":"10930:53:40","nodeType":"YulIf","src":"10930:53:40"},{"nativeSrc":"10992:36:40","nodeType":"YulVariableDeclaration","src":"10992:36:40","value":{"arguments":[{"name":"headStart","nativeSrc":"11018:9:40","nodeType":"YulIdentifier","src":"11018:9:40"}],"functionName":{"name":"calldataload","nativeSrc":"11005:12:40","nodeType":"YulIdentifier","src":"11005:12:40"},"nativeSrc":"11005:23:40","nodeType":"YulFunctionCall","src":"11005:23:40"},"variables":[{"name":"value","nativeSrc":"10996:5:40","nodeType":"YulTypedName","src":"10996:5:40","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"11062:5:40","nodeType":"YulIdentifier","src":"11062:5:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"11037:24:40","nodeType":"YulIdentifier","src":"11037:24:40"},"nativeSrc":"11037:31:40","nodeType":"YulFunctionCall","src":"11037:31:40"},"nativeSrc":"11037:31:40","nodeType":"YulExpressionStatement","src":"11037:31:40"},{"nativeSrc":"11077:15:40","nodeType":"YulAssignment","src":"11077:15:40","value":{"name":"value","nativeSrc":"11087:5:40","nodeType":"YulIdentifier","src":"11087:5:40"},"variableNames":[{"name":"value0","nativeSrc":"11077:6:40","nodeType":"YulIdentifier","src":"11077:6:40"}]},{"nativeSrc":"11101:42:40","nodeType":"YulAssignment","src":"11101:42:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11128:9:40","nodeType":"YulIdentifier","src":"11128:9:40"},{"kind":"number","nativeSrc":"11139:2:40","nodeType":"YulLiteral","src":"11139:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11124:3:40","nodeType":"YulIdentifier","src":"11124:3:40"},"nativeSrc":"11124:18:40","nodeType":"YulFunctionCall","src":"11124:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"11111:12:40","nodeType":"YulIdentifier","src":"11111:12:40"},"nativeSrc":"11111:32:40","nodeType":"YulFunctionCall","src":"11111:32:40"},"variableNames":[{"name":"value1","nativeSrc":"11101:6:40","nodeType":"YulIdentifier","src":"11101:6:40"}]},{"nativeSrc":"11152:46:40","nodeType":"YulVariableDeclaration","src":"11152:46:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11183:9:40","nodeType":"YulIdentifier","src":"11183:9:40"},{"kind":"number","nativeSrc":"11194:2:40","nodeType":"YulLiteral","src":"11194:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11179:3:40","nodeType":"YulIdentifier","src":"11179:3:40"},"nativeSrc":"11179:18:40","nodeType":"YulFunctionCall","src":"11179:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"11166:12:40","nodeType":"YulIdentifier","src":"11166:12:40"},"nativeSrc":"11166:32:40","nodeType":"YulFunctionCall","src":"11166:32:40"},"variables":[{"name":"offset","nativeSrc":"11156:6:40","nodeType":"YulTypedName","src":"11156:6:40","type":""}]},{"body":{"nativeSrc":"11241:16:40","nodeType":"YulBlock","src":"11241:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11250:1:40","nodeType":"YulLiteral","src":"11250:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"11253:1:40","nodeType":"YulLiteral","src":"11253:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11243:6:40","nodeType":"YulIdentifier","src":"11243:6:40"},"nativeSrc":"11243:12:40","nodeType":"YulFunctionCall","src":"11243:12:40"},"nativeSrc":"11243:12:40","nodeType":"YulExpressionStatement","src":"11243:12:40"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"11213:6:40","nodeType":"YulIdentifier","src":"11213:6:40"},{"kind":"number","nativeSrc":"11221:18:40","nodeType":"YulLiteral","src":"11221:18:40","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"11210:2:40","nodeType":"YulIdentifier","src":"11210:2:40"},"nativeSrc":"11210:30:40","nodeType":"YulFunctionCall","src":"11210:30:40"},"nativeSrc":"11207:50:40","nodeType":"YulIf","src":"11207:50:40"},{"nativeSrc":"11266:84:40","nodeType":"YulVariableDeclaration","src":"11266:84:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11322:9:40","nodeType":"YulIdentifier","src":"11322:9:40"},{"name":"offset","nativeSrc":"11333:6:40","nodeType":"YulIdentifier","src":"11333:6:40"}],"functionName":{"name":"add","nativeSrc":"11318:3:40","nodeType":"YulIdentifier","src":"11318:3:40"},"nativeSrc":"11318:22:40","nodeType":"YulFunctionCall","src":"11318:22:40"},{"name":"dataEnd","nativeSrc":"11342:7:40","nodeType":"YulIdentifier","src":"11342:7:40"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"11292:25:40","nodeType":"YulIdentifier","src":"11292:25:40"},"nativeSrc":"11292:58:40","nodeType":"YulFunctionCall","src":"11292:58:40"},"variables":[{"name":"value2_1","nativeSrc":"11270:8:40","nodeType":"YulTypedName","src":"11270:8:40","type":""},{"name":"value3_1","nativeSrc":"11280:8:40","nodeType":"YulTypedName","src":"11280:8:40","type":""}]},{"nativeSrc":"11359:18:40","nodeType":"YulAssignment","src":"11359:18:40","value":{"name":"value2_1","nativeSrc":"11369:8:40","nodeType":"YulIdentifier","src":"11369:8:40"},"variableNames":[{"name":"value2","nativeSrc":"11359:6:40","nodeType":"YulIdentifier","src":"11359:6:40"}]},{"nativeSrc":"11386:18:40","nodeType":"YulAssignment","src":"11386:18:40","value":{"name":"value3_1","nativeSrc":"11396:8:40","nodeType":"YulIdentifier","src":"11396:8:40"},"variableNames":[{"name":"value3","nativeSrc":"11386:6:40","nodeType":"YulIdentifier","src":"11386:6:40"}]},{"nativeSrc":"11413:55:40","nodeType":"YulAssignment","src":"11413:55:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11453:9:40","nodeType":"YulIdentifier","src":"11453:9:40"},{"kind":"number","nativeSrc":"11464:2:40","nodeType":"YulLiteral","src":"11464:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11449:3:40","nodeType":"YulIdentifier","src":"11449:3:40"},"nativeSrc":"11449:18:40","nodeType":"YulFunctionCall","src":"11449:18:40"}],"functionName":{"name":"abi_decode_enum_Operation","nativeSrc":"11423:25:40","nodeType":"YulIdentifier","src":"11423:25:40"},"nativeSrc":"11423:45:40","nodeType":"YulFunctionCall","src":"11423:45:40"},"variableNames":[{"name":"value4","nativeSrc":"11413:6:40","nodeType":"YulIdentifier","src":"11413:6:40"}]},{"nativeSrc":"11477:43:40","nodeType":"YulAssignment","src":"11477:43:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11504:9:40","nodeType":"YulIdentifier","src":"11504:9:40"},{"kind":"number","nativeSrc":"11515:3:40","nodeType":"YulLiteral","src":"11515:3:40","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"11500:3:40","nodeType":"YulIdentifier","src":"11500:3:40"},"nativeSrc":"11500:19:40","nodeType":"YulFunctionCall","src":"11500:19:40"}],"functionName":{"name":"calldataload","nativeSrc":"11487:12:40","nodeType":"YulIdentifier","src":"11487:12:40"},"nativeSrc":"11487:33:40","nodeType":"YulFunctionCall","src":"11487:33:40"},"variableNames":[{"name":"value5","nativeSrc":"11477:6:40","nodeType":"YulIdentifier","src":"11477:6:40"}]},{"nativeSrc":"11529:43:40","nodeType":"YulAssignment","src":"11529:43:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11556:9:40","nodeType":"YulIdentifier","src":"11556:9:40"},{"kind":"number","nativeSrc":"11567:3:40","nodeType":"YulLiteral","src":"11567:3:40","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"11552:3:40","nodeType":"YulIdentifier","src":"11552:3:40"},"nativeSrc":"11552:19:40","nodeType":"YulFunctionCall","src":"11552:19:40"}],"functionName":{"name":"calldataload","nativeSrc":"11539:12:40","nodeType":"YulIdentifier","src":"11539:12:40"},"nativeSrc":"11539:33:40","nodeType":"YulFunctionCall","src":"11539:33:40"},"variableNames":[{"name":"value6","nativeSrc":"11529:6:40","nodeType":"YulIdentifier","src":"11529:6:40"}]},{"nativeSrc":"11581:43:40","nodeType":"YulAssignment","src":"11581:43:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11608:9:40","nodeType":"YulIdentifier","src":"11608:9:40"},{"kind":"number","nativeSrc":"11619:3:40","nodeType":"YulLiteral","src":"11619:3:40","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"11604:3:40","nodeType":"YulIdentifier","src":"11604:3:40"},"nativeSrc":"11604:19:40","nodeType":"YulFunctionCall","src":"11604:19:40"}],"functionName":{"name":"calldataload","nativeSrc":"11591:12:40","nodeType":"YulIdentifier","src":"11591:12:40"},"nativeSrc":"11591:33:40","nodeType":"YulFunctionCall","src":"11591:33:40"},"variableNames":[{"name":"value7","nativeSrc":"11581:6:40","nodeType":"YulIdentifier","src":"11581:6:40"}]},{"nativeSrc":"11633:48:40","nodeType":"YulVariableDeclaration","src":"11633:48:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11665:9:40","nodeType":"YulIdentifier","src":"11665:9:40"},{"kind":"number","nativeSrc":"11676:3:40","nodeType":"YulLiteral","src":"11676:3:40","type":"","value":"224"}],"functionName":{"name":"add","nativeSrc":"11661:3:40","nodeType":"YulIdentifier","src":"11661:3:40"},"nativeSrc":"11661:19:40","nodeType":"YulFunctionCall","src":"11661:19:40"}],"functionName":{"name":"calldataload","nativeSrc":"11648:12:40","nodeType":"YulIdentifier","src":"11648:12:40"},"nativeSrc":"11648:33:40","nodeType":"YulFunctionCall","src":"11648:33:40"},"variables":[{"name":"value_1","nativeSrc":"11637:7:40","nodeType":"YulTypedName","src":"11637:7:40","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"11715:7:40","nodeType":"YulIdentifier","src":"11715:7:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"11690:24:40","nodeType":"YulIdentifier","src":"11690:24:40"},"nativeSrc":"11690:33:40","nodeType":"YulFunctionCall","src":"11690:33:40"},"nativeSrc":"11690:33:40","nodeType":"YulExpressionStatement","src":"11690:33:40"},{"nativeSrc":"11732:17:40","nodeType":"YulAssignment","src":"11732:17:40","value":{"name":"value_1","nativeSrc":"11742:7:40","nodeType":"YulIdentifier","src":"11742:7:40"},"variableNames":[{"name":"value8","nativeSrc":"11732:6:40","nodeType":"YulIdentifier","src":"11732:6:40"}]},{"nativeSrc":"11758:48:40","nodeType":"YulVariableDeclaration","src":"11758:48:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11790:9:40","nodeType":"YulIdentifier","src":"11790:9:40"},{"kind":"number","nativeSrc":"11801:3:40","nodeType":"YulLiteral","src":"11801:3:40","type":"","value":"256"}],"functionName":{"name":"add","nativeSrc":"11786:3:40","nodeType":"YulIdentifier","src":"11786:3:40"},"nativeSrc":"11786:19:40","nodeType":"YulFunctionCall","src":"11786:19:40"}],"functionName":{"name":"calldataload","nativeSrc":"11773:12:40","nodeType":"YulIdentifier","src":"11773:12:40"},"nativeSrc":"11773:33:40","nodeType":"YulFunctionCall","src":"11773:33:40"},"variables":[{"name":"value_2","nativeSrc":"11762:7:40","nodeType":"YulTypedName","src":"11762:7:40","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"11840:7:40","nodeType":"YulIdentifier","src":"11840:7:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"11815:24:40","nodeType":"YulIdentifier","src":"11815:24:40"},"nativeSrc":"11815:33:40","nodeType":"YulFunctionCall","src":"11815:33:40"},"nativeSrc":"11815:33:40","nodeType":"YulExpressionStatement","src":"11815:33:40"},{"nativeSrc":"11857:17:40","nodeType":"YulAssignment","src":"11857:17:40","value":{"name":"value_2","nativeSrc":"11867:7:40","nodeType":"YulIdentifier","src":"11867:7:40"},"variableNames":[{"name":"value9","nativeSrc":"11857:6:40","nodeType":"YulIdentifier","src":"11857:6:40"}]},{"nativeSrc":"11883:44:40","nodeType":"YulAssignment","src":"11883:44:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11911:9:40","nodeType":"YulIdentifier","src":"11911:9:40"},{"kind":"number","nativeSrc":"11922:3:40","nodeType":"YulLiteral","src":"11922:3:40","type":"","value":"288"}],"functionName":{"name":"add","nativeSrc":"11907:3:40","nodeType":"YulIdentifier","src":"11907:3:40"},"nativeSrc":"11907:19:40","nodeType":"YulFunctionCall","src":"11907:19:40"}],"functionName":{"name":"calldataload","nativeSrc":"11894:12:40","nodeType":"YulIdentifier","src":"11894:12:40"},"nativeSrc":"11894:33:40","nodeType":"YulFunctionCall","src":"11894:33:40"},"variableNames":[{"name":"value10","nativeSrc":"11883:7:40","nodeType":"YulIdentifier","src":"11883:7:40"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptrt_enum$_Operation_$3022t_uint256t_uint256t_uint256t_addresst_addresst_uint256","nativeSrc":"10663:1270:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10805:9:40","nodeType":"YulTypedName","src":"10805:9:40","type":""},{"name":"dataEnd","nativeSrc":"10816:7:40","nodeType":"YulTypedName","src":"10816:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"10828:6:40","nodeType":"YulTypedName","src":"10828:6:40","type":""},{"name":"value1","nativeSrc":"10836:6:40","nodeType":"YulTypedName","src":"10836:6:40","type":""},{"name":"value2","nativeSrc":"10844:6:40","nodeType":"YulTypedName","src":"10844:6:40","type":""},{"name":"value3","nativeSrc":"10852:6:40","nodeType":"YulTypedName","src":"10852:6:40","type":""},{"name":"value4","nativeSrc":"10860:6:40","nodeType":"YulTypedName","src":"10860:6:40","type":""},{"name":"value5","nativeSrc":"10868:6:40","nodeType":"YulTypedName","src":"10868:6:40","type":""},{"name":"value6","nativeSrc":"10876:6:40","nodeType":"YulTypedName","src":"10876:6:40","type":""},{"name":"value7","nativeSrc":"10884:6:40","nodeType":"YulTypedName","src":"10884:6:40","type":""},{"name":"value8","nativeSrc":"10892:6:40","nodeType":"YulTypedName","src":"10892:6:40","type":""},{"name":"value9","nativeSrc":"10900:6:40","nodeType":"YulTypedName","src":"10900:6:40","type":""},{"name":"value10","nativeSrc":"10908:7:40","nodeType":"YulTypedName","src":"10908:7:40","type":""}],"src":"10663:1270:40"},{"body":{"nativeSrc":"12039:76:40","nodeType":"YulBlock","src":"12039:76:40","statements":[{"nativeSrc":"12049:26:40","nodeType":"YulAssignment","src":"12049:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"12061:9:40","nodeType":"YulIdentifier","src":"12061:9:40"},{"kind":"number","nativeSrc":"12072:2:40","nodeType":"YulLiteral","src":"12072:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12057:3:40","nodeType":"YulIdentifier","src":"12057:3:40"},"nativeSrc":"12057:18:40","nodeType":"YulFunctionCall","src":"12057:18:40"},"variableNames":[{"name":"tail","nativeSrc":"12049:4:40","nodeType":"YulIdentifier","src":"12049:4:40"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12091:9:40","nodeType":"YulIdentifier","src":"12091:9:40"},{"name":"value0","nativeSrc":"12102:6:40","nodeType":"YulIdentifier","src":"12102:6:40"}],"functionName":{"name":"mstore","nativeSrc":"12084:6:40","nodeType":"YulIdentifier","src":"12084:6:40"},"nativeSrc":"12084:25:40","nodeType":"YulFunctionCall","src":"12084:25:40"},"nativeSrc":"12084:25:40","nodeType":"YulExpressionStatement","src":"12084:25:40"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"11938:177:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12008:9:40","nodeType":"YulTypedName","src":"12008:9:40","type":""},{"name":"value0","nativeSrc":"12019:6:40","nodeType":"YulTypedName","src":"12019:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12030:4:40","nodeType":"YulTypedName","src":"12030:4:40","type":""}],"src":"11938:177:40"},{"body":{"nativeSrc":"12207:301:40","nodeType":"YulBlock","src":"12207:301:40","statements":[{"body":{"nativeSrc":"12253:16:40","nodeType":"YulBlock","src":"12253:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12262:1:40","nodeType":"YulLiteral","src":"12262:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"12265:1:40","nodeType":"YulLiteral","src":"12265:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"12255:6:40","nodeType":"YulIdentifier","src":"12255:6:40"},"nativeSrc":"12255:12:40","nodeType":"YulFunctionCall","src":"12255:12:40"},"nativeSrc":"12255:12:40","nodeType":"YulExpressionStatement","src":"12255:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"12228:7:40","nodeType":"YulIdentifier","src":"12228:7:40"},{"name":"headStart","nativeSrc":"12237:9:40","nodeType":"YulIdentifier","src":"12237:9:40"}],"functionName":{"name":"sub","nativeSrc":"12224:3:40","nodeType":"YulIdentifier","src":"12224:3:40"},"nativeSrc":"12224:23:40","nodeType":"YulFunctionCall","src":"12224:23:40"},{"kind":"number","nativeSrc":"12249:2:40","nodeType":"YulLiteral","src":"12249:2:40","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"12220:3:40","nodeType":"YulIdentifier","src":"12220:3:40"},"nativeSrc":"12220:32:40","nodeType":"YulFunctionCall","src":"12220:32:40"},"nativeSrc":"12217:52:40","nodeType":"YulIf","src":"12217:52:40"},{"nativeSrc":"12278:36:40","nodeType":"YulVariableDeclaration","src":"12278:36:40","value":{"arguments":[{"name":"headStart","nativeSrc":"12304:9:40","nodeType":"YulIdentifier","src":"12304:9:40"}],"functionName":{"name":"calldataload","nativeSrc":"12291:12:40","nodeType":"YulIdentifier","src":"12291:12:40"},"nativeSrc":"12291:23:40","nodeType":"YulFunctionCall","src":"12291:23:40"},"variables":[{"name":"value","nativeSrc":"12282:5:40","nodeType":"YulTypedName","src":"12282:5:40","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"12348:5:40","nodeType":"YulIdentifier","src":"12348:5:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"12323:24:40","nodeType":"YulIdentifier","src":"12323:24:40"},"nativeSrc":"12323:31:40","nodeType":"YulFunctionCall","src":"12323:31:40"},"nativeSrc":"12323:31:40","nodeType":"YulExpressionStatement","src":"12323:31:40"},{"nativeSrc":"12363:15:40","nodeType":"YulAssignment","src":"12363:15:40","value":{"name":"value","nativeSrc":"12373:5:40","nodeType":"YulIdentifier","src":"12373:5:40"},"variableNames":[{"name":"value0","nativeSrc":"12363:6:40","nodeType":"YulIdentifier","src":"12363:6:40"}]},{"nativeSrc":"12387:47:40","nodeType":"YulVariableDeclaration","src":"12387:47:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12419:9:40","nodeType":"YulIdentifier","src":"12419:9:40"},{"kind":"number","nativeSrc":"12430:2:40","nodeType":"YulLiteral","src":"12430:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12415:3:40","nodeType":"YulIdentifier","src":"12415:3:40"},"nativeSrc":"12415:18:40","nodeType":"YulFunctionCall","src":"12415:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"12402:12:40","nodeType":"YulIdentifier","src":"12402:12:40"},"nativeSrc":"12402:32:40","nodeType":"YulFunctionCall","src":"12402:32:40"},"variables":[{"name":"value_1","nativeSrc":"12391:7:40","nodeType":"YulTypedName","src":"12391:7:40","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"12468:7:40","nodeType":"YulIdentifier","src":"12468:7:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"12443:24:40","nodeType":"YulIdentifier","src":"12443:24:40"},"nativeSrc":"12443:33:40","nodeType":"YulFunctionCall","src":"12443:33:40"},"nativeSrc":"12443:33:40","nodeType":"YulExpressionStatement","src":"12443:33:40"},{"nativeSrc":"12485:17:40","nodeType":"YulAssignment","src":"12485:17:40","value":{"name":"value_1","nativeSrc":"12495:7:40","nodeType":"YulIdentifier","src":"12495:7:40"},"variableNames":[{"name":"value1","nativeSrc":"12485:6:40","nodeType":"YulIdentifier","src":"12485:6:40"}]}]},"name":"abi_decode_tuple_t_addresst_address","nativeSrc":"12120:388:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12165:9:40","nodeType":"YulTypedName","src":"12165:9:40","type":""},{"name":"dataEnd","nativeSrc":"12176:7:40","nodeType":"YulTypedName","src":"12176:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"12188:6:40","nodeType":"YulTypedName","src":"12188:6:40","type":""},{"name":"value1","nativeSrc":"12196:6:40","nodeType":"YulTypedName","src":"12196:6:40","type":""}],"src":"12120:388:40"},{"body":{"nativeSrc":"12617:425:40","nodeType":"YulBlock","src":"12617:425:40","statements":[{"body":{"nativeSrc":"12663:16:40","nodeType":"YulBlock","src":"12663:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12672:1:40","nodeType":"YulLiteral","src":"12672:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"12675:1:40","nodeType":"YulLiteral","src":"12675:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"12665:6:40","nodeType":"YulIdentifier","src":"12665:6:40"},"nativeSrc":"12665:12:40","nodeType":"YulFunctionCall","src":"12665:12:40"},"nativeSrc":"12665:12:40","nodeType":"YulExpressionStatement","src":"12665:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"12638:7:40","nodeType":"YulIdentifier","src":"12638:7:40"},{"name":"headStart","nativeSrc":"12647:9:40","nodeType":"YulIdentifier","src":"12647:9:40"}],"functionName":{"name":"sub","nativeSrc":"12634:3:40","nodeType":"YulIdentifier","src":"12634:3:40"},"nativeSrc":"12634:23:40","nodeType":"YulFunctionCall","src":"12634:23:40"},{"kind":"number","nativeSrc":"12659:2:40","nodeType":"YulLiteral","src":"12659:2:40","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"12630:3:40","nodeType":"YulIdentifier","src":"12630:3:40"},"nativeSrc":"12630:32:40","nodeType":"YulFunctionCall","src":"12630:32:40"},"nativeSrc":"12627:52:40","nodeType":"YulIf","src":"12627:52:40"},{"nativeSrc":"12688:36:40","nodeType":"YulVariableDeclaration","src":"12688:36:40","value":{"arguments":[{"name":"headStart","nativeSrc":"12714:9:40","nodeType":"YulIdentifier","src":"12714:9:40"}],"functionName":{"name":"calldataload","nativeSrc":"12701:12:40","nodeType":"YulIdentifier","src":"12701:12:40"},"nativeSrc":"12701:23:40","nodeType":"YulFunctionCall","src":"12701:23:40"},"variables":[{"name":"value","nativeSrc":"12692:5:40","nodeType":"YulTypedName","src":"12692:5:40","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"12758:5:40","nodeType":"YulIdentifier","src":"12758:5:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"12733:24:40","nodeType":"YulIdentifier","src":"12733:24:40"},"nativeSrc":"12733:31:40","nodeType":"YulFunctionCall","src":"12733:31:40"},"nativeSrc":"12733:31:40","nodeType":"YulExpressionStatement","src":"12733:31:40"},{"nativeSrc":"12773:15:40","nodeType":"YulAssignment","src":"12773:15:40","value":{"name":"value","nativeSrc":"12783:5:40","nodeType":"YulIdentifier","src":"12783:5:40"},"variableNames":[{"name":"value0","nativeSrc":"12773:6:40","nodeType":"YulIdentifier","src":"12773:6:40"}]},{"nativeSrc":"12797:47:40","nodeType":"YulVariableDeclaration","src":"12797:47:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12829:9:40","nodeType":"YulIdentifier","src":"12829:9:40"},{"kind":"number","nativeSrc":"12840:2:40","nodeType":"YulLiteral","src":"12840:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12825:3:40","nodeType":"YulIdentifier","src":"12825:3:40"},"nativeSrc":"12825:18:40","nodeType":"YulFunctionCall","src":"12825:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"12812:12:40","nodeType":"YulIdentifier","src":"12812:12:40"},"nativeSrc":"12812:32:40","nodeType":"YulFunctionCall","src":"12812:32:40"},"variables":[{"name":"value_1","nativeSrc":"12801:7:40","nodeType":"YulTypedName","src":"12801:7:40","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"12878:7:40","nodeType":"YulIdentifier","src":"12878:7:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"12853:24:40","nodeType":"YulIdentifier","src":"12853:24:40"},"nativeSrc":"12853:33:40","nodeType":"YulFunctionCall","src":"12853:33:40"},"nativeSrc":"12853:33:40","nodeType":"YulExpressionStatement","src":"12853:33:40"},{"nativeSrc":"12895:17:40","nodeType":"YulAssignment","src":"12895:17:40","value":{"name":"value_1","nativeSrc":"12905:7:40","nodeType":"YulIdentifier","src":"12905:7:40"},"variableNames":[{"name":"value1","nativeSrc":"12895:6:40","nodeType":"YulIdentifier","src":"12895:6:40"}]},{"nativeSrc":"12921:47:40","nodeType":"YulVariableDeclaration","src":"12921:47:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12953:9:40","nodeType":"YulIdentifier","src":"12953:9:40"},{"kind":"number","nativeSrc":"12964:2:40","nodeType":"YulLiteral","src":"12964:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12949:3:40","nodeType":"YulIdentifier","src":"12949:3:40"},"nativeSrc":"12949:18:40","nodeType":"YulFunctionCall","src":"12949:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"12936:12:40","nodeType":"YulIdentifier","src":"12936:12:40"},"nativeSrc":"12936:32:40","nodeType":"YulFunctionCall","src":"12936:32:40"},"variables":[{"name":"value_2","nativeSrc":"12925:7:40","nodeType":"YulTypedName","src":"12925:7:40","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"13002:7:40","nodeType":"YulIdentifier","src":"13002:7:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"12977:24:40","nodeType":"YulIdentifier","src":"12977:24:40"},"nativeSrc":"12977:33:40","nodeType":"YulFunctionCall","src":"12977:33:40"},"nativeSrc":"12977:33:40","nodeType":"YulExpressionStatement","src":"12977:33:40"},{"nativeSrc":"13019:17:40","nodeType":"YulAssignment","src":"13019:17:40","value":{"name":"value_2","nativeSrc":"13029:7:40","nodeType":"YulIdentifier","src":"13029:7:40"},"variableNames":[{"name":"value2","nativeSrc":"13019:6:40","nodeType":"YulIdentifier","src":"13019:6:40"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_address","nativeSrc":"12513:529:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12567:9:40","nodeType":"YulTypedName","src":"12567:9:40","type":""},{"name":"dataEnd","nativeSrc":"12578:7:40","nodeType":"YulTypedName","src":"12578:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"12590:6:40","nodeType":"YulTypedName","src":"12590:6:40","type":""},{"name":"value1","nativeSrc":"12598:6:40","nodeType":"YulTypedName","src":"12598:6:40","type":""},{"name":"value2","nativeSrc":"12606:6:40","nodeType":"YulTypedName","src":"12606:6:40","type":""}],"src":"12513:529:40"},{"body":{"nativeSrc":"13151:352:40","nodeType":"YulBlock","src":"13151:352:40","statements":[{"body":{"nativeSrc":"13197:16:40","nodeType":"YulBlock","src":"13197:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"13206:1:40","nodeType":"YulLiteral","src":"13206:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"13209:1:40","nodeType":"YulLiteral","src":"13209:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"13199:6:40","nodeType":"YulIdentifier","src":"13199:6:40"},"nativeSrc":"13199:12:40","nodeType":"YulFunctionCall","src":"13199:12:40"},"nativeSrc":"13199:12:40","nodeType":"YulExpressionStatement","src":"13199:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"13172:7:40","nodeType":"YulIdentifier","src":"13172:7:40"},{"name":"headStart","nativeSrc":"13181:9:40","nodeType":"YulIdentifier","src":"13181:9:40"}],"functionName":{"name":"sub","nativeSrc":"13168:3:40","nodeType":"YulIdentifier","src":"13168:3:40"},"nativeSrc":"13168:23:40","nodeType":"YulFunctionCall","src":"13168:23:40"},{"kind":"number","nativeSrc":"13193:2:40","nodeType":"YulLiteral","src":"13193:2:40","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"13164:3:40","nodeType":"YulIdentifier","src":"13164:3:40"},"nativeSrc":"13164:32:40","nodeType":"YulFunctionCall","src":"13164:32:40"},"nativeSrc":"13161:52:40","nodeType":"YulIf","src":"13161:52:40"},{"nativeSrc":"13222:36:40","nodeType":"YulVariableDeclaration","src":"13222:36:40","value":{"arguments":[{"name":"headStart","nativeSrc":"13248:9:40","nodeType":"YulIdentifier","src":"13248:9:40"}],"functionName":{"name":"calldataload","nativeSrc":"13235:12:40","nodeType":"YulIdentifier","src":"13235:12:40"},"nativeSrc":"13235:23:40","nodeType":"YulFunctionCall","src":"13235:23:40"},"variables":[{"name":"value","nativeSrc":"13226:5:40","nodeType":"YulTypedName","src":"13226:5:40","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"13292:5:40","nodeType":"YulIdentifier","src":"13292:5:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"13267:24:40","nodeType":"YulIdentifier","src":"13267:24:40"},"nativeSrc":"13267:31:40","nodeType":"YulFunctionCall","src":"13267:31:40"},"nativeSrc":"13267:31:40","nodeType":"YulExpressionStatement","src":"13267:31:40"},{"nativeSrc":"13307:15:40","nodeType":"YulAssignment","src":"13307:15:40","value":{"name":"value","nativeSrc":"13317:5:40","nodeType":"YulIdentifier","src":"13317:5:40"},"variableNames":[{"name":"value0","nativeSrc":"13307:6:40","nodeType":"YulIdentifier","src":"13307:6:40"}]},{"nativeSrc":"13331:47:40","nodeType":"YulVariableDeclaration","src":"13331:47:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13363:9:40","nodeType":"YulIdentifier","src":"13363:9:40"},{"kind":"number","nativeSrc":"13374:2:40","nodeType":"YulLiteral","src":"13374:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13359:3:40","nodeType":"YulIdentifier","src":"13359:3:40"},"nativeSrc":"13359:18:40","nodeType":"YulFunctionCall","src":"13359:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"13346:12:40","nodeType":"YulIdentifier","src":"13346:12:40"},"nativeSrc":"13346:32:40","nodeType":"YulFunctionCall","src":"13346:32:40"},"variables":[{"name":"value_1","nativeSrc":"13335:7:40","nodeType":"YulTypedName","src":"13335:7:40","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"13412:7:40","nodeType":"YulIdentifier","src":"13412:7:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"13387:24:40","nodeType":"YulIdentifier","src":"13387:24:40"},"nativeSrc":"13387:33:40","nodeType":"YulFunctionCall","src":"13387:33:40"},"nativeSrc":"13387:33:40","nodeType":"YulExpressionStatement","src":"13387:33:40"},{"nativeSrc":"13429:17:40","nodeType":"YulAssignment","src":"13429:17:40","value":{"name":"value_1","nativeSrc":"13439:7:40","nodeType":"YulIdentifier","src":"13439:7:40"},"variableNames":[{"name":"value1","nativeSrc":"13429:6:40","nodeType":"YulIdentifier","src":"13429:6:40"}]},{"nativeSrc":"13455:42:40","nodeType":"YulAssignment","src":"13455:42:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13482:9:40","nodeType":"YulIdentifier","src":"13482:9:40"},{"kind":"number","nativeSrc":"13493:2:40","nodeType":"YulLiteral","src":"13493:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13478:3:40","nodeType":"YulIdentifier","src":"13478:3:40"},"nativeSrc":"13478:18:40","nodeType":"YulFunctionCall","src":"13478:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"13465:12:40","nodeType":"YulIdentifier","src":"13465:12:40"},"nativeSrc":"13465:32:40","nodeType":"YulFunctionCall","src":"13465:32:40"},"variableNames":[{"name":"value2","nativeSrc":"13455:6:40","nodeType":"YulIdentifier","src":"13455:6:40"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nativeSrc":"13047:456:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13101:9:40","nodeType":"YulTypedName","src":"13101:9:40","type":""},{"name":"dataEnd","nativeSrc":"13112:7:40","nodeType":"YulTypedName","src":"13112:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"13124:6:40","nodeType":"YulTypedName","src":"13124:6:40","type":""},{"name":"value1","nativeSrc":"13132:6:40","nodeType":"YulTypedName","src":"13132:6:40","type":""},{"name":"value2","nativeSrc":"13140:6:40","nodeType":"YulTypedName","src":"13140:6:40","type":""}],"src":"13047:456:40"},{"body":{"nativeSrc":"13629:98:40","nodeType":"YulBlock","src":"13629:98:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13646:9:40","nodeType":"YulIdentifier","src":"13646:9:40"},{"kind":"number","nativeSrc":"13657:2:40","nodeType":"YulLiteral","src":"13657:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"13639:6:40","nodeType":"YulIdentifier","src":"13639:6:40"},"nativeSrc":"13639:21:40","nodeType":"YulFunctionCall","src":"13639:21:40"},"nativeSrc":"13639:21:40","nodeType":"YulExpressionStatement","src":"13639:21:40"},{"nativeSrc":"13669:52:40","nodeType":"YulAssignment","src":"13669:52:40","value":{"arguments":[{"name":"value0","nativeSrc":"13694:6:40","nodeType":"YulIdentifier","src":"13694:6:40"},{"arguments":[{"name":"headStart","nativeSrc":"13706:9:40","nodeType":"YulIdentifier","src":"13706:9:40"},{"kind":"number","nativeSrc":"13717:2:40","nodeType":"YulLiteral","src":"13717:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13702:3:40","nodeType":"YulIdentifier","src":"13702:3:40"},"nativeSrc":"13702:18:40","nodeType":"YulFunctionCall","src":"13702:18:40"}],"functionName":{"name":"abi_encode_bytes","nativeSrc":"13677:16:40","nodeType":"YulIdentifier","src":"13677:16:40"},"nativeSrc":"13677:44:40","nodeType":"YulFunctionCall","src":"13677:44:40"},"variableNames":[{"name":"tail","nativeSrc":"13669:4:40","nodeType":"YulIdentifier","src":"13669:4:40"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"13508:219:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13598:9:40","nodeType":"YulTypedName","src":"13598:9:40","type":""},{"name":"value0","nativeSrc":"13609:6:40","nodeType":"YulTypedName","src":"13609:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13620:4:40","nodeType":"YulTypedName","src":"13620:4:40","type":""}],"src":"13508:219:40"},{"body":{"nativeSrc":"13906:154:40","nodeType":"YulBlock","src":"13906:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13923:9:40","nodeType":"YulIdentifier","src":"13923:9:40"},{"kind":"number","nativeSrc":"13934:2:40","nodeType":"YulLiteral","src":"13934:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"13916:6:40","nodeType":"YulIdentifier","src":"13916:6:40"},"nativeSrc":"13916:21:40","nodeType":"YulFunctionCall","src":"13916:21:40"},"nativeSrc":"13916:21:40","nodeType":"YulExpressionStatement","src":"13916:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13957:9:40","nodeType":"YulIdentifier","src":"13957:9:40"},{"kind":"number","nativeSrc":"13968:2:40","nodeType":"YulLiteral","src":"13968:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13953:3:40","nodeType":"YulIdentifier","src":"13953:3:40"},"nativeSrc":"13953:18:40","nodeType":"YulFunctionCall","src":"13953:18:40"},{"kind":"number","nativeSrc":"13973:1:40","nodeType":"YulLiteral","src":"13973:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"13946:6:40","nodeType":"YulIdentifier","src":"13946:6:40"},"nativeSrc":"13946:29:40","nodeType":"YulFunctionCall","src":"13946:29:40"},"nativeSrc":"13946:29:40","nodeType":"YulExpressionStatement","src":"13946:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13995:9:40","nodeType":"YulIdentifier","src":"13995:9:40"},{"kind":"number","nativeSrc":"14006:2:40","nodeType":"YulLiteral","src":"14006:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13991:3:40","nodeType":"YulIdentifier","src":"13991:3:40"},"nativeSrc":"13991:18:40","nodeType":"YulFunctionCall","src":"13991:18:40"},{"hexValue":"4753323033","kind":"string","nativeSrc":"14011:7:40","nodeType":"YulLiteral","src":"14011:7:40","type":"","value":"GS203"}],"functionName":{"name":"mstore","nativeSrc":"13984:6:40","nodeType":"YulIdentifier","src":"13984:6:40"},"nativeSrc":"13984:35:40","nodeType":"YulFunctionCall","src":"13984:35:40"},"nativeSrc":"13984:35:40","nodeType":"YulExpressionStatement","src":"13984:35:40"},{"nativeSrc":"14028:26:40","nodeType":"YulAssignment","src":"14028:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"14040:9:40","nodeType":"YulIdentifier","src":"14040:9:40"},{"kind":"number","nativeSrc":"14051:2:40","nodeType":"YulLiteral","src":"14051:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"14036:3:40","nodeType":"YulIdentifier","src":"14036:3:40"},"nativeSrc":"14036:18:40","nodeType":"YulFunctionCall","src":"14036:18:40"},"variableNames":[{"name":"tail","nativeSrc":"14028:4:40","nodeType":"YulIdentifier","src":"14028:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_3d415fb64f163720f719509288c33af2675ad2c80f86a95800d94f19c802a300__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"13732:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13883:9:40","nodeType":"YulTypedName","src":"13883:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13897:4:40","nodeType":"YulTypedName","src":"13897:4:40","type":""}],"src":"13732:328:40"},{"body":{"nativeSrc":"14239:154:40","nodeType":"YulBlock","src":"14239:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"14256:9:40","nodeType":"YulIdentifier","src":"14256:9:40"},{"kind":"number","nativeSrc":"14267:2:40","nodeType":"YulLiteral","src":"14267:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"14249:6:40","nodeType":"YulIdentifier","src":"14249:6:40"},"nativeSrc":"14249:21:40","nodeType":"YulFunctionCall","src":"14249:21:40"},"nativeSrc":"14249:21:40","nodeType":"YulExpressionStatement","src":"14249:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14290:9:40","nodeType":"YulIdentifier","src":"14290:9:40"},{"kind":"number","nativeSrc":"14301:2:40","nodeType":"YulLiteral","src":"14301:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14286:3:40","nodeType":"YulIdentifier","src":"14286:3:40"},"nativeSrc":"14286:18:40","nodeType":"YulFunctionCall","src":"14286:18:40"},{"kind":"number","nativeSrc":"14306:1:40","nodeType":"YulLiteral","src":"14306:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"14279:6:40","nodeType":"YulIdentifier","src":"14279:6:40"},"nativeSrc":"14279:29:40","nodeType":"YulFunctionCall","src":"14279:29:40"},"nativeSrc":"14279:29:40","nodeType":"YulExpressionStatement","src":"14279:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14328:9:40","nodeType":"YulIdentifier","src":"14328:9:40"},{"kind":"number","nativeSrc":"14339:2:40","nodeType":"YulLiteral","src":"14339:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14324:3:40","nodeType":"YulIdentifier","src":"14324:3:40"},"nativeSrc":"14324:18:40","nodeType":"YulFunctionCall","src":"14324:18:40"},{"hexValue":"4753323034","kind":"string","nativeSrc":"14344:7:40","nodeType":"YulLiteral","src":"14344:7:40","type":"","value":"GS204"}],"functionName":{"name":"mstore","nativeSrc":"14317:6:40","nodeType":"YulIdentifier","src":"14317:6:40"},"nativeSrc":"14317:35:40","nodeType":"YulFunctionCall","src":"14317:35:40"},"nativeSrc":"14317:35:40","nodeType":"YulExpressionStatement","src":"14317:35:40"},{"nativeSrc":"14361:26:40","nodeType":"YulAssignment","src":"14361:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"14373:9:40","nodeType":"YulIdentifier","src":"14373:9:40"},{"kind":"number","nativeSrc":"14384:2:40","nodeType":"YulLiteral","src":"14384:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"14369:3:40","nodeType":"YulIdentifier","src":"14369:3:40"},"nativeSrc":"14369:18:40","nodeType":"YulFunctionCall","src":"14369:18:40"},"variableNames":[{"name":"tail","nativeSrc":"14361:4:40","nodeType":"YulIdentifier","src":"14361:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_bd322b68614692ef7b503763b6ccedf066a7ae3f91196a908df3c549d078f597__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"14065:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14216:9:40","nodeType":"YulTypedName","src":"14216:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14230:4:40","nodeType":"YulTypedName","src":"14230:4:40","type":""}],"src":"14065:328:40"},{"body":{"nativeSrc":"14430:95:40","nodeType":"YulBlock","src":"14430:95:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"14447:1:40","nodeType":"YulLiteral","src":"14447:1:40","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"14454:3:40","nodeType":"YulLiteral","src":"14454:3:40","type":"","value":"224"},{"kind":"number","nativeSrc":"14459:10:40","nodeType":"YulLiteral","src":"14459:10:40","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"14450:3:40","nodeType":"YulIdentifier","src":"14450:3:40"},"nativeSrc":"14450:20:40","nodeType":"YulFunctionCall","src":"14450:20:40"}],"functionName":{"name":"mstore","nativeSrc":"14440:6:40","nodeType":"YulIdentifier","src":"14440:6:40"},"nativeSrc":"14440:31:40","nodeType":"YulFunctionCall","src":"14440:31:40"},"nativeSrc":"14440:31:40","nodeType":"YulExpressionStatement","src":"14440:31:40"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"14487:1:40","nodeType":"YulLiteral","src":"14487:1:40","type":"","value":"4"},{"kind":"number","nativeSrc":"14490:4:40","nodeType":"YulLiteral","src":"14490:4:40","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"14480:6:40","nodeType":"YulIdentifier","src":"14480:6:40"},"nativeSrc":"14480:15:40","nodeType":"YulFunctionCall","src":"14480:15:40"},"nativeSrc":"14480:15:40","nodeType":"YulExpressionStatement","src":"14480:15:40"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"14511:1:40","nodeType":"YulLiteral","src":"14511:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"14514:4:40","nodeType":"YulLiteral","src":"14514:4:40","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"14504:6:40","nodeType":"YulIdentifier","src":"14504:6:40"},"nativeSrc":"14504:15:40","nodeType":"YulFunctionCall","src":"14504:15:40"},"nativeSrc":"14504:15:40","nodeType":"YulExpressionStatement","src":"14504:15:40"}]},"name":"panic_error_0x11","nativeSrc":"14398:127:40","nodeType":"YulFunctionDefinition","src":"14398:127:40"},{"body":{"nativeSrc":"14577:88:40","nodeType":"YulBlock","src":"14577:88:40","statements":[{"body":{"nativeSrc":"14608:22:40","nodeType":"YulBlock","src":"14608:22:40","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"14610:16:40","nodeType":"YulIdentifier","src":"14610:16:40"},"nativeSrc":"14610:18:40","nodeType":"YulFunctionCall","src":"14610:18:40"},"nativeSrc":"14610:18:40","nodeType":"YulExpressionStatement","src":"14610:18:40"}]},"condition":{"arguments":[{"name":"value","nativeSrc":"14593:5:40","nodeType":"YulIdentifier","src":"14593:5:40"},{"arguments":[{"kind":"number","nativeSrc":"14604:1:40","nodeType":"YulLiteral","src":"14604:1:40","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"14600:3:40","nodeType":"YulIdentifier","src":"14600:3:40"},"nativeSrc":"14600:6:40","nodeType":"YulFunctionCall","src":"14600:6:40"}],"functionName":{"name":"eq","nativeSrc":"14590:2:40","nodeType":"YulIdentifier","src":"14590:2:40"},"nativeSrc":"14590:17:40","nodeType":"YulFunctionCall","src":"14590:17:40"},"nativeSrc":"14587:43:40","nodeType":"YulIf","src":"14587:43:40"},{"nativeSrc":"14639:20:40","nodeType":"YulAssignment","src":"14639:20:40","value":{"arguments":[{"name":"value","nativeSrc":"14650:5:40","nodeType":"YulIdentifier","src":"14650:5:40"},{"kind":"number","nativeSrc":"14657:1:40","nodeType":"YulLiteral","src":"14657:1:40","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"14646:3:40","nodeType":"YulIdentifier","src":"14646:3:40"},"nativeSrc":"14646:13:40","nodeType":"YulFunctionCall","src":"14646:13:40"},"variableNames":[{"name":"ret","nativeSrc":"14639:3:40","nodeType":"YulIdentifier","src":"14639:3:40"}]}]},"name":"increment_t_uint256","nativeSrc":"14530:135:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"14559:5:40","nodeType":"YulTypedName","src":"14559:5:40","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"14569:3:40","nodeType":"YulTypedName","src":"14569:3:40","type":""}],"src":"14530:135:40"},{"body":{"nativeSrc":"14844:154:40","nodeType":"YulBlock","src":"14844:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"14861:9:40","nodeType":"YulIdentifier","src":"14861:9:40"},{"kind":"number","nativeSrc":"14872:2:40","nodeType":"YulLiteral","src":"14872:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"14854:6:40","nodeType":"YulIdentifier","src":"14854:6:40"},"nativeSrc":"14854:21:40","nodeType":"YulFunctionCall","src":"14854:21:40"},"nativeSrc":"14854:21:40","nodeType":"YulExpressionStatement","src":"14854:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14895:9:40","nodeType":"YulIdentifier","src":"14895:9:40"},{"kind":"number","nativeSrc":"14906:2:40","nodeType":"YulLiteral","src":"14906:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14891:3:40","nodeType":"YulIdentifier","src":"14891:3:40"},"nativeSrc":"14891:18:40","nodeType":"YulFunctionCall","src":"14891:18:40"},{"kind":"number","nativeSrc":"14911:1:40","nodeType":"YulLiteral","src":"14911:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"14884:6:40","nodeType":"YulIdentifier","src":"14884:6:40"},"nativeSrc":"14884:29:40","nodeType":"YulFunctionCall","src":"14884:29:40"},"nativeSrc":"14884:29:40","nodeType":"YulExpressionStatement","src":"14884:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14933:9:40","nodeType":"YulIdentifier","src":"14933:9:40"},{"kind":"number","nativeSrc":"14944:2:40","nodeType":"YulLiteral","src":"14944:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14929:3:40","nodeType":"YulIdentifier","src":"14929:3:40"},"nativeSrc":"14929:18:40","nodeType":"YulFunctionCall","src":"14929:18:40"},{"hexValue":"4753303230","kind":"string","nativeSrc":"14949:7:40","nodeType":"YulLiteral","src":"14949:7:40","type":"","value":"GS020"}],"functionName":{"name":"mstore","nativeSrc":"14922:6:40","nodeType":"YulIdentifier","src":"14922:6:40"},"nativeSrc":"14922:35:40","nodeType":"YulFunctionCall","src":"14922:35:40"},"nativeSrc":"14922:35:40","nodeType":"YulExpressionStatement","src":"14922:35:40"},{"nativeSrc":"14966:26:40","nodeType":"YulAssignment","src":"14966:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"14978:9:40","nodeType":"YulIdentifier","src":"14978:9:40"},{"kind":"number","nativeSrc":"14989:2:40","nodeType":"YulLiteral","src":"14989:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"14974:3:40","nodeType":"YulIdentifier","src":"14974:3:40"},"nativeSrc":"14974:18:40","nodeType":"YulFunctionCall","src":"14974:18:40"},"variableNames":[{"name":"tail","nativeSrc":"14966:4:40","nodeType":"YulIdentifier","src":"14966:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_f27dba96666375fe844b71e8ea4f388db2ce9f87fa9882d36a17036a7478b232__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"14670:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14821:9:40","nodeType":"YulTypedName","src":"14821:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14835:4:40","nodeType":"YulTypedName","src":"14835:4:40","type":""}],"src":"14670:328:40"},{"body":{"nativeSrc":"15177:154:40","nodeType":"YulBlock","src":"15177:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"15194:9:40","nodeType":"YulIdentifier","src":"15194:9:40"},{"kind":"number","nativeSrc":"15205:2:40","nodeType":"YulLiteral","src":"15205:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"15187:6:40","nodeType":"YulIdentifier","src":"15187:6:40"},"nativeSrc":"15187:21:40","nodeType":"YulFunctionCall","src":"15187:21:40"},"nativeSrc":"15187:21:40","nodeType":"YulExpressionStatement","src":"15187:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15228:9:40","nodeType":"YulIdentifier","src":"15228:9:40"},{"kind":"number","nativeSrc":"15239:2:40","nodeType":"YulLiteral","src":"15239:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15224:3:40","nodeType":"YulIdentifier","src":"15224:3:40"},"nativeSrc":"15224:18:40","nodeType":"YulFunctionCall","src":"15224:18:40"},{"kind":"number","nativeSrc":"15244:1:40","nodeType":"YulLiteral","src":"15244:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"15217:6:40","nodeType":"YulIdentifier","src":"15217:6:40"},"nativeSrc":"15217:29:40","nodeType":"YulFunctionCall","src":"15217:29:40"},"nativeSrc":"15217:29:40","nodeType":"YulExpressionStatement","src":"15217:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15266:9:40","nodeType":"YulIdentifier","src":"15266:9:40"},{"kind":"number","nativeSrc":"15277:2:40","nodeType":"YulLiteral","src":"15277:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"15262:3:40","nodeType":"YulIdentifier","src":"15262:3:40"},"nativeSrc":"15262:18:40","nodeType":"YulFunctionCall","src":"15262:18:40"},{"hexValue":"4753303237","kind":"string","nativeSrc":"15282:7:40","nodeType":"YulLiteral","src":"15282:7:40","type":"","value":"GS027"}],"functionName":{"name":"mstore","nativeSrc":"15255:6:40","nodeType":"YulIdentifier","src":"15255:6:40"},"nativeSrc":"15255:35:40","nodeType":"YulFunctionCall","src":"15255:35:40"},"nativeSrc":"15255:35:40","nodeType":"YulExpressionStatement","src":"15255:35:40"},{"nativeSrc":"15299:26:40","nodeType":"YulAssignment","src":"15299:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"15311:9:40","nodeType":"YulIdentifier","src":"15311:9:40"},{"kind":"number","nativeSrc":"15322:2:40","nodeType":"YulLiteral","src":"15322:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"15307:3:40","nodeType":"YulIdentifier","src":"15307:3:40"},"nativeSrc":"15307:18:40","nodeType":"YulFunctionCall","src":"15307:18:40"},"variableNames":[{"name":"tail","nativeSrc":"15299:4:40","nodeType":"YulIdentifier","src":"15299:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_71cf63766ccc857998a36e6f1707e507e2e8921214ba4b8df65713cc885a8888__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"15003:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15154:9:40","nodeType":"YulTypedName","src":"15154:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"15168:4:40","nodeType":"YulTypedName","src":"15168:4:40","type":""}],"src":"15003:328:40"},{"body":{"nativeSrc":"15510:154:40","nodeType":"YulBlock","src":"15510:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"15527:9:40","nodeType":"YulIdentifier","src":"15527:9:40"},{"kind":"number","nativeSrc":"15538:2:40","nodeType":"YulLiteral","src":"15538:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"15520:6:40","nodeType":"YulIdentifier","src":"15520:6:40"},"nativeSrc":"15520:21:40","nodeType":"YulFunctionCall","src":"15520:21:40"},"nativeSrc":"15520:21:40","nodeType":"YulExpressionStatement","src":"15520:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15561:9:40","nodeType":"YulIdentifier","src":"15561:9:40"},{"kind":"number","nativeSrc":"15572:2:40","nodeType":"YulLiteral","src":"15572:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15557:3:40","nodeType":"YulIdentifier","src":"15557:3:40"},"nativeSrc":"15557:18:40","nodeType":"YulFunctionCall","src":"15557:18:40"},{"kind":"number","nativeSrc":"15577:1:40","nodeType":"YulLiteral","src":"15577:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"15550:6:40","nodeType":"YulIdentifier","src":"15550:6:40"},"nativeSrc":"15550:29:40","nodeType":"YulFunctionCall","src":"15550:29:40"},"nativeSrc":"15550:29:40","nodeType":"YulExpressionStatement","src":"15550:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15599:9:40","nodeType":"YulIdentifier","src":"15599:9:40"},{"kind":"number","nativeSrc":"15610:2:40","nodeType":"YulLiteral","src":"15610:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"15595:3:40","nodeType":"YulIdentifier","src":"15595:3:40"},"nativeSrc":"15595:18:40","nodeType":"YulFunctionCall","src":"15595:18:40"},{"hexValue":"4753303231","kind":"string","nativeSrc":"15615:7:40","nodeType":"YulLiteral","src":"15615:7:40","type":"","value":"GS021"}],"functionName":{"name":"mstore","nativeSrc":"15588:6:40","nodeType":"YulIdentifier","src":"15588:6:40"},"nativeSrc":"15588:35:40","nodeType":"YulFunctionCall","src":"15588:35:40"},"nativeSrc":"15588:35:40","nodeType":"YulExpressionStatement","src":"15588:35:40"},{"nativeSrc":"15632:26:40","nodeType":"YulAssignment","src":"15632:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"15644:9:40","nodeType":"YulIdentifier","src":"15644:9:40"},{"kind":"number","nativeSrc":"15655:2:40","nodeType":"YulLiteral","src":"15655:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"15640:3:40","nodeType":"YulIdentifier","src":"15640:3:40"},"nativeSrc":"15640:18:40","nodeType":"YulFunctionCall","src":"15640:18:40"},"variableNames":[{"name":"tail","nativeSrc":"15632:4:40","nodeType":"YulIdentifier","src":"15632:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_d153a9d5a0d4e2c2b7d4e887f02c1da6287d6d54f20f4d8ce40382a23140787a__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"15336:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15487:9:40","nodeType":"YulTypedName","src":"15487:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"15501:4:40","nodeType":"YulTypedName","src":"15501:4:40","type":""}],"src":"15336:328:40"},{"body":{"nativeSrc":"15843:154:40","nodeType":"YulBlock","src":"15843:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"15860:9:40","nodeType":"YulIdentifier","src":"15860:9:40"},{"kind":"number","nativeSrc":"15871:2:40","nodeType":"YulLiteral","src":"15871:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"15853:6:40","nodeType":"YulIdentifier","src":"15853:6:40"},"nativeSrc":"15853:21:40","nodeType":"YulFunctionCall","src":"15853:21:40"},"nativeSrc":"15853:21:40","nodeType":"YulExpressionStatement","src":"15853:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15894:9:40","nodeType":"YulIdentifier","src":"15894:9:40"},{"kind":"number","nativeSrc":"15905:2:40","nodeType":"YulLiteral","src":"15905:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15890:3:40","nodeType":"YulIdentifier","src":"15890:3:40"},"nativeSrc":"15890:18:40","nodeType":"YulFunctionCall","src":"15890:18:40"},{"kind":"number","nativeSrc":"15910:1:40","nodeType":"YulLiteral","src":"15910:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"15883:6:40","nodeType":"YulIdentifier","src":"15883:6:40"},"nativeSrc":"15883:29:40","nodeType":"YulFunctionCall","src":"15883:29:40"},"nativeSrc":"15883:29:40","nodeType":"YulExpressionStatement","src":"15883:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15932:9:40","nodeType":"YulIdentifier","src":"15932:9:40"},{"kind":"number","nativeSrc":"15943:2:40","nodeType":"YulLiteral","src":"15943:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"15928:3:40","nodeType":"YulIdentifier","src":"15928:3:40"},"nativeSrc":"15928:18:40","nodeType":"YulFunctionCall","src":"15928:18:40"},{"hexValue":"4753303232","kind":"string","nativeSrc":"15948:7:40","nodeType":"YulLiteral","src":"15948:7:40","type":"","value":"GS022"}],"functionName":{"name":"mstore","nativeSrc":"15921:6:40","nodeType":"YulIdentifier","src":"15921:6:40"},"nativeSrc":"15921:35:40","nodeType":"YulFunctionCall","src":"15921:35:40"},"nativeSrc":"15921:35:40","nodeType":"YulExpressionStatement","src":"15921:35:40"},{"nativeSrc":"15965:26:40","nodeType":"YulAssignment","src":"15965:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"15977:9:40","nodeType":"YulIdentifier","src":"15977:9:40"},{"kind":"number","nativeSrc":"15988:2:40","nodeType":"YulLiteral","src":"15988:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"15973:3:40","nodeType":"YulIdentifier","src":"15973:3:40"},"nativeSrc":"15973:18:40","nodeType":"YulFunctionCall","src":"15973:18:40"},"variableNames":[{"name":"tail","nativeSrc":"15965:4:40","nodeType":"YulIdentifier","src":"15965:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_372498b513e17609439d064ce0277017b054c808f722c83ff57cee4e06a9e457__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"15669:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15820:9:40","nodeType":"YulTypedName","src":"15820:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"15834:4:40","nodeType":"YulTypedName","src":"15834:4:40","type":""}],"src":"15669:328:40"},{"body":{"nativeSrc":"16176:154:40","nodeType":"YulBlock","src":"16176:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16193:9:40","nodeType":"YulIdentifier","src":"16193:9:40"},{"kind":"number","nativeSrc":"16204:2:40","nodeType":"YulLiteral","src":"16204:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"16186:6:40","nodeType":"YulIdentifier","src":"16186:6:40"},"nativeSrc":"16186:21:40","nodeType":"YulFunctionCall","src":"16186:21:40"},"nativeSrc":"16186:21:40","nodeType":"YulExpressionStatement","src":"16186:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16227:9:40","nodeType":"YulIdentifier","src":"16227:9:40"},{"kind":"number","nativeSrc":"16238:2:40","nodeType":"YulLiteral","src":"16238:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16223:3:40","nodeType":"YulIdentifier","src":"16223:3:40"},"nativeSrc":"16223:18:40","nodeType":"YulFunctionCall","src":"16223:18:40"},{"kind":"number","nativeSrc":"16243:1:40","nodeType":"YulLiteral","src":"16243:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"16216:6:40","nodeType":"YulIdentifier","src":"16216:6:40"},"nativeSrc":"16216:29:40","nodeType":"YulFunctionCall","src":"16216:29:40"},"nativeSrc":"16216:29:40","nodeType":"YulExpressionStatement","src":"16216:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16265:9:40","nodeType":"YulIdentifier","src":"16265:9:40"},{"kind":"number","nativeSrc":"16276:2:40","nodeType":"YulLiteral","src":"16276:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16261:3:40","nodeType":"YulIdentifier","src":"16261:3:40"},"nativeSrc":"16261:18:40","nodeType":"YulFunctionCall","src":"16261:18:40"},{"hexValue":"4753303233","kind":"string","nativeSrc":"16281:7:40","nodeType":"YulLiteral","src":"16281:7:40","type":"","value":"GS023"}],"functionName":{"name":"mstore","nativeSrc":"16254:6:40","nodeType":"YulIdentifier","src":"16254:6:40"},"nativeSrc":"16254:35:40","nodeType":"YulFunctionCall","src":"16254:35:40"},"nativeSrc":"16254:35:40","nodeType":"YulExpressionStatement","src":"16254:35:40"},{"nativeSrc":"16298:26:40","nodeType":"YulAssignment","src":"16298:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"16310:9:40","nodeType":"YulIdentifier","src":"16310:9:40"},{"kind":"number","nativeSrc":"16321:2:40","nodeType":"YulLiteral","src":"16321:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"16306:3:40","nodeType":"YulIdentifier","src":"16306:3:40"},"nativeSrc":"16306:18:40","nodeType":"YulFunctionCall","src":"16306:18:40"},"variableNames":[{"name":"tail","nativeSrc":"16298:4:40","nodeType":"YulIdentifier","src":"16298:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_00aecc0fa22d38afc0f465808a9fee188ba139fb53b2ca550ea01d91d6ecf29f__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"16002:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16153:9:40","nodeType":"YulTypedName","src":"16153:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16167:4:40","nodeType":"YulTypedName","src":"16167:4:40","type":""}],"src":"16002:328:40"},{"body":{"nativeSrc":"16500:212:40","nodeType":"YulBlock","src":"16500:212:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16517:9:40","nodeType":"YulIdentifier","src":"16517:9:40"},{"kind":"number","nativeSrc":"16528:2:40","nodeType":"YulLiteral","src":"16528:2:40","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"16510:6:40","nodeType":"YulIdentifier","src":"16510:6:40"},"nativeSrc":"16510:21:40","nodeType":"YulFunctionCall","src":"16510:21:40"},"nativeSrc":"16510:21:40","nodeType":"YulExpressionStatement","src":"16510:21:40"},{"nativeSrc":"16540:58:40","nodeType":"YulVariableDeclaration","src":"16540:58:40","value":{"arguments":[{"name":"value0","nativeSrc":"16571:6:40","nodeType":"YulIdentifier","src":"16571:6:40"},{"arguments":[{"name":"headStart","nativeSrc":"16583:9:40","nodeType":"YulIdentifier","src":"16583:9:40"},{"kind":"number","nativeSrc":"16594:2:40","nodeType":"YulLiteral","src":"16594:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16579:3:40","nodeType":"YulIdentifier","src":"16579:3:40"},"nativeSrc":"16579:18:40","nodeType":"YulFunctionCall","src":"16579:18:40"}],"functionName":{"name":"abi_encode_bytes","nativeSrc":"16554:16:40","nodeType":"YulIdentifier","src":"16554:16:40"},"nativeSrc":"16554:44:40","nodeType":"YulFunctionCall","src":"16554:44:40"},"variables":[{"name":"tail_1","nativeSrc":"16544:6:40","nodeType":"YulTypedName","src":"16544:6:40","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16618:9:40","nodeType":"YulIdentifier","src":"16618:9:40"},{"kind":"number","nativeSrc":"16629:2:40","nodeType":"YulLiteral","src":"16629:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16614:3:40","nodeType":"YulIdentifier","src":"16614:3:40"},"nativeSrc":"16614:18:40","nodeType":"YulFunctionCall","src":"16614:18:40"},{"arguments":[{"name":"tail_1","nativeSrc":"16638:6:40","nodeType":"YulIdentifier","src":"16638:6:40"},{"name":"headStart","nativeSrc":"16646:9:40","nodeType":"YulIdentifier","src":"16646:9:40"}],"functionName":{"name":"sub","nativeSrc":"16634:3:40","nodeType":"YulIdentifier","src":"16634:3:40"},"nativeSrc":"16634:22:40","nodeType":"YulFunctionCall","src":"16634:22:40"}],"functionName":{"name":"mstore","nativeSrc":"16607:6:40","nodeType":"YulIdentifier","src":"16607:6:40"},"nativeSrc":"16607:50:40","nodeType":"YulFunctionCall","src":"16607:50:40"},"nativeSrc":"16607:50:40","nodeType":"YulExpressionStatement","src":"16607:50:40"},{"nativeSrc":"16666:40:40","nodeType":"YulAssignment","src":"16666:40:40","value":{"arguments":[{"name":"value1","nativeSrc":"16691:6:40","nodeType":"YulIdentifier","src":"16691:6:40"},{"name":"tail_1","nativeSrc":"16699:6:40","nodeType":"YulIdentifier","src":"16699:6:40"}],"functionName":{"name":"abi_encode_bytes","nativeSrc":"16674:16:40","nodeType":"YulIdentifier","src":"16674:16:40"},"nativeSrc":"16674:32:40","nodeType":"YulFunctionCall","src":"16674:32:40"},"variableNames":[{"name":"tail","nativeSrc":"16666:4:40","nodeType":"YulIdentifier","src":"16666:4:40"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"16335:377:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16461:9:40","nodeType":"YulTypedName","src":"16461:9:40","type":""},{"name":"value1","nativeSrc":"16472:6:40","nodeType":"YulTypedName","src":"16472:6:40","type":""},{"name":"value0","nativeSrc":"16480:6:40","nodeType":"YulTypedName","src":"16480:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16491:4:40","nodeType":"YulTypedName","src":"16491:4:40","type":""}],"src":"16335:377:40"},{"body":{"nativeSrc":"16797:210:40","nodeType":"YulBlock","src":"16797:210:40","statements":[{"body":{"nativeSrc":"16843:16:40","nodeType":"YulBlock","src":"16843:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"16852:1:40","nodeType":"YulLiteral","src":"16852:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"16855:1:40","nodeType":"YulLiteral","src":"16855:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"16845:6:40","nodeType":"YulIdentifier","src":"16845:6:40"},"nativeSrc":"16845:12:40","nodeType":"YulFunctionCall","src":"16845:12:40"},"nativeSrc":"16845:12:40","nodeType":"YulExpressionStatement","src":"16845:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"16818:7:40","nodeType":"YulIdentifier","src":"16818:7:40"},{"name":"headStart","nativeSrc":"16827:9:40","nodeType":"YulIdentifier","src":"16827:9:40"}],"functionName":{"name":"sub","nativeSrc":"16814:3:40","nodeType":"YulIdentifier","src":"16814:3:40"},"nativeSrc":"16814:23:40","nodeType":"YulFunctionCall","src":"16814:23:40"},{"kind":"number","nativeSrc":"16839:2:40","nodeType":"YulLiteral","src":"16839:2:40","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"16810:3:40","nodeType":"YulIdentifier","src":"16810:3:40"},"nativeSrc":"16810:32:40","nodeType":"YulFunctionCall","src":"16810:32:40"},"nativeSrc":"16807:52:40","nodeType":"YulIf","src":"16807:52:40"},{"nativeSrc":"16868:29:40","nodeType":"YulVariableDeclaration","src":"16868:29:40","value":{"arguments":[{"name":"headStart","nativeSrc":"16887:9:40","nodeType":"YulIdentifier","src":"16887:9:40"}],"functionName":{"name":"mload","nativeSrc":"16881:5:40","nodeType":"YulIdentifier","src":"16881:5:40"},"nativeSrc":"16881:16:40","nodeType":"YulFunctionCall","src":"16881:16:40"},"variables":[{"name":"value","nativeSrc":"16872:5:40","nodeType":"YulTypedName","src":"16872:5:40","type":""}]},{"body":{"nativeSrc":"16961:16:40","nodeType":"YulBlock","src":"16961:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"16970:1:40","nodeType":"YulLiteral","src":"16970:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"16973:1:40","nodeType":"YulLiteral","src":"16973:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"16963:6:40","nodeType":"YulIdentifier","src":"16963:6:40"},"nativeSrc":"16963:12:40","nodeType":"YulFunctionCall","src":"16963:12:40"},"nativeSrc":"16963:12:40","nodeType":"YulExpressionStatement","src":"16963:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"16919:5:40","nodeType":"YulIdentifier","src":"16919:5:40"},{"arguments":[{"name":"value","nativeSrc":"16930:5:40","nodeType":"YulIdentifier","src":"16930:5:40"},{"arguments":[{"kind":"number","nativeSrc":"16941:3:40","nodeType":"YulLiteral","src":"16941:3:40","type":"","value":"224"},{"kind":"number","nativeSrc":"16946:10:40","nodeType":"YulLiteral","src":"16946:10:40","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nativeSrc":"16937:3:40","nodeType":"YulIdentifier","src":"16937:3:40"},"nativeSrc":"16937:20:40","nodeType":"YulFunctionCall","src":"16937:20:40"}],"functionName":{"name":"and","nativeSrc":"16926:3:40","nodeType":"YulIdentifier","src":"16926:3:40"},"nativeSrc":"16926:32:40","nodeType":"YulFunctionCall","src":"16926:32:40"}],"functionName":{"name":"eq","nativeSrc":"16916:2:40","nodeType":"YulIdentifier","src":"16916:2:40"},"nativeSrc":"16916:43:40","nodeType":"YulFunctionCall","src":"16916:43:40"}],"functionName":{"name":"iszero","nativeSrc":"16909:6:40","nodeType":"YulIdentifier","src":"16909:6:40"},"nativeSrc":"16909:51:40","nodeType":"YulFunctionCall","src":"16909:51:40"},"nativeSrc":"16906:71:40","nodeType":"YulIf","src":"16906:71:40"},{"nativeSrc":"16986:15:40","nodeType":"YulAssignment","src":"16986:15:40","value":{"name":"value","nativeSrc":"16996:5:40","nodeType":"YulIdentifier","src":"16996:5:40"},"variableNames":[{"name":"value0","nativeSrc":"16986:6:40","nodeType":"YulIdentifier","src":"16986:6:40"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nativeSrc":"16717:290:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16763:9:40","nodeType":"YulTypedName","src":"16763:9:40","type":""},{"name":"dataEnd","nativeSrc":"16774:7:40","nodeType":"YulTypedName","src":"16774:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"16786:6:40","nodeType":"YulTypedName","src":"16786:6:40","type":""}],"src":"16717:290:40"},{"body":{"nativeSrc":"17186:154:40","nodeType":"YulBlock","src":"17186:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"17203:9:40","nodeType":"YulIdentifier","src":"17203:9:40"},{"kind":"number","nativeSrc":"17214:2:40","nodeType":"YulLiteral","src":"17214:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"17196:6:40","nodeType":"YulIdentifier","src":"17196:6:40"},"nativeSrc":"17196:21:40","nodeType":"YulFunctionCall","src":"17196:21:40"},"nativeSrc":"17196:21:40","nodeType":"YulExpressionStatement","src":"17196:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17237:9:40","nodeType":"YulIdentifier","src":"17237:9:40"},{"kind":"number","nativeSrc":"17248:2:40","nodeType":"YulLiteral","src":"17248:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17233:3:40","nodeType":"YulIdentifier","src":"17233:3:40"},"nativeSrc":"17233:18:40","nodeType":"YulFunctionCall","src":"17233:18:40"},{"kind":"number","nativeSrc":"17253:1:40","nodeType":"YulLiteral","src":"17253:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"17226:6:40","nodeType":"YulIdentifier","src":"17226:6:40"},"nativeSrc":"17226:29:40","nodeType":"YulFunctionCall","src":"17226:29:40"},"nativeSrc":"17226:29:40","nodeType":"YulExpressionStatement","src":"17226:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17275:9:40","nodeType":"YulIdentifier","src":"17275:9:40"},{"kind":"number","nativeSrc":"17286:2:40","nodeType":"YulLiteral","src":"17286:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17271:3:40","nodeType":"YulIdentifier","src":"17271:3:40"},"nativeSrc":"17271:18:40","nodeType":"YulFunctionCall","src":"17271:18:40"},{"hexValue":"4753303234","kind":"string","nativeSrc":"17291:7:40","nodeType":"YulLiteral","src":"17291:7:40","type":"","value":"GS024"}],"functionName":{"name":"mstore","nativeSrc":"17264:6:40","nodeType":"YulIdentifier","src":"17264:6:40"},"nativeSrc":"17264:35:40","nodeType":"YulFunctionCall","src":"17264:35:40"},"nativeSrc":"17264:35:40","nodeType":"YulExpressionStatement","src":"17264:35:40"},{"nativeSrc":"17308:26:40","nodeType":"YulAssignment","src":"17308:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"17320:9:40","nodeType":"YulIdentifier","src":"17320:9:40"},{"kind":"number","nativeSrc":"17331:2:40","nodeType":"YulLiteral","src":"17331:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"17316:3:40","nodeType":"YulIdentifier","src":"17316:3:40"},"nativeSrc":"17316:18:40","nodeType":"YulFunctionCall","src":"17316:18:40"},"variableNames":[{"name":"tail","nativeSrc":"17308:4:40","nodeType":"YulIdentifier","src":"17308:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_1d9dfad0f7e80ccb3a898324566cbd9ed8451678d229622c4c1b5f1f19330139__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"17012:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17163:9:40","nodeType":"YulTypedName","src":"17163:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"17177:4:40","nodeType":"YulTypedName","src":"17177:4:40","type":""}],"src":"17012:328:40"},{"body":{"nativeSrc":"17519:154:40","nodeType":"YulBlock","src":"17519:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"17536:9:40","nodeType":"YulIdentifier","src":"17536:9:40"},{"kind":"number","nativeSrc":"17547:2:40","nodeType":"YulLiteral","src":"17547:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"17529:6:40","nodeType":"YulIdentifier","src":"17529:6:40"},"nativeSrc":"17529:21:40","nodeType":"YulFunctionCall","src":"17529:21:40"},"nativeSrc":"17529:21:40","nodeType":"YulExpressionStatement","src":"17529:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17570:9:40","nodeType":"YulIdentifier","src":"17570:9:40"},{"kind":"number","nativeSrc":"17581:2:40","nodeType":"YulLiteral","src":"17581:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17566:3:40","nodeType":"YulIdentifier","src":"17566:3:40"},"nativeSrc":"17566:18:40","nodeType":"YulFunctionCall","src":"17566:18:40"},{"kind":"number","nativeSrc":"17586:1:40","nodeType":"YulLiteral","src":"17586:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"17559:6:40","nodeType":"YulIdentifier","src":"17559:6:40"},"nativeSrc":"17559:29:40","nodeType":"YulFunctionCall","src":"17559:29:40"},"nativeSrc":"17559:29:40","nodeType":"YulExpressionStatement","src":"17559:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17608:9:40","nodeType":"YulIdentifier","src":"17608:9:40"},{"kind":"number","nativeSrc":"17619:2:40","nodeType":"YulLiteral","src":"17619:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17604:3:40","nodeType":"YulIdentifier","src":"17604:3:40"},"nativeSrc":"17604:18:40","nodeType":"YulFunctionCall","src":"17604:18:40"},{"hexValue":"4753303235","kind":"string","nativeSrc":"17624:7:40","nodeType":"YulLiteral","src":"17624:7:40","type":"","value":"GS025"}],"functionName":{"name":"mstore","nativeSrc":"17597:6:40","nodeType":"YulIdentifier","src":"17597:6:40"},"nativeSrc":"17597:35:40","nodeType":"YulFunctionCall","src":"17597:35:40"},"nativeSrc":"17597:35:40","nodeType":"YulExpressionStatement","src":"17597:35:40"},{"nativeSrc":"17641:26:40","nodeType":"YulAssignment","src":"17641:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"17653:9:40","nodeType":"YulIdentifier","src":"17653:9:40"},{"kind":"number","nativeSrc":"17664:2:40","nodeType":"YulLiteral","src":"17664:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"17649:3:40","nodeType":"YulIdentifier","src":"17649:3:40"},"nativeSrc":"17649:18:40","nodeType":"YulFunctionCall","src":"17649:18:40"},"variableNames":[{"name":"tail","nativeSrc":"17641:4:40","nodeType":"YulIdentifier","src":"17641:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_bc2491dc7fc5c71a630e01bcb9c3e39f61f559ab54f6528d2adb67d65ed9ff6b__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"17345:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17496:9:40","nodeType":"YulTypedName","src":"17496:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"17510:4:40","nodeType":"YulTypedName","src":"17510:4:40","type":""}],"src":"17345:328:40"},{"body":{"nativeSrc":"17898:160:40","nodeType":"YulBlock","src":"17898:160:40","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"17915:3:40","nodeType":"YulIdentifier","src":"17915:3:40"},{"kind":"number","nativeSrc":"17920:66:40","nodeType":"YulLiteral","src":"17920:66:40","type":"","value":"0x19457468657265756d205369676e6564204d6573736167653a0a333200000000"}],"functionName":{"name":"mstore","nativeSrc":"17908:6:40","nodeType":"YulIdentifier","src":"17908:6:40"},"nativeSrc":"17908:79:40","nodeType":"YulFunctionCall","src":"17908:79:40"},"nativeSrc":"17908:79:40","nodeType":"YulExpressionStatement","src":"17908:79:40"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"18007:3:40","nodeType":"YulIdentifier","src":"18007:3:40"},{"kind":"number","nativeSrc":"18012:2:40","nodeType":"YulLiteral","src":"18012:2:40","type":"","value":"28"}],"functionName":{"name":"add","nativeSrc":"18003:3:40","nodeType":"YulIdentifier","src":"18003:3:40"},"nativeSrc":"18003:12:40","nodeType":"YulFunctionCall","src":"18003:12:40"},{"name":"value0","nativeSrc":"18017:6:40","nodeType":"YulIdentifier","src":"18017:6:40"}],"functionName":{"name":"mstore","nativeSrc":"17996:6:40","nodeType":"YulIdentifier","src":"17996:6:40"},"nativeSrc":"17996:28:40","nodeType":"YulFunctionCall","src":"17996:28:40"},"nativeSrc":"17996:28:40","nodeType":"YulExpressionStatement","src":"17996:28:40"},{"nativeSrc":"18033:19:40","nodeType":"YulAssignment","src":"18033:19:40","value":{"arguments":[{"name":"pos","nativeSrc":"18044:3:40","nodeType":"YulIdentifier","src":"18044:3:40"},{"kind":"number","nativeSrc":"18049:2:40","nodeType":"YulLiteral","src":"18049:2:40","type":"","value":"60"}],"functionName":{"name":"add","nativeSrc":"18040:3:40","nodeType":"YulIdentifier","src":"18040:3:40"},"nativeSrc":"18040:12:40","nodeType":"YulFunctionCall","src":"18040:12:40"},"variableNames":[{"name":"end","nativeSrc":"18033:3:40","nodeType":"YulIdentifier","src":"18033:3:40"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73_t_bytes32__to_t_string_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed","nativeSrc":"17678:380:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"17874:3:40","nodeType":"YulTypedName","src":"17874:3:40","type":""},{"name":"value0","nativeSrc":"17879:6:40","nodeType":"YulTypedName","src":"17879:6:40","type":""}],"returnVariables":[{"name":"end","nativeSrc":"17890:3:40","nodeType":"YulTypedName","src":"17890:3:40","type":""}],"src":"17678:380:40"},{"body":{"nativeSrc":"18110:104:40","nodeType":"YulBlock","src":"18110:104:40","statements":[{"nativeSrc":"18120:39:40","nodeType":"YulAssignment","src":"18120:39:40","value":{"arguments":[{"arguments":[{"name":"x","nativeSrc":"18136:1:40","nodeType":"YulIdentifier","src":"18136:1:40"},{"kind":"number","nativeSrc":"18139:4:40","nodeType":"YulLiteral","src":"18139:4:40","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"18132:3:40","nodeType":"YulIdentifier","src":"18132:3:40"},"nativeSrc":"18132:12:40","nodeType":"YulFunctionCall","src":"18132:12:40"},{"arguments":[{"name":"y","nativeSrc":"18150:1:40","nodeType":"YulIdentifier","src":"18150:1:40"},{"kind":"number","nativeSrc":"18153:4:40","nodeType":"YulLiteral","src":"18153:4:40","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"18146:3:40","nodeType":"YulIdentifier","src":"18146:3:40"},"nativeSrc":"18146:12:40","nodeType":"YulFunctionCall","src":"18146:12:40"}],"functionName":{"name":"sub","nativeSrc":"18128:3:40","nodeType":"YulIdentifier","src":"18128:3:40"},"nativeSrc":"18128:31:40","nodeType":"YulFunctionCall","src":"18128:31:40"},"variableNames":[{"name":"diff","nativeSrc":"18120:4:40","nodeType":"YulIdentifier","src":"18120:4:40"}]},{"body":{"nativeSrc":"18186:22:40","nodeType":"YulBlock","src":"18186:22:40","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"18188:16:40","nodeType":"YulIdentifier","src":"18188:16:40"},"nativeSrc":"18188:18:40","nodeType":"YulFunctionCall","src":"18188:18:40"},"nativeSrc":"18188:18:40","nodeType":"YulExpressionStatement","src":"18188:18:40"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"18174:4:40","nodeType":"YulIdentifier","src":"18174:4:40"},{"kind":"number","nativeSrc":"18180:4:40","nodeType":"YulLiteral","src":"18180:4:40","type":"","value":"0xff"}],"functionName":{"name":"gt","nativeSrc":"18171:2:40","nodeType":"YulIdentifier","src":"18171:2:40"},"nativeSrc":"18171:14:40","nodeType":"YulFunctionCall","src":"18171:14:40"},"nativeSrc":"18168:40:40","nodeType":"YulIf","src":"18168:40:40"}]},"name":"checked_sub_t_uint8","nativeSrc":"18063:151:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"18092:1:40","nodeType":"YulTypedName","src":"18092:1:40","type":""},{"name":"y","nativeSrc":"18095:1:40","nodeType":"YulTypedName","src":"18095:1:40","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"18101:4:40","nodeType":"YulTypedName","src":"18101:4:40","type":""}],"src":"18063:151:40"},{"body":{"nativeSrc":"18400:217:40","nodeType":"YulBlock","src":"18400:217:40","statements":[{"nativeSrc":"18410:27:40","nodeType":"YulAssignment","src":"18410:27:40","value":{"arguments":[{"name":"headStart","nativeSrc":"18422:9:40","nodeType":"YulIdentifier","src":"18422:9:40"},{"kind":"number","nativeSrc":"18433:3:40","nodeType":"YulLiteral","src":"18433:3:40","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"18418:3:40","nodeType":"YulIdentifier","src":"18418:3:40"},"nativeSrc":"18418:19:40","nodeType":"YulFunctionCall","src":"18418:19:40"},"variableNames":[{"name":"tail","nativeSrc":"18410:4:40","nodeType":"YulIdentifier","src":"18410:4:40"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"18453:9:40","nodeType":"YulIdentifier","src":"18453:9:40"},{"name":"value0","nativeSrc":"18464:6:40","nodeType":"YulIdentifier","src":"18464:6:40"}],"functionName":{"name":"mstore","nativeSrc":"18446:6:40","nodeType":"YulIdentifier","src":"18446:6:40"},"nativeSrc":"18446:25:40","nodeType":"YulFunctionCall","src":"18446:25:40"},"nativeSrc":"18446:25:40","nodeType":"YulExpressionStatement","src":"18446:25:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18491:9:40","nodeType":"YulIdentifier","src":"18491:9:40"},{"kind":"number","nativeSrc":"18502:2:40","nodeType":"YulLiteral","src":"18502:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18487:3:40","nodeType":"YulIdentifier","src":"18487:3:40"},"nativeSrc":"18487:18:40","nodeType":"YulFunctionCall","src":"18487:18:40"},{"arguments":[{"name":"value1","nativeSrc":"18511:6:40","nodeType":"YulIdentifier","src":"18511:6:40"},{"kind":"number","nativeSrc":"18519:4:40","nodeType":"YulLiteral","src":"18519:4:40","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"18507:3:40","nodeType":"YulIdentifier","src":"18507:3:40"},"nativeSrc":"18507:17:40","nodeType":"YulFunctionCall","src":"18507:17:40"}],"functionName":{"name":"mstore","nativeSrc":"18480:6:40","nodeType":"YulIdentifier","src":"18480:6:40"},"nativeSrc":"18480:45:40","nodeType":"YulFunctionCall","src":"18480:45:40"},"nativeSrc":"18480:45:40","nodeType":"YulExpressionStatement","src":"18480:45:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18545:9:40","nodeType":"YulIdentifier","src":"18545:9:40"},{"kind":"number","nativeSrc":"18556:2:40","nodeType":"YulLiteral","src":"18556:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18541:3:40","nodeType":"YulIdentifier","src":"18541:3:40"},"nativeSrc":"18541:18:40","nodeType":"YulFunctionCall","src":"18541:18:40"},{"name":"value2","nativeSrc":"18561:6:40","nodeType":"YulIdentifier","src":"18561:6:40"}],"functionName":{"name":"mstore","nativeSrc":"18534:6:40","nodeType":"YulIdentifier","src":"18534:6:40"},"nativeSrc":"18534:34:40","nodeType":"YulFunctionCall","src":"18534:34:40"},"nativeSrc":"18534:34:40","nodeType":"YulExpressionStatement","src":"18534:34:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18588:9:40","nodeType":"YulIdentifier","src":"18588:9:40"},{"kind":"number","nativeSrc":"18599:2:40","nodeType":"YulLiteral","src":"18599:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"18584:3:40","nodeType":"YulIdentifier","src":"18584:3:40"},"nativeSrc":"18584:18:40","nodeType":"YulFunctionCall","src":"18584:18:40"},{"name":"value3","nativeSrc":"18604:6:40","nodeType":"YulIdentifier","src":"18604:6:40"}],"functionName":{"name":"mstore","nativeSrc":"18577:6:40","nodeType":"YulIdentifier","src":"18577:6:40"},"nativeSrc":"18577:34:40","nodeType":"YulFunctionCall","src":"18577:34:40"},"nativeSrc":"18577:34:40","nodeType":"YulExpressionStatement","src":"18577:34:40"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nativeSrc":"18219:398:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18345:9:40","nodeType":"YulTypedName","src":"18345:9:40","type":""},{"name":"value3","nativeSrc":"18356:6:40","nodeType":"YulTypedName","src":"18356:6:40","type":""},{"name":"value2","nativeSrc":"18364:6:40","nodeType":"YulTypedName","src":"18364:6:40","type":""},{"name":"value1","nativeSrc":"18372:6:40","nodeType":"YulTypedName","src":"18372:6:40","type":""},{"name":"value0","nativeSrc":"18380:6:40","nodeType":"YulTypedName","src":"18380:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18391:4:40","nodeType":"YulTypedName","src":"18391:4:40","type":""}],"src":"18219:398:40"},{"body":{"nativeSrc":"18796:154:40","nodeType":"YulBlock","src":"18796:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"18813:9:40","nodeType":"YulIdentifier","src":"18813:9:40"},{"kind":"number","nativeSrc":"18824:2:40","nodeType":"YulLiteral","src":"18824:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"18806:6:40","nodeType":"YulIdentifier","src":"18806:6:40"},"nativeSrc":"18806:21:40","nodeType":"YulFunctionCall","src":"18806:21:40"},"nativeSrc":"18806:21:40","nodeType":"YulExpressionStatement","src":"18806:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18847:9:40","nodeType":"YulIdentifier","src":"18847:9:40"},{"kind":"number","nativeSrc":"18858:2:40","nodeType":"YulLiteral","src":"18858:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18843:3:40","nodeType":"YulIdentifier","src":"18843:3:40"},"nativeSrc":"18843:18:40","nodeType":"YulFunctionCall","src":"18843:18:40"},{"kind":"number","nativeSrc":"18863:1:40","nodeType":"YulLiteral","src":"18863:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"18836:6:40","nodeType":"YulIdentifier","src":"18836:6:40"},"nativeSrc":"18836:29:40","nodeType":"YulFunctionCall","src":"18836:29:40"},"nativeSrc":"18836:29:40","nodeType":"YulExpressionStatement","src":"18836:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18885:9:40","nodeType":"YulIdentifier","src":"18885:9:40"},{"kind":"number","nativeSrc":"18896:2:40","nodeType":"YulLiteral","src":"18896:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18881:3:40","nodeType":"YulIdentifier","src":"18881:3:40"},"nativeSrc":"18881:18:40","nodeType":"YulFunctionCall","src":"18881:18:40"},{"hexValue":"4753303236","kind":"string","nativeSrc":"18901:7:40","nodeType":"YulLiteral","src":"18901:7:40","type":"","value":"GS026"}],"functionName":{"name":"mstore","nativeSrc":"18874:6:40","nodeType":"YulIdentifier","src":"18874:6:40"},"nativeSrc":"18874:35:40","nodeType":"YulFunctionCall","src":"18874:35:40"},"nativeSrc":"18874:35:40","nodeType":"YulExpressionStatement","src":"18874:35:40"},{"nativeSrc":"18918:26:40","nodeType":"YulAssignment","src":"18918:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"18930:9:40","nodeType":"YulIdentifier","src":"18930:9:40"},{"kind":"number","nativeSrc":"18941:2:40","nodeType":"YulLiteral","src":"18941:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"18926:3:40","nodeType":"YulIdentifier","src":"18926:3:40"},"nativeSrc":"18926:18:40","nodeType":"YulFunctionCall","src":"18926:18:40"},"variableNames":[{"name":"tail","nativeSrc":"18918:4:40","nodeType":"YulIdentifier","src":"18918:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_14032cc06a7a2043c1b961d6b7d6cbfaea1511224ce5ca723af49fa68e55c159__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"18622:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18773:9:40","nodeType":"YulTypedName","src":"18773:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18787:4:40","nodeType":"YulTypedName","src":"18787:4:40","type":""}],"src":"18622:328:40"},{"body":{"nativeSrc":"19129:154:40","nodeType":"YulBlock","src":"19129:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"19146:9:40","nodeType":"YulIdentifier","src":"19146:9:40"},{"kind":"number","nativeSrc":"19157:2:40","nodeType":"YulLiteral","src":"19157:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"19139:6:40","nodeType":"YulIdentifier","src":"19139:6:40"},"nativeSrc":"19139:21:40","nodeType":"YulFunctionCall","src":"19139:21:40"},"nativeSrc":"19139:21:40","nodeType":"YulExpressionStatement","src":"19139:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19180:9:40","nodeType":"YulIdentifier","src":"19180:9:40"},{"kind":"number","nativeSrc":"19191:2:40","nodeType":"YulLiteral","src":"19191:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19176:3:40","nodeType":"YulIdentifier","src":"19176:3:40"},"nativeSrc":"19176:18:40","nodeType":"YulFunctionCall","src":"19176:18:40"},{"kind":"number","nativeSrc":"19196:1:40","nodeType":"YulLiteral","src":"19196:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"19169:6:40","nodeType":"YulIdentifier","src":"19169:6:40"},"nativeSrc":"19169:29:40","nodeType":"YulFunctionCall","src":"19169:29:40"},"nativeSrc":"19169:29:40","nodeType":"YulExpressionStatement","src":"19169:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19218:9:40","nodeType":"YulIdentifier","src":"19218:9:40"},{"kind":"number","nativeSrc":"19229:2:40","nodeType":"YulLiteral","src":"19229:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"19214:3:40","nodeType":"YulIdentifier","src":"19214:3:40"},"nativeSrc":"19214:18:40","nodeType":"YulFunctionCall","src":"19214:18:40"},{"hexValue":"4753313034","kind":"string","nativeSrc":"19234:7:40","nodeType":"YulLiteral","src":"19234:7:40","type":"","value":"GS104"}],"functionName":{"name":"mstore","nativeSrc":"19207:6:40","nodeType":"YulIdentifier","src":"19207:6:40"},"nativeSrc":"19207:35:40","nodeType":"YulFunctionCall","src":"19207:35:40"},"nativeSrc":"19207:35:40","nodeType":"YulExpressionStatement","src":"19207:35:40"},{"nativeSrc":"19251:26:40","nodeType":"YulAssignment","src":"19251:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"19263:9:40","nodeType":"YulIdentifier","src":"19263:9:40"},{"kind":"number","nativeSrc":"19274:2:40","nodeType":"YulLiteral","src":"19274:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"19259:3:40","nodeType":"YulIdentifier","src":"19259:3:40"},"nativeSrc":"19259:18:40","nodeType":"YulFunctionCall","src":"19259:18:40"},"variableNames":[{"name":"tail","nativeSrc":"19251:4:40","nodeType":"YulIdentifier","src":"19251:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_b44c13dad2cf265cdd10f957c112238232519dfdaff7245a6824a63db294cf23__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"18955:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"19106:9:40","nodeType":"YulTypedName","src":"19106:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"19120:4:40","nodeType":"YulTypedName","src":"19120:4:40","type":""}],"src":"18955:328:40"},{"body":{"nativeSrc":"19340:116:40","nodeType":"YulBlock","src":"19340:116:40","statements":[{"nativeSrc":"19350:20:40","nodeType":"YulAssignment","src":"19350:20:40","value":{"arguments":[{"name":"x","nativeSrc":"19365:1:40","nodeType":"YulIdentifier","src":"19365:1:40"},{"name":"y","nativeSrc":"19368:1:40","nodeType":"YulIdentifier","src":"19368:1:40"}],"functionName":{"name":"mul","nativeSrc":"19361:3:40","nodeType":"YulIdentifier","src":"19361:3:40"},"nativeSrc":"19361:9:40","nodeType":"YulFunctionCall","src":"19361:9:40"},"variableNames":[{"name":"product","nativeSrc":"19350:7:40","nodeType":"YulIdentifier","src":"19350:7:40"}]},{"body":{"nativeSrc":"19428:22:40","nodeType":"YulBlock","src":"19428:22:40","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"19430:16:40","nodeType":"YulIdentifier","src":"19430:16:40"},"nativeSrc":"19430:18:40","nodeType":"YulFunctionCall","src":"19430:18:40"},"nativeSrc":"19430:18:40","nodeType":"YulExpressionStatement","src":"19430:18:40"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nativeSrc":"19399:1:40","nodeType":"YulIdentifier","src":"19399:1:40"}],"functionName":{"name":"iszero","nativeSrc":"19392:6:40","nodeType":"YulIdentifier","src":"19392:6:40"},"nativeSrc":"19392:9:40","nodeType":"YulFunctionCall","src":"19392:9:40"},{"arguments":[{"name":"y","nativeSrc":"19406:1:40","nodeType":"YulIdentifier","src":"19406:1:40"},{"arguments":[{"name":"product","nativeSrc":"19413:7:40","nodeType":"YulIdentifier","src":"19413:7:40"},{"name":"x","nativeSrc":"19422:1:40","nodeType":"YulIdentifier","src":"19422:1:40"}],"functionName":{"name":"div","nativeSrc":"19409:3:40","nodeType":"YulIdentifier","src":"19409:3:40"},"nativeSrc":"19409:15:40","nodeType":"YulFunctionCall","src":"19409:15:40"}],"functionName":{"name":"eq","nativeSrc":"19403:2:40","nodeType":"YulIdentifier","src":"19403:2:40"},"nativeSrc":"19403:22:40","nodeType":"YulFunctionCall","src":"19403:22:40"}],"functionName":{"name":"or","nativeSrc":"19389:2:40","nodeType":"YulIdentifier","src":"19389:2:40"},"nativeSrc":"19389:37:40","nodeType":"YulFunctionCall","src":"19389:37:40"}],"functionName":{"name":"iszero","nativeSrc":"19382:6:40","nodeType":"YulIdentifier","src":"19382:6:40"},"nativeSrc":"19382:45:40","nodeType":"YulFunctionCall","src":"19382:45:40"},"nativeSrc":"19379:71:40","nodeType":"YulIf","src":"19379:71:40"}]},"name":"checked_mul_t_uint256","nativeSrc":"19288:168:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"19319:1:40","nodeType":"YulTypedName","src":"19319:1:40","type":""},{"name":"y","nativeSrc":"19322:1:40","nodeType":"YulTypedName","src":"19322:1:40","type":""}],"returnVariables":[{"name":"product","nativeSrc":"19328:7:40","nodeType":"YulTypedName","src":"19328:7:40","type":""}],"src":"19288:168:40"},{"body":{"nativeSrc":"19635:154:40","nodeType":"YulBlock","src":"19635:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"19652:9:40","nodeType":"YulIdentifier","src":"19652:9:40"},{"kind":"number","nativeSrc":"19663:2:40","nodeType":"YulLiteral","src":"19663:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"19645:6:40","nodeType":"YulIdentifier","src":"19645:6:40"},"nativeSrc":"19645:21:40","nodeType":"YulFunctionCall","src":"19645:21:40"},"nativeSrc":"19645:21:40","nodeType":"YulExpressionStatement","src":"19645:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19686:9:40","nodeType":"YulIdentifier","src":"19686:9:40"},{"kind":"number","nativeSrc":"19697:2:40","nodeType":"YulLiteral","src":"19697:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19682:3:40","nodeType":"YulIdentifier","src":"19682:3:40"},"nativeSrc":"19682:18:40","nodeType":"YulFunctionCall","src":"19682:18:40"},{"kind":"number","nativeSrc":"19702:1:40","nodeType":"YulLiteral","src":"19702:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"19675:6:40","nodeType":"YulIdentifier","src":"19675:6:40"},"nativeSrc":"19675:29:40","nodeType":"YulFunctionCall","src":"19675:29:40"},"nativeSrc":"19675:29:40","nodeType":"YulExpressionStatement","src":"19675:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19724:9:40","nodeType":"YulIdentifier","src":"19724:9:40"},{"kind":"number","nativeSrc":"19735:2:40","nodeType":"YulLiteral","src":"19735:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"19720:3:40","nodeType":"YulIdentifier","src":"19720:3:40"},"nativeSrc":"19720:18:40","nodeType":"YulFunctionCall","src":"19720:18:40"},{"hexValue":"4753313031","kind":"string","nativeSrc":"19740:7:40","nodeType":"YulLiteral","src":"19740:7:40","type":"","value":"GS101"}],"functionName":{"name":"mstore","nativeSrc":"19713:6:40","nodeType":"YulIdentifier","src":"19713:6:40"},"nativeSrc":"19713:35:40","nodeType":"YulFunctionCall","src":"19713:35:40"},"nativeSrc":"19713:35:40","nodeType":"YulExpressionStatement","src":"19713:35:40"},{"nativeSrc":"19757:26:40","nodeType":"YulAssignment","src":"19757:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"19769:9:40","nodeType":"YulIdentifier","src":"19769:9:40"},{"kind":"number","nativeSrc":"19780:2:40","nodeType":"YulLiteral","src":"19780:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"19765:3:40","nodeType":"YulIdentifier","src":"19765:3:40"},"nativeSrc":"19765:18:40","nodeType":"YulFunctionCall","src":"19765:18:40"},"variableNames":[{"name":"tail","nativeSrc":"19757:4:40","nodeType":"YulIdentifier","src":"19757:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_eab5e6af6960e6bb32b59bfd1d877c9c1728e4c18fa7a83eb40baa1c0f05f61f__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"19461:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"19612:9:40","nodeType":"YulTypedName","src":"19612:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"19626:4:40","nodeType":"YulTypedName","src":"19626:4:40","type":""}],"src":"19461:328:40"},{"body":{"nativeSrc":"19968:154:40","nodeType":"YulBlock","src":"19968:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"19985:9:40","nodeType":"YulIdentifier","src":"19985:9:40"},{"kind":"number","nativeSrc":"19996:2:40","nodeType":"YulLiteral","src":"19996:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"19978:6:40","nodeType":"YulIdentifier","src":"19978:6:40"},"nativeSrc":"19978:21:40","nodeType":"YulFunctionCall","src":"19978:21:40"},"nativeSrc":"19978:21:40","nodeType":"YulExpressionStatement","src":"19978:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20019:9:40","nodeType":"YulIdentifier","src":"20019:9:40"},{"kind":"number","nativeSrc":"20030:2:40","nodeType":"YulLiteral","src":"20030:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"20015:3:40","nodeType":"YulIdentifier","src":"20015:3:40"},"nativeSrc":"20015:18:40","nodeType":"YulFunctionCall","src":"20015:18:40"},{"kind":"number","nativeSrc":"20035:1:40","nodeType":"YulLiteral","src":"20035:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"20008:6:40","nodeType":"YulIdentifier","src":"20008:6:40"},"nativeSrc":"20008:29:40","nodeType":"YulFunctionCall","src":"20008:29:40"},"nativeSrc":"20008:29:40","nodeType":"YulExpressionStatement","src":"20008:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20057:9:40","nodeType":"YulIdentifier","src":"20057:9:40"},{"kind":"number","nativeSrc":"20068:2:40","nodeType":"YulLiteral","src":"20068:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"20053:3:40","nodeType":"YulIdentifier","src":"20053:3:40"},"nativeSrc":"20053:18:40","nodeType":"YulFunctionCall","src":"20053:18:40"},{"hexValue":"4753313032","kind":"string","nativeSrc":"20073:7:40","nodeType":"YulLiteral","src":"20073:7:40","type":"","value":"GS102"}],"functionName":{"name":"mstore","nativeSrc":"20046:6:40","nodeType":"YulIdentifier","src":"20046:6:40"},"nativeSrc":"20046:35:40","nodeType":"YulFunctionCall","src":"20046:35:40"},"nativeSrc":"20046:35:40","nodeType":"YulExpressionStatement","src":"20046:35:40"},{"nativeSrc":"20090:26:40","nodeType":"YulAssignment","src":"20090:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"20102:9:40","nodeType":"YulIdentifier","src":"20102:9:40"},{"kind":"number","nativeSrc":"20113:2:40","nodeType":"YulLiteral","src":"20113:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"20098:3:40","nodeType":"YulIdentifier","src":"20098:3:40"},"nativeSrc":"20098:18:40","nodeType":"YulFunctionCall","src":"20098:18:40"},"variableNames":[{"name":"tail","nativeSrc":"20090:4:40","nodeType":"YulIdentifier","src":"20090:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_bfe16ebc2bd5d2fdfe588255b31e648718f9ede037848519acb772cd4f042f12__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"19794:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"19945:9:40","nodeType":"YulTypedName","src":"19945:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"19959:4:40","nodeType":"YulTypedName","src":"19959:4:40","type":""}],"src":"19794:328:40"},{"body":{"nativeSrc":"20301:154:40","nodeType":"YulBlock","src":"20301:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"20318:9:40","nodeType":"YulIdentifier","src":"20318:9:40"},{"kind":"number","nativeSrc":"20329:2:40","nodeType":"YulLiteral","src":"20329:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"20311:6:40","nodeType":"YulIdentifier","src":"20311:6:40"},"nativeSrc":"20311:21:40","nodeType":"YulFunctionCall","src":"20311:21:40"},"nativeSrc":"20311:21:40","nodeType":"YulExpressionStatement","src":"20311:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20352:9:40","nodeType":"YulIdentifier","src":"20352:9:40"},{"kind":"number","nativeSrc":"20363:2:40","nodeType":"YulLiteral","src":"20363:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"20348:3:40","nodeType":"YulIdentifier","src":"20348:3:40"},"nativeSrc":"20348:18:40","nodeType":"YulFunctionCall","src":"20348:18:40"},{"kind":"number","nativeSrc":"20368:1:40","nodeType":"YulLiteral","src":"20368:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"20341:6:40","nodeType":"YulIdentifier","src":"20341:6:40"},"nativeSrc":"20341:29:40","nodeType":"YulFunctionCall","src":"20341:29:40"},"nativeSrc":"20341:29:40","nodeType":"YulExpressionStatement","src":"20341:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20390:9:40","nodeType":"YulIdentifier","src":"20390:9:40"},{"kind":"number","nativeSrc":"20401:2:40","nodeType":"YulLiteral","src":"20401:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"20386:3:40","nodeType":"YulIdentifier","src":"20386:3:40"},"nativeSrc":"20386:18:40","nodeType":"YulFunctionCall","src":"20386:18:40"},{"hexValue":"4753323031","kind":"string","nativeSrc":"20406:7:40","nodeType":"YulLiteral","src":"20406:7:40","type":"","value":"GS201"}],"functionName":{"name":"mstore","nativeSrc":"20379:6:40","nodeType":"YulIdentifier","src":"20379:6:40"},"nativeSrc":"20379:35:40","nodeType":"YulFunctionCall","src":"20379:35:40"},"nativeSrc":"20379:35:40","nodeType":"YulExpressionStatement","src":"20379:35:40"},{"nativeSrc":"20423:26:40","nodeType":"YulAssignment","src":"20423:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"20435:9:40","nodeType":"YulIdentifier","src":"20435:9:40"},{"kind":"number","nativeSrc":"20446:2:40","nodeType":"YulLiteral","src":"20446:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"20431:3:40","nodeType":"YulIdentifier","src":"20431:3:40"},"nativeSrc":"20431:18:40","nodeType":"YulFunctionCall","src":"20431:18:40"},"variableNames":[{"name":"tail","nativeSrc":"20423:4:40","nodeType":"YulIdentifier","src":"20423:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_2ed3cfd606bc0ca63de16ac40539251d9539eb77db0a0d075dd487d4cf1c74c7__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"20127:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"20278:9:40","nodeType":"YulTypedName","src":"20278:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"20292:4:40","nodeType":"YulTypedName","src":"20292:4:40","type":""}],"src":"20127:328:40"},{"body":{"nativeSrc":"20634:154:40","nodeType":"YulBlock","src":"20634:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"20651:9:40","nodeType":"YulIdentifier","src":"20651:9:40"},{"kind":"number","nativeSrc":"20662:2:40","nodeType":"YulLiteral","src":"20662:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"20644:6:40","nodeType":"YulIdentifier","src":"20644:6:40"},"nativeSrc":"20644:21:40","nodeType":"YulFunctionCall","src":"20644:21:40"},"nativeSrc":"20644:21:40","nodeType":"YulExpressionStatement","src":"20644:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20685:9:40","nodeType":"YulIdentifier","src":"20685:9:40"},{"kind":"number","nativeSrc":"20696:2:40","nodeType":"YulLiteral","src":"20696:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"20681:3:40","nodeType":"YulIdentifier","src":"20681:3:40"},"nativeSrc":"20681:18:40","nodeType":"YulFunctionCall","src":"20681:18:40"},{"kind":"number","nativeSrc":"20701:1:40","nodeType":"YulLiteral","src":"20701:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"20674:6:40","nodeType":"YulIdentifier","src":"20674:6:40"},"nativeSrc":"20674:29:40","nodeType":"YulFunctionCall","src":"20674:29:40"},"nativeSrc":"20674:29:40","nodeType":"YulExpressionStatement","src":"20674:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20723:9:40","nodeType":"YulIdentifier","src":"20723:9:40"},{"kind":"number","nativeSrc":"20734:2:40","nodeType":"YulLiteral","src":"20734:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"20719:3:40","nodeType":"YulIdentifier","src":"20719:3:40"},"nativeSrc":"20719:18:40","nodeType":"YulFunctionCall","src":"20719:18:40"},{"hexValue":"4753323032","kind":"string","nativeSrc":"20739:7:40","nodeType":"YulLiteral","src":"20739:7:40","type":"","value":"GS202"}],"functionName":{"name":"mstore","nativeSrc":"20712:6:40","nodeType":"YulIdentifier","src":"20712:6:40"},"nativeSrc":"20712:35:40","nodeType":"YulFunctionCall","src":"20712:35:40"},"nativeSrc":"20712:35:40","nodeType":"YulExpressionStatement","src":"20712:35:40"},{"nativeSrc":"20756:26:40","nodeType":"YulAssignment","src":"20756:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"20768:9:40","nodeType":"YulIdentifier","src":"20768:9:40"},{"kind":"number","nativeSrc":"20779:2:40","nodeType":"YulLiteral","src":"20779:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"20764:3:40","nodeType":"YulIdentifier","src":"20764:3:40"},"nativeSrc":"20764:18:40","nodeType":"YulFunctionCall","src":"20764:18:40"},"variableNames":[{"name":"tail","nativeSrc":"20756:4:40","nodeType":"YulIdentifier","src":"20756:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_a5f8340ff5526fa73c9197322cd5a1c742b87b5fdfeb41a9c278b80dab01159b__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"20460:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"20611:9:40","nodeType":"YulTypedName","src":"20611:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"20625:4:40","nodeType":"YulTypedName","src":"20625:4:40","type":""}],"src":"20460:328:40"},{"body":{"nativeSrc":"20825:95:40","nodeType":"YulBlock","src":"20825:95:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"20842:1:40","nodeType":"YulLiteral","src":"20842:1:40","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"20849:3:40","nodeType":"YulLiteral","src":"20849:3:40","type":"","value":"224"},{"kind":"number","nativeSrc":"20854:10:40","nodeType":"YulLiteral","src":"20854:10:40","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"20845:3:40","nodeType":"YulIdentifier","src":"20845:3:40"},"nativeSrc":"20845:20:40","nodeType":"YulFunctionCall","src":"20845:20:40"}],"functionName":{"name":"mstore","nativeSrc":"20835:6:40","nodeType":"YulIdentifier","src":"20835:6:40"},"nativeSrc":"20835:31:40","nodeType":"YulFunctionCall","src":"20835:31:40"},"nativeSrc":"20835:31:40","nodeType":"YulExpressionStatement","src":"20835:31:40"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"20882:1:40","nodeType":"YulLiteral","src":"20882:1:40","type":"","value":"4"},{"kind":"number","nativeSrc":"20885:4:40","nodeType":"YulLiteral","src":"20885:4:40","type":"","value":"0x21"}],"functionName":{"name":"mstore","nativeSrc":"20875:6:40","nodeType":"YulIdentifier","src":"20875:6:40"},"nativeSrc":"20875:15:40","nodeType":"YulFunctionCall","src":"20875:15:40"},"nativeSrc":"20875:15:40","nodeType":"YulExpressionStatement","src":"20875:15:40"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"20906:1:40","nodeType":"YulLiteral","src":"20906:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"20909:4:40","nodeType":"YulLiteral","src":"20909:4:40","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"20899:6:40","nodeType":"YulIdentifier","src":"20899:6:40"},"nativeSrc":"20899:15:40","nodeType":"YulFunctionCall","src":"20899:15:40"},"nativeSrc":"20899:15:40","nodeType":"YulExpressionStatement","src":"20899:15:40"}]},"name":"panic_error_0x21","nativeSrc":"20793:127:40","nodeType":"YulFunctionDefinition","src":"20793:127:40"},{"body":{"nativeSrc":"20976:186:40","nodeType":"YulBlock","src":"20976:186:40","statements":[{"body":{"nativeSrc":"21018:111:40","nodeType":"YulBlock","src":"21018:111:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"21039:1:40","nodeType":"YulLiteral","src":"21039:1:40","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"21046:3:40","nodeType":"YulLiteral","src":"21046:3:40","type":"","value":"224"},{"kind":"number","nativeSrc":"21051:10:40","nodeType":"YulLiteral","src":"21051:10:40","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"21042:3:40","nodeType":"YulIdentifier","src":"21042:3:40"},"nativeSrc":"21042:20:40","nodeType":"YulFunctionCall","src":"21042:20:40"}],"functionName":{"name":"mstore","nativeSrc":"21032:6:40","nodeType":"YulIdentifier","src":"21032:6:40"},"nativeSrc":"21032:31:40","nodeType":"YulFunctionCall","src":"21032:31:40"},"nativeSrc":"21032:31:40","nodeType":"YulExpressionStatement","src":"21032:31:40"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"21083:1:40","nodeType":"YulLiteral","src":"21083:1:40","type":"","value":"4"},{"kind":"number","nativeSrc":"21086:4:40","nodeType":"YulLiteral","src":"21086:4:40","type":"","value":"0x21"}],"functionName":{"name":"mstore","nativeSrc":"21076:6:40","nodeType":"YulIdentifier","src":"21076:6:40"},"nativeSrc":"21076:15:40","nodeType":"YulFunctionCall","src":"21076:15:40"},"nativeSrc":"21076:15:40","nodeType":"YulExpressionStatement","src":"21076:15:40"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"21111:1:40","nodeType":"YulLiteral","src":"21111:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"21114:4:40","nodeType":"YulLiteral","src":"21114:4:40","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"21104:6:40","nodeType":"YulIdentifier","src":"21104:6:40"},"nativeSrc":"21104:15:40","nodeType":"YulFunctionCall","src":"21104:15:40"},"nativeSrc":"21104:15:40","nodeType":"YulExpressionStatement","src":"21104:15:40"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"20999:5:40","nodeType":"YulIdentifier","src":"20999:5:40"},{"kind":"number","nativeSrc":"21006:1:40","nodeType":"YulLiteral","src":"21006:1:40","type":"","value":"2"}],"functionName":{"name":"lt","nativeSrc":"20996:2:40","nodeType":"YulIdentifier","src":"20996:2:40"},"nativeSrc":"20996:12:40","nodeType":"YulFunctionCall","src":"20996:12:40"}],"functionName":{"name":"iszero","nativeSrc":"20989:6:40","nodeType":"YulIdentifier","src":"20989:6:40"},"nativeSrc":"20989:20:40","nodeType":"YulFunctionCall","src":"20989:20:40"},"nativeSrc":"20986:143:40","nodeType":"YulIf","src":"20986:143:40"},{"expression":{"arguments":[{"name":"pos","nativeSrc":"21145:3:40","nodeType":"YulIdentifier","src":"21145:3:40"},{"name":"value","nativeSrc":"21150:5:40","nodeType":"YulIdentifier","src":"21150:5:40"}],"functionName":{"name":"mstore","nativeSrc":"21138:6:40","nodeType":"YulIdentifier","src":"21138:6:40"},"nativeSrc":"21138:18:40","nodeType":"YulFunctionCall","src":"21138:18:40"},"nativeSrc":"21138:18:40","nodeType":"YulExpressionStatement","src":"21138:18:40"}]},"name":"abi_encode_enum_Operation","nativeSrc":"20925:237:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"20960:5:40","nodeType":"YulTypedName","src":"20960:5:40","type":""},{"name":"pos","nativeSrc":"20967:3:40","nodeType":"YulTypedName","src":"20967:3:40","type":""}],"src":"20925:237:40"},{"body":{"nativeSrc":"21624:891:40","nodeType":"YulBlock","src":"21624:891:40","statements":[{"nativeSrc":"21634:13:40","nodeType":"YulVariableDeclaration","src":"21634:13:40","value":{"kind":"number","nativeSrc":"21644:3:40","nodeType":"YulLiteral","src":"21644:3:40","type":"","value":"352"},"variables":[{"name":"_1","nativeSrc":"21638:2:40","nodeType":"YulTypedName","src":"21638:2:40","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"21663:9:40","nodeType":"YulIdentifier","src":"21663:9:40"},{"arguments":[{"name":"value0","nativeSrc":"21678:6:40","nodeType":"YulIdentifier","src":"21678:6:40"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"21694:3:40","nodeType":"YulLiteral","src":"21694:3:40","type":"","value":"160"},{"kind":"number","nativeSrc":"21699:1:40","nodeType":"YulLiteral","src":"21699:1:40","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"21690:3:40","nodeType":"YulIdentifier","src":"21690:3:40"},"nativeSrc":"21690:11:40","nodeType":"YulFunctionCall","src":"21690:11:40"},{"kind":"number","nativeSrc":"21703:1:40","nodeType":"YulLiteral","src":"21703:1:40","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"21686:3:40","nodeType":"YulIdentifier","src":"21686:3:40"},"nativeSrc":"21686:19:40","nodeType":"YulFunctionCall","src":"21686:19:40"}],"functionName":{"name":"and","nativeSrc":"21674:3:40","nodeType":"YulIdentifier","src":"21674:3:40"},"nativeSrc":"21674:32:40","nodeType":"YulFunctionCall","src":"21674:32:40"}],"functionName":{"name":"mstore","nativeSrc":"21656:6:40","nodeType":"YulIdentifier","src":"21656:6:40"},"nativeSrc":"21656:51:40","nodeType":"YulFunctionCall","src":"21656:51:40"},"nativeSrc":"21656:51:40","nodeType":"YulExpressionStatement","src":"21656:51:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21727:9:40","nodeType":"YulIdentifier","src":"21727:9:40"},{"kind":"number","nativeSrc":"21738:2:40","nodeType":"YulLiteral","src":"21738:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21723:3:40","nodeType":"YulIdentifier","src":"21723:3:40"},"nativeSrc":"21723:18:40","nodeType":"YulFunctionCall","src":"21723:18:40"},{"name":"value1","nativeSrc":"21743:6:40","nodeType":"YulIdentifier","src":"21743:6:40"}],"functionName":{"name":"mstore","nativeSrc":"21716:6:40","nodeType":"YulIdentifier","src":"21716:6:40"},"nativeSrc":"21716:34:40","nodeType":"YulFunctionCall","src":"21716:34:40"},"nativeSrc":"21716:34:40","nodeType":"YulExpressionStatement","src":"21716:34:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21770:9:40","nodeType":"YulIdentifier","src":"21770:9:40"},{"kind":"number","nativeSrc":"21781:2:40","nodeType":"YulLiteral","src":"21781:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"21766:3:40","nodeType":"YulIdentifier","src":"21766:3:40"},"nativeSrc":"21766:18:40","nodeType":"YulFunctionCall","src":"21766:18:40"},{"name":"_1","nativeSrc":"21786:2:40","nodeType":"YulIdentifier","src":"21786:2:40"}],"functionName":{"name":"mstore","nativeSrc":"21759:6:40","nodeType":"YulIdentifier","src":"21759:6:40"},"nativeSrc":"21759:30:40","nodeType":"YulFunctionCall","src":"21759:30:40"},"nativeSrc":"21759:30:40","nodeType":"YulExpressionStatement","src":"21759:30:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21809:9:40","nodeType":"YulIdentifier","src":"21809:9:40"},{"name":"_1","nativeSrc":"21820:2:40","nodeType":"YulIdentifier","src":"21820:2:40"}],"functionName":{"name":"add","nativeSrc":"21805:3:40","nodeType":"YulIdentifier","src":"21805:3:40"},"nativeSrc":"21805:18:40","nodeType":"YulFunctionCall","src":"21805:18:40"},{"name":"value3","nativeSrc":"21825:6:40","nodeType":"YulIdentifier","src":"21825:6:40"}],"functionName":{"name":"mstore","nativeSrc":"21798:6:40","nodeType":"YulIdentifier","src":"21798:6:40"},"nativeSrc":"21798:34:40","nodeType":"YulFunctionCall","src":"21798:34:40"},"nativeSrc":"21798:34:40","nodeType":"YulExpressionStatement","src":"21798:34:40"},{"nativeSrc":"21841:13:40","nodeType":"YulVariableDeclaration","src":"21841:13:40","value":{"kind":"number","nativeSrc":"21851:3:40","nodeType":"YulLiteral","src":"21851:3:40","type":"","value":"384"},"variables":[{"name":"_2","nativeSrc":"21845:2:40","nodeType":"YulTypedName","src":"21845:2:40","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21880:9:40","nodeType":"YulIdentifier","src":"21880:9:40"},{"name":"_2","nativeSrc":"21891:2:40","nodeType":"YulIdentifier","src":"21891:2:40"}],"functionName":{"name":"add","nativeSrc":"21876:3:40","nodeType":"YulIdentifier","src":"21876:3:40"},"nativeSrc":"21876:18:40","nodeType":"YulFunctionCall","src":"21876:18:40"},{"name":"value2","nativeSrc":"21896:6:40","nodeType":"YulIdentifier","src":"21896:6:40"},{"name":"value3","nativeSrc":"21904:6:40","nodeType":"YulIdentifier","src":"21904:6:40"}],"functionName":{"name":"calldatacopy","nativeSrc":"21863:12:40","nodeType":"YulIdentifier","src":"21863:12:40"},"nativeSrc":"21863:48:40","nodeType":"YulFunctionCall","src":"21863:48:40"},"nativeSrc":"21863:48:40","nodeType":"YulExpressionStatement","src":"21863:48:40"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21935:9:40","nodeType":"YulIdentifier","src":"21935:9:40"},{"name":"value3","nativeSrc":"21946:6:40","nodeType":"YulIdentifier","src":"21946:6:40"}],"functionName":{"name":"add","nativeSrc":"21931:3:40","nodeType":"YulIdentifier","src":"21931:3:40"},"nativeSrc":"21931:22:40","nodeType":"YulFunctionCall","src":"21931:22:40"},{"name":"_2","nativeSrc":"21955:2:40","nodeType":"YulIdentifier","src":"21955:2:40"}],"functionName":{"name":"add","nativeSrc":"21927:3:40","nodeType":"YulIdentifier","src":"21927:3:40"},"nativeSrc":"21927:31:40","nodeType":"YulFunctionCall","src":"21927:31:40"},{"kind":"number","nativeSrc":"21960:1:40","nodeType":"YulLiteral","src":"21960:1:40","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"21920:6:40","nodeType":"YulIdentifier","src":"21920:6:40"},"nativeSrc":"21920:42:40","nodeType":"YulFunctionCall","src":"21920:42:40"},"nativeSrc":"21920:42:40","nodeType":"YulExpressionStatement","src":"21920:42:40"},{"nativeSrc":"21971:55:40","nodeType":"YulVariableDeclaration","src":"21971:55:40","value":{"arguments":[{"name":"headStart","nativeSrc":"21985:9:40","nodeType":"YulIdentifier","src":"21985:9:40"},{"arguments":[{"arguments":[{"name":"value3","nativeSrc":"22004:6:40","nodeType":"YulIdentifier","src":"22004:6:40"},{"kind":"number","nativeSrc":"22012:2:40","nodeType":"YulLiteral","src":"22012:2:40","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"22000:3:40","nodeType":"YulIdentifier","src":"22000:3:40"},"nativeSrc":"22000:15:40","nodeType":"YulFunctionCall","src":"22000:15:40"},{"arguments":[{"kind":"number","nativeSrc":"22021:2:40","nodeType":"YulLiteral","src":"22021:2:40","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"22017:3:40","nodeType":"YulIdentifier","src":"22017:3:40"},"nativeSrc":"22017:7:40","nodeType":"YulFunctionCall","src":"22017:7:40"}],"functionName":{"name":"and","nativeSrc":"21996:3:40","nodeType":"YulIdentifier","src":"21996:3:40"},"nativeSrc":"21996:29:40","nodeType":"YulFunctionCall","src":"21996:29:40"}],"functionName":{"name":"add","nativeSrc":"21981:3:40","nodeType":"YulIdentifier","src":"21981:3:40"},"nativeSrc":"21981:45:40","nodeType":"YulFunctionCall","src":"21981:45:40"},"variables":[{"name":"_3","nativeSrc":"21975:2:40","nodeType":"YulTypedName","src":"21975:2:40","type":""}]},{"expression":{"arguments":[{"name":"value4","nativeSrc":"22061:6:40","nodeType":"YulIdentifier","src":"22061:6:40"},{"arguments":[{"name":"headStart","nativeSrc":"22073:9:40","nodeType":"YulIdentifier","src":"22073:9:40"},{"kind":"number","nativeSrc":"22084:2:40","nodeType":"YulLiteral","src":"22084:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"22069:3:40","nodeType":"YulIdentifier","src":"22069:3:40"},"nativeSrc":"22069:18:40","nodeType":"YulFunctionCall","src":"22069:18:40"}],"functionName":{"name":"abi_encode_enum_Operation","nativeSrc":"22035:25:40","nodeType":"YulIdentifier","src":"22035:25:40"},"nativeSrc":"22035:53:40","nodeType":"YulFunctionCall","src":"22035:53:40"},"nativeSrc":"22035:53:40","nodeType":"YulExpressionStatement","src":"22035:53:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"22108:9:40","nodeType":"YulIdentifier","src":"22108:9:40"},{"kind":"number","nativeSrc":"22119:3:40","nodeType":"YulLiteral","src":"22119:3:40","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"22104:3:40","nodeType":"YulIdentifier","src":"22104:3:40"},"nativeSrc":"22104:19:40","nodeType":"YulFunctionCall","src":"22104:19:40"},{"name":"value5","nativeSrc":"22125:6:40","nodeType":"YulIdentifier","src":"22125:6:40"}],"functionName":{"name":"mstore","nativeSrc":"22097:6:40","nodeType":"YulIdentifier","src":"22097:6:40"},"nativeSrc":"22097:35:40","nodeType":"YulFunctionCall","src":"22097:35:40"},"nativeSrc":"22097:35:40","nodeType":"YulExpressionStatement","src":"22097:35:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"22152:9:40","nodeType":"YulIdentifier","src":"22152:9:40"},{"kind":"number","nativeSrc":"22163:3:40","nodeType":"YulLiteral","src":"22163:3:40","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"22148:3:40","nodeType":"YulIdentifier","src":"22148:3:40"},"nativeSrc":"22148:19:40","nodeType":"YulFunctionCall","src":"22148:19:40"},{"name":"value6","nativeSrc":"22169:6:40","nodeType":"YulIdentifier","src":"22169:6:40"}],"functionName":{"name":"mstore","nativeSrc":"22141:6:40","nodeType":"YulIdentifier","src":"22141:6:40"},"nativeSrc":"22141:35:40","nodeType":"YulFunctionCall","src":"22141:35:40"},"nativeSrc":"22141:35:40","nodeType":"YulExpressionStatement","src":"22141:35:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"22196:9:40","nodeType":"YulIdentifier","src":"22196:9:40"},{"kind":"number","nativeSrc":"22207:3:40","nodeType":"YulLiteral","src":"22207:3:40","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"22192:3:40","nodeType":"YulIdentifier","src":"22192:3:40"},"nativeSrc":"22192:19:40","nodeType":"YulFunctionCall","src":"22192:19:40"},{"name":"value7","nativeSrc":"22213:6:40","nodeType":"YulIdentifier","src":"22213:6:40"}],"functionName":{"name":"mstore","nativeSrc":"22185:6:40","nodeType":"YulIdentifier","src":"22185:6:40"},"nativeSrc":"22185:35:40","nodeType":"YulFunctionCall","src":"22185:35:40"},"nativeSrc":"22185:35:40","nodeType":"YulExpressionStatement","src":"22185:35:40"},{"expression":{"arguments":[{"name":"value8","nativeSrc":"22248:6:40","nodeType":"YulIdentifier","src":"22248:6:40"},{"arguments":[{"name":"headStart","nativeSrc":"22260:9:40","nodeType":"YulIdentifier","src":"22260:9:40"},{"kind":"number","nativeSrc":"22271:3:40","nodeType":"YulLiteral","src":"22271:3:40","type":"","value":"224"}],"functionName":{"name":"add","nativeSrc":"22256:3:40","nodeType":"YulIdentifier","src":"22256:3:40"},"nativeSrc":"22256:19:40","nodeType":"YulFunctionCall","src":"22256:19:40"}],"functionName":{"name":"abi_encode_address","nativeSrc":"22229:18:40","nodeType":"YulIdentifier","src":"22229:18:40"},"nativeSrc":"22229:47:40","nodeType":"YulFunctionCall","src":"22229:47:40"},"nativeSrc":"22229:47:40","nodeType":"YulExpressionStatement","src":"22229:47:40"},{"expression":{"arguments":[{"name":"value9","nativeSrc":"22304:6:40","nodeType":"YulIdentifier","src":"22304:6:40"},{"arguments":[{"name":"headStart","nativeSrc":"22316:9:40","nodeType":"YulIdentifier","src":"22316:9:40"},{"kind":"number","nativeSrc":"22327:3:40","nodeType":"YulLiteral","src":"22327:3:40","type":"","value":"256"}],"functionName":{"name":"add","nativeSrc":"22312:3:40","nodeType":"YulIdentifier","src":"22312:3:40"},"nativeSrc":"22312:19:40","nodeType":"YulFunctionCall","src":"22312:19:40"}],"functionName":{"name":"abi_encode_address","nativeSrc":"22285:18:40","nodeType":"YulIdentifier","src":"22285:18:40"},"nativeSrc":"22285:47:40","nodeType":"YulFunctionCall","src":"22285:47:40"},"nativeSrc":"22285:47:40","nodeType":"YulExpressionStatement","src":"22285:47:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"22352:9:40","nodeType":"YulIdentifier","src":"22352:9:40"},{"kind":"number","nativeSrc":"22363:3:40","nodeType":"YulLiteral","src":"22363:3:40","type":"","value":"288"}],"functionName":{"name":"add","nativeSrc":"22348:3:40","nodeType":"YulIdentifier","src":"22348:3:40"},"nativeSrc":"22348:19:40","nodeType":"YulFunctionCall","src":"22348:19:40"},{"arguments":[{"arguments":[{"name":"_3","nativeSrc":"22377:2:40","nodeType":"YulIdentifier","src":"22377:2:40"},{"name":"headStart","nativeSrc":"22381:9:40","nodeType":"YulIdentifier","src":"22381:9:40"}],"functionName":{"name":"sub","nativeSrc":"22373:3:40","nodeType":"YulIdentifier","src":"22373:3:40"},"nativeSrc":"22373:18:40","nodeType":"YulFunctionCall","src":"22373:18:40"},{"name":"_2","nativeSrc":"22393:2:40","nodeType":"YulIdentifier","src":"22393:2:40"}],"functionName":{"name":"add","nativeSrc":"22369:3:40","nodeType":"YulIdentifier","src":"22369:3:40"},"nativeSrc":"22369:27:40","nodeType":"YulFunctionCall","src":"22369:27:40"}],"functionName":{"name":"mstore","nativeSrc":"22341:6:40","nodeType":"YulIdentifier","src":"22341:6:40"},"nativeSrc":"22341:56:40","nodeType":"YulFunctionCall","src":"22341:56:40"},"nativeSrc":"22341:56:40","nodeType":"YulExpressionStatement","src":"22341:56:40"},{"nativeSrc":"22406:46:40","nodeType":"YulAssignment","src":"22406:46:40","value":{"arguments":[{"name":"value10","nativeSrc":"22431:7:40","nodeType":"YulIdentifier","src":"22431:7:40"},{"arguments":[{"name":"_3","nativeSrc":"22444:2:40","nodeType":"YulIdentifier","src":"22444:2:40"},{"name":"_2","nativeSrc":"22448:2:40","nodeType":"YulIdentifier","src":"22448:2:40"}],"functionName":{"name":"add","nativeSrc":"22440:3:40","nodeType":"YulIdentifier","src":"22440:3:40"},"nativeSrc":"22440:11:40","nodeType":"YulFunctionCall","src":"22440:11:40"}],"functionName":{"name":"abi_encode_bytes","nativeSrc":"22414:16:40","nodeType":"YulIdentifier","src":"22414:16:40"},"nativeSrc":"22414:38:40","nodeType":"YulFunctionCall","src":"22414:38:40"},"variableNames":[{"name":"tail","nativeSrc":"22406:4:40","nodeType":"YulIdentifier","src":"22406:4:40"}]},{"expression":{"arguments":[{"name":"value11","nativeSrc":"22480:7:40","nodeType":"YulIdentifier","src":"22480:7:40"},{"arguments":[{"name":"headStart","nativeSrc":"22493:9:40","nodeType":"YulIdentifier","src":"22493:9:40"},{"kind":"number","nativeSrc":"22504:3:40","nodeType":"YulLiteral","src":"22504:3:40","type":"","value":"320"}],"functionName":{"name":"add","nativeSrc":"22489:3:40","nodeType":"YulIdentifier","src":"22489:3:40"},"nativeSrc":"22489:19:40","nodeType":"YulFunctionCall","src":"22489:19:40"}],"functionName":{"name":"abi_encode_address","nativeSrc":"22461:18:40","nodeType":"YulIdentifier","src":"22461:18:40"},"nativeSrc":"22461:48:40","nodeType":"YulFunctionCall","src":"22461:48:40"},"nativeSrc":"22461:48:40","nodeType":"YulExpressionStatement","src":"22461:48:40"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_bytes_calldata_ptr_t_enum$_Operation_$3022_t_uint256_t_uint256_t_uint256_t_address_t_address_payable_t_bytes_memory_ptr_t_address__to_t_address_t_uint256_t_bytes_memory_ptr_t_uint8_t_uint256_t_uint256_t_uint256_t_address_t_address_payable_t_bytes_memory_ptr_t_address__fromStack_reversed","nativeSrc":"21167:1348:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"21503:9:40","nodeType":"YulTypedName","src":"21503:9:40","type":""},{"name":"value11","nativeSrc":"21514:7:40","nodeType":"YulTypedName","src":"21514:7:40","type":""},{"name":"value10","nativeSrc":"21523:7:40","nodeType":"YulTypedName","src":"21523:7:40","type":""},{"name":"value9","nativeSrc":"21532:6:40","nodeType":"YulTypedName","src":"21532:6:40","type":""},{"name":"value8","nativeSrc":"21540:6:40","nodeType":"YulTypedName","src":"21540:6:40","type":""},{"name":"value7","nativeSrc":"21548:6:40","nodeType":"YulTypedName","src":"21548:6:40","type":""},{"name":"value6","nativeSrc":"21556:6:40","nodeType":"YulTypedName","src":"21556:6:40","type":""},{"name":"value5","nativeSrc":"21564:6:40","nodeType":"YulTypedName","src":"21564:6:40","type":""},{"name":"value4","nativeSrc":"21572:6:40","nodeType":"YulTypedName","src":"21572:6:40","type":""},{"name":"value3","nativeSrc":"21580:6:40","nodeType":"YulTypedName","src":"21580:6:40","type":""},{"name":"value2","nativeSrc":"21588:6:40","nodeType":"YulTypedName","src":"21588:6:40","type":""},{"name":"value1","nativeSrc":"21596:6:40","nodeType":"YulTypedName","src":"21596:6:40","type":""},{"name":"value0","nativeSrc":"21604:6:40","nodeType":"YulTypedName","src":"21604:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"21615:4:40","nodeType":"YulTypedName","src":"21615:4:40","type":""}],"src":"21167:1348:40"},{"body":{"nativeSrc":"22568:77:40","nodeType":"YulBlock","src":"22568:77:40","statements":[{"nativeSrc":"22578:16:40","nodeType":"YulAssignment","src":"22578:16:40","value":{"arguments":[{"name":"x","nativeSrc":"22589:1:40","nodeType":"YulIdentifier","src":"22589:1:40"},{"name":"y","nativeSrc":"22592:1:40","nodeType":"YulIdentifier","src":"22592:1:40"}],"functionName":{"name":"add","nativeSrc":"22585:3:40","nodeType":"YulIdentifier","src":"22585:3:40"},"nativeSrc":"22585:9:40","nodeType":"YulFunctionCall","src":"22585:9:40"},"variableNames":[{"name":"sum","nativeSrc":"22578:3:40","nodeType":"YulIdentifier","src":"22578:3:40"}]},{"body":{"nativeSrc":"22617:22:40","nodeType":"YulBlock","src":"22617:22:40","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"22619:16:40","nodeType":"YulIdentifier","src":"22619:16:40"},"nativeSrc":"22619:18:40","nodeType":"YulFunctionCall","src":"22619:18:40"},"nativeSrc":"22619:18:40","nodeType":"YulExpressionStatement","src":"22619:18:40"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"22609:1:40","nodeType":"YulIdentifier","src":"22609:1:40"},{"name":"sum","nativeSrc":"22612:3:40","nodeType":"YulIdentifier","src":"22612:3:40"}],"functionName":{"name":"gt","nativeSrc":"22606:2:40","nodeType":"YulIdentifier","src":"22606:2:40"},"nativeSrc":"22606:10:40","nodeType":"YulFunctionCall","src":"22606:10:40"},"nativeSrc":"22603:36:40","nodeType":"YulIf","src":"22603:36:40"}]},"name":"checked_add_t_uint256","nativeSrc":"22520:125:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"22551:1:40","nodeType":"YulTypedName","src":"22551:1:40","type":""},{"name":"y","nativeSrc":"22554:1:40","nodeType":"YulTypedName","src":"22554:1:40","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"22560:3:40","nodeType":"YulTypedName","src":"22560:3:40","type":""}],"src":"22520:125:40"},{"body":{"nativeSrc":"22696:171:40","nodeType":"YulBlock","src":"22696:171:40","statements":[{"body":{"nativeSrc":"22727:111:40","nodeType":"YulBlock","src":"22727:111:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"22748:1:40","nodeType":"YulLiteral","src":"22748:1:40","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"22755:3:40","nodeType":"YulLiteral","src":"22755:3:40","type":"","value":"224"},{"kind":"number","nativeSrc":"22760:10:40","nodeType":"YulLiteral","src":"22760:10:40","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"22751:3:40","nodeType":"YulIdentifier","src":"22751:3:40"},"nativeSrc":"22751:20:40","nodeType":"YulFunctionCall","src":"22751:20:40"}],"functionName":{"name":"mstore","nativeSrc":"22741:6:40","nodeType":"YulIdentifier","src":"22741:6:40"},"nativeSrc":"22741:31:40","nodeType":"YulFunctionCall","src":"22741:31:40"},"nativeSrc":"22741:31:40","nodeType":"YulExpressionStatement","src":"22741:31:40"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"22792:1:40","nodeType":"YulLiteral","src":"22792:1:40","type":"","value":"4"},{"kind":"number","nativeSrc":"22795:4:40","nodeType":"YulLiteral","src":"22795:4:40","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"22785:6:40","nodeType":"YulIdentifier","src":"22785:6:40"},"nativeSrc":"22785:15:40","nodeType":"YulFunctionCall","src":"22785:15:40"},"nativeSrc":"22785:15:40","nodeType":"YulExpressionStatement","src":"22785:15:40"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"22820:1:40","nodeType":"YulLiteral","src":"22820:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"22823:4:40","nodeType":"YulLiteral","src":"22823:4:40","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"22813:6:40","nodeType":"YulIdentifier","src":"22813:6:40"},"nativeSrc":"22813:15:40","nodeType":"YulFunctionCall","src":"22813:15:40"},"nativeSrc":"22813:15:40","nodeType":"YulExpressionStatement","src":"22813:15:40"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"22716:1:40","nodeType":"YulIdentifier","src":"22716:1:40"}],"functionName":{"name":"iszero","nativeSrc":"22709:6:40","nodeType":"YulIdentifier","src":"22709:6:40"},"nativeSrc":"22709:9:40","nodeType":"YulFunctionCall","src":"22709:9:40"},"nativeSrc":"22706:132:40","nodeType":"YulIf","src":"22706:132:40"},{"nativeSrc":"22847:14:40","nodeType":"YulAssignment","src":"22847:14:40","value":{"arguments":[{"name":"x","nativeSrc":"22856:1:40","nodeType":"YulIdentifier","src":"22856:1:40"},{"name":"y","nativeSrc":"22859:1:40","nodeType":"YulIdentifier","src":"22859:1:40"}],"functionName":{"name":"div","nativeSrc":"22852:3:40","nodeType":"YulIdentifier","src":"22852:3:40"},"nativeSrc":"22852:9:40","nodeType":"YulFunctionCall","src":"22852:9:40"},"variableNames":[{"name":"r","nativeSrc":"22847:1:40","nodeType":"YulIdentifier","src":"22847:1:40"}]}]},"name":"checked_div_t_uint256","nativeSrc":"22650:217:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"22681:1:40","nodeType":"YulTypedName","src":"22681:1:40","type":""},{"name":"y","nativeSrc":"22684:1:40","nodeType":"YulTypedName","src":"22684:1:40","type":""}],"returnVariables":[{"name":"r","nativeSrc":"22690:1:40","nodeType":"YulTypedName","src":"22690:1:40","type":""}],"src":"22650:217:40"},{"body":{"nativeSrc":"23046:154:40","nodeType":"YulBlock","src":"23046:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"23063:9:40","nodeType":"YulIdentifier","src":"23063:9:40"},{"kind":"number","nativeSrc":"23074:2:40","nodeType":"YulLiteral","src":"23074:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"23056:6:40","nodeType":"YulIdentifier","src":"23056:6:40"},"nativeSrc":"23056:21:40","nodeType":"YulFunctionCall","src":"23056:21:40"},"nativeSrc":"23056:21:40","nodeType":"YulExpressionStatement","src":"23056:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"23097:9:40","nodeType":"YulIdentifier","src":"23097:9:40"},{"kind":"number","nativeSrc":"23108:2:40","nodeType":"YulLiteral","src":"23108:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"23093:3:40","nodeType":"YulIdentifier","src":"23093:3:40"},"nativeSrc":"23093:18:40","nodeType":"YulFunctionCall","src":"23093:18:40"},{"kind":"number","nativeSrc":"23113:1:40","nodeType":"YulLiteral","src":"23113:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"23086:6:40","nodeType":"YulIdentifier","src":"23086:6:40"},"nativeSrc":"23086:29:40","nodeType":"YulFunctionCall","src":"23086:29:40"},"nativeSrc":"23086:29:40","nodeType":"YulExpressionStatement","src":"23086:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"23135:9:40","nodeType":"YulIdentifier","src":"23135:9:40"},{"kind":"number","nativeSrc":"23146:2:40","nodeType":"YulLiteral","src":"23146:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"23131:3:40","nodeType":"YulIdentifier","src":"23131:3:40"},"nativeSrc":"23131:18:40","nodeType":"YulFunctionCall","src":"23131:18:40"},{"hexValue":"4753303130","kind":"string","nativeSrc":"23151:7:40","nodeType":"YulLiteral","src":"23151:7:40","type":"","value":"GS010"}],"functionName":{"name":"mstore","nativeSrc":"23124:6:40","nodeType":"YulIdentifier","src":"23124:6:40"},"nativeSrc":"23124:35:40","nodeType":"YulFunctionCall","src":"23124:35:40"},"nativeSrc":"23124:35:40","nodeType":"YulExpressionStatement","src":"23124:35:40"},{"nativeSrc":"23168:26:40","nodeType":"YulAssignment","src":"23168:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"23180:9:40","nodeType":"YulIdentifier","src":"23180:9:40"},{"kind":"number","nativeSrc":"23191:2:40","nodeType":"YulLiteral","src":"23191:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"23176:3:40","nodeType":"YulIdentifier","src":"23176:3:40"},"nativeSrc":"23176:18:40","nodeType":"YulFunctionCall","src":"23176:18:40"},"variableNames":[{"name":"tail","nativeSrc":"23168:4:40","nodeType":"YulIdentifier","src":"23168:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_9d970fd9adbe3047cd5b7a20406b6bf2e613338cfe3a19aca4ca1810b67fad10__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"22872:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"23023:9:40","nodeType":"YulTypedName","src":"23023:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"23037:4:40","nodeType":"YulTypedName","src":"23037:4:40","type":""}],"src":"22872:328:40"},{"body":{"nativeSrc":"23254:79:40","nodeType":"YulBlock","src":"23254:79:40","statements":[{"nativeSrc":"23264:17:40","nodeType":"YulAssignment","src":"23264:17:40","value":{"arguments":[{"name":"x","nativeSrc":"23276:1:40","nodeType":"YulIdentifier","src":"23276:1:40"},{"name":"y","nativeSrc":"23279:1:40","nodeType":"YulIdentifier","src":"23279:1:40"}],"functionName":{"name":"sub","nativeSrc":"23272:3:40","nodeType":"YulIdentifier","src":"23272:3:40"},"nativeSrc":"23272:9:40","nodeType":"YulFunctionCall","src":"23272:9:40"},"variableNames":[{"name":"diff","nativeSrc":"23264:4:40","nodeType":"YulIdentifier","src":"23264:4:40"}]},{"body":{"nativeSrc":"23305:22:40","nodeType":"YulBlock","src":"23305:22:40","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"23307:16:40","nodeType":"YulIdentifier","src":"23307:16:40"},"nativeSrc":"23307:18:40","nodeType":"YulFunctionCall","src":"23307:18:40"},"nativeSrc":"23307:18:40","nodeType":"YulExpressionStatement","src":"23307:18:40"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"23296:4:40","nodeType":"YulIdentifier","src":"23296:4:40"},{"name":"x","nativeSrc":"23302:1:40","nodeType":"YulIdentifier","src":"23302:1:40"}],"functionName":{"name":"gt","nativeSrc":"23293:2:40","nodeType":"YulIdentifier","src":"23293:2:40"},"nativeSrc":"23293:11:40","nodeType":"YulFunctionCall","src":"23293:11:40"},"nativeSrc":"23290:37:40","nodeType":"YulIf","src":"23290:37:40"}]},"name":"checked_sub_t_uint256","nativeSrc":"23205:128:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"23236:1:40","nodeType":"YulTypedName","src":"23236:1:40","type":""},{"name":"y","nativeSrc":"23239:1:40","nodeType":"YulTypedName","src":"23239:1:40","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"23245:4:40","nodeType":"YulTypedName","src":"23245:4:40","type":""}],"src":"23205:128:40"},{"body":{"nativeSrc":"23512:154:40","nodeType":"YulBlock","src":"23512:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"23529:9:40","nodeType":"YulIdentifier","src":"23529:9:40"},{"kind":"number","nativeSrc":"23540:2:40","nodeType":"YulLiteral","src":"23540:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"23522:6:40","nodeType":"YulIdentifier","src":"23522:6:40"},"nativeSrc":"23522:21:40","nodeType":"YulFunctionCall","src":"23522:21:40"},"nativeSrc":"23522:21:40","nodeType":"YulExpressionStatement","src":"23522:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"23563:9:40","nodeType":"YulIdentifier","src":"23563:9:40"},{"kind":"number","nativeSrc":"23574:2:40","nodeType":"YulLiteral","src":"23574:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"23559:3:40","nodeType":"YulIdentifier","src":"23559:3:40"},"nativeSrc":"23559:18:40","nodeType":"YulFunctionCall","src":"23559:18:40"},{"kind":"number","nativeSrc":"23579:1:40","nodeType":"YulLiteral","src":"23579:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"23552:6:40","nodeType":"YulIdentifier","src":"23552:6:40"},"nativeSrc":"23552:29:40","nodeType":"YulFunctionCall","src":"23552:29:40"},"nativeSrc":"23552:29:40","nodeType":"YulExpressionStatement","src":"23552:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"23601:9:40","nodeType":"YulIdentifier","src":"23601:9:40"},{"kind":"number","nativeSrc":"23612:2:40","nodeType":"YulLiteral","src":"23612:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"23597:3:40","nodeType":"YulIdentifier","src":"23597:3:40"},"nativeSrc":"23597:18:40","nodeType":"YulFunctionCall","src":"23597:18:40"},{"hexValue":"4753303133","kind":"string","nativeSrc":"23617:7:40","nodeType":"YulLiteral","src":"23617:7:40","type":"","value":"GS013"}],"functionName":{"name":"mstore","nativeSrc":"23590:6:40","nodeType":"YulIdentifier","src":"23590:6:40"},"nativeSrc":"23590:35:40","nodeType":"YulFunctionCall","src":"23590:35:40"},"nativeSrc":"23590:35:40","nodeType":"YulExpressionStatement","src":"23590:35:40"},{"nativeSrc":"23634:26:40","nodeType":"YulAssignment","src":"23634:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"23646:9:40","nodeType":"YulIdentifier","src":"23646:9:40"},{"kind":"number","nativeSrc":"23657:2:40","nodeType":"YulLiteral","src":"23657:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"23642:3:40","nodeType":"YulIdentifier","src":"23642:3:40"},"nativeSrc":"23642:18:40","nodeType":"YulFunctionCall","src":"23642:18:40"},"variableNames":[{"name":"tail","nativeSrc":"23634:4:40","nodeType":"YulIdentifier","src":"23634:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_99333b4627cde46d9c53d7148b33b8b1f4f065f5dceb2cb210893e67e551978e__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"23338:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"23489:9:40","nodeType":"YulTypedName","src":"23489:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"23503:4:40","nodeType":"YulTypedName","src":"23503:4:40","type":""}],"src":"23338:328:40"},{"body":{"nativeSrc":"23794:135:40","nodeType":"YulBlock","src":"23794:135:40","statements":[{"nativeSrc":"23804:26:40","nodeType":"YulAssignment","src":"23804:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"23816:9:40","nodeType":"YulIdentifier","src":"23816:9:40"},{"kind":"number","nativeSrc":"23827:2:40","nodeType":"YulLiteral","src":"23827:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"23812:3:40","nodeType":"YulIdentifier","src":"23812:3:40"},"nativeSrc":"23812:18:40","nodeType":"YulFunctionCall","src":"23812:18:40"},"variableNames":[{"name":"tail","nativeSrc":"23804:4:40","nodeType":"YulIdentifier","src":"23804:4:40"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"23846:9:40","nodeType":"YulIdentifier","src":"23846:9:40"},{"name":"value0","nativeSrc":"23857:6:40","nodeType":"YulIdentifier","src":"23857:6:40"}],"functionName":{"name":"mstore","nativeSrc":"23839:6:40","nodeType":"YulIdentifier","src":"23839:6:40"},"nativeSrc":"23839:25:40","nodeType":"YulFunctionCall","src":"23839:25:40"},"nativeSrc":"23839:25:40","nodeType":"YulExpressionStatement","src":"23839:25:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"23884:9:40","nodeType":"YulIdentifier","src":"23884:9:40"},{"kind":"number","nativeSrc":"23895:2:40","nodeType":"YulLiteral","src":"23895:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"23880:3:40","nodeType":"YulIdentifier","src":"23880:3:40"},"nativeSrc":"23880:18:40","nodeType":"YulFunctionCall","src":"23880:18:40"},{"arguments":[{"arguments":[{"name":"value1","nativeSrc":"23914:6:40","nodeType":"YulIdentifier","src":"23914:6:40"}],"functionName":{"name":"iszero","nativeSrc":"23907:6:40","nodeType":"YulIdentifier","src":"23907:6:40"},"nativeSrc":"23907:14:40","nodeType":"YulFunctionCall","src":"23907:14:40"}],"functionName":{"name":"iszero","nativeSrc":"23900:6:40","nodeType":"YulIdentifier","src":"23900:6:40"},"nativeSrc":"23900:22:40","nodeType":"YulFunctionCall","src":"23900:22:40"}],"functionName":{"name":"mstore","nativeSrc":"23873:6:40","nodeType":"YulIdentifier","src":"23873:6:40"},"nativeSrc":"23873:50:40","nodeType":"YulFunctionCall","src":"23873:50:40"},"nativeSrc":"23873:50:40","nodeType":"YulExpressionStatement","src":"23873:50:40"}]},"name":"abi_encode_tuple_t_bytes32_t_bool__to_t_bytes32_t_bool__fromStack_reversed","nativeSrc":"23671:258:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"23755:9:40","nodeType":"YulTypedName","src":"23755:9:40","type":""},{"name":"value1","nativeSrc":"23766:6:40","nodeType":"YulTypedName","src":"23766:6:40","type":""},{"name":"value0","nativeSrc":"23774:6:40","nodeType":"YulTypedName","src":"23774:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"23785:4:40","nodeType":"YulTypedName","src":"23785:4:40","type":""}],"src":"23671:258:40"},{"body":{"nativeSrc":"24108:154:40","nodeType":"YulBlock","src":"24108:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"24125:9:40","nodeType":"YulIdentifier","src":"24125:9:40"},{"kind":"number","nativeSrc":"24136:2:40","nodeType":"YulLiteral","src":"24136:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"24118:6:40","nodeType":"YulIdentifier","src":"24118:6:40"},"nativeSrc":"24118:21:40","nodeType":"YulFunctionCall","src":"24118:21:40"},"nativeSrc":"24118:21:40","nodeType":"YulExpressionStatement","src":"24118:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"24159:9:40","nodeType":"YulIdentifier","src":"24159:9:40"},{"kind":"number","nativeSrc":"24170:2:40","nodeType":"YulLiteral","src":"24170:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"24155:3:40","nodeType":"YulIdentifier","src":"24155:3:40"},"nativeSrc":"24155:18:40","nodeType":"YulFunctionCall","src":"24155:18:40"},{"kind":"number","nativeSrc":"24175:1:40","nodeType":"YulLiteral","src":"24175:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"24148:6:40","nodeType":"YulIdentifier","src":"24148:6:40"},"nativeSrc":"24148:29:40","nodeType":"YulFunctionCall","src":"24148:29:40"},"nativeSrc":"24148:29:40","nodeType":"YulExpressionStatement","src":"24148:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"24197:9:40","nodeType":"YulIdentifier","src":"24197:9:40"},{"kind":"number","nativeSrc":"24208:2:40","nodeType":"YulLiteral","src":"24208:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"24193:3:40","nodeType":"YulIdentifier","src":"24193:3:40"},"nativeSrc":"24193:18:40","nodeType":"YulFunctionCall","src":"24193:18:40"},{"hexValue":"4753303031","kind":"string","nativeSrc":"24213:7:40","nodeType":"YulLiteral","src":"24213:7:40","type":"","value":"GS001"}],"functionName":{"name":"mstore","nativeSrc":"24186:6:40","nodeType":"YulIdentifier","src":"24186:6:40"},"nativeSrc":"24186:35:40","nodeType":"YulFunctionCall","src":"24186:35:40"},"nativeSrc":"24186:35:40","nodeType":"YulExpressionStatement","src":"24186:35:40"},{"nativeSrc":"24230:26:40","nodeType":"YulAssignment","src":"24230:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"24242:9:40","nodeType":"YulIdentifier","src":"24242:9:40"},{"kind":"number","nativeSrc":"24253:2:40","nodeType":"YulLiteral","src":"24253:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"24238:3:40","nodeType":"YulIdentifier","src":"24238:3:40"},"nativeSrc":"24238:18:40","nodeType":"YulFunctionCall","src":"24238:18:40"},"variableNames":[{"name":"tail","nativeSrc":"24230:4:40","nodeType":"YulIdentifier","src":"24230:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_93293a4a2e4cde533ea81b8912d8934c2d7892ceb975e9ad2c25f4abf449a730__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"23934:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"24085:9:40","nodeType":"YulTypedName","src":"24085:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"24099:4:40","nodeType":"YulTypedName","src":"24099:4:40","type":""}],"src":"23934:328:40"},{"body":{"nativeSrc":"24299:95:40","nodeType":"YulBlock","src":"24299:95:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"24316:1:40","nodeType":"YulLiteral","src":"24316:1:40","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"24323:3:40","nodeType":"YulLiteral","src":"24323:3:40","type":"","value":"224"},{"kind":"number","nativeSrc":"24328:10:40","nodeType":"YulLiteral","src":"24328:10:40","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"24319:3:40","nodeType":"YulIdentifier","src":"24319:3:40"},"nativeSrc":"24319:20:40","nodeType":"YulFunctionCall","src":"24319:20:40"}],"functionName":{"name":"mstore","nativeSrc":"24309:6:40","nodeType":"YulIdentifier","src":"24309:6:40"},"nativeSrc":"24309:31:40","nodeType":"YulFunctionCall","src":"24309:31:40"},"nativeSrc":"24309:31:40","nodeType":"YulExpressionStatement","src":"24309:31:40"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"24356:1:40","nodeType":"YulLiteral","src":"24356:1:40","type":"","value":"4"},{"kind":"number","nativeSrc":"24359:4:40","nodeType":"YulLiteral","src":"24359:4:40","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"24349:6:40","nodeType":"YulIdentifier","src":"24349:6:40"},"nativeSrc":"24349:15:40","nodeType":"YulFunctionCall","src":"24349:15:40"},"nativeSrc":"24349:15:40","nodeType":"YulExpressionStatement","src":"24349:15:40"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"24380:1:40","nodeType":"YulLiteral","src":"24380:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"24383:4:40","nodeType":"YulLiteral","src":"24383:4:40","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"24373:6:40","nodeType":"YulIdentifier","src":"24373:6:40"},"nativeSrc":"24373:15:40","nodeType":"YulFunctionCall","src":"24373:15:40"},"nativeSrc":"24373:15:40","nodeType":"YulExpressionStatement","src":"24373:15:40"}]},"name":"panic_error_0x32","nativeSrc":"24267:127:40","nodeType":"YulFunctionDefinition","src":"24267:127:40"},{"body":{"nativeSrc":"24644:740:40","nodeType":"YulBlock","src":"24644:740:40","statements":[{"nativeSrc":"24654:33:40","nodeType":"YulVariableDeclaration","src":"24654:33:40","value":{"arguments":[{"name":"headStart","nativeSrc":"24672:9:40","nodeType":"YulIdentifier","src":"24672:9:40"},{"kind":"number","nativeSrc":"24683:3:40","nodeType":"YulLiteral","src":"24683:3:40","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"24668:3:40","nodeType":"YulIdentifier","src":"24668:3:40"},"nativeSrc":"24668:19:40","nodeType":"YulFunctionCall","src":"24668:19:40"},"variables":[{"name":"tail_1","nativeSrc":"24658:6:40","nodeType":"YulTypedName","src":"24658:6:40","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"24703:9:40","nodeType":"YulIdentifier","src":"24703:9:40"},{"kind":"number","nativeSrc":"24714:3:40","nodeType":"YulLiteral","src":"24714:3:40","type":"","value":"128"}],"functionName":{"name":"mstore","nativeSrc":"24696:6:40","nodeType":"YulIdentifier","src":"24696:6:40"},"nativeSrc":"24696:22:40","nodeType":"YulFunctionCall","src":"24696:22:40"},"nativeSrc":"24696:22:40","nodeType":"YulExpressionStatement","src":"24696:22:40"},{"nativeSrc":"24727:17:40","nodeType":"YulVariableDeclaration","src":"24727:17:40","value":{"name":"tail_1","nativeSrc":"24738:6:40","nodeType":"YulIdentifier","src":"24738:6:40"},"variables":[{"name":"pos","nativeSrc":"24731:3:40","nodeType":"YulTypedName","src":"24731:3:40","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nativeSrc":"24760:6:40","nodeType":"YulIdentifier","src":"24760:6:40"},{"name":"value1","nativeSrc":"24768:6:40","nodeType":"YulIdentifier","src":"24768:6:40"}],"functionName":{"name":"mstore","nativeSrc":"24753:6:40","nodeType":"YulIdentifier","src":"24753:6:40"},"nativeSrc":"24753:22:40","nodeType":"YulFunctionCall","src":"24753:22:40"},"nativeSrc":"24753:22:40","nodeType":"YulExpressionStatement","src":"24753:22:40"},{"nativeSrc":"24784:26:40","nodeType":"YulAssignment","src":"24784:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"24795:9:40","nodeType":"YulIdentifier","src":"24795:9:40"},{"kind":"number","nativeSrc":"24806:3:40","nodeType":"YulLiteral","src":"24806:3:40","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"24791:3:40","nodeType":"YulIdentifier","src":"24791:3:40"},"nativeSrc":"24791:19:40","nodeType":"YulFunctionCall","src":"24791:19:40"},"variableNames":[{"name":"pos","nativeSrc":"24784:3:40","nodeType":"YulIdentifier","src":"24784:3:40"}]},{"nativeSrc":"24819:20:40","nodeType":"YulVariableDeclaration","src":"24819:20:40","value":{"name":"value0","nativeSrc":"24833:6:40","nodeType":"YulIdentifier","src":"24833:6:40"},"variables":[{"name":"srcPtr","nativeSrc":"24823:6:40","nodeType":"YulTypedName","src":"24823:6:40","type":""}]},{"nativeSrc":"24848:10:40","nodeType":"YulVariableDeclaration","src":"24848:10:40","value":{"kind":"number","nativeSrc":"24857:1:40","nodeType":"YulLiteral","src":"24857:1:40","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"24852:1:40","nodeType":"YulTypedName","src":"24852:1:40","type":""}]},{"body":{"nativeSrc":"24916:255:40","nodeType":"YulBlock","src":"24916:255:40","statements":[{"nativeSrc":"24930:33:40","nodeType":"YulVariableDeclaration","src":"24930:33:40","value":{"arguments":[{"name":"srcPtr","nativeSrc":"24956:6:40","nodeType":"YulIdentifier","src":"24956:6:40"}],"functionName":{"name":"calldataload","nativeSrc":"24943:12:40","nodeType":"YulIdentifier","src":"24943:12:40"},"nativeSrc":"24943:20:40","nodeType":"YulFunctionCall","src":"24943:20:40"},"variables":[{"name":"value","nativeSrc":"24934:5:40","nodeType":"YulTypedName","src":"24934:5:40","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"25001:5:40","nodeType":"YulIdentifier","src":"25001:5:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"24976:24:40","nodeType":"YulIdentifier","src":"24976:24:40"},"nativeSrc":"24976:31:40","nodeType":"YulFunctionCall","src":"24976:31:40"},"nativeSrc":"24976:31:40","nodeType":"YulExpressionStatement","src":"24976:31:40"},{"expression":{"arguments":[{"name":"pos","nativeSrc":"25027:3:40","nodeType":"YulIdentifier","src":"25027:3:40"},{"arguments":[{"name":"value","nativeSrc":"25036:5:40","nodeType":"YulIdentifier","src":"25036:5:40"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"25051:3:40","nodeType":"YulLiteral","src":"25051:3:40","type":"","value":"160"},{"kind":"number","nativeSrc":"25056:1:40","nodeType":"YulLiteral","src":"25056:1:40","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"25047:3:40","nodeType":"YulIdentifier","src":"25047:3:40"},"nativeSrc":"25047:11:40","nodeType":"YulFunctionCall","src":"25047:11:40"},{"kind":"number","nativeSrc":"25060:1:40","nodeType":"YulLiteral","src":"25060:1:40","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"25043:3:40","nodeType":"YulIdentifier","src":"25043:3:40"},"nativeSrc":"25043:19:40","nodeType":"YulFunctionCall","src":"25043:19:40"}],"functionName":{"name":"and","nativeSrc":"25032:3:40","nodeType":"YulIdentifier","src":"25032:3:40"},"nativeSrc":"25032:31:40","nodeType":"YulFunctionCall","src":"25032:31:40"}],"functionName":{"name":"mstore","nativeSrc":"25020:6:40","nodeType":"YulIdentifier","src":"25020:6:40"},"nativeSrc":"25020:44:40","nodeType":"YulFunctionCall","src":"25020:44:40"},"nativeSrc":"25020:44:40","nodeType":"YulExpressionStatement","src":"25020:44:40"},{"nativeSrc":"25077:14:40","nodeType":"YulVariableDeclaration","src":"25077:14:40","value":{"kind":"number","nativeSrc":"25087:4:40","nodeType":"YulLiteral","src":"25087:4:40","type":"","value":"0x20"},"variables":[{"name":"_1","nativeSrc":"25081:2:40","nodeType":"YulTypedName","src":"25081:2:40","type":""}]},{"nativeSrc":"25104:19:40","nodeType":"YulAssignment","src":"25104:19:40","value":{"arguments":[{"name":"pos","nativeSrc":"25115:3:40","nodeType":"YulIdentifier","src":"25115:3:40"},{"name":"_1","nativeSrc":"25120:2:40","nodeType":"YulIdentifier","src":"25120:2:40"}],"functionName":{"name":"add","nativeSrc":"25111:3:40","nodeType":"YulIdentifier","src":"25111:3:40"},"nativeSrc":"25111:12:40","nodeType":"YulFunctionCall","src":"25111:12:40"},"variableNames":[{"name":"pos","nativeSrc":"25104:3:40","nodeType":"YulIdentifier","src":"25104:3:40"}]},{"nativeSrc":"25136:25:40","nodeType":"YulAssignment","src":"25136:25:40","value":{"arguments":[{"name":"srcPtr","nativeSrc":"25150:6:40","nodeType":"YulIdentifier","src":"25150:6:40"},{"name":"_1","nativeSrc":"25158:2:40","nodeType":"YulIdentifier","src":"25158:2:40"}],"functionName":{"name":"add","nativeSrc":"25146:3:40","nodeType":"YulIdentifier","src":"25146:3:40"},"nativeSrc":"25146:15:40","nodeType":"YulFunctionCall","src":"25146:15:40"},"variableNames":[{"name":"srcPtr","nativeSrc":"25136:6:40","nodeType":"YulIdentifier","src":"25136:6:40"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"24878:1:40","nodeType":"YulIdentifier","src":"24878:1:40"},{"name":"value1","nativeSrc":"24881:6:40","nodeType":"YulIdentifier","src":"24881:6:40"}],"functionName":{"name":"lt","nativeSrc":"24875:2:40","nodeType":"YulIdentifier","src":"24875:2:40"},"nativeSrc":"24875:13:40","nodeType":"YulFunctionCall","src":"24875:13:40"},"nativeSrc":"24867:304:40","nodeType":"YulForLoop","post":{"nativeSrc":"24889:18:40","nodeType":"YulBlock","src":"24889:18:40","statements":[{"nativeSrc":"24891:14:40","nodeType":"YulAssignment","src":"24891:14:40","value":{"arguments":[{"name":"i","nativeSrc":"24900:1:40","nodeType":"YulIdentifier","src":"24900:1:40"},{"kind":"number","nativeSrc":"24903:1:40","nodeType":"YulLiteral","src":"24903:1:40","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"24896:3:40","nodeType":"YulIdentifier","src":"24896:3:40"},"nativeSrc":"24896:9:40","nodeType":"YulFunctionCall","src":"24896:9:40"},"variableNames":[{"name":"i","nativeSrc":"24891:1:40","nodeType":"YulIdentifier","src":"24891:1:40"}]}]},"pre":{"nativeSrc":"24871:3:40","nodeType":"YulBlock","src":"24871:3:40","statements":[]},"src":"24867:304:40"},{"nativeSrc":"25180:11:40","nodeType":"YulAssignment","src":"25180:11:40","value":{"name":"pos","nativeSrc":"25188:3:40","nodeType":"YulIdentifier","src":"25188:3:40"},"variableNames":[{"name":"tail","nativeSrc":"25180:4:40","nodeType":"YulIdentifier","src":"25180:4:40"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"25211:9:40","nodeType":"YulIdentifier","src":"25211:9:40"},{"kind":"number","nativeSrc":"25222:4:40","nodeType":"YulLiteral","src":"25222:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"25207:3:40","nodeType":"YulIdentifier","src":"25207:3:40"},"nativeSrc":"25207:20:40","nodeType":"YulFunctionCall","src":"25207:20:40"},{"name":"value2","nativeSrc":"25229:6:40","nodeType":"YulIdentifier","src":"25229:6:40"}],"functionName":{"name":"mstore","nativeSrc":"25200:6:40","nodeType":"YulIdentifier","src":"25200:6:40"},"nativeSrc":"25200:36:40","nodeType":"YulFunctionCall","src":"25200:36:40"},"nativeSrc":"25200:36:40","nodeType":"YulExpressionStatement","src":"25200:36:40"},{"nativeSrc":"25245:29:40","nodeType":"YulVariableDeclaration","src":"25245:29:40","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"25263:3:40","nodeType":"YulLiteral","src":"25263:3:40","type":"","value":"160"},{"kind":"number","nativeSrc":"25268:1:40","nodeType":"YulLiteral","src":"25268:1:40","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"25259:3:40","nodeType":"YulIdentifier","src":"25259:3:40"},"nativeSrc":"25259:11:40","nodeType":"YulFunctionCall","src":"25259:11:40"},{"kind":"number","nativeSrc":"25272:1:40","nodeType":"YulLiteral","src":"25272:1:40","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"25255:3:40","nodeType":"YulIdentifier","src":"25255:3:40"},"nativeSrc":"25255:19:40","nodeType":"YulFunctionCall","src":"25255:19:40"},"variables":[{"name":"_2","nativeSrc":"25249:2:40","nodeType":"YulTypedName","src":"25249:2:40","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"25294:9:40","nodeType":"YulIdentifier","src":"25294:9:40"},{"kind":"number","nativeSrc":"25305:2:40","nodeType":"YulLiteral","src":"25305:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"25290:3:40","nodeType":"YulIdentifier","src":"25290:3:40"},"nativeSrc":"25290:18:40","nodeType":"YulFunctionCall","src":"25290:18:40"},{"arguments":[{"name":"value3","nativeSrc":"25314:6:40","nodeType":"YulIdentifier","src":"25314:6:40"},{"name":"_2","nativeSrc":"25322:2:40","nodeType":"YulIdentifier","src":"25322:2:40"}],"functionName":{"name":"and","nativeSrc":"25310:3:40","nodeType":"YulIdentifier","src":"25310:3:40"},"nativeSrc":"25310:15:40","nodeType":"YulFunctionCall","src":"25310:15:40"}],"functionName":{"name":"mstore","nativeSrc":"25283:6:40","nodeType":"YulIdentifier","src":"25283:6:40"},"nativeSrc":"25283:43:40","nodeType":"YulFunctionCall","src":"25283:43:40"},"nativeSrc":"25283:43:40","nodeType":"YulExpressionStatement","src":"25283:43:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"25346:9:40","nodeType":"YulIdentifier","src":"25346:9:40"},{"kind":"number","nativeSrc":"25357:2:40","nodeType":"YulLiteral","src":"25357:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"25342:3:40","nodeType":"YulIdentifier","src":"25342:3:40"},"nativeSrc":"25342:18:40","nodeType":"YulFunctionCall","src":"25342:18:40"},{"arguments":[{"name":"value4","nativeSrc":"25366:6:40","nodeType":"YulIdentifier","src":"25366:6:40"},{"name":"_2","nativeSrc":"25374:2:40","nodeType":"YulIdentifier","src":"25374:2:40"}],"functionName":{"name":"and","nativeSrc":"25362:3:40","nodeType":"YulIdentifier","src":"25362:3:40"},"nativeSrc":"25362:15:40","nodeType":"YulFunctionCall","src":"25362:15:40"}],"functionName":{"name":"mstore","nativeSrc":"25335:6:40","nodeType":"YulIdentifier","src":"25335:6:40"},"nativeSrc":"25335:43:40","nodeType":"YulFunctionCall","src":"25335:43:40"},"nativeSrc":"25335:43:40","nodeType":"YulExpressionStatement","src":"25335:43:40"}]},"name":"abi_encode_tuple_t_array$_t_address_$dyn_calldata_ptr_t_uint256_t_address_t_address__to_t_array$_t_address_$dyn_memory_ptr_t_uint256_t_address_t_address__fromStack_reversed","nativeSrc":"24399:985:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"24581:9:40","nodeType":"YulTypedName","src":"24581:9:40","type":""},{"name":"value4","nativeSrc":"24592:6:40","nodeType":"YulTypedName","src":"24592:6:40","type":""},{"name":"value3","nativeSrc":"24600:6:40","nodeType":"YulTypedName","src":"24600:6:40","type":""},{"name":"value2","nativeSrc":"24608:6:40","nodeType":"YulTypedName","src":"24608:6:40","type":""},{"name":"value1","nativeSrc":"24616:6:40","nodeType":"YulTypedName","src":"24616:6:40","type":""},{"name":"value0","nativeSrc":"24624:6:40","nodeType":"YulTypedName","src":"24624:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"24635:4:40","nodeType":"YulTypedName","src":"24635:4:40","type":""}],"src":"24399:985:40"},{"body":{"nativeSrc":"25563:154:40","nodeType":"YulBlock","src":"25563:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"25580:9:40","nodeType":"YulIdentifier","src":"25580:9:40"},{"kind":"number","nativeSrc":"25591:2:40","nodeType":"YulLiteral","src":"25591:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"25573:6:40","nodeType":"YulIdentifier","src":"25573:6:40"},"nativeSrc":"25573:21:40","nodeType":"YulFunctionCall","src":"25573:21:40"},"nativeSrc":"25573:21:40","nodeType":"YulExpressionStatement","src":"25573:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"25614:9:40","nodeType":"YulIdentifier","src":"25614:9:40"},{"kind":"number","nativeSrc":"25625:2:40","nodeType":"YulLiteral","src":"25625:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"25610:3:40","nodeType":"YulIdentifier","src":"25610:3:40"},"nativeSrc":"25610:18:40","nodeType":"YulFunctionCall","src":"25610:18:40"},{"kind":"number","nativeSrc":"25630:1:40","nodeType":"YulLiteral","src":"25630:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"25603:6:40","nodeType":"YulIdentifier","src":"25603:6:40"},"nativeSrc":"25603:29:40","nodeType":"YulFunctionCall","src":"25603:29:40"},"nativeSrc":"25603:29:40","nodeType":"YulExpressionStatement","src":"25603:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"25652:9:40","nodeType":"YulIdentifier","src":"25652:9:40"},{"kind":"number","nativeSrc":"25663:2:40","nodeType":"YulLiteral","src":"25663:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"25648:3:40","nodeType":"YulIdentifier","src":"25648:3:40"},"nativeSrc":"25648:18:40","nodeType":"YulFunctionCall","src":"25648:18:40"},{"hexValue":"4753313035","kind":"string","nativeSrc":"25668:7:40","nodeType":"YulLiteral","src":"25668:7:40","type":"","value":"GS105"}],"functionName":{"name":"mstore","nativeSrc":"25641:6:40","nodeType":"YulIdentifier","src":"25641:6:40"},"nativeSrc":"25641:35:40","nodeType":"YulFunctionCall","src":"25641:35:40"},"nativeSrc":"25641:35:40","nodeType":"YulExpressionStatement","src":"25641:35:40"},{"nativeSrc":"25685:26:40","nodeType":"YulAssignment","src":"25685:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"25697:9:40","nodeType":"YulIdentifier","src":"25697:9:40"},{"kind":"number","nativeSrc":"25708:2:40","nodeType":"YulLiteral","src":"25708:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"25693:3:40","nodeType":"YulIdentifier","src":"25693:3:40"},"nativeSrc":"25693:18:40","nodeType":"YulFunctionCall","src":"25693:18:40"},"variableNames":[{"name":"tail","nativeSrc":"25685:4:40","nodeType":"YulIdentifier","src":"25685:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_21e9127eafd366d4171d9c7f3375ca996507e4dd231bd2c13b243a626f992d4c__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"25389:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"25540:9:40","nodeType":"YulTypedName","src":"25540:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"25554:4:40","nodeType":"YulTypedName","src":"25554:4:40","type":""}],"src":"25389:328:40"},{"body":{"nativeSrc":"25896:154:40","nodeType":"YulBlock","src":"25896:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"25913:9:40","nodeType":"YulIdentifier","src":"25913:9:40"},{"kind":"number","nativeSrc":"25924:2:40","nodeType":"YulLiteral","src":"25924:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"25906:6:40","nodeType":"YulIdentifier","src":"25906:6:40"},"nativeSrc":"25906:21:40","nodeType":"YulFunctionCall","src":"25906:21:40"},"nativeSrc":"25906:21:40","nodeType":"YulExpressionStatement","src":"25906:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"25947:9:40","nodeType":"YulIdentifier","src":"25947:9:40"},{"kind":"number","nativeSrc":"25958:2:40","nodeType":"YulLiteral","src":"25958:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"25943:3:40","nodeType":"YulIdentifier","src":"25943:3:40"},"nativeSrc":"25943:18:40","nodeType":"YulFunctionCall","src":"25943:18:40"},{"kind":"number","nativeSrc":"25963:1:40","nodeType":"YulLiteral","src":"25963:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"25936:6:40","nodeType":"YulIdentifier","src":"25936:6:40"},"nativeSrc":"25936:29:40","nodeType":"YulFunctionCall","src":"25936:29:40"},"nativeSrc":"25936:29:40","nodeType":"YulExpressionStatement","src":"25936:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"25985:9:40","nodeType":"YulIdentifier","src":"25985:9:40"},{"kind":"number","nativeSrc":"25996:2:40","nodeType":"YulLiteral","src":"25996:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"25981:3:40","nodeType":"YulIdentifier","src":"25981:3:40"},"nativeSrc":"25981:18:40","nodeType":"YulFunctionCall","src":"25981:18:40"},{"hexValue":"4753313036","kind":"string","nativeSrc":"26001:7:40","nodeType":"YulLiteral","src":"26001:7:40","type":"","value":"GS106"}],"functionName":{"name":"mstore","nativeSrc":"25974:6:40","nodeType":"YulIdentifier","src":"25974:6:40"},"nativeSrc":"25974:35:40","nodeType":"YulFunctionCall","src":"25974:35:40"},"nativeSrc":"25974:35:40","nodeType":"YulExpressionStatement","src":"25974:35:40"},{"nativeSrc":"26018:26:40","nodeType":"YulAssignment","src":"26018:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"26030:9:40","nodeType":"YulIdentifier","src":"26030:9:40"},{"kind":"number","nativeSrc":"26041:2:40","nodeType":"YulLiteral","src":"26041:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"26026:3:40","nodeType":"YulIdentifier","src":"26026:3:40"},"nativeSrc":"26026:18:40","nodeType":"YulFunctionCall","src":"26026:18:40"},"variableNames":[{"name":"tail","nativeSrc":"26018:4:40","nodeType":"YulIdentifier","src":"26018:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_3be12fd8170783d77e95b898996a64d9da524b4d1491db467a4cf43987cf214d__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"25722:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"25873:9:40","nodeType":"YulTypedName","src":"25873:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"25887:4:40","nodeType":"YulTypedName","src":"25887:4:40","type":""}],"src":"25722:328:40"},{"body":{"nativeSrc":"26229:154:40","nodeType":"YulBlock","src":"26229:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"26246:9:40","nodeType":"YulIdentifier","src":"26246:9:40"},{"kind":"number","nativeSrc":"26257:2:40","nodeType":"YulLiteral","src":"26257:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"26239:6:40","nodeType":"YulIdentifier","src":"26239:6:40"},"nativeSrc":"26239:21:40","nodeType":"YulFunctionCall","src":"26239:21:40"},"nativeSrc":"26239:21:40","nodeType":"YulExpressionStatement","src":"26239:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"26280:9:40","nodeType":"YulIdentifier","src":"26280:9:40"},{"kind":"number","nativeSrc":"26291:2:40","nodeType":"YulLiteral","src":"26291:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"26276:3:40","nodeType":"YulIdentifier","src":"26276:3:40"},"nativeSrc":"26276:18:40","nodeType":"YulFunctionCall","src":"26276:18:40"},{"kind":"number","nativeSrc":"26296:1:40","nodeType":"YulLiteral","src":"26296:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"26269:6:40","nodeType":"YulIdentifier","src":"26269:6:40"},"nativeSrc":"26269:29:40","nodeType":"YulFunctionCall","src":"26269:29:40"},"nativeSrc":"26269:29:40","nodeType":"YulExpressionStatement","src":"26269:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"26318:9:40","nodeType":"YulIdentifier","src":"26318:9:40"},{"kind":"number","nativeSrc":"26329:2:40","nodeType":"YulLiteral","src":"26329:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"26314:3:40","nodeType":"YulIdentifier","src":"26314:3:40"},"nativeSrc":"26314:18:40","nodeType":"YulFunctionCall","src":"26314:18:40"},{"hexValue":"4753303330","kind":"string","nativeSrc":"26334:7:40","nodeType":"YulLiteral","src":"26334:7:40","type":"","value":"GS030"}],"functionName":{"name":"mstore","nativeSrc":"26307:6:40","nodeType":"YulIdentifier","src":"26307:6:40"},"nativeSrc":"26307:35:40","nodeType":"YulFunctionCall","src":"26307:35:40"},"nativeSrc":"26307:35:40","nodeType":"YulExpressionStatement","src":"26307:35:40"},{"nativeSrc":"26351:26:40","nodeType":"YulAssignment","src":"26351:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"26363:9:40","nodeType":"YulIdentifier","src":"26363:9:40"},{"kind":"number","nativeSrc":"26374:2:40","nodeType":"YulLiteral","src":"26374:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"26359:3:40","nodeType":"YulIdentifier","src":"26359:3:40"},"nativeSrc":"26359:18:40","nodeType":"YulFunctionCall","src":"26359:18:40"},"variableNames":[{"name":"tail","nativeSrc":"26351:4:40","nodeType":"YulIdentifier","src":"26351:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_26b7fa7d947085035b53de5c25693e568c405e1e894ad22389a1528045f35ba8__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"26055:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"26206:9:40","nodeType":"YulTypedName","src":"26206:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"26220:4:40","nodeType":"YulTypedName","src":"26220:4:40","type":""}],"src":"26055:328:40"},{"body":{"nativeSrc":"26562:154:40","nodeType":"YulBlock","src":"26562:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"26579:9:40","nodeType":"YulIdentifier","src":"26579:9:40"},{"kind":"number","nativeSrc":"26590:2:40","nodeType":"YulLiteral","src":"26590:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"26572:6:40","nodeType":"YulIdentifier","src":"26572:6:40"},"nativeSrc":"26572:21:40","nodeType":"YulFunctionCall","src":"26572:21:40"},"nativeSrc":"26572:21:40","nodeType":"YulExpressionStatement","src":"26572:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"26613:9:40","nodeType":"YulIdentifier","src":"26613:9:40"},{"kind":"number","nativeSrc":"26624:2:40","nodeType":"YulLiteral","src":"26624:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"26609:3:40","nodeType":"YulIdentifier","src":"26609:3:40"},"nativeSrc":"26609:18:40","nodeType":"YulFunctionCall","src":"26609:18:40"},{"kind":"number","nativeSrc":"26629:1:40","nodeType":"YulLiteral","src":"26629:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"26602:6:40","nodeType":"YulIdentifier","src":"26602:6:40"},"nativeSrc":"26602:29:40","nodeType":"YulFunctionCall","src":"26602:29:40"},"nativeSrc":"26602:29:40","nodeType":"YulExpressionStatement","src":"26602:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"26651:9:40","nodeType":"YulIdentifier","src":"26651:9:40"},{"kind":"number","nativeSrc":"26662:2:40","nodeType":"YulLiteral","src":"26662:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"26647:3:40","nodeType":"YulIdentifier","src":"26647:3:40"},"nativeSrc":"26647:18:40","nodeType":"YulFunctionCall","src":"26647:18:40"},{"hexValue":"4753313033","kind":"string","nativeSrc":"26667:7:40","nodeType":"YulLiteral","src":"26667:7:40","type":"","value":"GS103"}],"functionName":{"name":"mstore","nativeSrc":"26640:6:40","nodeType":"YulIdentifier","src":"26640:6:40"},"nativeSrc":"26640:35:40","nodeType":"YulFunctionCall","src":"26640:35:40"},"nativeSrc":"26640:35:40","nodeType":"YulExpressionStatement","src":"26640:35:40"},{"nativeSrc":"26684:26:40","nodeType":"YulAssignment","src":"26684:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"26696:9:40","nodeType":"YulIdentifier","src":"26696:9:40"},{"kind":"number","nativeSrc":"26707:2:40","nodeType":"YulLiteral","src":"26707:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"26692:3:40","nodeType":"YulIdentifier","src":"26692:3:40"},"nativeSrc":"26692:18:40","nodeType":"YulFunctionCall","src":"26692:18:40"},"variableNames":[{"name":"tail","nativeSrc":"26684:4:40","nodeType":"YulIdentifier","src":"26684:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_7295c339622429fbd8194417b44c0a2c972675caa6bf424cf588d99024c608be__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"26388:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"26539:9:40","nodeType":"YulTypedName","src":"26539:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"26553:4:40","nodeType":"YulTypedName","src":"26553:4:40","type":""}],"src":"26388:328:40"},{"body":{"nativeSrc":"26820:103:40","nodeType":"YulBlock","src":"26820:103:40","statements":[{"nativeSrc":"26830:26:40","nodeType":"YulAssignment","src":"26830:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"26842:9:40","nodeType":"YulIdentifier","src":"26842:9:40"},{"kind":"number","nativeSrc":"26853:2:40","nodeType":"YulLiteral","src":"26853:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"26838:3:40","nodeType":"YulIdentifier","src":"26838:3:40"},"nativeSrc":"26838:18:40","nodeType":"YulFunctionCall","src":"26838:18:40"},"variableNames":[{"name":"tail","nativeSrc":"26830:4:40","nodeType":"YulIdentifier","src":"26830:4:40"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"26872:9:40","nodeType":"YulIdentifier","src":"26872:9:40"},{"arguments":[{"name":"value0","nativeSrc":"26887:6:40","nodeType":"YulIdentifier","src":"26887:6:40"},{"arguments":[{"kind":"number","nativeSrc":"26899:3:40","nodeType":"YulLiteral","src":"26899:3:40","type":"","value":"224"},{"kind":"number","nativeSrc":"26904:10:40","nodeType":"YulLiteral","src":"26904:10:40","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nativeSrc":"26895:3:40","nodeType":"YulIdentifier","src":"26895:3:40"},"nativeSrc":"26895:20:40","nodeType":"YulFunctionCall","src":"26895:20:40"}],"functionName":{"name":"and","nativeSrc":"26883:3:40","nodeType":"YulIdentifier","src":"26883:3:40"},"nativeSrc":"26883:33:40","nodeType":"YulFunctionCall","src":"26883:33:40"}],"functionName":{"name":"mstore","nativeSrc":"26865:6:40","nodeType":"YulIdentifier","src":"26865:6:40"},"nativeSrc":"26865:52:40","nodeType":"YulFunctionCall","src":"26865:52:40"},"nativeSrc":"26865:52:40","nodeType":"YulExpressionStatement","src":"26865:52:40"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"26721:202:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"26789:9:40","nodeType":"YulTypedName","src":"26789:9:40","type":""},{"name":"value0","nativeSrc":"26800:6:40","nodeType":"YulTypedName","src":"26800:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"26811:4:40","nodeType":"YulTypedName","src":"26811:4:40","type":""}],"src":"26721:202:40"},{"body":{"nativeSrc":"27006:199:40","nodeType":"YulBlock","src":"27006:199:40","statements":[{"body":{"nativeSrc":"27052:16:40","nodeType":"YulBlock","src":"27052:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"27061:1:40","nodeType":"YulLiteral","src":"27061:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"27064:1:40","nodeType":"YulLiteral","src":"27064:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"27054:6:40","nodeType":"YulIdentifier","src":"27054:6:40"},"nativeSrc":"27054:12:40","nodeType":"YulFunctionCall","src":"27054:12:40"},"nativeSrc":"27054:12:40","nodeType":"YulExpressionStatement","src":"27054:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"27027:7:40","nodeType":"YulIdentifier","src":"27027:7:40"},{"name":"headStart","nativeSrc":"27036:9:40","nodeType":"YulIdentifier","src":"27036:9:40"}],"functionName":{"name":"sub","nativeSrc":"27023:3:40","nodeType":"YulIdentifier","src":"27023:3:40"},"nativeSrc":"27023:23:40","nodeType":"YulFunctionCall","src":"27023:23:40"},{"kind":"number","nativeSrc":"27048:2:40","nodeType":"YulLiteral","src":"27048:2:40","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"27019:3:40","nodeType":"YulIdentifier","src":"27019:3:40"},"nativeSrc":"27019:32:40","nodeType":"YulFunctionCall","src":"27019:32:40"},"nativeSrc":"27016:52:40","nodeType":"YulIf","src":"27016:52:40"},{"nativeSrc":"27077:29:40","nodeType":"YulVariableDeclaration","src":"27077:29:40","value":{"arguments":[{"name":"headStart","nativeSrc":"27096:9:40","nodeType":"YulIdentifier","src":"27096:9:40"}],"functionName":{"name":"mload","nativeSrc":"27090:5:40","nodeType":"YulIdentifier","src":"27090:5:40"},"nativeSrc":"27090:16:40","nodeType":"YulFunctionCall","src":"27090:16:40"},"variables":[{"name":"value","nativeSrc":"27081:5:40","nodeType":"YulTypedName","src":"27081:5:40","type":""}]},{"body":{"nativeSrc":"27159:16:40","nodeType":"YulBlock","src":"27159:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"27168:1:40","nodeType":"YulLiteral","src":"27168:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"27171:1:40","nodeType":"YulLiteral","src":"27171:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"27161:6:40","nodeType":"YulIdentifier","src":"27161:6:40"},"nativeSrc":"27161:12:40","nodeType":"YulFunctionCall","src":"27161:12:40"},"nativeSrc":"27161:12:40","nodeType":"YulExpressionStatement","src":"27161:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"27128:5:40","nodeType":"YulIdentifier","src":"27128:5:40"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"27149:5:40","nodeType":"YulIdentifier","src":"27149:5:40"}],"functionName":{"name":"iszero","nativeSrc":"27142:6:40","nodeType":"YulIdentifier","src":"27142:6:40"},"nativeSrc":"27142:13:40","nodeType":"YulFunctionCall","src":"27142:13:40"}],"functionName":{"name":"iszero","nativeSrc":"27135:6:40","nodeType":"YulIdentifier","src":"27135:6:40"},"nativeSrc":"27135:21:40","nodeType":"YulFunctionCall","src":"27135:21:40"}],"functionName":{"name":"eq","nativeSrc":"27125:2:40","nodeType":"YulIdentifier","src":"27125:2:40"},"nativeSrc":"27125:32:40","nodeType":"YulFunctionCall","src":"27125:32:40"}],"functionName":{"name":"iszero","nativeSrc":"27118:6:40","nodeType":"YulIdentifier","src":"27118:6:40"},"nativeSrc":"27118:40:40","nodeType":"YulFunctionCall","src":"27118:40:40"},"nativeSrc":"27115:60:40","nodeType":"YulIf","src":"27115:60:40"},{"nativeSrc":"27184:15:40","nodeType":"YulAssignment","src":"27184:15:40","value":{"name":"value","nativeSrc":"27194:5:40","nodeType":"YulIdentifier","src":"27194:5:40"},"variableNames":[{"name":"value0","nativeSrc":"27184:6:40","nodeType":"YulIdentifier","src":"27184:6:40"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"26928:277:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"26972:9:40","nodeType":"YulTypedName","src":"26972:9:40","type":""},{"name":"dataEnd","nativeSrc":"26983:7:40","nodeType":"YulTypedName","src":"26983:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"26995:6:40","nodeType":"YulTypedName","src":"26995:6:40","type":""}],"src":"26928:277:40"},{"body":{"nativeSrc":"27384:154:40","nodeType":"YulBlock","src":"27384:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"27401:9:40","nodeType":"YulIdentifier","src":"27401:9:40"},{"kind":"number","nativeSrc":"27412:2:40","nodeType":"YulLiteral","src":"27412:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"27394:6:40","nodeType":"YulIdentifier","src":"27394:6:40"},"nativeSrc":"27394:21:40","nodeType":"YulFunctionCall","src":"27394:21:40"},"nativeSrc":"27394:21:40","nodeType":"YulExpressionStatement","src":"27394:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"27435:9:40","nodeType":"YulIdentifier","src":"27435:9:40"},{"kind":"number","nativeSrc":"27446:2:40","nodeType":"YulLiteral","src":"27446:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"27431:3:40","nodeType":"YulIdentifier","src":"27431:3:40"},"nativeSrc":"27431:18:40","nodeType":"YulFunctionCall","src":"27431:18:40"},{"kind":"number","nativeSrc":"27451:1:40","nodeType":"YulLiteral","src":"27451:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"27424:6:40","nodeType":"YulIdentifier","src":"27424:6:40"},"nativeSrc":"27424:29:40","nodeType":"YulFunctionCall","src":"27424:29:40"},"nativeSrc":"27424:29:40","nodeType":"YulExpressionStatement","src":"27424:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"27473:9:40","nodeType":"YulIdentifier","src":"27473:9:40"},{"kind":"number","nativeSrc":"27484:2:40","nodeType":"YulLiteral","src":"27484:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"27469:3:40","nodeType":"YulIdentifier","src":"27469:3:40"},"nativeSrc":"27469:18:40","nodeType":"YulFunctionCall","src":"27469:18:40"},{"hexValue":"4753333030","kind":"string","nativeSrc":"27489:7:40","nodeType":"YulLiteral","src":"27489:7:40","type":"","value":"GS300"}],"functionName":{"name":"mstore","nativeSrc":"27462:6:40","nodeType":"YulIdentifier","src":"27462:6:40"},"nativeSrc":"27462:35:40","nodeType":"YulFunctionCall","src":"27462:35:40"},"nativeSrc":"27462:35:40","nodeType":"YulExpressionStatement","src":"27462:35:40"},{"nativeSrc":"27506:26:40","nodeType":"YulAssignment","src":"27506:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"27518:9:40","nodeType":"YulIdentifier","src":"27518:9:40"},{"kind":"number","nativeSrc":"27529:2:40","nodeType":"YulLiteral","src":"27529:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"27514:3:40","nodeType":"YulIdentifier","src":"27514:3:40"},"nativeSrc":"27514:18:40","nodeType":"YulFunctionCall","src":"27514:18:40"},"variableNames":[{"name":"tail","nativeSrc":"27506:4:40","nodeType":"YulIdentifier","src":"27506:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_c2a4c0da6073a4ef35f113e24388fa780c351ad02fefd784ffba62884174edf0__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"27210:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"27361:9:40","nodeType":"YulTypedName","src":"27361:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"27375:4:40","nodeType":"YulTypedName","src":"27375:4:40","type":""}],"src":"27210:328:40"},{"body":{"nativeSrc":"27717:154:40","nodeType":"YulBlock","src":"27717:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"27734:9:40","nodeType":"YulIdentifier","src":"27734:9:40"},{"kind":"number","nativeSrc":"27745:2:40","nodeType":"YulLiteral","src":"27745:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"27727:6:40","nodeType":"YulIdentifier","src":"27727:6:40"},"nativeSrc":"27727:21:40","nodeType":"YulFunctionCall","src":"27727:21:40"},"nativeSrc":"27727:21:40","nodeType":"YulExpressionStatement","src":"27727:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"27768:9:40","nodeType":"YulIdentifier","src":"27768:9:40"},{"kind":"number","nativeSrc":"27779:2:40","nodeType":"YulLiteral","src":"27779:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"27764:3:40","nodeType":"YulIdentifier","src":"27764:3:40"},"nativeSrc":"27764:18:40","nodeType":"YulFunctionCall","src":"27764:18:40"},{"kind":"number","nativeSrc":"27784:1:40","nodeType":"YulLiteral","src":"27784:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"27757:6:40","nodeType":"YulIdentifier","src":"27757:6:40"},"nativeSrc":"27757:29:40","nodeType":"YulFunctionCall","src":"27757:29:40"},"nativeSrc":"27757:29:40","nodeType":"YulExpressionStatement","src":"27757:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"27806:9:40","nodeType":"YulIdentifier","src":"27806:9:40"},{"kind":"number","nativeSrc":"27817:2:40","nodeType":"YulLiteral","src":"27817:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"27802:3:40","nodeType":"YulIdentifier","src":"27802:3:40"},"nativeSrc":"27802:18:40","nodeType":"YulFunctionCall","src":"27802:18:40"},{"hexValue":"4753323035","kind":"string","nativeSrc":"27822:7:40","nodeType":"YulLiteral","src":"27822:7:40","type":"","value":"GS205"}],"functionName":{"name":"mstore","nativeSrc":"27795:6:40","nodeType":"YulIdentifier","src":"27795:6:40"},"nativeSrc":"27795:35:40","nodeType":"YulFunctionCall","src":"27795:35:40"},"nativeSrc":"27795:35:40","nodeType":"YulExpressionStatement","src":"27795:35:40"},{"nativeSrc":"27839:26:40","nodeType":"YulAssignment","src":"27839:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"27851:9:40","nodeType":"YulIdentifier","src":"27851:9:40"},{"kind":"number","nativeSrc":"27862:2:40","nodeType":"YulLiteral","src":"27862:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"27847:3:40","nodeType":"YulIdentifier","src":"27847:3:40"},"nativeSrc":"27847:18:40","nodeType":"YulFunctionCall","src":"27847:18:40"},"variableNames":[{"name":"tail","nativeSrc":"27839:4:40","nodeType":"YulIdentifier","src":"27839:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_f86d3c4b40d399421f213105cf28bb5b688028c0e3d9bd9eb6f879f0bebe6c39__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"27543:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"27694:9:40","nodeType":"YulTypedName","src":"27694:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"27708:4:40","nodeType":"YulTypedName","src":"27708:4:40","type":""}],"src":"27543:328:40"},{"body":{"nativeSrc":"28023:124:40","nodeType":"YulBlock","src":"28023:124:40","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"28046:3:40","nodeType":"YulIdentifier","src":"28046:3:40"},{"name":"value0","nativeSrc":"28051:6:40","nodeType":"YulIdentifier","src":"28051:6:40"},{"name":"value1","nativeSrc":"28059:6:40","nodeType":"YulIdentifier","src":"28059:6:40"}],"functionName":{"name":"calldatacopy","nativeSrc":"28033:12:40","nodeType":"YulIdentifier","src":"28033:12:40"},"nativeSrc":"28033:33:40","nodeType":"YulFunctionCall","src":"28033:33:40"},"nativeSrc":"28033:33:40","nodeType":"YulExpressionStatement","src":"28033:33:40"},{"nativeSrc":"28075:26:40","nodeType":"YulVariableDeclaration","src":"28075:26:40","value":{"arguments":[{"name":"pos","nativeSrc":"28089:3:40","nodeType":"YulIdentifier","src":"28089:3:40"},{"name":"value1","nativeSrc":"28094:6:40","nodeType":"YulIdentifier","src":"28094:6:40"}],"functionName":{"name":"add","nativeSrc":"28085:3:40","nodeType":"YulIdentifier","src":"28085:3:40"},"nativeSrc":"28085:16:40","nodeType":"YulFunctionCall","src":"28085:16:40"},"variables":[{"name":"_1","nativeSrc":"28079:2:40","nodeType":"YulTypedName","src":"28079:2:40","type":""}]},{"expression":{"arguments":[{"name":"_1","nativeSrc":"28117:2:40","nodeType":"YulIdentifier","src":"28117:2:40"},{"kind":"number","nativeSrc":"28121:1:40","nodeType":"YulLiteral","src":"28121:1:40","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"28110:6:40","nodeType":"YulIdentifier","src":"28110:6:40"},"nativeSrc":"28110:13:40","nodeType":"YulFunctionCall","src":"28110:13:40"},"nativeSrc":"28110:13:40","nodeType":"YulExpressionStatement","src":"28110:13:40"},{"nativeSrc":"28132:9:40","nodeType":"YulAssignment","src":"28132:9:40","value":{"name":"_1","nativeSrc":"28139:2:40","nodeType":"YulIdentifier","src":"28139:2:40"},"variableNames":[{"name":"end","nativeSrc":"28132:3:40","nodeType":"YulIdentifier","src":"28132:3:40"}]}]},"name":"abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"27876:271:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"27991:3:40","nodeType":"YulTypedName","src":"27991:3:40","type":""},{"name":"value1","nativeSrc":"27996:6:40","nodeType":"YulTypedName","src":"27996:6:40","type":""},{"name":"value0","nativeSrc":"28004:6:40","nodeType":"YulTypedName","src":"28004:6:40","type":""}],"returnVariables":[{"name":"end","nativeSrc":"28015:3:40","nodeType":"YulTypedName","src":"28015:3:40","type":""}],"src":"27876:271:40"},{"body":{"nativeSrc":"28546:599:40","nodeType":"YulBlock","src":"28546:599:40","statements":[{"nativeSrc":"28556:27:40","nodeType":"YulAssignment","src":"28556:27:40","value":{"arguments":[{"name":"headStart","nativeSrc":"28568:9:40","nodeType":"YulIdentifier","src":"28568:9:40"},{"kind":"number","nativeSrc":"28579:3:40","nodeType":"YulLiteral","src":"28579:3:40","type":"","value":"352"}],"functionName":{"name":"add","nativeSrc":"28564:3:40","nodeType":"YulIdentifier","src":"28564:3:40"},"nativeSrc":"28564:19:40","nodeType":"YulFunctionCall","src":"28564:19:40"},"variableNames":[{"name":"tail","nativeSrc":"28556:4:40","nodeType":"YulIdentifier","src":"28556:4:40"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"28599:9:40","nodeType":"YulIdentifier","src":"28599:9:40"},{"name":"value0","nativeSrc":"28610:6:40","nodeType":"YulIdentifier","src":"28610:6:40"}],"functionName":{"name":"mstore","nativeSrc":"28592:6:40","nodeType":"YulIdentifier","src":"28592:6:40"},"nativeSrc":"28592:25:40","nodeType":"YulFunctionCall","src":"28592:25:40"},"nativeSrc":"28592:25:40","nodeType":"YulExpressionStatement","src":"28592:25:40"},{"nativeSrc":"28626:29:40","nodeType":"YulVariableDeclaration","src":"28626:29:40","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"28644:3:40","nodeType":"YulLiteral","src":"28644:3:40","type":"","value":"160"},{"kind":"number","nativeSrc":"28649:1:40","nodeType":"YulLiteral","src":"28649:1:40","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"28640:3:40","nodeType":"YulIdentifier","src":"28640:3:40"},"nativeSrc":"28640:11:40","nodeType":"YulFunctionCall","src":"28640:11:40"},{"kind":"number","nativeSrc":"28653:1:40","nodeType":"YulLiteral","src":"28653:1:40","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"28636:3:40","nodeType":"YulIdentifier","src":"28636:3:40"},"nativeSrc":"28636:19:40","nodeType":"YulFunctionCall","src":"28636:19:40"},"variables":[{"name":"_1","nativeSrc":"28630:2:40","nodeType":"YulTypedName","src":"28630:2:40","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"28675:9:40","nodeType":"YulIdentifier","src":"28675:9:40"},{"kind":"number","nativeSrc":"28686:2:40","nodeType":"YulLiteral","src":"28686:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"28671:3:40","nodeType":"YulIdentifier","src":"28671:3:40"},"nativeSrc":"28671:18:40","nodeType":"YulFunctionCall","src":"28671:18:40"},{"arguments":[{"name":"value1","nativeSrc":"28695:6:40","nodeType":"YulIdentifier","src":"28695:6:40"},{"name":"_1","nativeSrc":"28703:2:40","nodeType":"YulIdentifier","src":"28703:2:40"}],"functionName":{"name":"and","nativeSrc":"28691:3:40","nodeType":"YulIdentifier","src":"28691:3:40"},"nativeSrc":"28691:15:40","nodeType":"YulFunctionCall","src":"28691:15:40"}],"functionName":{"name":"mstore","nativeSrc":"28664:6:40","nodeType":"YulIdentifier","src":"28664:6:40"},"nativeSrc":"28664:43:40","nodeType":"YulFunctionCall","src":"28664:43:40"},"nativeSrc":"28664:43:40","nodeType":"YulExpressionStatement","src":"28664:43:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"28727:9:40","nodeType":"YulIdentifier","src":"28727:9:40"},{"kind":"number","nativeSrc":"28738:2:40","nodeType":"YulLiteral","src":"28738:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"28723:3:40","nodeType":"YulIdentifier","src":"28723:3:40"},"nativeSrc":"28723:18:40","nodeType":"YulFunctionCall","src":"28723:18:40"},{"name":"value2","nativeSrc":"28743:6:40","nodeType":"YulIdentifier","src":"28743:6:40"}],"functionName":{"name":"mstore","nativeSrc":"28716:6:40","nodeType":"YulIdentifier","src":"28716:6:40"},"nativeSrc":"28716:34:40","nodeType":"YulFunctionCall","src":"28716:34:40"},"nativeSrc":"28716:34:40","nodeType":"YulExpressionStatement","src":"28716:34:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"28770:9:40","nodeType":"YulIdentifier","src":"28770:9:40"},{"kind":"number","nativeSrc":"28781:2:40","nodeType":"YulLiteral","src":"28781:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"28766:3:40","nodeType":"YulIdentifier","src":"28766:3:40"},"nativeSrc":"28766:18:40","nodeType":"YulFunctionCall","src":"28766:18:40"},{"name":"value3","nativeSrc":"28786:6:40","nodeType":"YulIdentifier","src":"28786:6:40"}],"functionName":{"name":"mstore","nativeSrc":"28759:6:40","nodeType":"YulIdentifier","src":"28759:6:40"},"nativeSrc":"28759:34:40","nodeType":"YulFunctionCall","src":"28759:34:40"},"nativeSrc":"28759:34:40","nodeType":"YulExpressionStatement","src":"28759:34:40"},{"expression":{"arguments":[{"name":"value4","nativeSrc":"28828:6:40","nodeType":"YulIdentifier","src":"28828:6:40"},{"arguments":[{"name":"headStart","nativeSrc":"28840:9:40","nodeType":"YulIdentifier","src":"28840:9:40"},{"kind":"number","nativeSrc":"28851:3:40","nodeType":"YulLiteral","src":"28851:3:40","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"28836:3:40","nodeType":"YulIdentifier","src":"28836:3:40"},"nativeSrc":"28836:19:40","nodeType":"YulFunctionCall","src":"28836:19:40"}],"functionName":{"name":"abi_encode_enum_Operation","nativeSrc":"28802:25:40","nodeType":"YulIdentifier","src":"28802:25:40"},"nativeSrc":"28802:54:40","nodeType":"YulFunctionCall","src":"28802:54:40"},"nativeSrc":"28802:54:40","nodeType":"YulExpressionStatement","src":"28802:54:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"28876:9:40","nodeType":"YulIdentifier","src":"28876:9:40"},{"kind":"number","nativeSrc":"28887:3:40","nodeType":"YulLiteral","src":"28887:3:40","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"28872:3:40","nodeType":"YulIdentifier","src":"28872:3:40"},"nativeSrc":"28872:19:40","nodeType":"YulFunctionCall","src":"28872:19:40"},{"name":"value5","nativeSrc":"28893:6:40","nodeType":"YulIdentifier","src":"28893:6:40"}],"functionName":{"name":"mstore","nativeSrc":"28865:6:40","nodeType":"YulIdentifier","src":"28865:6:40"},"nativeSrc":"28865:35:40","nodeType":"YulFunctionCall","src":"28865:35:40"},"nativeSrc":"28865:35:40","nodeType":"YulExpressionStatement","src":"28865:35:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"28920:9:40","nodeType":"YulIdentifier","src":"28920:9:40"},{"kind":"number","nativeSrc":"28931:3:40","nodeType":"YulLiteral","src":"28931:3:40","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"28916:3:40","nodeType":"YulIdentifier","src":"28916:3:40"},"nativeSrc":"28916:19:40","nodeType":"YulFunctionCall","src":"28916:19:40"},{"name":"value6","nativeSrc":"28937:6:40","nodeType":"YulIdentifier","src":"28937:6:40"}],"functionName":{"name":"mstore","nativeSrc":"28909:6:40","nodeType":"YulIdentifier","src":"28909:6:40"},"nativeSrc":"28909:35:40","nodeType":"YulFunctionCall","src":"28909:35:40"},"nativeSrc":"28909:35:40","nodeType":"YulExpressionStatement","src":"28909:35:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"28964:9:40","nodeType":"YulIdentifier","src":"28964:9:40"},{"kind":"number","nativeSrc":"28975:3:40","nodeType":"YulLiteral","src":"28975:3:40","type":"","value":"224"}],"functionName":{"name":"add","nativeSrc":"28960:3:40","nodeType":"YulIdentifier","src":"28960:3:40"},"nativeSrc":"28960:19:40","nodeType":"YulFunctionCall","src":"28960:19:40"},{"name":"value7","nativeSrc":"28981:6:40","nodeType":"YulIdentifier","src":"28981:6:40"}],"functionName":{"name":"mstore","nativeSrc":"28953:6:40","nodeType":"YulIdentifier","src":"28953:6:40"},"nativeSrc":"28953:35:40","nodeType":"YulFunctionCall","src":"28953:35:40"},"nativeSrc":"28953:35:40","nodeType":"YulExpressionStatement","src":"28953:35:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"29008:9:40","nodeType":"YulIdentifier","src":"29008:9:40"},{"kind":"number","nativeSrc":"29019:3:40","nodeType":"YulLiteral","src":"29019:3:40","type":"","value":"256"}],"functionName":{"name":"add","nativeSrc":"29004:3:40","nodeType":"YulIdentifier","src":"29004:3:40"},"nativeSrc":"29004:19:40","nodeType":"YulFunctionCall","src":"29004:19:40"},{"arguments":[{"name":"value8","nativeSrc":"29029:6:40","nodeType":"YulIdentifier","src":"29029:6:40"},{"name":"_1","nativeSrc":"29037:2:40","nodeType":"YulIdentifier","src":"29037:2:40"}],"functionName":{"name":"and","nativeSrc":"29025:3:40","nodeType":"YulIdentifier","src":"29025:3:40"},"nativeSrc":"29025:15:40","nodeType":"YulFunctionCall","src":"29025:15:40"}],"functionName":{"name":"mstore","nativeSrc":"28997:6:40","nodeType":"YulIdentifier","src":"28997:6:40"},"nativeSrc":"28997:44:40","nodeType":"YulFunctionCall","src":"28997:44:40"},"nativeSrc":"28997:44:40","nodeType":"YulExpressionStatement","src":"28997:44:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"29061:9:40","nodeType":"YulIdentifier","src":"29061:9:40"},{"kind":"number","nativeSrc":"29072:3:40","nodeType":"YulLiteral","src":"29072:3:40","type":"","value":"288"}],"functionName":{"name":"add","nativeSrc":"29057:3:40","nodeType":"YulIdentifier","src":"29057:3:40"},"nativeSrc":"29057:19:40","nodeType":"YulFunctionCall","src":"29057:19:40"},{"arguments":[{"name":"value9","nativeSrc":"29082:6:40","nodeType":"YulIdentifier","src":"29082:6:40"},{"name":"_1","nativeSrc":"29090:2:40","nodeType":"YulIdentifier","src":"29090:2:40"}],"functionName":{"name":"and","nativeSrc":"29078:3:40","nodeType":"YulIdentifier","src":"29078:3:40"},"nativeSrc":"29078:15:40","nodeType":"YulFunctionCall","src":"29078:15:40"}],"functionName":{"name":"mstore","nativeSrc":"29050:6:40","nodeType":"YulIdentifier","src":"29050:6:40"},"nativeSrc":"29050:44:40","nodeType":"YulFunctionCall","src":"29050:44:40"},"nativeSrc":"29050:44:40","nodeType":"YulExpressionStatement","src":"29050:44:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"29114:9:40","nodeType":"YulIdentifier","src":"29114:9:40"},{"kind":"number","nativeSrc":"29125:3:40","nodeType":"YulLiteral","src":"29125:3:40","type":"","value":"320"}],"functionName":{"name":"add","nativeSrc":"29110:3:40","nodeType":"YulIdentifier","src":"29110:3:40"},"nativeSrc":"29110:19:40","nodeType":"YulFunctionCall","src":"29110:19:40"},{"name":"value10","nativeSrc":"29131:7:40","nodeType":"YulIdentifier","src":"29131:7:40"}],"functionName":{"name":"mstore","nativeSrc":"29103:6:40","nodeType":"YulIdentifier","src":"29103:6:40"},"nativeSrc":"29103:36:40","nodeType":"YulFunctionCall","src":"29103:36:40"},"nativeSrc":"29103:36:40","nodeType":"YulExpressionStatement","src":"29103:36:40"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_uint256_t_bytes32_t_enum$_Operation_$3022_t_uint256_t_uint256_t_uint256_t_address_t_address_t_uint256__to_t_bytes32_t_address_t_uint256_t_bytes32_t_uint8_t_uint256_t_uint256_t_uint256_t_address_t_address_t_uint256__fromStack_reversed","nativeSrc":"28152:993:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"28434:9:40","nodeType":"YulTypedName","src":"28434:9:40","type":""},{"name":"value10","nativeSrc":"28445:7:40","nodeType":"YulTypedName","src":"28445:7:40","type":""},{"name":"value9","nativeSrc":"28454:6:40","nodeType":"YulTypedName","src":"28454:6:40","type":""},{"name":"value8","nativeSrc":"28462:6:40","nodeType":"YulTypedName","src":"28462:6:40","type":""},{"name":"value7","nativeSrc":"28470:6:40","nodeType":"YulTypedName","src":"28470:6:40","type":""},{"name":"value6","nativeSrc":"28478:6:40","nodeType":"YulTypedName","src":"28478:6:40","type":""},{"name":"value5","nativeSrc":"28486:6:40","nodeType":"YulTypedName","src":"28486:6:40","type":""},{"name":"value4","nativeSrc":"28494:6:40","nodeType":"YulTypedName","src":"28494:6:40","type":""},{"name":"value3","nativeSrc":"28502:6:40","nodeType":"YulTypedName","src":"28502:6:40","type":""},{"name":"value2","nativeSrc":"28510:6:40","nodeType":"YulTypedName","src":"28510:6:40","type":""},{"name":"value1","nativeSrc":"28518:6:40","nodeType":"YulTypedName","src":"28518:6:40","type":""},{"name":"value0","nativeSrc":"28526:6:40","nodeType":"YulTypedName","src":"28526:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"28537:4:40","nodeType":"YulTypedName","src":"28537:4:40","type":""}],"src":"28152:993:40"},{"body":{"nativeSrc":"29349:222:40","nodeType":"YulBlock","src":"29349:222:40","statements":[{"nativeSrc":"29359:23:40","nodeType":"YulVariableDeclaration","src":"29359:23:40","value":{"arguments":[{"kind":"number","nativeSrc":"29373:3:40","nodeType":"YulLiteral","src":"29373:3:40","type":"","value":"248"},{"kind":"number","nativeSrc":"29378:3:40","nodeType":"YulLiteral","src":"29378:3:40","type":"","value":"255"}],"functionName":{"name":"shl","nativeSrc":"29369:3:40","nodeType":"YulIdentifier","src":"29369:3:40"},"nativeSrc":"29369:13:40","nodeType":"YulFunctionCall","src":"29369:13:40"},"variables":[{"name":"_1","nativeSrc":"29363:2:40","nodeType":"YulTypedName","src":"29363:2:40","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"29398:3:40","nodeType":"YulIdentifier","src":"29398:3:40"},{"arguments":[{"name":"value0","nativeSrc":"29407:6:40","nodeType":"YulIdentifier","src":"29407:6:40"},{"name":"_1","nativeSrc":"29415:2:40","nodeType":"YulIdentifier","src":"29415:2:40"}],"functionName":{"name":"and","nativeSrc":"29403:3:40","nodeType":"YulIdentifier","src":"29403:3:40"},"nativeSrc":"29403:15:40","nodeType":"YulFunctionCall","src":"29403:15:40"}],"functionName":{"name":"mstore","nativeSrc":"29391:6:40","nodeType":"YulIdentifier","src":"29391:6:40"},"nativeSrc":"29391:28:40","nodeType":"YulFunctionCall","src":"29391:28:40"},"nativeSrc":"29391:28:40","nodeType":"YulExpressionStatement","src":"29391:28:40"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"29439:3:40","nodeType":"YulIdentifier","src":"29439:3:40"},{"kind":"number","nativeSrc":"29444:1:40","nodeType":"YulLiteral","src":"29444:1:40","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"29435:3:40","nodeType":"YulIdentifier","src":"29435:3:40"},"nativeSrc":"29435:11:40","nodeType":"YulFunctionCall","src":"29435:11:40"},{"arguments":[{"name":"value1","nativeSrc":"29452:6:40","nodeType":"YulIdentifier","src":"29452:6:40"},{"name":"_1","nativeSrc":"29460:2:40","nodeType":"YulIdentifier","src":"29460:2:40"}],"functionName":{"name":"and","nativeSrc":"29448:3:40","nodeType":"YulIdentifier","src":"29448:3:40"},"nativeSrc":"29448:15:40","nodeType":"YulFunctionCall","src":"29448:15:40"}],"functionName":{"name":"mstore","nativeSrc":"29428:6:40","nodeType":"YulIdentifier","src":"29428:6:40"},"nativeSrc":"29428:36:40","nodeType":"YulFunctionCall","src":"29428:36:40"},"nativeSrc":"29428:36:40","nodeType":"YulExpressionStatement","src":"29428:36:40"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"29484:3:40","nodeType":"YulIdentifier","src":"29484:3:40"},{"kind":"number","nativeSrc":"29489:1:40","nodeType":"YulLiteral","src":"29489:1:40","type":"","value":"2"}],"functionName":{"name":"add","nativeSrc":"29480:3:40","nodeType":"YulIdentifier","src":"29480:3:40"},"nativeSrc":"29480:11:40","nodeType":"YulFunctionCall","src":"29480:11:40"},{"name":"value2","nativeSrc":"29493:6:40","nodeType":"YulIdentifier","src":"29493:6:40"}],"functionName":{"name":"mstore","nativeSrc":"29473:6:40","nodeType":"YulIdentifier","src":"29473:6:40"},"nativeSrc":"29473:27:40","nodeType":"YulFunctionCall","src":"29473:27:40"},"nativeSrc":"29473:27:40","nodeType":"YulExpressionStatement","src":"29473:27:40"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"29520:3:40","nodeType":"YulIdentifier","src":"29520:3:40"},{"kind":"number","nativeSrc":"29525:2:40","nodeType":"YulLiteral","src":"29525:2:40","type":"","value":"34"}],"functionName":{"name":"add","nativeSrc":"29516:3:40","nodeType":"YulIdentifier","src":"29516:3:40"},"nativeSrc":"29516:12:40","nodeType":"YulFunctionCall","src":"29516:12:40"},{"name":"value3","nativeSrc":"29530:6:40","nodeType":"YulIdentifier","src":"29530:6:40"}],"functionName":{"name":"mstore","nativeSrc":"29509:6:40","nodeType":"YulIdentifier","src":"29509:6:40"},"nativeSrc":"29509:28:40","nodeType":"YulFunctionCall","src":"29509:28:40"},"nativeSrc":"29509:28:40","nodeType":"YulExpressionStatement","src":"29509:28:40"},{"nativeSrc":"29546:19:40","nodeType":"YulAssignment","src":"29546:19:40","value":{"arguments":[{"name":"pos","nativeSrc":"29557:3:40","nodeType":"YulIdentifier","src":"29557:3:40"},{"kind":"number","nativeSrc":"29562:2:40","nodeType":"YulLiteral","src":"29562:2:40","type":"","value":"66"}],"functionName":{"name":"add","nativeSrc":"29553:3:40","nodeType":"YulIdentifier","src":"29553:3:40"},"nativeSrc":"29553:12:40","nodeType":"YulFunctionCall","src":"29553:12:40"},"variableNames":[{"name":"end","nativeSrc":"29546:3:40","nodeType":"YulIdentifier","src":"29546:3:40"}]}]},"name":"abi_encode_tuple_packed_t_bytes1_t_bytes1_t_bytes32_t_bytes32__to_t_bytes1_t_bytes1_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed","nativeSrc":"29150:421:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"29301:3:40","nodeType":"YulTypedName","src":"29301:3:40","type":""},{"name":"value3","nativeSrc":"29306:6:40","nodeType":"YulTypedName","src":"29306:6:40","type":""},{"name":"value2","nativeSrc":"29314:6:40","nodeType":"YulTypedName","src":"29314:6:40","type":""},{"name":"value1","nativeSrc":"29322:6:40","nodeType":"YulTypedName","src":"29322:6:40","type":""},{"name":"value0","nativeSrc":"29330:6:40","nodeType":"YulTypedName","src":"29330:6:40","type":""}],"returnVariables":[{"name":"end","nativeSrc":"29341:3:40","nodeType":"YulTypedName","src":"29341:3:40","type":""}],"src":"29150:421:40"},{"body":{"nativeSrc":"29754:188:40","nodeType":"YulBlock","src":"29754:188:40","statements":[{"nativeSrc":"29764:26:40","nodeType":"YulAssignment","src":"29764:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"29776:9:40","nodeType":"YulIdentifier","src":"29776:9:40"},{"kind":"number","nativeSrc":"29787:2:40","nodeType":"YulLiteral","src":"29787:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"29772:3:40","nodeType":"YulIdentifier","src":"29772:3:40"},"nativeSrc":"29772:18:40","nodeType":"YulFunctionCall","src":"29772:18:40"},"variableNames":[{"name":"tail","nativeSrc":"29764:4:40","nodeType":"YulIdentifier","src":"29764:4:40"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"29806:9:40","nodeType":"YulIdentifier","src":"29806:9:40"},{"name":"value0","nativeSrc":"29817:6:40","nodeType":"YulIdentifier","src":"29817:6:40"}],"functionName":{"name":"mstore","nativeSrc":"29799:6:40","nodeType":"YulIdentifier","src":"29799:6:40"},"nativeSrc":"29799:25:40","nodeType":"YulFunctionCall","src":"29799:25:40"},"nativeSrc":"29799:25:40","nodeType":"YulExpressionStatement","src":"29799:25:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"29844:9:40","nodeType":"YulIdentifier","src":"29844:9:40"},{"kind":"number","nativeSrc":"29855:2:40","nodeType":"YulLiteral","src":"29855:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"29840:3:40","nodeType":"YulIdentifier","src":"29840:3:40"},"nativeSrc":"29840:18:40","nodeType":"YulFunctionCall","src":"29840:18:40"},{"name":"value1","nativeSrc":"29860:6:40","nodeType":"YulIdentifier","src":"29860:6:40"}],"functionName":{"name":"mstore","nativeSrc":"29833:6:40","nodeType":"YulIdentifier","src":"29833:6:40"},"nativeSrc":"29833:34:40","nodeType":"YulFunctionCall","src":"29833:34:40"},"nativeSrc":"29833:34:40","nodeType":"YulExpressionStatement","src":"29833:34:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"29887:9:40","nodeType":"YulIdentifier","src":"29887:9:40"},{"kind":"number","nativeSrc":"29898:2:40","nodeType":"YulLiteral","src":"29898:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"29883:3:40","nodeType":"YulIdentifier","src":"29883:3:40"},"nativeSrc":"29883:18:40","nodeType":"YulFunctionCall","src":"29883:18:40"},{"arguments":[{"name":"value2","nativeSrc":"29907:6:40","nodeType":"YulIdentifier","src":"29907:6:40"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"29923:3:40","nodeType":"YulLiteral","src":"29923:3:40","type":"","value":"160"},{"kind":"number","nativeSrc":"29928:1:40","nodeType":"YulLiteral","src":"29928:1:40","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"29919:3:40","nodeType":"YulIdentifier","src":"29919:3:40"},"nativeSrc":"29919:11:40","nodeType":"YulFunctionCall","src":"29919:11:40"},{"kind":"number","nativeSrc":"29932:1:40","nodeType":"YulLiteral","src":"29932:1:40","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"29915:3:40","nodeType":"YulIdentifier","src":"29915:3:40"},"nativeSrc":"29915:19:40","nodeType":"YulFunctionCall","src":"29915:19:40"}],"functionName":{"name":"and","nativeSrc":"29903:3:40","nodeType":"YulIdentifier","src":"29903:3:40"},"nativeSrc":"29903:32:40","nodeType":"YulFunctionCall","src":"29903:32:40"}],"functionName":{"name":"mstore","nativeSrc":"29876:6:40","nodeType":"YulIdentifier","src":"29876:6:40"},"nativeSrc":"29876:60:40","nodeType":"YulFunctionCall","src":"29876:60:40"},"nativeSrc":"29876:60:40","nodeType":"YulExpressionStatement","src":"29876:60:40"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256_t_contract$_Safe_$1853__to_t_bytes32_t_uint256_t_address_payable__fromStack_reversed","nativeSrc":"29576:366:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"29707:9:40","nodeType":"YulTypedName","src":"29707:9:40","type":""},{"name":"value2","nativeSrc":"29718:6:40","nodeType":"YulTypedName","src":"29718:6:40","type":""},{"name":"value1","nativeSrc":"29726:6:40","nodeType":"YulTypedName","src":"29726:6:40","type":""},{"name":"value0","nativeSrc":"29734:6:40","nodeType":"YulTypedName","src":"29734:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"29745:4:40","nodeType":"YulTypedName","src":"29745:4:40","type":""}],"src":"29576:366:40"},{"body":{"nativeSrc":"29994:89:40","nodeType":"YulBlock","src":"29994:89:40","statements":[{"body":{"nativeSrc":"30021:22:40","nodeType":"YulBlock","src":"30021:22:40","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"30023:16:40","nodeType":"YulIdentifier","src":"30023:16:40"},"nativeSrc":"30023:18:40","nodeType":"YulFunctionCall","src":"30023:18:40"},"nativeSrc":"30023:18:40","nodeType":"YulExpressionStatement","src":"30023:18:40"}]},"condition":{"arguments":[{"name":"value","nativeSrc":"30014:5:40","nodeType":"YulIdentifier","src":"30014:5:40"}],"functionName":{"name":"iszero","nativeSrc":"30007:6:40","nodeType":"YulIdentifier","src":"30007:6:40"},"nativeSrc":"30007:13:40","nodeType":"YulFunctionCall","src":"30007:13:40"},"nativeSrc":"30004:39:40","nodeType":"YulIf","src":"30004:39:40"},{"nativeSrc":"30052:25:40","nodeType":"YulAssignment","src":"30052:25:40","value":{"arguments":[{"name":"value","nativeSrc":"30063:5:40","nodeType":"YulIdentifier","src":"30063:5:40"},{"arguments":[{"kind":"number","nativeSrc":"30074:1:40","nodeType":"YulLiteral","src":"30074:1:40","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"30070:3:40","nodeType":"YulIdentifier","src":"30070:3:40"},"nativeSrc":"30070:6:40","nodeType":"YulFunctionCall","src":"30070:6:40"}],"functionName":{"name":"add","nativeSrc":"30059:3:40","nodeType":"YulIdentifier","src":"30059:3:40"},"nativeSrc":"30059:18:40","nodeType":"YulFunctionCall","src":"30059:18:40"},"variableNames":[{"name":"ret","nativeSrc":"30052:3:40","nodeType":"YulIdentifier","src":"30052:3:40"}]}]},"name":"decrement_t_uint256","nativeSrc":"29947:136:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"29976:5:40","nodeType":"YulTypedName","src":"29976:5:40","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"29986:3:40","nodeType":"YulTypedName","src":"29986:3:40","type":""}],"src":"29947:136:40"},{"body":{"nativeSrc":"30262:154:40","nodeType":"YulBlock","src":"30262:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"30279:9:40","nodeType":"YulIdentifier","src":"30279:9:40"},{"kind":"number","nativeSrc":"30290:2:40","nodeType":"YulLiteral","src":"30290:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"30272:6:40","nodeType":"YulIdentifier","src":"30272:6:40"},"nativeSrc":"30272:21:40","nodeType":"YulFunctionCall","src":"30272:21:40"},"nativeSrc":"30272:21:40","nodeType":"YulExpressionStatement","src":"30272:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"30313:9:40","nodeType":"YulIdentifier","src":"30313:9:40"},{"kind":"number","nativeSrc":"30324:2:40","nodeType":"YulLiteral","src":"30324:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"30309:3:40","nodeType":"YulIdentifier","src":"30309:3:40"},"nativeSrc":"30309:18:40","nodeType":"YulFunctionCall","src":"30309:18:40"},{"kind":"number","nativeSrc":"30329:1:40","nodeType":"YulLiteral","src":"30329:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"30302:6:40","nodeType":"YulIdentifier","src":"30302:6:40"},"nativeSrc":"30302:29:40","nodeType":"YulFunctionCall","src":"30302:29:40"},"nativeSrc":"30302:29:40","nodeType":"YulExpressionStatement","src":"30302:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"30351:9:40","nodeType":"YulIdentifier","src":"30351:9:40"},{"kind":"number","nativeSrc":"30362:2:40","nodeType":"YulLiteral","src":"30362:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"30347:3:40","nodeType":"YulIdentifier","src":"30347:3:40"},"nativeSrc":"30347:18:40","nodeType":"YulFunctionCall","src":"30347:18:40"},{"hexValue":"4753303331","kind":"string","nativeSrc":"30367:7:40","nodeType":"YulLiteral","src":"30367:7:40","type":"","value":"GS031"}],"functionName":{"name":"mstore","nativeSrc":"30340:6:40","nodeType":"YulIdentifier","src":"30340:6:40"},"nativeSrc":"30340:35:40","nodeType":"YulFunctionCall","src":"30340:35:40"},"nativeSrc":"30340:35:40","nodeType":"YulExpressionStatement","src":"30340:35:40"},{"nativeSrc":"30384:26:40","nodeType":"YulAssignment","src":"30384:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"30396:9:40","nodeType":"YulIdentifier","src":"30396:9:40"},{"kind":"number","nativeSrc":"30407:2:40","nodeType":"YulLiteral","src":"30407:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"30392:3:40","nodeType":"YulIdentifier","src":"30392:3:40"},"nativeSrc":"30392:18:40","nodeType":"YulFunctionCall","src":"30392:18:40"},"variableNames":[{"name":"tail","nativeSrc":"30384:4:40","nodeType":"YulIdentifier","src":"30384:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_b7248be3e8887f14d79f63d350787adcdb5e12b47898ebd6ef2aacf660fc9f17__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"30088:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"30239:9:40","nodeType":"YulTypedName","src":"30239:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"30253:4:40","nodeType":"YulTypedName","src":"30253:4:40","type":""}],"src":"30088:328:40"},{"body":{"nativeSrc":"30595:154:40","nodeType":"YulBlock","src":"30595:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"30612:9:40","nodeType":"YulIdentifier","src":"30612:9:40"},{"kind":"number","nativeSrc":"30623:2:40","nodeType":"YulLiteral","src":"30623:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"30605:6:40","nodeType":"YulIdentifier","src":"30605:6:40"},"nativeSrc":"30605:21:40","nodeType":"YulFunctionCall","src":"30605:21:40"},"nativeSrc":"30605:21:40","nodeType":"YulExpressionStatement","src":"30605:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"30646:9:40","nodeType":"YulIdentifier","src":"30646:9:40"},{"kind":"number","nativeSrc":"30657:2:40","nodeType":"YulLiteral","src":"30657:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"30642:3:40","nodeType":"YulIdentifier","src":"30642:3:40"},"nativeSrc":"30642:18:40","nodeType":"YulFunctionCall","src":"30642:18:40"},{"kind":"number","nativeSrc":"30662:1:40","nodeType":"YulLiteral","src":"30662:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"30635:6:40","nodeType":"YulIdentifier","src":"30635:6:40"},"nativeSrc":"30635:29:40","nodeType":"YulFunctionCall","src":"30635:29:40"},"nativeSrc":"30635:29:40","nodeType":"YulExpressionStatement","src":"30635:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"30684:9:40","nodeType":"YulIdentifier","src":"30684:9:40"},{"kind":"number","nativeSrc":"30695:2:40","nodeType":"YulLiteral","src":"30695:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"30680:3:40","nodeType":"YulIdentifier","src":"30680:3:40"},"nativeSrc":"30680:18:40","nodeType":"YulFunctionCall","src":"30680:18:40"},{"hexValue":"4753303131","kind":"string","nativeSrc":"30700:7:40","nodeType":"YulLiteral","src":"30700:7:40","type":"","value":"GS011"}],"functionName":{"name":"mstore","nativeSrc":"30673:6:40","nodeType":"YulIdentifier","src":"30673:6:40"},"nativeSrc":"30673:35:40","nodeType":"YulFunctionCall","src":"30673:35:40"},"nativeSrc":"30673:35:40","nodeType":"YulExpressionStatement","src":"30673:35:40"},{"nativeSrc":"30717:26:40","nodeType":"YulAssignment","src":"30717:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"30729:9:40","nodeType":"YulIdentifier","src":"30729:9:40"},{"kind":"number","nativeSrc":"30740:2:40","nodeType":"YulLiteral","src":"30740:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"30725:3:40","nodeType":"YulIdentifier","src":"30725:3:40"},"nativeSrc":"30725:18:40","nodeType":"YulFunctionCall","src":"30725:18:40"},"variableNames":[{"name":"tail","nativeSrc":"30717:4:40","nodeType":"YulIdentifier","src":"30717:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_4353e9bcd8ea99b4d56990ac4b8777f1ab67cada8356790f30e482f2408a44b0__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"30421:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"30572:9:40","nodeType":"YulTypedName","src":"30572:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"30586:4:40","nodeType":"YulTypedName","src":"30586:4:40","type":""}],"src":"30421:328:40"},{"body":{"nativeSrc":"30928:154:40","nodeType":"YulBlock","src":"30928:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"30945:9:40","nodeType":"YulIdentifier","src":"30945:9:40"},{"kind":"number","nativeSrc":"30956:2:40","nodeType":"YulLiteral","src":"30956:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"30938:6:40","nodeType":"YulIdentifier","src":"30938:6:40"},"nativeSrc":"30938:21:40","nodeType":"YulFunctionCall","src":"30938:21:40"},"nativeSrc":"30938:21:40","nodeType":"YulExpressionStatement","src":"30938:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"30979:9:40","nodeType":"YulIdentifier","src":"30979:9:40"},{"kind":"number","nativeSrc":"30990:2:40","nodeType":"YulLiteral","src":"30990:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"30975:3:40","nodeType":"YulIdentifier","src":"30975:3:40"},"nativeSrc":"30975:18:40","nodeType":"YulFunctionCall","src":"30975:18:40"},{"kind":"number","nativeSrc":"30995:1:40","nodeType":"YulLiteral","src":"30995:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"30968:6:40","nodeType":"YulIdentifier","src":"30968:6:40"},"nativeSrc":"30968:29:40","nodeType":"YulFunctionCall","src":"30968:29:40"},"nativeSrc":"30968:29:40","nodeType":"YulExpressionStatement","src":"30968:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"31017:9:40","nodeType":"YulIdentifier","src":"31017:9:40"},{"kind":"number","nativeSrc":"31028:2:40","nodeType":"YulLiteral","src":"31028:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"31013:3:40","nodeType":"YulIdentifier","src":"31013:3:40"},"nativeSrc":"31013:18:40","nodeType":"YulFunctionCall","src":"31013:18:40"},{"hexValue":"4753303132","kind":"string","nativeSrc":"31033:7:40","nodeType":"YulLiteral","src":"31033:7:40","type":"","value":"GS012"}],"functionName":{"name":"mstore","nativeSrc":"31006:6:40","nodeType":"YulIdentifier","src":"31006:6:40"},"nativeSrc":"31006:35:40","nodeType":"YulFunctionCall","src":"31006:35:40"},"nativeSrc":"31006:35:40","nodeType":"YulExpressionStatement","src":"31006:35:40"},{"nativeSrc":"31050:26:40","nodeType":"YulAssignment","src":"31050:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"31062:9:40","nodeType":"YulIdentifier","src":"31062:9:40"},{"kind":"number","nativeSrc":"31073:2:40","nodeType":"YulLiteral","src":"31073:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"31058:3:40","nodeType":"YulIdentifier","src":"31058:3:40"},"nativeSrc":"31058:18:40","nodeType":"YulFunctionCall","src":"31058:18:40"},"variableNames":[{"name":"tail","nativeSrc":"31050:4:40","nodeType":"YulIdentifier","src":"31050:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_74edef16877c9a34a97f281dbea2805f9198008e7df330ab6416449a66143b07__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"30754:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"30905:9:40","nodeType":"YulTypedName","src":"30905:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"30919:4:40","nodeType":"YulTypedName","src":"30919:4:40","type":""}],"src":"30754:328:40"},{"body":{"nativeSrc":"31261:154:40","nodeType":"YulBlock","src":"31261:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"31278:9:40","nodeType":"YulIdentifier","src":"31278:9:40"},{"kind":"number","nativeSrc":"31289:2:40","nodeType":"YulLiteral","src":"31289:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"31271:6:40","nodeType":"YulIdentifier","src":"31271:6:40"},"nativeSrc":"31271:21:40","nodeType":"YulFunctionCall","src":"31271:21:40"},"nativeSrc":"31271:21:40","nodeType":"YulExpressionStatement","src":"31271:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"31312:9:40","nodeType":"YulIdentifier","src":"31312:9:40"},{"kind":"number","nativeSrc":"31323:2:40","nodeType":"YulLiteral","src":"31323:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"31308:3:40","nodeType":"YulIdentifier","src":"31308:3:40"},"nativeSrc":"31308:18:40","nodeType":"YulFunctionCall","src":"31308:18:40"},{"kind":"number","nativeSrc":"31328:1:40","nodeType":"YulLiteral","src":"31328:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"31301:6:40","nodeType":"YulIdentifier","src":"31301:6:40"},"nativeSrc":"31301:29:40","nodeType":"YulFunctionCall","src":"31301:29:40"},"nativeSrc":"31301:29:40","nodeType":"YulExpressionStatement","src":"31301:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"31350:9:40","nodeType":"YulIdentifier","src":"31350:9:40"},{"kind":"number","nativeSrc":"31361:2:40","nodeType":"YulLiteral","src":"31361:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"31346:3:40","nodeType":"YulIdentifier","src":"31346:3:40"},"nativeSrc":"31346:18:40","nodeType":"YulFunctionCall","src":"31346:18:40"},{"hexValue":"4753323030","kind":"string","nativeSrc":"31366:7:40","nodeType":"YulLiteral","src":"31366:7:40","type":"","value":"GS200"}],"functionName":{"name":"mstore","nativeSrc":"31339:6:40","nodeType":"YulIdentifier","src":"31339:6:40"},"nativeSrc":"31339:35:40","nodeType":"YulFunctionCall","src":"31339:35:40"},"nativeSrc":"31339:35:40","nodeType":"YulExpressionStatement","src":"31339:35:40"},{"nativeSrc":"31383:26:40","nodeType":"YulAssignment","src":"31383:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"31395:9:40","nodeType":"YulIdentifier","src":"31395:9:40"},{"kind":"number","nativeSrc":"31406:2:40","nodeType":"YulLiteral","src":"31406:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"31391:3:40","nodeType":"YulIdentifier","src":"31391:3:40"},"nativeSrc":"31391:18:40","nodeType":"YulFunctionCall","src":"31391:18:40"},"variableNames":[{"name":"tail","nativeSrc":"31383:4:40","nodeType":"YulIdentifier","src":"31383:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_3a328c389014707497c45ecba7527a678d30fabfd6868fe8bade352062f7774b__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"31087:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"31238:9:40","nodeType":"YulTypedName","src":"31238:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"31252:4:40","nodeType":"YulTypedName","src":"31252:4:40","type":""}],"src":"31087:328:40"},{"body":{"nativeSrc":"31594:154:40","nodeType":"YulBlock","src":"31594:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"31611:9:40","nodeType":"YulIdentifier","src":"31611:9:40"},{"kind":"number","nativeSrc":"31622:2:40","nodeType":"YulLiteral","src":"31622:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"31604:6:40","nodeType":"YulIdentifier","src":"31604:6:40"},"nativeSrc":"31604:21:40","nodeType":"YulFunctionCall","src":"31604:21:40"},"nativeSrc":"31604:21:40","nodeType":"YulExpressionStatement","src":"31604:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"31645:9:40","nodeType":"YulIdentifier","src":"31645:9:40"},{"kind":"number","nativeSrc":"31656:2:40","nodeType":"YulLiteral","src":"31656:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"31641:3:40","nodeType":"YulIdentifier","src":"31641:3:40"},"nativeSrc":"31641:18:40","nodeType":"YulFunctionCall","src":"31641:18:40"},{"kind":"number","nativeSrc":"31661:1:40","nodeType":"YulLiteral","src":"31661:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"31634:6:40","nodeType":"YulIdentifier","src":"31634:6:40"},"nativeSrc":"31634:29:40","nodeType":"YulFunctionCall","src":"31634:29:40"},"nativeSrc":"31634:29:40","nodeType":"YulExpressionStatement","src":"31634:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"31683:9:40","nodeType":"YulIdentifier","src":"31683:9:40"},{"kind":"number","nativeSrc":"31694:2:40","nodeType":"YulLiteral","src":"31694:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"31679:3:40","nodeType":"YulIdentifier","src":"31679:3:40"},"nativeSrc":"31679:18:40","nodeType":"YulFunctionCall","src":"31679:18:40"},{"hexValue":"4753343030","kind":"string","nativeSrc":"31699:7:40","nodeType":"YulLiteral","src":"31699:7:40","type":"","value":"GS400"}],"functionName":{"name":"mstore","nativeSrc":"31672:6:40","nodeType":"YulIdentifier","src":"31672:6:40"},"nativeSrc":"31672:35:40","nodeType":"YulFunctionCall","src":"31672:35:40"},"nativeSrc":"31672:35:40","nodeType":"YulExpressionStatement","src":"31672:35:40"},{"nativeSrc":"31716:26:40","nodeType":"YulAssignment","src":"31716:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"31728:9:40","nodeType":"YulIdentifier","src":"31728:9:40"},{"kind":"number","nativeSrc":"31739:2:40","nodeType":"YulLiteral","src":"31739:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"31724:3:40","nodeType":"YulIdentifier","src":"31724:3:40"},"nativeSrc":"31724:18:40","nodeType":"YulFunctionCall","src":"31724:18:40"},"variableNames":[{"name":"tail","nativeSrc":"31716:4:40","nodeType":"YulIdentifier","src":"31716:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_f31aea2d758c1bc976ea4b6db8005af34a1f6d8fd0cba0d31e0228d78d6a5ae2__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"31420:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"31571:9:40","nodeType":"YulTypedName","src":"31571:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"31585:4:40","nodeType":"YulTypedName","src":"31585:4:40","type":""}],"src":"31420:328:40"},{"body":{"nativeSrc":"31927:154:40","nodeType":"YulBlock","src":"31927:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"31944:9:40","nodeType":"YulIdentifier","src":"31944:9:40"},{"kind":"number","nativeSrc":"31955:2:40","nodeType":"YulLiteral","src":"31955:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"31937:6:40","nodeType":"YulIdentifier","src":"31937:6:40"},"nativeSrc":"31937:21:40","nodeType":"YulFunctionCall","src":"31937:21:40"},"nativeSrc":"31937:21:40","nodeType":"YulExpressionStatement","src":"31937:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"31978:9:40","nodeType":"YulIdentifier","src":"31978:9:40"},{"kind":"number","nativeSrc":"31989:2:40","nodeType":"YulLiteral","src":"31989:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"31974:3:40","nodeType":"YulIdentifier","src":"31974:3:40"},"nativeSrc":"31974:18:40","nodeType":"YulFunctionCall","src":"31974:18:40"},{"kind":"number","nativeSrc":"31994:1:40","nodeType":"YulLiteral","src":"31994:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"31967:6:40","nodeType":"YulIdentifier","src":"31967:6:40"},"nativeSrc":"31967:29:40","nodeType":"YulFunctionCall","src":"31967:29:40"},"nativeSrc":"31967:29:40","nodeType":"YulExpressionStatement","src":"31967:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"32016:9:40","nodeType":"YulIdentifier","src":"32016:9:40"},{"kind":"number","nativeSrc":"32027:2:40","nodeType":"YulLiteral","src":"32027:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"32012:3:40","nodeType":"YulIdentifier","src":"32012:3:40"},"nativeSrc":"32012:18:40","nodeType":"YulFunctionCall","src":"32012:18:40"},{"hexValue":"4753313030","kind":"string","nativeSrc":"32032:7:40","nodeType":"YulLiteral","src":"32032:7:40","type":"","value":"GS100"}],"functionName":{"name":"mstore","nativeSrc":"32005:6:40","nodeType":"YulIdentifier","src":"32005:6:40"},"nativeSrc":"32005:35:40","nodeType":"YulFunctionCall","src":"32005:35:40"},"nativeSrc":"32005:35:40","nodeType":"YulExpressionStatement","src":"32005:35:40"},{"nativeSrc":"32049:26:40","nodeType":"YulAssignment","src":"32049:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"32061:9:40","nodeType":"YulIdentifier","src":"32061:9:40"},{"kind":"number","nativeSrc":"32072:2:40","nodeType":"YulLiteral","src":"32072:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"32057:3:40","nodeType":"YulIdentifier","src":"32057:3:40"},"nativeSrc":"32057:18:40","nodeType":"YulFunctionCall","src":"32057:18:40"},"variableNames":[{"name":"tail","nativeSrc":"32049:4:40","nodeType":"YulIdentifier","src":"32049:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_8c9c6f726a0896ef73f47c5bcc7192641db350a8b0b2e1f61e0f0c694ec59426__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"31753:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"31904:9:40","nodeType":"YulTypedName","src":"31904:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"31918:4:40","nodeType":"YulTypedName","src":"31918:4:40","type":""}],"src":"31753:328:40"},{"body":{"nativeSrc":"32260:154:40","nodeType":"YulBlock","src":"32260:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"32277:9:40","nodeType":"YulIdentifier","src":"32277:9:40"},{"kind":"number","nativeSrc":"32288:2:40","nodeType":"YulLiteral","src":"32288:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"32270:6:40","nodeType":"YulIdentifier","src":"32270:6:40"},"nativeSrc":"32270:21:40","nodeType":"YulFunctionCall","src":"32270:21:40"},"nativeSrc":"32270:21:40","nodeType":"YulExpressionStatement","src":"32270:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"32311:9:40","nodeType":"YulIdentifier","src":"32311:9:40"},{"kind":"number","nativeSrc":"32322:2:40","nodeType":"YulLiteral","src":"32322:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"32307:3:40","nodeType":"YulIdentifier","src":"32307:3:40"},"nativeSrc":"32307:18:40","nodeType":"YulFunctionCall","src":"32307:18:40"},{"kind":"number","nativeSrc":"32327:1:40","nodeType":"YulLiteral","src":"32327:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"32300:6:40","nodeType":"YulIdentifier","src":"32300:6:40"},"nativeSrc":"32300:29:40","nodeType":"YulFunctionCall","src":"32300:29:40"},"nativeSrc":"32300:29:40","nodeType":"YulExpressionStatement","src":"32300:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"32349:9:40","nodeType":"YulIdentifier","src":"32349:9:40"},{"kind":"number","nativeSrc":"32360:2:40","nodeType":"YulLiteral","src":"32360:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"32345:3:40","nodeType":"YulIdentifier","src":"32345:3:40"},"nativeSrc":"32345:18:40","nodeType":"YulFunctionCall","src":"32345:18:40"},{"hexValue":"4753303032","kind":"string","nativeSrc":"32365:7:40","nodeType":"YulLiteral","src":"32365:7:40","type":"","value":"GS002"}],"functionName":{"name":"mstore","nativeSrc":"32338:6:40","nodeType":"YulIdentifier","src":"32338:6:40"},"nativeSrc":"32338:35:40","nodeType":"YulFunctionCall","src":"32338:35:40"},"nativeSrc":"32338:35:40","nodeType":"YulExpressionStatement","src":"32338:35:40"},{"nativeSrc":"32382:26:40","nodeType":"YulAssignment","src":"32382:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"32394:9:40","nodeType":"YulIdentifier","src":"32394:9:40"},{"kind":"number","nativeSrc":"32405:2:40","nodeType":"YulLiteral","src":"32405:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"32390:3:40","nodeType":"YulIdentifier","src":"32390:3:40"},"nativeSrc":"32390:18:40","nodeType":"YulFunctionCall","src":"32390:18:40"},"variableNames":[{"name":"tail","nativeSrc":"32382:4:40","nodeType":"YulIdentifier","src":"32382:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_6815e8af672f0836acc6449b9d3a4cb88965a5b47ac95c5e5335f73ab586c8d0__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"32086:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"32237:9:40","nodeType":"YulTypedName","src":"32237:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"32251:4:40","nodeType":"YulTypedName","src":"32251:4:40","type":""}],"src":"32086:328:40"},{"body":{"nativeSrc":"32593:154:40","nodeType":"YulBlock","src":"32593:154:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"32610:9:40","nodeType":"YulIdentifier","src":"32610:9:40"},{"kind":"number","nativeSrc":"32621:2:40","nodeType":"YulLiteral","src":"32621:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"32603:6:40","nodeType":"YulIdentifier","src":"32603:6:40"},"nativeSrc":"32603:21:40","nodeType":"YulFunctionCall","src":"32603:21:40"},"nativeSrc":"32603:21:40","nodeType":"YulExpressionStatement","src":"32603:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"32644:9:40","nodeType":"YulIdentifier","src":"32644:9:40"},{"kind":"number","nativeSrc":"32655:2:40","nodeType":"YulLiteral","src":"32655:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"32640:3:40","nodeType":"YulIdentifier","src":"32640:3:40"},"nativeSrc":"32640:18:40","nodeType":"YulFunctionCall","src":"32640:18:40"},{"kind":"number","nativeSrc":"32660:1:40","nodeType":"YulLiteral","src":"32660:1:40","type":"","value":"5"}],"functionName":{"name":"mstore","nativeSrc":"32633:6:40","nodeType":"YulIdentifier","src":"32633:6:40"},"nativeSrc":"32633:29:40","nodeType":"YulFunctionCall","src":"32633:29:40"},"nativeSrc":"32633:29:40","nodeType":"YulExpressionStatement","src":"32633:29:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"32682:9:40","nodeType":"YulIdentifier","src":"32682:9:40"},{"kind":"number","nativeSrc":"32693:2:40","nodeType":"YulLiteral","src":"32693:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"32678:3:40","nodeType":"YulIdentifier","src":"32678:3:40"},"nativeSrc":"32678:18:40","nodeType":"YulFunctionCall","src":"32678:18:40"},{"hexValue":"4753303030","kind":"string","nativeSrc":"32698:7:40","nodeType":"YulLiteral","src":"32698:7:40","type":"","value":"GS000"}],"functionName":{"name":"mstore","nativeSrc":"32671:6:40","nodeType":"YulIdentifier","src":"32671:6:40"},"nativeSrc":"32671:35:40","nodeType":"YulFunctionCall","src":"32671:35:40"},"nativeSrc":"32671:35:40","nodeType":"YulExpressionStatement","src":"32671:35:40"},{"nativeSrc":"32715:26:40","nodeType":"YulAssignment","src":"32715:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"32727:9:40","nodeType":"YulIdentifier","src":"32727:9:40"},{"kind":"number","nativeSrc":"32738:2:40","nodeType":"YulLiteral","src":"32738:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"32723:3:40","nodeType":"YulIdentifier","src":"32723:3:40"},"nativeSrc":"32723:18:40","nodeType":"YulFunctionCall","src":"32723:18:40"},"variableNames":[{"name":"tail","nativeSrc":"32715:4:40","nodeType":"YulIdentifier","src":"32715:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_3fdb21530a98d914fa570cd548d7a3608c11195b5a11ec44ecd149309d9dcced__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"32419:328:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"32570:9:40","nodeType":"YulTypedName","src":"32570:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"32584:4:40","nodeType":"YulTypedName","src":"32584:4:40","type":""}],"src":"32419:328:40"},{"body":{"nativeSrc":"32881:145:40","nodeType":"YulBlock","src":"32881:145:40","statements":[{"nativeSrc":"32891:26:40","nodeType":"YulAssignment","src":"32891:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"32903:9:40","nodeType":"YulIdentifier","src":"32903:9:40"},{"kind":"number","nativeSrc":"32914:2:40","nodeType":"YulLiteral","src":"32914:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"32899:3:40","nodeType":"YulIdentifier","src":"32899:3:40"},"nativeSrc":"32899:18:40","nodeType":"YulFunctionCall","src":"32899:18:40"},"variableNames":[{"name":"tail","nativeSrc":"32891:4:40","nodeType":"YulIdentifier","src":"32891:4:40"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"32933:9:40","nodeType":"YulIdentifier","src":"32933:9:40"},{"arguments":[{"name":"value0","nativeSrc":"32948:6:40","nodeType":"YulIdentifier","src":"32948:6:40"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"32964:3:40","nodeType":"YulLiteral","src":"32964:3:40","type":"","value":"160"},{"kind":"number","nativeSrc":"32969:1:40","nodeType":"YulLiteral","src":"32969:1:40","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"32960:3:40","nodeType":"YulIdentifier","src":"32960:3:40"},"nativeSrc":"32960:11:40","nodeType":"YulFunctionCall","src":"32960:11:40"},{"kind":"number","nativeSrc":"32973:1:40","nodeType":"YulLiteral","src":"32973:1:40","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"32956:3:40","nodeType":"YulIdentifier","src":"32956:3:40"},"nativeSrc":"32956:19:40","nodeType":"YulFunctionCall","src":"32956:19:40"}],"functionName":{"name":"and","nativeSrc":"32944:3:40","nodeType":"YulIdentifier","src":"32944:3:40"},"nativeSrc":"32944:32:40","nodeType":"YulFunctionCall","src":"32944:32:40"}],"functionName":{"name":"mstore","nativeSrc":"32926:6:40","nodeType":"YulIdentifier","src":"32926:6:40"},"nativeSrc":"32926:51:40","nodeType":"YulFunctionCall","src":"32926:51:40"},"nativeSrc":"32926:51:40","nodeType":"YulExpressionStatement","src":"32926:51:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"32997:9:40","nodeType":"YulIdentifier","src":"32997:9:40"},{"kind":"number","nativeSrc":"33008:2:40","nodeType":"YulLiteral","src":"33008:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"32993:3:40","nodeType":"YulIdentifier","src":"32993:3:40"},"nativeSrc":"32993:18:40","nodeType":"YulFunctionCall","src":"32993:18:40"},{"name":"value1","nativeSrc":"33013:6:40","nodeType":"YulIdentifier","src":"33013:6:40"}],"functionName":{"name":"mstore","nativeSrc":"32986:6:40","nodeType":"YulIdentifier","src":"32986:6:40"},"nativeSrc":"32986:34:40","nodeType":"YulFunctionCall","src":"32986:34:40"},"nativeSrc":"32986:34:40","nodeType":"YulExpressionStatement","src":"32986:34:40"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"32752:274:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"32842:9:40","nodeType":"YulTypedName","src":"32842:9:40","type":""},{"name":"value1","nativeSrc":"32853:6:40","nodeType":"YulTypedName","src":"32853:6:40","type":""},{"name":"value0","nativeSrc":"32861:6:40","nodeType":"YulTypedName","src":"32861:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"32872:4:40","nodeType":"YulTypedName","src":"32872:4:40","type":""}],"src":"32752:274:40"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        validator_revert_address(value)\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0xffffffffffffffff\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_bytes32t_bytes_memory_ptrt_bytes_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value2 := abi_decode_bytes(add(headStart, offset_1), dataEnd)\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_enum_Operation(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(lt(value, 2)) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256t_bytes_memory_ptrt_enum$_Operation_$3022(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value2 := abi_decode_bytes(add(headStart, offset), dataEnd)\n        value3 := abi_decode_enum_Operation(add(headStart, 96))\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), 64)\n        tail := abi_encode_bytes(value1, add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptrt_enum$_Operation_$3022t_uint256t_uint256t_uint256t_addresst_address_payablet_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10\n    {\n        if slt(sub(dataEnd, headStart), 320) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(calldataload(add(headStart, 64)), _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_bytes_calldata(add(headStart, calldataload(add(headStart, 64))), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        value4 := abi_decode_enum_Operation(add(headStart, 96))\n        value5 := calldataload(add(headStart, 128))\n        value6 := calldataload(add(headStart, 160))\n        value7 := calldataload(add(headStart, 192))\n        value8 := abi_decode_address(add(headStart, 224))\n        value9 := abi_decode_address(add(headStart, 256))\n        if gt(calldataload(add(headStart, 288)), _1) { revert(0, 0) }\n        value10 := abi_decode_bytes(add(headStart, calldataload(add(headStart, 288))), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_bytes32(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes32t_bytes_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value2 := abi_decode_bytes(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_address(value, pos)\n    {\n        mstore(pos, and(value, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_array_address_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, 0x20)\n        let srcPtr := add(value, 0x20)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_array_address_dyn(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_uint256t_addresst_bytes_calldata_ptrt_addresst_addresst_uint256t_address_payable(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8, value9\n    {\n        if slt(sub(dataEnd, headStart), 256) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 0x20), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 0x20)\n        value1 := length\n        value2 := calldataload(add(headStart, 0x20))\n        value3 := abi_decode_address(add(headStart, 64))\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_bytes_calldata(add(headStart, offset_1), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n        value6 := abi_decode_address(add(headStart, 128))\n        value7 := abi_decode_address(add(headStart, 160))\n        value8 := calldataload(add(headStart, 192))\n        value9 := abi_decode_address(add(headStart, 224))\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_address__to_t_array$_t_address_$dyn_memory_ptr_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        tail := abi_encode_array_address_dyn(value0, add(headStart, 64))\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptrt_enum$_Operation_$3022t_uint256t_uint256t_uint256t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10\n    {\n        if slt(sub(dataEnd, headStart), 320) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        value4 := abi_decode_enum_Operation(add(headStart, 96))\n        value5 := calldataload(add(headStart, 128))\n        value6 := calldataload(add(headStart, 160))\n        value7 := calldataload(add(headStart, 192))\n        let value_1 := calldataload(add(headStart, 224))\n        validator_revert_address(value_1)\n        value8 := value_1\n        let value_2 := calldataload(add(headStart, 256))\n        validator_revert_address(value_2)\n        value9 := value_2\n        value10 := calldataload(add(headStart, 288))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_address(value_2)\n        value2 := value_2\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_3d415fb64f163720f719509288c33af2675ad2c80f86a95800d94f19c802a300__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS203\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_bd322b68614692ef7b503763b6ccedf066a7ae3f91196a908df3c549d078f597__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS204\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_f27dba96666375fe844b71e8ea4f388db2ce9f87fa9882d36a17036a7478b232__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS020\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_71cf63766ccc857998a36e6f1707e507e2e8921214ba4b8df65713cc885a8888__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS027\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d153a9d5a0d4e2c2b7d4e887f02c1da6287d6d54f20f4d8ce40382a23140787a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS021\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_372498b513e17609439d064ce0277017b054c808f722c83ff57cee4e06a9e457__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS022\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_00aecc0fa22d38afc0f465808a9fee188ba139fb53b2ca550ea01d91d6ecf29f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS023\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_bytes(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_bytes(value1, tail_1)\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_1d9dfad0f7e80ccb3a898324566cbd9ed8451678d229622c4c1b5f1f19330139__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS024\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_bc2491dc7fc5c71a630e01bcb9c3e39f61f559ab54f6528d2adb67d65ed9ff6b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS025\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73_t_bytes32__to_t_string_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000)\n        mstore(add(pos, 28), value0)\n        end := add(pos, 60)\n    }\n    function checked_sub_t_uint8(x, y) -> diff\n    {\n        diff := sub(and(x, 0xff), and(y, 0xff))\n        if gt(diff, 0xff) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_stringliteral_14032cc06a7a2043c1b961d6b7d6cbfaea1511224ce5ca723af49fa68e55c159__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS026\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b44c13dad2cf265cdd10f957c112238232519dfdaff7245a6824a63db294cf23__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS104\")\n        tail := add(headStart, 96)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_eab5e6af6960e6bb32b59bfd1d877c9c1728e4c18fa7a83eb40baa1c0f05f61f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS101\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_bfe16ebc2bd5d2fdfe588255b31e648718f9ede037848519acb772cd4f042f12__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS102\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2ed3cfd606bc0ca63de16ac40539251d9539eb77db0a0d075dd487d4cf1c74c7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS201\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a5f8340ff5526fa73c9197322cd5a1c742b87b5fdfeb41a9c278b80dab01159b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS202\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_enum_Operation(value, pos)\n    {\n        if iszero(lt(value, 2))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n        mstore(pos, value)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_bytes_calldata_ptr_t_enum$_Operation_$3022_t_uint256_t_uint256_t_uint256_t_address_t_address_payable_t_bytes_memory_ptr_t_address__to_t_address_t_uint256_t_bytes_memory_ptr_t_uint8_t_uint256_t_uint256_t_uint256_t_address_t_address_payable_t_bytes_memory_ptr_t_address__fromStack_reversed(headStart, value11, value10, value9, value8, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 352\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), _1)\n        mstore(add(headStart, _1), value3)\n        let _2 := 384\n        calldatacopy(add(headStart, _2), value2, value3)\n        mstore(add(add(headStart, value3), _2), 0)\n        let _3 := add(headStart, and(add(value3, 31), not(31)))\n        abi_encode_enum_Operation(value4, add(headStart, 96))\n        mstore(add(headStart, 128), value5)\n        mstore(add(headStart, 160), value6)\n        mstore(add(headStart, 192), value7)\n        abi_encode_address(value8, add(headStart, 224))\n        abi_encode_address(value9, add(headStart, 256))\n        mstore(add(headStart, 288), add(sub(_3, headStart), _2))\n        tail := abi_encode_bytes(value10, add(_3, _2))\n        abi_encode_address(value11, add(headStart, 320))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_9d970fd9adbe3047cd5b7a20406b6bf2e613338cfe3a19aca4ca1810b67fad10__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS010\")\n        tail := add(headStart, 96)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_99333b4627cde46d9c53d7148b33b8b1f4f065f5dceb2cb210893e67e551978e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS013\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_bytes32_t_bool__to_t_bytes32_t_bool__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n    }\n    function abi_encode_tuple_t_stringliteral_93293a4a2e4cde533ea81b8912d8934c2d7892ceb975e9ad2c25f4abf449a730__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS001\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_calldata_ptr_t_uint256_t_address_t_address__to_t_array$_t_address_$dyn_memory_ptr_t_uint256_t_address_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let tail_1 := add(headStart, 128)\n        mstore(headStart, 128)\n        let pos := tail_1\n        mstore(tail_1, value1)\n        pos := add(headStart, 160)\n        let srcPtr := value0\n        let i := 0\n        for { } lt(i, value1) { i := add(i, 1) }\n        {\n            let value := calldataload(srcPtr)\n            validator_revert_address(value)\n            mstore(pos, and(value, sub(shl(160, 1), 1)))\n            let _1 := 0x20\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n        mstore(add(headStart, 0x20), value2)\n        let _2 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 64), and(value3, _2))\n        mstore(add(headStart, 96), and(value4, _2))\n    }\n    function abi_encode_tuple_t_stringliteral_21e9127eafd366d4171d9c7f3375ca996507e4dd231bd2c13b243a626f992d4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS105\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3be12fd8170783d77e95b898996a64d9da524b4d1491db467a4cf43987cf214d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS106\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_26b7fa7d947085035b53de5c25693e568c405e1e894ad22389a1528045f35ba8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS030\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_7295c339622429fbd8194417b44c0a2c972675caa6bf424cf588d99024c608be__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS103\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, shl(224, 0xffffffff)))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_c2a4c0da6073a4ef35f113e24388fa780c351ad02fefd784ffba62884174edf0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS300\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f86d3c4b40d399421f213105cf28bb5b688028c0e3d9bd9eb6f879f0bebe6c39__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS205\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        calldatacopy(pos, value0, value1)\n        let _1 := add(pos, value1)\n        mstore(_1, 0)\n        end := _1\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_uint256_t_bytes32_t_enum$_Operation_$3022_t_uint256_t_uint256_t_uint256_t_address_t_address_t_uint256__to_t_bytes32_t_address_t_uint256_t_bytes32_t_uint8_t_uint256_t_uint256_t_uint256_t_address_t_address_t_uint256__fromStack_reversed(headStart, value10, value9, value8, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 352)\n        mstore(headStart, value0)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        abi_encode_enum_Operation(value4, add(headStart, 128))\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), value6)\n        mstore(add(headStart, 224), value7)\n        mstore(add(headStart, 256), and(value8, _1))\n        mstore(add(headStart, 288), and(value9, _1))\n        mstore(add(headStart, 320), value10)\n    }\n    function abi_encode_tuple_packed_t_bytes1_t_bytes1_t_bytes32_t_bytes32__to_t_bytes1_t_bytes1_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value3, value2, value1, value0) -> end\n    {\n        let _1 := shl(248, 255)\n        mstore(pos, and(value0, _1))\n        mstore(add(pos, 1), and(value1, _1))\n        mstore(add(pos, 2), value2)\n        mstore(add(pos, 34), value3)\n        end := add(pos, 66)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256_t_contract$_Safe_$1853__to_t_bytes32_t_uint256_t_address_payable__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, sub(shl(160, 1), 1)))\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function abi_encode_tuple_t_stringliteral_b7248be3e8887f14d79f63d350787adcdb5e12b47898ebd6ef2aacf660fc9f17__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS031\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4353e9bcd8ea99b4d56990ac4b8777f1ab67cada8356790f30e482f2408a44b0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS011\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_74edef16877c9a34a97f281dbea2805f9198008e7df330ab6416449a66143b07__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS012\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3a328c389014707497c45ecba7527a678d30fabfd6868fe8bade352062f7774b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS200\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f31aea2d758c1bc976ea4b6db8005af34a1f6d8fd0cba0d31e0228d78d6a5ae2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS400\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_8c9c6f726a0896ef73f47c5bcc7192641db350a8b0b2e1f61e0f0c694ec59426__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS100\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6815e8af672f0836acc6449b9d3a4cb88965a5b47ac95c5e5335f73ab586c8d0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS002\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3fdb21530a98d914fa570cd548d7a3608c11195b5a11ec44ecd149309d9dcced__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 5)\n        mstore(add(headStart, 64), \"GS000\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n}","id":40,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106101d15760003560e01c8063affed0e0116100f7578063e19a9dd911610095578063f08a032311610064578063f08a0323146105f5578063f698da2514610615578063f8dc5dd91461062a578063ffa1ad741461064a5761020d565b8063e19a9dd914610580578063e318b52b146105a0578063e75235b8146105c0578063e86637db146105d55761020d565b8063cc2f8452116100d1578063cc2f8452146104f2578063d4d9bdcd14610520578063d8d11f7814610540578063e009cfde146105605761020d565b8063affed0e01461049c578063b4faba09146104b2578063b63e800d146104d25761020d565b80635624b25b1161016f5780636a7612021161013e5780636a7612021461040f5780637d83297414610422578063934f3a111461045a578063a0e67e2b1461047a5761020d565b80635624b25b146103755780635ae6bd37146103a2578063610b5925146103cf578063694e80c3146103ef5761020d565b80632f54bf6e116101ab5780632f54bf6e146102ea5780633408e4701461030a578063468721a7146103275780635229073f146103475761020d565b80630d582f131461027357806312fb68e0146102955780632d9ad53d146102b55761020d565b3661020d5760405134815233907f3d0ce9bfc3ed7d6862dbb28b2dea94561fe714a1b4d019aa8af39730d1ad7c3d9060200160405180910390a2005b34801561021957600080fd5b507f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d580548061024457005b36600080373360601b365260008060143601600080855af190503d6000803e8061026d573d6000fd5b503d6000f35b34801561027f57600080fd5b5061029361028e36600461259f565b61067b565b005b3480156102a157600080fd5b506102936102b036600461266e565b6107d3565b3480156102c157600080fd5b506102d56102d03660046126e3565b610c72565b60405190151581526020015b60405180910390f35b3480156102f657600080fd5b506102d56103053660046126e3565b610cad565b34801561031657600080fd5b50465b6040519081526020016102e1565b34801561033357600080fd5b506102d561034236600461270f565b610ce5565b34801561035357600080fd5b5061036761036236600461270f565b610dbe565b6040516102e19291906127bf565b34801561038157600080fd5b506103956103903660046127da565b610df4565b6040516102e191906127fc565b3480156103ae57600080fd5b506103196103bd36600461280f565b60076020526000908152604090205481565b3480156103db57600080fd5b506102936103ea3660046126e3565b610e70565b3480156103fb57600080fd5b5061029361040a36600461280f565b610fa9565b6102d561041d366004612871565b611047565b34801561042e57600080fd5b5061031961043d36600461259f565b600860209081526000928352604080842090915290825290205481565b34801561046657600080fd5b5061029361047536600461294a565b611392565b34801561048657600080fd5b5061048f6113dc565b6040516102e191906129fc565b3480156104a857600080fd5b5061031960055481565b3480156104be57600080fd5b506102936104cd366004612a0f565b6114cd565b3480156104de57600080fd5b506102936104ed366004612a5f565b6114f0565b3480156104fe57600080fd5b5061051261050d36600461259f565b6115f2565b6040516102e1929190612b54565b34801561052c57600080fd5b5061029361053b36600461280f565b6117ae565b34801561054c57600080fd5b5061031961055b366004612b7e565b611843565b34801561056c57600080fd5b5061029361057b366004612c3f565b611870565b34801561058c57600080fd5b5061029361059b3660046126e3565b611992565b3480156105ac57600080fd5b506102936105bb366004612c78565b611aa8565b3480156105cc57600080fd5b50600454610319565b3480156105e157600080fd5b506103956105f0366004612b7e565b611c83565b34801561060157600080fd5b506102936106103660046126e3565b611d5c565b34801561062157600080fd5b50610319611da4565b34801561063657600080fd5b50610293610645366004612cc3565b611dfb565b34801561065657600080fd5b5061039560405180604001604052806005815260200164312e342e3160d81b81525081565b610683611f66565b6001600160a01b038216158015906106a557506001600160a01b038216600114155b80156106ba57506001600160a01b0382163014155b6106df5760405162461bcd60e51b81526004016106d690612d04565b60405180910390fd5b6001600160a01b0382811660009081526002602052604090205416156107175760405162461bcd60e51b81526004016106d690612d23565b60026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e080546001600160a01b038481166000818152604081208054939094166001600160a01b03199384161790935560018352835490911617909155600380549161078483612d58565b90915550506040516001600160a01b038316907f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea2690600090a280600454146107cf576107cf81610fa9565b5050565b6107de816041611f9f565b825110156108165760405162461bcd60e51b8152602060048201526005602482015264047533032360dc1b60448201526064016106d6565b6000808060008060005b86811015610c66576041818102890160208101516040820151919092015160ff16955090935091506000849003610a2e57885160208a01208a1461088e5760405162461bcd60e51b8152602060048201526005602482015264475330323760d81b60448201526064016106d6565b919350839161089e876041611f9f565b8210156108d55760405162461bcd60e51b8152602060048201526005602482015264475330323160d81b60448201526064016106d6565b87516108e2836020611fdb565b11156109185760405162461bcd60e51b815260206004820152600560248201526423a998191960d91b60448201526064016106d6565b60208289018101518951909161093b908390610935908790611fdb565b90611fdb565b11156109715760405162461bcd60e51b8152602060048201526005602482015264475330323360d81b60448201526064016106d6565b6040516320c13b0b60e01b8082528a8501602001916001600160a01b038916906320c13b0b906109a7908f908690600401612d71565b602060405180830381865afa1580156109c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e89190612d96565b6001600160e01b03191614610a275760405162461bcd60e51b815260206004820152600560248201526411d4cc0c8d60da1b60448201526064016106d6565b5050610bd5565b8360ff16600103610ab0579193508391336001600160a01b0384161480610a7757506001600160a01b03851660009081526008602090815260408083208d845290915290205415155b610aab5760405162461bcd60e51b8152602060048201526005602482015264475330323560d81b60448201526064016106d6565b610bd5565b601e8460ff161115610b75576040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c81018b9052600190605c0160405160208183030381529060405280519060200120600486610b159190612dc0565b6040805160008152602081018083529390935260ff90911690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015610b64573d6000803e3d6000fd5b505050602060405103519450610bd5565b6040805160008152602081018083528c905260ff861691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015610bc8573d6000803e3d6000fd5b5050506020604051035194505b856001600160a01b0316856001600160a01b0316118015610c0f57506001600160a01b038581166000908152600260205260409020541615155b8015610c2557506001600160a01b038516600114155b610c595760405162461bcd60e51b815260206004820152600560248201526423a998191b60d91b60448201526064016106d6565b9394508493600101610820565b50505050505050505050565b600060016001600160a01b03831614801590610ca757506001600160a01b038281166000908152600160205260409020541615155b92915050565b60006001600160a01b038216600114801590610ca75750506001600160a01b0390811660009081526002602052604090205416151590565b600033600114801590610d0f5750336000908152600160205260409020546001600160a01b031615155b610d435760405162461bcd60e51b815260206004820152600560248201526411d4cc4c0d60da1b60448201526064016106d6565b610d5285858585600019611ff7565b90508015610d8a5760405133907f6895c13664aa4f67288b25d7a21d7aaa34916e355fb9b6fae0a139a9085becb890600090a2610db6565b60405133907facd2c8702804128fdb0db2bb49f6d127dd0181c13fd45dbfe16de0930e2bd37590600090a25b949350505050565b60006060610dce86868686610ce5565b915060405160203d0181016040523d81523d6000602083013e8091505094509492505050565b60606000610e03836020612dd9565b67ffffffffffffffff811115610e1b57610e1b6125cb565b6040519080825280601f01601f191660200182016040528015610e45576020820181803683370190505b50905060005b83811015610e685784810154602080830284010152600101610e4b565b509392505050565b610e78611f66565b6001600160a01b03811615801590610e9a57506001600160a01b038116600114155b610ece5760405162461bcd60e51b8152602060048201526005602482015264475331303160d81b60448201526064016106d6565b6001600160a01b038181166000908152600160205260409020541615610f1e5760405162461bcd60e51b815260206004820152600560248201526423a998981960d91b60448201526064016106d6565b600160208190527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f80546001600160a01b03848116600081815260408082208054949095166001600160a01b031994851617909455948552835490911681179092555190917fecdf3a3effea5783a3c4c2140e677577666428d44ed9d474a0b3a4c9943f844091a250565b610fb1611f66565b600354811115610fd35760405162461bcd60e51b81526004016106d690612df0565b600181101561100c5760405162461bcd60e51b815260206004820152600560248201526423a999181960d91b60448201526064016106d6565b60048190556040518181527f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c939060200160405180910390a150565b60008060006110618e8e8e8e8e8e8e8e8e8e600554611c83565b60058054919250600061107383612d58565b909155505080516020820120915061108c828286611392565b5060006110b77f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c85490565b90506001600160a01b0381161561113d57806001600160a01b03166375f0bb528f8f8f8f8f8f8f8f8f8f8f336040518d63ffffffff1660e01b815260040161110a9c9b9a99989796959493929190612e47565b600060405180830381600087803b15801561112457600080fd5b505af1158015611138573d6000803e3d6000fd5b505050505b61116961114c8a6109c4612f0c565b603f6111598c6040612dd9565b6111639190612f1f565b9061203e565b611175906101f4612f0c565b5a10156111ac5760405162461bcd60e51b8152602060048201526005602482015264047533031360dc1b60448201526064016106d6565b60005a905061121d8f8f8f8f8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508e8c60001461120a578e611ff7565b6109c45a6112189190612f41565b611ff7565b935061122a5a8290612055565b9050838061123757508915155b8061124157508715155b6112755760405162461bcd60e51b8152602060048201526005602482015264475330313360d81b60448201526064016106d6565b6000881561128d5761128a828b8b8b8b612070565b90505b84156112d257837f442e715f626346e8c54381002da614f62bee8d27386535b2521ec8540898556e826040516112c591815260200190565b60405180910390a261130d565b837f23428b18acfb3ea64b08dc0c1d296ea9c09702c09083ca5272e64d115b687d238260405161130491815260200190565b60405180910390a25b50506001600160a01b0381161561138157604051631264e26d60e31b81526004810183905283151560248201526001600160a01b03821690639327136890604401600060405180830381600087803b15801561136857600080fd5b505af115801561137c573d6000803e3d6000fd5b505050505b50509b9a5050505050505050505050565b600454806113ca5760405162461bcd60e51b8152602060048201526005602482015264475330303160d81b60448201526064016106d6565b6113d6848484846107d3565b50505050565b6060600060035467ffffffffffffffff8111156113fb576113fb6125cb565b604051908082528060200260200182016040528015611424578160200160208202803683370190505b506001600090815260026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e054919250906001600160a01b03165b6001600160a01b0381166001146114c5578083838151811061148557611485612f54565b6001600160a01b039283166020918202929092018101919091529181166000908152600290925260409091205416816114bd81612d58565b925050611461565b509092915050565b600080825160208401855af480600052503d6020523d600060403e60403d016000fd5b61152e8a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508c9250612176915050565b6001600160a01b038416156115465761154684612352565b6115868787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506123b692505050565b811561159d5761159b82600060018685612070565b505b336001600160a01b03167f141df868a6331af528e38c83b7aa03edc19be66e37ae67f9285bf4f8e3c6a1a88b8b8b8b896040516115de959493929190612f6a565b60405180910390a250505050505050505050565b606060006001600160a01b03841660011480611612575061161284610c72565b6116465760405162461bcd60e51b8152602060048201526005602482015264475331303560d81b60448201526064016106d6565b6000831161167e5760405162461bcd60e51b815260206004820152600560248201526423a998981b60d91b60448201526064016106d6565b8267ffffffffffffffff811115611697576116976125cb565b6040519080825280602002602001820160405280156116c0578160200160208202803683370190505b506001600160a01b03808616600090815260016020526040812054929450911691505b6001600160a01b0382161580159061170557506001600160a01b038216600114155b801561171057508381105b1561176b578183828151811061172857611728612f54565b6001600160a01b0392831660209182029290920181019190915292811660009081526001909352604090922054909116908061176381612d58565b9150506116e3565b6001600160a01b0382166001146117a35782611788600183612f41565b8151811061179857611798612f54565b602002602001015191505b808352509250929050565b336000908152600260205260409020546001600160a01b03166117fb5760405162461bcd60e51b8152602060048201526005602482015264047533033360dc1b60448201526064016106d6565b336000818152600860209081526040808320858452909152808220600190555183917ff2a0eb156472d1440255b0d7c1e19cc07115d1051fe605b0dce69acfec884d9c91a350565b60006118588c8c8c8c8c8c8c8c8c8c8c611c83565b8051906020012090509b9a5050505050505050505050565b611878611f66565b6001600160a01b0381161580159061189a57506001600160a01b038116600114155b6118ce5760405162461bcd60e51b8152602060048201526005602482015264475331303160d81b60448201526064016106d6565b6001600160a01b038281166000908152600160205260409020548116908216146119225760405162461bcd60e51b8152602060048201526005602482015264475331303360d81b60448201526064016106d6565b6001600160a01b03818116600081815260016020526040808220805487861684528284208054919096166001600160a01b0319918216179095558383528054909416909355915190917faab4fa2b463f581b2b32cb3b7e3b704b9ce37cc209b5fb4d77e593ace405427691a25050565b61199a611f66565b6001600160a01b03811615611a4c576040516301ffc9a760e01b815263736bd41d60e11b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa1580156119f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a189190612fd6565b611a4c5760405162461bcd60e51b8152602060048201526005602482015264047533330360dc1b60448201526064016106d6565b7f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c88181556040516001600160a01b038316907f1151116914515bc0891ff9047a6cb32cf902546f83066499bcf8ba33d2353fa290600090a25050565b611ab0611f66565b6001600160a01b03811615801590611ad257506001600160a01b038116600114155b8015611ae757506001600160a01b0381163014155b611b035760405162461bcd60e51b81526004016106d690612d04565b6001600160a01b038181166000908152600260205260409020541615611b3b5760405162461bcd60e51b81526004016106d690612d23565b6001600160a01b03821615801590611b5d57506001600160a01b038216600114155b611b795760405162461bcd60e51b81526004016106d690612d04565b6001600160a01b03838116600090815260026020526040902054811690831614611bcd5760405162461bcd60e51b8152602060048201526005602482015264475332303560d81b60448201526064016106d6565b6001600160a01b03828116600081815260026020526040808220805486861680855283852080549288166001600160a01b03199384161790559589168452828420805482169096179095558383528054909416909355915190917ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf91a26040516001600160a01b038216907f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea2690600090a2505050565b606060007fbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d860001b8d8d8d8d604051611cbd929190612ff8565b604051908190038120611ce3949392918e908e908e908e908e908e908e90602001613008565b60408051601f1981840301815291905280516020909101209050601960f81b600160f81b611d0f611da4565b6040516001600160f81b031993841660208201529290911660218301526022820152604281018290526062016040516020818303038152906040529150509b9a5050505050505050505050565b611d64611f66565b611d6d81612352565b6040516001600160a01b038216907f5ac6c46c93c8d0e53714ba3b53db3e7c046da994313d7ed0d192028bc7c228b090600090a250565b60007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692184660408051602081019390935282015230606082015260800160405160208183030381529060405280519060200120905090565b611e03611f66565b806001600354611e139190612f41565b1015611e315760405162461bcd60e51b81526004016106d690612df0565b6001600160a01b03821615801590611e5357506001600160a01b038216600114155b611e6f5760405162461bcd60e51b81526004016106d690612d04565b6001600160a01b03838116600090815260026020526040902054811690831614611ec35760405162461bcd60e51b8152602060048201526005602482015264475332303560d81b60448201526064016106d6565b6001600160a01b03828116600081815260026020526040808220805488861684529183208054929095166001600160a01b03199283161790945591815282549091169091556003805491611f1683613077565b90915550506040516001600160a01b038316907ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf90600090a28060045414611f6157611f6181610fa9565b505050565b333014611f9d5760405162461bcd60e51b8152602060048201526005602482015264475330333160d81b60448201526064016106d6565b565b600082600003611fb157506000610ca7565b6000611fbd8385612dd9565b905082611fca8583612f1f565b14611fd457600080fd5b9392505050565b600080611fe88385612f0c565b905083811015611fd457600080fd5b6000600183600181111561200d5761200d612e0f565b03612025576000808551602087018986f49050612035565b600080855160208701888a87f190505b95945050505050565b60008183101561204e5781611fd4565b5090919050565b60008282111561206457600080fd5b6000610db68385612f41565b6000806001600160a01b03831615612088578261208a565b325b90506001600160a01b03841661211d576120bc3a86106120aa573a6120ac565b855b6120b68989611fdb565b90611f9f565b6040519092506001600160a01b0382169083156108fc029084906000818181858888f193505050506121185760405162461bcd60e51b8152602060048201526005602482015264475330313160d81b60448201526064016106d6565b61216c565b61212b856120b68989611fdb565b91506121388482846124e8565b61216c5760405162461bcd60e51b815260206004820152600560248201526423a998189960d91b60448201526064016106d6565b5095945050505050565b600454156121ae5760405162461bcd60e51b8152602060048201526005602482015264047533230360dc1b60448201526064016106d6565b81518111156121cf5760405162461bcd60e51b81526004016106d690612df0565b60018110156122085760405162461bcd60e51b815260206004820152600560248201526423a999181960d91b60448201526064016106d6565b600160005b835181101561231f57600084828151811061222a5761222a612f54565b6020026020010151905060006001600160a01b0316816001600160a01b03161415801561226157506001600160a01b038116600114155b801561227657506001600160a01b0381163014155b80156122945750806001600160a01b0316836001600160a01b031614155b6122b05760405162461bcd60e51b81526004016106d690612d04565b6001600160a01b0381811660009081526002602052604090205416156122e85760405162461bcd60e51b81526004016106d690612d23565b6001600160a01b03928316600090815260026020526040902080546001600160a01b0319169382169390931790925560010161220d565b506001600160a01b0316600090815260026020526040902080546001600160a01b03191660011790559051600355600455565b306001600160a01b038216036123925760405162461bcd60e51b8152602060048201526005602482015264047533430360dc1b60448201526064016106d6565b7f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d555565b600160008190526020527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f546001600160a01b0316156124205760405162461bcd60e51b8152602060048201526005602482015264047533130360dc1b60448201526064016106d6565b6001600081905260208190527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f80546001600160a01b03191690911790556001600160a01b038216156107cf57813b6124a35760405162461bcd60e51b815260206004820152600560248201526423a998181960d91b60448201526064016106d6565b6124b4826000836001600019611ff7565b6107cf5760405162461bcd60e51b8152602060048201526005602482015264047533030360dc1b60448201526064016106d6565b604080516001600160a01b03841660248201526044808201849052825180830390910181526064909101909152602080820180516001600160e01b031663a9059cbb60e01b1781528251600093929184919082896127105a03f13d801561255a5760208114612562576000935061256d565b81935061256d565b600051158215171593505b5050509392505050565b6001600160a01b038116811461258c57600080fd5b50565b803561259a81612577565b919050565b600080604083850312156125b257600080fd5b82356125bd81612577565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126125f257600080fd5b813567ffffffffffffffff8082111561260d5761260d6125cb565b604051601f8301601f19908116603f01168101908282118183101715612635576126356125cb565b8160405283815286602085880101111561264e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561268457600080fd5b84359350602085013567ffffffffffffffff808211156126a357600080fd5b6126af888389016125e1565b945060408701359150808211156126c557600080fd5b506126d2878288016125e1565b949793965093946060013593505050565b6000602082840312156126f557600080fd5b8135611fd481612577565b80356002811061259a57600080fd5b6000806000806080858703121561272557600080fd5b843561273081612577565b935060208501359250604085013567ffffffffffffffff81111561275357600080fd5b61275f878288016125e1565b92505061276e60608601612700565b905092959194509250565b6000815180845260005b8181101561279f57602081850181015186830182015201612783565b506000602082860101526020601f19601f83011685010191505092915050565b8215158152604060208201526000610db66040830184612779565b600080604083850312156127ed57600080fd5b50508035926020909101359150565b602081526000611fd46020830184612779565b60006020828403121561282157600080fd5b5035919050565b60008083601f84011261283a57600080fd5b50813567ffffffffffffffff81111561285257600080fd5b60208301915083602082850101111561286a57600080fd5b9250929050565b60008060008060008060008060008060006101408c8e03121561289357600080fd5b61289c8c61258f565b9a5060208c0135995067ffffffffffffffff8060408e013511156128bf57600080fd5b6128cf8e60408f01358f01612828565b909a5098506128e060608e01612700565b975060808d0135965060a08d0135955060c08d0135945061290360e08e0161258f565b93506129126101008e0161258f565b9250806101208e0135111561292657600080fd5b506129388d6101208e01358e016125e1565b90509295989b509295989b9093969950565b60008060006060848603121561295f57600080fd5b83359250602084013567ffffffffffffffff8082111561297e57600080fd5b61298a878388016125e1565b935060408601359150808211156129a057600080fd5b506129ad868287016125e1565b9150509250925092565b60008151808452602080850194506020840160005b838110156129f15781516001600160a01b0316875295820195908201906001016129cc565b509495945050505050565b602081526000611fd460208301846129b7565b60008060408385031215612a2257600080fd5b8235612a2d81612577565b9150602083013567ffffffffffffffff811115612a4957600080fd5b612a55858286016125e1565b9150509250929050565b6000806000806000806000806000806101008b8d031215612a7f57600080fd5b8a3567ffffffffffffffff80821115612a9757600080fd5b818d0191508d601f830112612aab57600080fd5b813581811115612aba57600080fd5b8e60208260051b8501011115612acf57600080fd5b60208381019d50909b508d01359950612aea60408e0161258f565b985060608d0135915080821115612b0057600080fd5b50612b0d8d828e01612828565b9097509550612b20905060808c0161258f565b9350612b2e60a08c0161258f565b925060c08b01359150612b4360e08c0161258f565b90509295989b9194979a5092959850565b604081526000612b6760408301856129b7565b905060018060a01b03831660208301529392505050565b60008060008060008060008060008060006101408c8e031215612ba057600080fd5b8b35612bab81612577565b9a5060208c0135995060408c013567ffffffffffffffff811115612bce57600080fd5b612bda8e828f01612828565b909a509850612bed905060608d01612700565b965060808c0135955060a08c0135945060c08c0135935060e08c0135612c1281612577565b92506101008c0135612c2381612577565b809250506101208c013590509295989b509295989b9093969950565b60008060408385031215612c5257600080fd5b8235612c5d81612577565b91506020830135612c6d81612577565b809150509250929050565b600080600060608486031215612c8d57600080fd5b8335612c9881612577565b92506020840135612ca881612577565b91506040840135612cb881612577565b809150509250925092565b600080600060608486031215612cd857600080fd5b8335612ce381612577565b92506020840135612cf381612577565b929592945050506040919091013590565b602080825260059082015264475332303360d81b604082015260600190565b60208082526005908201526411d4cc8c0d60da1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600060018201612d6a57612d6a612d42565b5060010190565b604081526000612d846040830185612779565b82810360208401526120358185612779565b600060208284031215612da857600080fd5b81516001600160e01b031981168114611fd457600080fd5b60ff8281168282160390811115610ca757610ca7612d42565b8082028115828204841417610ca757610ca7612d42565b602080825260059082015264475332303160d81b604082015260600190565b634e487b7160e01b600052602160045260246000fd5b60028110612e4357634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b038d168152602081018c90526101606040820181905281018a905260006101808b8d828501376000838d01820152601f8c01601f19168301612e93606085018d612e25565b8a60808501528960a08501528860c0850152612eba60e08501896001600160a01b03169052565b6001600160a01b0387166101008501528184820301610120850152612ee182820187612779565b92505050612efb6101408301846001600160a01b03169052565b9d9c50505050505050505050505050565b80820180821115610ca757610ca7612d42565b600082612f3c57634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610ca757610ca7612d42565b634e487b7160e01b600052603260045260246000fd5b6080808252810185905260008660a08301825b88811015612fad578235612f9081612577565b6001600160a01b0316825260209283019290910190600101612f7d565b50602084019690965250506001600160a01b039283166040820152911660609091015292915050565b600060208284031215612fe857600080fd5b81518015158114611fd457600080fd5b8183823760009101908152919050565b8b81526001600160a01b038b81166020830152604082018b9052606082018a905261016082019061303c608084018b612e25565b60a083019890985260c082019690965260e0810194909452918516610100840152909316610120820152610140019190915295945050505050565b60008161308657613086612d42565b50600019019056fea2646970667358221220e141bbff628305491758e84f5f7a394e7f6461aa9942d70dbe77ce44d1094c2464736f6c63430008170033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1D1 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAFFED0E0 GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xE19A9DD9 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xF08A0323 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xF08A0323 EQ PUSH2 0x5F5 JUMPI DUP1 PUSH4 0xF698DA25 EQ PUSH2 0x615 JUMPI DUP1 PUSH4 0xF8DC5DD9 EQ PUSH2 0x62A JUMPI DUP1 PUSH4 0xFFA1AD74 EQ PUSH2 0x64A JUMPI PUSH2 0x20D JUMP JUMPDEST DUP1 PUSH4 0xE19A9DD9 EQ PUSH2 0x580 JUMPI DUP1 PUSH4 0xE318B52B EQ PUSH2 0x5A0 JUMPI DUP1 PUSH4 0xE75235B8 EQ PUSH2 0x5C0 JUMPI DUP1 PUSH4 0xE86637DB EQ PUSH2 0x5D5 JUMPI PUSH2 0x20D JUMP JUMPDEST DUP1 PUSH4 0xCC2F8452 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xCC2F8452 EQ PUSH2 0x4F2 JUMPI DUP1 PUSH4 0xD4D9BDCD EQ PUSH2 0x520 JUMPI DUP1 PUSH4 0xD8D11F78 EQ PUSH2 0x540 JUMPI DUP1 PUSH4 0xE009CFDE EQ PUSH2 0x560 JUMPI PUSH2 0x20D JUMP JUMPDEST DUP1 PUSH4 0xAFFED0E0 EQ PUSH2 0x49C JUMPI DUP1 PUSH4 0xB4FABA09 EQ PUSH2 0x4B2 JUMPI DUP1 PUSH4 0xB63E800D EQ PUSH2 0x4D2 JUMPI PUSH2 0x20D JUMP JUMPDEST DUP1 PUSH4 0x5624B25B GT PUSH2 0x16F JUMPI DUP1 PUSH4 0x6A761202 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x6A761202 EQ PUSH2 0x40F JUMPI DUP1 PUSH4 0x7D832974 EQ PUSH2 0x422 JUMPI DUP1 PUSH4 0x934F3A11 EQ PUSH2 0x45A JUMPI DUP1 PUSH4 0xA0E67E2B EQ PUSH2 0x47A JUMPI PUSH2 0x20D JUMP JUMPDEST DUP1 PUSH4 0x5624B25B EQ PUSH2 0x375 JUMPI DUP1 PUSH4 0x5AE6BD37 EQ PUSH2 0x3A2 JUMPI DUP1 PUSH4 0x610B5925 EQ PUSH2 0x3CF JUMPI DUP1 PUSH4 0x694E80C3 EQ PUSH2 0x3EF JUMPI PUSH2 0x20D JUMP JUMPDEST DUP1 PUSH4 0x2F54BF6E GT PUSH2 0x1AB JUMPI DUP1 PUSH4 0x2F54BF6E EQ PUSH2 0x2EA JUMPI DUP1 PUSH4 0x3408E470 EQ PUSH2 0x30A JUMPI DUP1 PUSH4 0x468721A7 EQ PUSH2 0x327 JUMPI DUP1 PUSH4 0x5229073F EQ PUSH2 0x347 JUMPI PUSH2 0x20D JUMP JUMPDEST DUP1 PUSH4 0xD582F13 EQ PUSH2 0x273 JUMPI DUP1 PUSH4 0x12FB68E0 EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0x2D9AD53D EQ PUSH2 0x2B5 JUMPI PUSH2 0x20D JUMP JUMPDEST CALLDATASIZE PUSH2 0x20D JUMPI PUSH1 0x40 MLOAD CALLVALUE DUP2 MSTORE CALLER SWAP1 PUSH32 0x3D0CE9BFC3ED7D6862DBB28B2DEA94561FE714A1B4D019AA8AF39730D1AD7C3D SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x219 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x6C9A6C4A39284E37ED1CF53D337577D14212A4870FB976A4366C693B939918D5 DUP1 SLOAD DUP1 PUSH2 0x244 JUMPI STOP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY CALLER PUSH1 0x60 SHL CALLDATASIZE MSTORE PUSH1 0x0 DUP1 PUSH1 0x14 CALLDATASIZE ADD PUSH1 0x0 DUP1 DUP6 GAS CALL SWAP1 POP RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 PUSH2 0x26D JUMPI RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x28E CALLDATASIZE PUSH1 0x4 PUSH2 0x259F JUMP JUMPDEST PUSH2 0x67B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x2B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x266E JUMP JUMPDEST PUSH2 0x7D3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D5 PUSH2 0x2D0 CALLDATASIZE PUSH1 0x4 PUSH2 0x26E3 JUMP JUMPDEST PUSH2 0xC72 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D5 PUSH2 0x305 CALLDATASIZE PUSH1 0x4 PUSH2 0x26E3 JUMP JUMPDEST PUSH2 0xCAD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CHAINID JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2E1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x333 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D5 PUSH2 0x342 CALLDATASIZE PUSH1 0x4 PUSH2 0x270F JUMP JUMPDEST PUSH2 0xCE5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x367 PUSH2 0x362 CALLDATASIZE PUSH1 0x4 PUSH2 0x270F JUMP JUMPDEST PUSH2 0xDBE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E1 SWAP3 SWAP2 SWAP1 PUSH2 0x27BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x381 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x395 PUSH2 0x390 CALLDATASIZE PUSH1 0x4 PUSH2 0x27DA JUMP JUMPDEST PUSH2 0xDF4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E1 SWAP2 SWAP1 PUSH2 0x27FC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x319 PUSH2 0x3BD CALLDATASIZE PUSH1 0x4 PUSH2 0x280F JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x3EA CALLDATASIZE PUSH1 0x4 PUSH2 0x26E3 JUMP JUMPDEST PUSH2 0xE70 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x40A CALLDATASIZE PUSH1 0x4 PUSH2 0x280F JUMP JUMPDEST PUSH2 0xFA9 JUMP JUMPDEST PUSH2 0x2D5 PUSH2 0x41D CALLDATASIZE PUSH1 0x4 PUSH2 0x2871 JUMP JUMPDEST PUSH2 0x1047 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x319 PUSH2 0x43D CALLDATASIZE PUSH1 0x4 PUSH2 0x259F JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x466 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x475 CALLDATASIZE PUSH1 0x4 PUSH2 0x294A JUMP JUMPDEST PUSH2 0x1392 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x486 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x48F PUSH2 0x13DC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E1 SWAP2 SWAP1 PUSH2 0x29FC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x319 PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x4CD CALLDATASIZE PUSH1 0x4 PUSH2 0x2A0F JUMP JUMPDEST PUSH2 0x14CD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x4ED CALLDATASIZE PUSH1 0x4 PUSH2 0x2A5F JUMP JUMPDEST PUSH2 0x14F0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x512 PUSH2 0x50D CALLDATASIZE PUSH1 0x4 PUSH2 0x259F JUMP JUMPDEST PUSH2 0x15F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E1 SWAP3 SWAP2 SWAP1 PUSH2 0x2B54 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x52C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x53B CALLDATASIZE PUSH1 0x4 PUSH2 0x280F JUMP JUMPDEST PUSH2 0x17AE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x54C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x319 PUSH2 0x55B CALLDATASIZE PUSH1 0x4 PUSH2 0x2B7E JUMP JUMPDEST PUSH2 0x1843 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x57B CALLDATASIZE PUSH1 0x4 PUSH2 0x2C3F JUMP JUMPDEST PUSH2 0x1870 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x59B CALLDATASIZE PUSH1 0x4 PUSH2 0x26E3 JUMP JUMPDEST PUSH2 0x1992 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x5BB CALLDATASIZE PUSH1 0x4 PUSH2 0x2C78 JUMP JUMPDEST PUSH2 0x1AA8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 SLOAD PUSH2 0x319 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x395 PUSH2 0x5F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B7E JUMP JUMPDEST PUSH2 0x1C83 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x601 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x610 CALLDATASIZE PUSH1 0x4 PUSH2 0x26E3 JUMP JUMPDEST PUSH2 0x1D5C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x621 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x319 PUSH2 0x1DA4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x636 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH2 0x645 CALLDATASIZE PUSH1 0x4 PUSH2 0x2CC3 JUMP JUMPDEST PUSH2 0x1DFB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x656 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x395 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x312E342E31 PUSH1 0xD8 SHL DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH2 0x683 PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x6A5 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x1 EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x6BA JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ADDRESS EQ ISZERO JUMPDEST PUSH2 0x6DF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D6 SWAP1 PUSH2 0x2D04 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND ISZERO PUSH2 0x717 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D6 SWAP1 PUSH2 0x2D23 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH32 0xE90B7BCEB6E7DF5418FB78D8EE546E97C83A08BBCCC01A0644D599CCD2A7C2E0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP4 SWAP1 SWAP5 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP4 DUP5 AND OR SWAP1 SWAP4 SSTORE PUSH1 0x1 DUP4 MSTORE DUP4 SLOAD SWAP1 SWAP2 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x3 DUP1 SLOAD SWAP2 PUSH2 0x784 DUP4 PUSH2 0x2D58 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0x9465FA0C962CC76958E6373A993326400C1C94F8BE2FE3A952ADFA7F60B2EA26 SWAP1 PUSH1 0x0 SWAP1 LOG2 DUP1 PUSH1 0x4 SLOAD EQ PUSH2 0x7CF JUMPI PUSH2 0x7CF DUP2 PUSH2 0xFA9 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x7DE DUP2 PUSH1 0x41 PUSH2 0x1F9F JUMP JUMPDEST DUP3 MLOAD LT ISZERO PUSH2 0x816 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x475330323 PUSH1 0xDC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0xC66 JUMPI PUSH1 0x41 DUP2 DUP2 MUL DUP10 ADD PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x40 DUP3 ADD MLOAD SWAP2 SWAP1 SWAP3 ADD MLOAD PUSH1 0xFF AND SWAP6 POP SWAP1 SWAP4 POP SWAP2 POP PUSH1 0x0 DUP5 SWAP1 SUB PUSH2 0xA2E JUMPI DUP9 MLOAD PUSH1 0x20 DUP11 ADD KECCAK256 DUP11 EQ PUSH2 0x88E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753303237 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST SWAP2 SWAP4 POP DUP4 SWAP2 PUSH2 0x89E DUP8 PUSH1 0x41 PUSH2 0x1F9F JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x8D5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753303231 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST DUP8 MLOAD PUSH2 0x8E2 DUP4 PUSH1 0x20 PUSH2 0x1FDB JUMP JUMPDEST GT ISZERO PUSH2 0x918 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x23A9981919 PUSH1 0xD9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x20 DUP3 DUP10 ADD DUP2 ADD MLOAD DUP10 MLOAD SWAP1 SWAP2 PUSH2 0x93B SWAP1 DUP4 SWAP1 PUSH2 0x935 SWAP1 DUP8 SWAP1 PUSH2 0x1FDB JUMP JUMPDEST SWAP1 PUSH2 0x1FDB JUMP JUMPDEST GT ISZERO PUSH2 0x971 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753303233 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x20C13B0B PUSH1 0xE0 SHL DUP1 DUP3 MSTORE DUP11 DUP6 ADD PUSH1 0x20 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0x20C13B0B SWAP1 PUSH2 0x9A7 SWAP1 DUP16 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D71 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9C4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9E8 SWAP2 SWAP1 PUSH2 0x2D96 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ PUSH2 0xA27 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x11D4CC0C8D PUSH1 0xDA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST POP POP PUSH2 0xBD5 JUMP JUMPDEST DUP4 PUSH1 0xFF AND PUSH1 0x1 SUB PUSH2 0xAB0 JUMPI SWAP2 SWAP4 POP DUP4 SWAP2 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EQ DUP1 PUSH2 0xA77 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP14 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD ISZERO ISZERO JUMPDEST PUSH2 0xAAB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753303235 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH2 0xBD5 JUMP JUMPDEST PUSH1 0x1E DUP5 PUSH1 0xFF AND GT ISZERO PUSH2 0xB75 JUMPI PUSH1 0x40 MLOAD PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3C DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0x5C ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x4 DUP7 PUSH2 0xB15 SWAP2 SWAP1 PUSH2 0x2DC0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 DUP4 MSTORE SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xFF SWAP1 SWAP2 AND SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB64 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP5 POP PUSH2 0xBD5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 DUP4 MSTORE DUP13 SWAP1 MSTORE PUSH1 0xFF DUP7 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBC8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP5 POP JUMPDEST DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT DUP1 ISZERO PUSH2 0xC0F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0xC25 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x1 EQ ISZERO JUMPDEST PUSH2 0xC59 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x23A998191B PUSH1 0xD9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST SWAP4 SWAP5 POP DUP5 SWAP4 PUSH1 0x1 ADD PUSH2 0x820 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EQ DUP1 ISZERO SWAP1 PUSH2 0xCA7 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND ISZERO ISZERO JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x1 EQ DUP1 ISZERO SWAP1 PUSH2 0xCA7 JUMPI POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH1 0x1 EQ DUP1 ISZERO SWAP1 PUSH2 0xD0F JUMPI POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO JUMPDEST PUSH2 0xD43 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x11D4CC4C0D PUSH1 0xDA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH2 0xD52 DUP6 DUP6 DUP6 DUP6 PUSH1 0x0 NOT PUSH2 0x1FF7 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xD8A JUMPI PUSH1 0x40 MLOAD CALLER SWAP1 PUSH32 0x6895C13664AA4F67288B25D7A21D7AAA34916E355FB9B6FAE0A139A9085BECB8 SWAP1 PUSH1 0x0 SWAP1 LOG2 PUSH2 0xDB6 JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 PUSH32 0xACD2C8702804128FDB0DB2BB49F6D127DD0181C13FD45DBFE16DE0930E2BD375 SWAP1 PUSH1 0x0 SWAP1 LOG2 JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0xDCE DUP7 DUP7 DUP7 DUP7 PUSH2 0xCE5 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 MLOAD PUSH1 0x20 RETURNDATASIZE ADD DUP2 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP2 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP4 ADD RETURNDATACOPY DUP1 SWAP2 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xE03 DUP4 PUSH1 0x20 PUSH2 0x2DD9 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE1B JUMPI PUSH2 0xE1B PUSH2 0x25CB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xE45 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE68 JUMPI DUP5 DUP2 ADD SLOAD PUSH1 0x20 DUP1 DUP4 MUL DUP5 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0xE4B JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xE78 PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0xE9A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x1 EQ ISZERO JUMPDEST PUSH2 0xECE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753313031 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND ISZERO PUSH2 0xF1E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x23A9989819 PUSH1 0xD9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH32 0xCC69885FDA6BCC1A4ACE058B4A62BF5E179EA78FD58A1CCD71C22CC9B688792F DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD SWAP5 SWAP1 SWAP6 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP5 DUP6 AND OR SWAP1 SWAP5 SSTORE SWAP5 DUP6 MSTORE DUP4 SLOAD SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP3 SSTORE MLOAD SWAP1 SWAP2 PUSH32 0xECDF3A3EFFEA5783A3C4C2140E677577666428D44ED9D474A0B3A4C9943F8440 SWAP2 LOG2 POP JUMP JUMPDEST PUSH2 0xFB1 PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 GT ISZERO PUSH2 0xFD3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D6 SWAP1 PUSH2 0x2DF0 JUMP JUMPDEST PUSH1 0x1 DUP2 LT ISZERO PUSH2 0x100C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x23A9991819 PUSH1 0xD9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0x610F7FF2B304AE8903C3DE74C60C6AB1F7D6226B3F52C5161905BB5AD4039C93 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1061 DUP15 DUP15 DUP15 DUP15 DUP15 DUP15 DUP15 DUP15 DUP15 DUP15 PUSH1 0x5 SLOAD PUSH2 0x1C83 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD SWAP2 SWAP3 POP PUSH1 0x0 PUSH2 0x1073 DUP4 PUSH2 0x2D58 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD KECCAK256 SWAP2 POP PUSH2 0x108C DUP3 DUP3 DUP7 PUSH2 0x1392 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x10B7 PUSH32 0x4A204F620C8C5CCDCA3FD54D003BADD85BA500436A431F0CBDA4F558C93C34C8 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x113D JUMPI DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x75F0BB52 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 CALLER PUSH1 0x40 MLOAD DUP14 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x110A SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2E47 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1138 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH2 0x1169 PUSH2 0x114C DUP11 PUSH2 0x9C4 PUSH2 0x2F0C JUMP JUMPDEST PUSH1 0x3F PUSH2 0x1159 DUP13 PUSH1 0x40 PUSH2 0x2DD9 JUMP JUMPDEST PUSH2 0x1163 SWAP2 SWAP1 PUSH2 0x2F1F JUMP JUMPDEST SWAP1 PUSH2 0x203E JUMP JUMPDEST PUSH2 0x1175 SWAP1 PUSH2 0x1F4 PUSH2 0x2F0C JUMP JUMPDEST GAS LT ISZERO PUSH2 0x11AC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x475330313 PUSH1 0xDC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x0 GAS SWAP1 POP PUSH2 0x121D DUP16 DUP16 DUP16 DUP16 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP15 DUP13 PUSH1 0x0 EQ PUSH2 0x120A JUMPI DUP15 PUSH2 0x1FF7 JUMP JUMPDEST PUSH2 0x9C4 GAS PUSH2 0x1218 SWAP2 SWAP1 PUSH2 0x2F41 JUMP JUMPDEST PUSH2 0x1FF7 JUMP JUMPDEST SWAP4 POP PUSH2 0x122A GAS DUP3 SWAP1 PUSH2 0x2055 JUMP JUMPDEST SWAP1 POP DUP4 DUP1 PUSH2 0x1237 JUMPI POP DUP10 ISZERO ISZERO JUMPDEST DUP1 PUSH2 0x1241 JUMPI POP DUP8 ISZERO ISZERO JUMPDEST PUSH2 0x1275 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753303133 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x0 DUP9 ISZERO PUSH2 0x128D JUMPI PUSH2 0x128A DUP3 DUP12 DUP12 DUP12 DUP12 PUSH2 0x2070 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0x12D2 JUMPI DUP4 PUSH32 0x442E715F626346E8C54381002DA614F62BEE8D27386535B2521EC8540898556E DUP3 PUSH1 0x40 MLOAD PUSH2 0x12C5 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x130D JUMP JUMPDEST DUP4 PUSH32 0x23428B18ACFB3EA64B08DC0C1D296EA9C09702C09083CA5272E64D115B687D23 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1304 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x1381 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1264E26D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE DUP4 ISZERO ISZERO PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x93271368 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1368 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x137C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP POP SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD DUP1 PUSH2 0x13CA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753303031 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH2 0x13D6 DUP5 DUP5 DUP5 DUP5 PUSH2 0x7D3 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x3 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x13FB JUMPI PUSH2 0x13FB PUSH2 0x25CB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1424 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x1 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH32 0xE90B7BCEB6E7DF5418FB78D8EE546E97C83A08BBCCC01A0644D599CCD2A7C2E0 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x1 EQ PUSH2 0x14C5 JUMPI DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1485 JUMPI PUSH2 0x1485 PUSH2 0x2F54 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD AND DUP2 PUSH2 0x14BD DUP2 PUSH2 0x2D58 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x1461 JUMP JUMPDEST POP SWAP1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x20 DUP5 ADD DUP6 GAS DELEGATECALL DUP1 PUSH1 0x0 MSTORE POP RETURNDATASIZE PUSH1 0x20 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x40 RETURNDATACOPY PUSH1 0x40 RETURNDATASIZE ADD PUSH1 0x0 REVERT JUMPDEST PUSH2 0x152E DUP11 DUP11 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP13 SWAP3 POP PUSH2 0x2176 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1546 JUMPI PUSH2 0x1546 DUP5 PUSH2 0x2352 JUMP JUMPDEST PUSH2 0x1586 DUP8 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x23B6 SWAP3 POP POP POP JUMP JUMPDEST DUP2 ISZERO PUSH2 0x159D JUMPI PUSH2 0x159B DUP3 PUSH1 0x0 PUSH1 0x1 DUP7 DUP6 PUSH2 0x2070 JUMP JUMPDEST POP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x141DF868A6331AF528E38C83B7AA03EDC19BE66E37AE67F9285BF4F8E3C6A1A8 DUP12 DUP12 DUP12 DUP12 DUP10 PUSH1 0x40 MLOAD PUSH2 0x15DE SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2F6A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x1 EQ DUP1 PUSH2 0x1612 JUMPI POP PUSH2 0x1612 DUP5 PUSH2 0xC72 JUMP JUMPDEST PUSH2 0x1646 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753313035 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x0 DUP4 GT PUSH2 0x167E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x23A998981B PUSH1 0xD9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST DUP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1697 JUMPI PUSH2 0x1697 PUSH2 0x25CB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x16C0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP3 SWAP5 POP SWAP2 AND SWAP2 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1705 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x1 EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1710 JUMPI POP DUP4 DUP2 LT JUMPDEST ISZERO PUSH2 0x176B JUMPI DUP2 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1728 JUMPI PUSH2 0x1728 PUSH2 0x2F54 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SLOAD SWAP1 SWAP2 AND SWAP1 DUP1 PUSH2 0x1763 DUP2 PUSH2 0x2D58 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x16E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x1 EQ PUSH2 0x17A3 JUMPI DUP3 PUSH2 0x1788 PUSH1 0x1 DUP4 PUSH2 0x2F41 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x1798 JUMPI PUSH2 0x1798 PUSH2 0x2F54 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP JUMPDEST DUP1 DUP4 MSTORE POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x17FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x475330333 PUSH1 0xDC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 PUSH1 0x1 SWAP1 SSTORE MLOAD DUP4 SWAP2 PUSH32 0xF2A0EB156472D1440255B0D7C1E19CC07115D1051FE605B0DCE69ACFEC884D9C SWAP2 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1858 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 PUSH2 0x1C83 JUMP JUMPDEST DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1878 PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x189A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x1 EQ ISZERO JUMPDEST PUSH2 0x18CE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753313031 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 AND SWAP1 DUP3 AND EQ PUSH2 0x1922 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753313033 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD DUP8 DUP7 AND DUP5 MSTORE DUP3 DUP5 KECCAK256 DUP1 SLOAD SWAP2 SWAP1 SWAP7 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP6 SSTORE DUP4 DUP4 MSTORE DUP1 SLOAD SWAP1 SWAP5 AND SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 SWAP2 PUSH32 0xAAB4FA2B463F581B2B32CB3B7E3B704B9CE37CC209B5FB4D77E593ACE4054276 SWAP2 LOG2 POP POP JUMP JUMPDEST PUSH2 0x199A PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x1A4C JUMPI PUSH1 0x40 MLOAD PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH4 0x736BD41D PUSH1 0xE1 SHL PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x1FFC9A7 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x19F4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A18 SWAP2 SWAP1 PUSH2 0x2FD6 JUMP JUMPDEST PUSH2 0x1A4C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x475333303 PUSH1 0xDC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH32 0x4A204F620C8C5CCDCA3FD54D003BADD85BA500436A431F0CBDA4F558C93C34C8 DUP2 DUP2 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0x1151116914515BC0891FF9047A6CB32CF902546F83066499BCF8BA33D2353FA2 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x1AB0 PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1AD2 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x1 EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1AE7 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ADDRESS EQ ISZERO JUMPDEST PUSH2 0x1B03 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D6 SWAP1 PUSH2 0x2D04 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND ISZERO PUSH2 0x1B3B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D6 SWAP1 PUSH2 0x2D23 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1B5D JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x1 EQ ISZERO JUMPDEST PUSH2 0x1B79 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D6 SWAP1 PUSH2 0x2D04 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 AND SWAP1 DUP4 AND EQ PUSH2 0x1BCD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753323035 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD DUP7 DUP7 AND DUP1 DUP6 MSTORE DUP4 DUP6 KECCAK256 DUP1 SLOAD SWAP3 DUP9 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP4 DUP5 AND OR SWAP1 SSTORE SWAP6 DUP10 AND DUP5 MSTORE DUP3 DUP5 KECCAK256 DUP1 SLOAD DUP3 AND SWAP1 SWAP7 OR SWAP1 SWAP6 SSTORE DUP4 DUP4 MSTORE DUP1 SLOAD SWAP1 SWAP5 AND SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 SWAP2 PUSH32 0xF8D49FC529812E9A7C5C50E69C20F0DCCC0DB8FA95C98BC58CC9A4F1C1299EAF SWAP2 LOG2 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0x9465FA0C962CC76958E6373A993326400C1C94F8BE2FE3A952ADFA7F60B2EA26 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH32 0xBB8310D486368DB6BD6F849402FDD73AD53D316B5A4B2644AD6EFE0F941286D8 PUSH1 0x0 SHL DUP14 DUP14 DUP14 DUP14 PUSH1 0x40 MLOAD PUSH2 0x1CBD SWAP3 SWAP2 SWAP1 PUSH2 0x2FF8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB DUP2 KECCAK256 PUSH2 0x1CE3 SWAP5 SWAP4 SWAP3 SWAP2 DUP15 SWAP1 DUP15 SWAP1 DUP15 SWAP1 DUP15 SWAP1 DUP15 SWAP1 DUP15 SWAP1 DUP15 SWAP1 PUSH1 0x20 ADD PUSH2 0x3008 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH1 0x19 PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0xF8 SHL PUSH2 0x1D0F PUSH2 0x1DA4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT SWAP4 DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x21 DUP4 ADD MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x62 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP POP SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1D64 PUSH2 0x1F66 JUMP JUMPDEST PUSH2 0x1D6D DUP2 PUSH2 0x2352 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0x5AC6C46C93C8D0E53714BA3B53DB3E7C046DA994313D7ED0D192028BC7C228B0 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x47E79534A245952E8B16893A336B85A3D9EA9FA8C573F3D803AFB92A79469218 CHAINID PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP3 ADD MSTORE ADDRESS PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1E03 PUSH2 0x1F66 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x3 SLOAD PUSH2 0x1E13 SWAP2 SWAP1 PUSH2 0x2F41 JUMP JUMPDEST LT ISZERO PUSH2 0x1E31 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D6 SWAP1 PUSH2 0x2DF0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1E53 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x1 EQ ISZERO JUMPDEST PUSH2 0x1E6F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D6 SWAP1 PUSH2 0x2D04 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 AND SWAP1 DUP4 AND EQ PUSH2 0x1EC3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753323035 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD DUP9 DUP7 AND DUP5 MSTORE SWAP2 DUP4 KECCAK256 DUP1 SLOAD SWAP3 SWAP1 SWAP6 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP5 SSTORE SWAP2 DUP2 MSTORE DUP3 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x3 DUP1 SLOAD SWAP2 PUSH2 0x1F16 DUP4 PUSH2 0x3077 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0xF8D49FC529812E9A7C5C50E69C20F0DCCC0DB8FA95C98BC58CC9A4F1C1299EAF SWAP1 PUSH1 0x0 SWAP1 LOG2 DUP1 PUSH1 0x4 SLOAD EQ PUSH2 0x1F61 JUMPI PUSH2 0x1F61 DUP2 PUSH2 0xFA9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST CALLER ADDRESS EQ PUSH2 0x1F9D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753303331 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 SUB PUSH2 0x1FB1 JUMPI POP PUSH1 0x0 PUSH2 0xCA7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FBD DUP4 DUP6 PUSH2 0x2DD9 JUMP JUMPDEST SWAP1 POP DUP3 PUSH2 0x1FCA DUP6 DUP4 PUSH2 0x2F1F JUMP JUMPDEST EQ PUSH2 0x1FD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1FE8 DUP4 DUP6 PUSH2 0x2F0C JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x1FD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x200D JUMPI PUSH2 0x200D PUSH2 0x2E0F JUMP JUMPDEST SUB PUSH2 0x2025 JUMPI PUSH1 0x0 DUP1 DUP6 MLOAD PUSH1 0x20 DUP8 ADD DUP10 DUP7 DELEGATECALL SWAP1 POP PUSH2 0x2035 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 MLOAD PUSH1 0x20 DUP8 ADD DUP9 DUP11 DUP8 CALL SWAP1 POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT ISZERO PUSH2 0x204E JUMPI DUP2 PUSH2 0x1FD4 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x2064 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xDB6 DUP4 DUP6 PUSH2 0x2F41 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x2088 JUMPI DUP3 PUSH2 0x208A JUMP JUMPDEST ORIGIN JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x211D JUMPI PUSH2 0x20BC GASPRICE DUP7 LT PUSH2 0x20AA JUMPI GASPRICE PUSH2 0x20AC JUMP JUMPDEST DUP6 JUMPDEST PUSH2 0x20B6 DUP10 DUP10 PUSH2 0x1FDB JUMP JUMPDEST SWAP1 PUSH2 0x1F9F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP4 ISZERO PUSH2 0x8FC MUL SWAP1 DUP5 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP PUSH2 0x2118 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x4753303131 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH2 0x216C JUMP JUMPDEST PUSH2 0x212B DUP6 PUSH2 0x20B6 DUP10 DUP10 PUSH2 0x1FDB JUMP JUMPDEST SWAP2 POP PUSH2 0x2138 DUP5 DUP3 DUP5 PUSH2 0x24E8 JUMP JUMPDEST PUSH2 0x216C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x23A9981899 PUSH1 0xD9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD ISZERO PUSH2 0x21AE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x475332303 PUSH1 0xDC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST DUP2 MLOAD DUP2 GT ISZERO PUSH2 0x21CF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D6 SWAP1 PUSH2 0x2DF0 JUMP JUMPDEST PUSH1 0x1 DUP2 LT ISZERO PUSH2 0x2208 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x23A9991819 PUSH1 0xD9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x231F JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x222A JUMPI PUSH2 0x222A PUSH2 0x2F54 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x2261 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x1 EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x2276 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ADDRESS EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x2294 JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST PUSH2 0x22B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D6 SWAP1 PUSH2 0x2D04 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND ISZERO PUSH2 0x22E8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D6 SWAP1 PUSH2 0x2D23 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP4 DUP3 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE PUSH1 0x1 ADD PUSH2 0x220D JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP1 MLOAD PUSH1 0x3 SSTORE PUSH1 0x4 SSTORE JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x2392 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x475334303 PUSH1 0xDC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH32 0x6C9A6C4A39284E37ED1CF53D337577D14212A4870FB976A4366C693B939918D5 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 MSTORE PUSH1 0x20 MSTORE PUSH32 0xCC69885FDA6BCC1A4ACE058B4A62BF5E179EA78FD58A1CCD71C22CC9B688792F SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x2420 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x475331303 PUSH1 0xDC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH32 0xCC69885FDA6BCC1A4ACE058B4A62BF5E179EA78FD58A1CCD71C22CC9B688792F DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0x7CF JUMPI DUP2 EXTCODESIZE PUSH2 0x24A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x23A9981819 PUSH1 0xD9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH2 0x24B4 DUP3 PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x0 NOT PUSH2 0x1FF7 JUMP JUMPDEST PUSH2 0x7CF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x475330303 PUSH1 0xDC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR DUP2 MSTORE DUP3 MLOAD PUSH1 0x0 SWAP4 SWAP3 SWAP2 DUP5 SWAP2 SWAP1 DUP3 DUP10 PUSH2 0x2710 GAS SUB CALL RETURNDATASIZE DUP1 ISZERO PUSH2 0x255A JUMPI PUSH1 0x20 DUP2 EQ PUSH2 0x2562 JUMPI PUSH1 0x0 SWAP4 POP PUSH2 0x256D JUMP JUMPDEST DUP2 SWAP4 POP PUSH2 0x256D JUMP JUMPDEST PUSH1 0x0 MLOAD ISZERO DUP3 ISZERO OR ISZERO SWAP4 POP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x258C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x259A DUP2 PUSH2 0x2577 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x25B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x25BD DUP2 PUSH2 0x2577 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x25F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x260D JUMPI PUSH2 0x260D PUSH2 0x25CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x2635 JUMPI PUSH2 0x2635 PUSH2 0x25CB JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x264E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2684 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x26A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x26AF DUP9 DUP4 DUP10 ADD PUSH2 0x25E1 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x26C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D2 DUP8 DUP3 DUP9 ADD PUSH2 0x25E1 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1FD4 DUP2 PUSH2 0x2577 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x2 DUP2 LT PUSH2 0x259A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2725 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x2730 DUP2 PUSH2 0x2577 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2753 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x275F DUP8 DUP3 DUP9 ADD PUSH2 0x25E1 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x276E PUSH1 0x60 DUP7 ADD PUSH2 0x2700 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x279F JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x2783 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xDB6 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2779 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x27ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1FD4 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2779 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2821 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x283A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2852 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x286A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x140 DUP13 DUP15 SUB SLT ISZERO PUSH2 0x2893 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x289C DUP13 PUSH2 0x258F JUMP JUMPDEST SWAP11 POP PUSH1 0x20 DUP13 ADD CALLDATALOAD SWAP10 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP1 PUSH1 0x40 DUP15 ADD CALLDATALOAD GT ISZERO PUSH2 0x28BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x28CF DUP15 PUSH1 0x40 DUP16 ADD CALLDATALOAD DUP16 ADD PUSH2 0x2828 JUMP JUMPDEST SWAP1 SWAP11 POP SWAP9 POP PUSH2 0x28E0 PUSH1 0x60 DUP15 ADD PUSH2 0x2700 JUMP JUMPDEST SWAP8 POP PUSH1 0x80 DUP14 ADD CALLDATALOAD SWAP7 POP PUSH1 0xA0 DUP14 ADD CALLDATALOAD SWAP6 POP PUSH1 0xC0 DUP14 ADD CALLDATALOAD SWAP5 POP PUSH2 0x2903 PUSH1 0xE0 DUP15 ADD PUSH2 0x258F JUMP JUMPDEST SWAP4 POP PUSH2 0x2912 PUSH2 0x100 DUP15 ADD PUSH2 0x258F JUMP JUMPDEST SWAP3 POP DUP1 PUSH2 0x120 DUP15 ADD CALLDATALOAD GT ISZERO PUSH2 0x2926 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2938 DUP14 PUSH2 0x120 DUP15 ADD CALLDATALOAD DUP15 ADD PUSH2 0x25E1 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP1 SWAP4 SWAP7 SWAP10 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x295F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x297E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x298A DUP8 DUP4 DUP9 ADD PUSH2 0x25E1 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x29A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29AD DUP7 DUP3 DUP8 ADD PUSH2 0x25E1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x29F1 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x29CC JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1FD4 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x29B7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2A22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2A2D DUP2 PUSH2 0x2577 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A55 DUP6 DUP3 DUP7 ADD PUSH2 0x25E1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP12 DUP14 SUB SLT ISZERO PUSH2 0x2A7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP11 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2A97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP14 ADD SWAP2 POP DUP14 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2AAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x2ABA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP15 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x2ACF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 DUP2 ADD SWAP14 POP SWAP1 SWAP12 POP DUP14 ADD CALLDATALOAD SWAP10 POP PUSH2 0x2AEA PUSH1 0x40 DUP15 ADD PUSH2 0x258F JUMP JUMPDEST SWAP9 POP PUSH1 0x60 DUP14 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2B00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B0D DUP14 DUP3 DUP15 ADD PUSH2 0x2828 JUMP JUMPDEST SWAP1 SWAP8 POP SWAP6 POP PUSH2 0x2B20 SWAP1 POP PUSH1 0x80 DUP13 ADD PUSH2 0x258F JUMP JUMPDEST SWAP4 POP PUSH2 0x2B2E PUSH1 0xA0 DUP13 ADD PUSH2 0x258F JUMP JUMPDEST SWAP3 POP PUSH1 0xC0 DUP12 ADD CALLDATALOAD SWAP2 POP PUSH2 0x2B43 PUSH1 0xE0 DUP13 ADD PUSH2 0x258F JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP2 SWAP5 SWAP8 SWAP11 POP SWAP3 SWAP6 SWAP9 POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2B67 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x29B7 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x140 DUP13 DUP15 SUB SLT ISZERO PUSH2 0x2BA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP12 CALLDATALOAD PUSH2 0x2BAB DUP2 PUSH2 0x2577 JUMP JUMPDEST SWAP11 POP PUSH1 0x20 DUP13 ADD CALLDATALOAD SWAP10 POP PUSH1 0x40 DUP13 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2BCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2BDA DUP15 DUP3 DUP16 ADD PUSH2 0x2828 JUMP JUMPDEST SWAP1 SWAP11 POP SWAP9 POP PUSH2 0x2BED SWAP1 POP PUSH1 0x60 DUP14 ADD PUSH2 0x2700 JUMP JUMPDEST SWAP7 POP PUSH1 0x80 DUP13 ADD CALLDATALOAD SWAP6 POP PUSH1 0xA0 DUP13 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 DUP13 ADD CALLDATALOAD SWAP4 POP PUSH1 0xE0 DUP13 ADD CALLDATALOAD PUSH2 0x2C12 DUP2 PUSH2 0x2577 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 DUP13 ADD CALLDATALOAD PUSH2 0x2C23 DUP2 PUSH2 0x2577 JUMP JUMPDEST DUP1 SWAP3 POP POP PUSH2 0x120 DUP13 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP1 SWAP4 SWAP7 SWAP10 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2C52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2C5D DUP2 PUSH2 0x2577 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2C6D DUP2 PUSH2 0x2577 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2C8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2C98 DUP2 PUSH2 0x2577 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x2CA8 DUP2 PUSH2 0x2577 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x2CB8 DUP2 PUSH2 0x2577 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2CD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2CE3 DUP2 PUSH2 0x2577 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x2CF3 DUP2 PUSH2 0x2577 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x5 SWAP1 DUP3 ADD MSTORE PUSH5 0x4753323033 PUSH1 0xD8 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x5 SWAP1 DUP3 ADD MSTORE PUSH5 0x11D4CC8C0D PUSH1 0xDA SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2D6A JUMPI PUSH2 0x2D6A PUSH2 0x2D42 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2D84 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2779 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2035 DUP2 DUP6 PUSH2 0x2779 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2DA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1FD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xFF DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP2 GT ISZERO PUSH2 0xCA7 JUMPI PUSH2 0xCA7 PUSH2 0x2D42 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0xCA7 JUMPI PUSH2 0xCA7 PUSH2 0x2D42 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x5 SWAP1 DUP3 ADD MSTORE PUSH5 0x4753323031 PUSH1 0xD8 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0x2E43 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP13 SWAP1 MSTORE PUSH2 0x160 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x0 PUSH2 0x180 DUP12 DUP14 DUP3 DUP6 ADD CALLDATACOPY PUSH1 0x0 DUP4 DUP14 ADD DUP3 ADD MSTORE PUSH1 0x1F DUP13 ADD PUSH1 0x1F NOT AND DUP4 ADD PUSH2 0x2E93 PUSH1 0x60 DUP6 ADD DUP14 PUSH2 0x2E25 JUMP JUMPDEST DUP11 PUSH1 0x80 DUP6 ADD MSTORE DUP10 PUSH1 0xA0 DUP6 ADD MSTORE DUP9 PUSH1 0xC0 DUP6 ADD MSTORE PUSH2 0x2EBA PUSH1 0xE0 DUP6 ADD DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH2 0x100 DUP6 ADD MSTORE DUP2 DUP5 DUP3 SUB ADD PUSH2 0x120 DUP6 ADD MSTORE PUSH2 0x2EE1 DUP3 DUP3 ADD DUP8 PUSH2 0x2779 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x2EFB PUSH2 0x140 DUP4 ADD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0xCA7 JUMPI PUSH2 0xCA7 PUSH2 0x2D42 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2F3C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0xCA7 JUMPI PUSH2 0xCA7 PUSH2 0x2D42 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 DUP1 DUP3 MSTORE DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 DUP7 PUSH1 0xA0 DUP4 ADD DUP3 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x2FAD JUMPI DUP3 CALLDATALOAD PUSH2 0x2F90 DUP2 PUSH2 0x2577 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2F7D JUMP JUMPDEST POP PUSH1 0x20 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2FE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1FD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST DUP12 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD DUP12 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP11 SWAP1 MSTORE PUSH2 0x160 DUP3 ADD SWAP1 PUSH2 0x303C PUSH1 0x80 DUP5 ADD DUP12 PUSH2 0x2E25 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD SWAP9 SWAP1 SWAP9 MSTORE PUSH1 0xC0 DUP3 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0xE0 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP2 DUP6 AND PUSH2 0x100 DUP5 ADD MSTORE SWAP1 SWAP4 AND PUSH2 0x120 DUP3 ADD MSTORE PUSH2 0x140 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x3086 JUMPI PUSH2 0x3086 PUSH2 0x2D42 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 COINBASE 0xBB SELFDESTRUCT PUSH3 0x830549 OR PC 0xE8 0x4F PUSH0 PUSH27 0x394E7F6461AA9942D70DBE77CE44D1094C2464736F6C6343000817 STOP CALLER ","sourceMap":"1919:19946:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;538:35:15;;563:9;160:25:40;;551:10:15;;538:35;;148:2:40;133:18;538:35:15;;;;;;;1919:19946:8;;;;;;;;;;;-1:-1:-1;479:66:10;3341:11;;;3365:63;;3402:12;3365:63;3460:14;3457:1;3454;3441:34;3697:8;3693:2;3689:17;3673:14;3666:41;3855:1;3852;3847:2;3831:14;3827:23;3824:1;3821;3812:7;3805:5;3800:57;3785:72;;3891:16;3888:1;3885;3870:38;3931:7;3921:78;;3968:16;3965:1;3958:27;3921:78;;4022:16;4019:1;4012:27;2399:625:13;;;;;;;;;;-1:-1:-1;2399:625:13;;;;;:::i;:::-;;:::i;:::-;;13892:3837:8;;;;;;;;;;-1:-1:-1;13892:3837:8;;;;;:::i;:::-;;:::i;5780:151:12:-;;;;;;;;;;-1:-1:-1;5780:151:12;;;;;:::i;:::-;;:::i;:::-;;;2744:14:40;;2737:22;2719:41;;2707:2;2692:18;5780:151:12;;;;;;;;6140:138:13;;;;;;;;;;-1:-1:-1;6140:138:13;;;;;:::i;:::-;;:::i;18522:211:8:-;;;;;;;;;;-1:-1:-1;18689:9:8;18522:211;;;160:25:40;;;148:2;133:18;18522:211:8;14:177:40;3622:594:12;;;;;;;;;;-1:-1:-1;3622:594:12;;;;;:::i;:::-;;:::i;4707:959::-;;;;;;;;;;-1:-1:-1;4707:959:12;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;785:464:20:-;;;;;;;;;;-1:-1:-1;785:464:20;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3360:49:8:-;;;;;;;;;;-1:-1:-1;3360:49:8;;;;;:::i;:::-;;;;;;;;;;;;;;2001:426:12;;;;;;;;;;-1:-1:-1;2001:426:12;;;;;:::i;:::-;;:::i;5398:360:13:-;;;;;;;;;;-1:-1:-1;5398:360:13;;;;;:::i;:::-;;:::i;7433:3556:8:-;;;;;;:::i;:::-;;:::i;3521:69::-;;;;;;;;;;-1:-1:-1;3521:69:8;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;12858:353;;;;;;;;;;-1:-1:-1;12858:353:8;;;;;:::i;:::-;;:::i;6383:437:13:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;3188:20:8:-;;;;;;;;;;;;;;;;1882:486:20;;;;;;;;;;-1:-1:-1;1882:486:20;;;;;:::i;:::-;;:::i;4740:1151:8:-;;;;;;;;;;-1:-1:-1;4740:1151:8;;;;;:::i;:::-;;:::i;6437:1535:12:-;;;;;;;;;;-1:-1:-1;6437:1535:12;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;18133:228:8:-;;;;;;;;;;-1:-1:-1;18133:228:8;;;;;:::i;:::-;;:::i;21385:478::-;;;;;;;;;;-1:-1:-1;21385:478:8;;;;;:::i;:::-;;:::i;2677:423:12:-;;;;;;;;;;-1:-1:-1;2677:423:12;;;;;:::i;:::-;;:::i;1962:386:11:-;;;;;;;;;;-1:-1:-1;1962:386:11;;;;;:::i;:::-;;:::i;4416:796:13:-;;;;;;;;;;-1:-1:-1;4416:796:13;;;;;:::i;:::-;;:::i;5915:87::-;;;;;;;;;;-1:-1:-1;5986:9:13;;5915:87;;19858:822:8;;;;;;;;;;-1:-1:-1;19858:822:8;;;;;:::i;:::-;;:::i;2437:161:10:-;;;;;;;;;;-1:-1:-1;2437:161:10;;;;;:::i;:::-;;:::i;18901:149:8:-;;;;;;;;;;;;;:::i;3380:697:13:-;;;;;;;;;;-1:-1:-1;3380:697:13;;;;;:::i;:::-;;:::i;2205:40:8:-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2205:40:8;;;;;2399:625:13;505:17:17;:15;:17::i;:::-;-1:-1:-1;;;;;2575:19:13;::::1;::::0;;::::1;::::0;:47:::1;;-1:-1:-1::0;;;;;;2598:24:13;::::1;687:3;2598:24;;2575:47;:73;;;;-1:-1:-1::0;;;;;;2626:22:13;::::1;2643:4;2626:22;;2575:73;2567:91;;;;-1:-1:-1::0;;;2567:91:13::1;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1::0;;;;;2716:13:13;;::::1;2741:1;2716:13:::0;;;:6:::1;:13;::::0;;;;;::::1;:27:::0;2708:45:::1;;;;-1:-1:-1::0;;;2708:45:13::1;;;;;;;:::i;:::-;2779:6;:23;::::0;;;;-1:-1:-1;;;;;2763:13:13;;::::1;2779:23;2763:13:::0;;;2779:23;2763:13;;:39;;2779:23;;;::::1;-1:-1:-1::0;;;;;;2763:39:13;;::::1;;::::0;;;-1:-1:-1;2812:23:13;;:31;;;;::::1;;::::0;;;2853:10:::1;:12:::0;;;::::1;::::0;::::1;:::i;:::-;::::0;;;-1:-1:-1;;2880:17:13::1;::::0;-1:-1:-1;;;;;2880:17:13;::::1;::::0;::::1;::::0;;;::::1;2978:10;2965:9;;:23;2961:56;;2990:27;3006:10;2990:15;:27::i;:::-;2399:625:::0;;:::o;13892:3837:8:-;14126:26;:18;14149:2;14126:22;:26::i;:::-;14105:10;:17;:47;;14097:65;;;;-1:-1:-1;;;14097:65:8;;14872:2:40;14097:65:8;;;14854:21:40;14911:1;14891:18;;;14884:29;-1:-1:-1;;;14929:18:40;;;14922:35;14974:18;;14097:65:8;14670:328:40;14097:65:8;14224:17;14264:20;14294:7;14311:9;14330;14349;14368:3355;14384:18;14380:1;:22;14368:3355;;;1176:4:18;1172:14;;;1210:40;;1244:4;1210:40;;1204:47;1309:4;1275:40;;1269:47;1627:40;;;;1621:47;1670:4;1617:58;;-1:-1:-1;1204:47:18;;-1:-1:-1;1269:47:18;-1:-1:-1;14487:1:8;14482:6;;;14478:3068;;14516:15;;;;;;:27;;14508:45;;;;-1:-1:-1;;;14508:45:8;;15205:2:40;14508:45:8;;;15187:21:40;15244:1;15224:18;;;15217:29;-1:-1:-1;;;15262:18:40;;;15255:35;15307:18;;14508:45:8;15003:328:40;14508:45:8;14770:1;;-1:-1:-1;14770:1:8;;15175:26;:18;15198:2;15175:22;:26::i;:::-;15161:40;;;15153:58;;;;-1:-1:-1;;;15153:58:8;;15538:2:40;15153:58:8;;;15520:21:40;15577:1;15557:18;;;15550:29;-1:-1:-1;;;15595:18:40;;;15588:35;15640:18;;15153:58:8;15336:328:40;15153:58:8;15373:17;;15351:18;15359:1;15366:2;15351:14;:18::i;:::-;:39;;15343:57;;;;-1:-1:-1;;;15343:57:8;;15871:2:40;15343:57:8;;;15853:21:40;15910:1;15890:18;;;15883:29;-1:-1:-1;;;15928:18:40;;;15921:35;15973:18;;15343:57:8;15669:328:40;15343:57:8;15739:4;15719:18;;;15715:29;;15709:36;15836:17;;15709:36;;15788:44;;15709:36;;15788:18;;15719;;15788:14;:18::i;:::-;:22;;:44::i;:::-;:65;;15780:83;;;;-1:-1:-1;;;15780:83:8;;16204:2:40;15780:83:8;;;16186:21:40;16243:1;16223:18;;;16216:29;-1:-1:-1;;;16261:18:40;;;16254:35;16306:18;;15780:83:8;16002:328:40;15780:83:8;16292:75;;-1:-1:-1;;;16292:75:8;;;16224:18;;;16244:4;16220:29;;-1:-1:-1;;;;;16292:50:8;;;223:10:29;;16292:75:8;;16343:4;;16220:29;;16292:75;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;16292:98:8;;16284:116;;;;-1:-1:-1;;;16284:116:8;;17214:2:40;16284:116:8;;;17196:21:40;17253:1;17233:18;;;17226:29;-1:-1:-1;;;17271:18:40;;;17264:35;17316:18;;16284:116:8;17012:328:40;16284:116:8;14490:1925;;14478:3068;;;16425:1;:6;;16430:1;16425:6;16421:1125;;16642:1;;-1:-1:-1;16642:1:8;;16817:10;-1:-1:-1;;;;;16817:26:8;;;;:73;;-1:-1:-1;;;;;;16847:28:8;;;;;;:14;:28;;;;;;;;:38;;;;;;;;;:43;;16817:73;16809:91;;;;-1:-1:-1;;;16809:91:8;;17547:2:40;16809:91:8;;;17529:21:40;17586:1;17566:18;;;17559:29;-1:-1:-1;;;17604:18:40;;;17597:35;17649:18;;16809:91:8;17345:328:40;16809:91:8;16421:1125;;;16929:2;16925:1;:6;;;16921:625;;;17222:62;;17920:66:40;17222:62:8;;;17908:79:40;18003:12;;;17996:28;;;17202:97:8;;18040:12:40;;17222:62:8;;;;;;;;;;;;17212:73;;;;;;17291:1;17287;:5;;;;:::i;:::-;17202:97;;;;;;;;;;;;18446:25:40;;;;18519:4;18507:17;;;18487:18;;;18480:45;18541:18;;;18534:34;;;18584:18;;;18577:34;;;18418:19;;17202:97:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17187:112;;16921:625;;;17503:28;;;;;;;;;;;;18446:25:40;;;18519:4;18507:17;;18487:18;;;18480:45;;;;18541:18;;;18534:34;;;18584:18;;;18577:34;;;17503:28:8;;18418:19:40;;17503:28:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17488:43;;16921:625;17582:9;-1:-1:-1;;;;;17567:24:8;:12;-1:-1:-1;;;;;17567:24:8;;:62;;;;-1:-1:-1;;;;;;17595:20:8;;;17627:1;17595:20;;;:6;:20;;;;;;;:34;;17567:62;:97;;;;-1:-1:-1;;;;;;17633:31:8;;687:3:13;17633:31:8;;17567:97;17559:115;;;;-1:-1:-1;;;17559:115:8;;18824:2:40;17559:115:8;;;18806:21:40;18863:1;18843:18;;;18836:29;-1:-1:-1;;;18881:18:40;;;18874:35;18926:18;;17559:115:8;18622:328:40;17559:115:8;17700:12;;-1:-1:-1;17700:12:8;;14404:3;;14368:3355;;;14020:3709;;;;;;13892:3837;;;;:::o;5780:151:12:-;5842:4;1005:3;-1:-1:-1;;;;;5865:26:12;;;;;;:59;;-1:-1:-1;;;;;;5895:15:12;;;5922:1;5895:15;;;:7;:15;;;;;;;:29;;5865:59;5858:66;5780:151;-1:-1:-1;;5780:151:12:o;6140:138:13:-;6193:4;-1:-1:-1;;;;;6216:24:13;;687:3;6216:24;;;;:55;;-1:-1:-1;;;;;;;6244:13:13;;;6269:1;6244:13;;;:6;:13;;;;;;;:27;;;6140:138::o;3622:594:12:-;3791:12;3872:10;1005:3;3872:30;;;;:67;;-1:-1:-1;3914:10:12;3937:1;3906:19;;;:7;:19;;;;;;-1:-1:-1;;;;;3906:19:12;:33;;3872:67;3864:85;;;;-1:-1:-1;;;3864:85:12;;19157:2:40;3864:85:12;;;19139:21:40;19196:1;19176:18;;;19169:29;-1:-1:-1;;;19214:18:40;;;19207:35;19259:18;;3864:85:12;18955:328:40;3864:85:12;4031:54;4039:2;4043:5;4050:4;4056:9;-1:-1:-1;;4031:7:12;:54::i;:::-;4021:64;;4099:7;4095:114;;;4113:38;;4140:10;;4113:38;;;;;4095:114;;;4171:38;;4198:10;;4171:38;;;;;4095:114;3622:594;;;;;;:::o;4707:959::-;4878:12;4892:23;4937:53;4963:2;4967:5;4974:4;4980:9;4937:25;:53::i;:::-;4927:63;;5137:4;5131:11;5379:4;5361:16;5357:27;5352:3;5348:37;5342:4;5335:51;5441:16;5436:3;5429:29;5535:16;5532:1;5525:4;5520:3;5516:14;5501:51;5647:3;5633:17;;;4707:959;;;;;;;:::o;785:464:20:-;860:12;884:19;916:11;:6;925:2;916:11;:::i;:::-;906:22;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;906:22:20;;884:44;;943:13;938:282;970:6;962:5;:14;938:282;;;1106:18;;;1100:25;1183:4;1172:16;;;1149:40;;;1142:54;978:7;;938:282;;;-1:-1:-1;1236:6:20;785:464;-1:-1:-1;;;785:464:20:o;2001:426:12:-;505:17:17;:15;:17::i;:::-;-1:-1:-1;;;;;2129:20:12;::::1;::::0;;::::1;::::0;:50:::1;;-1:-1:-1::0;;;;;;2153:26:12;::::1;1005:3;2153:26;;2129:50;2121:68;;;::::0;-1:-1:-1;;;2121:68:12;;19663:2:40;2121:68:12::1;::::0;::::1;19645:21:40::0;19702:1;19682:18;;;19675:29;-1:-1:-1;;;19720:18:40;;;19713:35;19765:18;;2121:68:12::1;19461:328:40::0;2121:68:12::1;-1:-1:-1::0;;;;;2248:15:12;;::::1;2275:1;2248:15:::0;;;:7:::1;:15;::::0;;;;;::::1;:29:::0;2240:47:::1;;;::::0;-1:-1:-1;;;2240:47:12;;19996:2:40;2240:47:12::1;::::0;::::1;19978:21:40::0;20035:1;20015:18;;;20008:29;-1:-1:-1;;;20053:18:40;;;20046:35;20098:18;;2240:47:12::1;19794:328:40::0;2240:47:12::1;2315:7;:25;::::0;;;;;;-1:-1:-1;;;;;2297:15:12;;::::1;2315:25;2297:15:::0;;;2315:25;2297:15;;;:43;;2315:25;;;::::1;-1:-1:-1::0;;;;;;2297:43:12;;::::1;;::::0;;;2350:25;;;:34;;;;::::1;::::0;::::1;::::0;;;2399:21;2297:15;;2399:21:::1;::::0;::::1;2001:426:::0;:::o;5398:360:13:-;505:17:17;:15;:17::i;:::-;5562:10:13::1;;5548;:24;;5540:42;;;;-1:-1:-1::0;;;5540:42:13::1;;;;;;;:::i;:::-;5666:1;5652:10;:15;;5644:33;;;::::0;-1:-1:-1;;;5644:33:13;;20662:2:40;5644:33:13::1;::::0;::::1;20644:21:40::0;20701:1;20681:18;;;20674:29;-1:-1:-1;;;20719:18:40;;;20712:35;20764:18;;5644:33:13::1;20460:328:40::0;5644:33:13::1;5687:9;:22:::0;;;5724:27:::1;::::0;160:25:40;;;5724:27:13::1;::::0;148:2:40;133:18;5724:27:13::1;;;;;;;5398:360:::0;:::o;7433:3556:8:-;7779:12;7803:14;7930:23;7956:388;8031:2;8051:5;8074:4;;8096:9;8123;8182:7;8207:8;8233;8259:14;8325:5;;7956:21;:388::i;:::-;8413:5;:7;;7930:414;;-1:-1:-1;8413:5:8;:7;;;:::i;:::-;;;;-1:-1:-1;;8443:21:8;;;;;;;-1:-1:-1;8478:47:8;8443:21;8453:10;8514;8478:15;:47::i;:::-;7916:620;8545:13;8561:10;1306:66:11;2911:11;;2712:226;8561:10:8;8545:26;-1:-1:-1;;;;;;8599:19:8;;;8595:547;;8644:5;-1:-1:-1;;;;;8638:29:8;;8729:2;8753:5;8780:4;;8806:9;8837;8904:7;8933:8;8963;8993:14;9067:10;9099;8638:489;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8595:547;9456:45;9484:16;:9;9496:4;9484:16;:::i;:::-;9476:2;9458:14;:9;9470:2;9458:14;:::i;:::-;9457:21;;;;:::i;:::-;9456:27;;:45::i;:::-;:51;;9504:3;9456:51;:::i;:::-;9443:9;:64;;9435:82;;;;-1:-1:-1;;;9435:82:8;;23074:2:40;9435:82:8;;;23056:21:40;23113:1;23093:18;;;23086:29;-1:-1:-1;;;23131:18:40;;;23124:35;23176:18;;9435:82:8;22872:328:40;9435:82:8;9630:15;9648:9;9630:27;;9936:83;9944:2;9948:5;9955:4;;9936:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9961:9;9972:8;9984:1;9972:13;:46;;10009:9;9936:7;:83::i;9972:46::-;10001:4;9989:9;:16;;;;:::i;:::-;9936:7;:83::i;:::-;9926:93;;10043:22;10055:9;10043:7;;:11;:22::i;:::-;10033:32;;10349:7;:25;;;-1:-1:-1;10360:14:8;;;10349:25;:42;;;-1:-1:-1;10378:13:8;;;10349:42;10341:60;;;;-1:-1:-1;;;10341:60:8;;23540:2:40;10341:60:8;;;23522:21:40;23579:1;23559:18;;;23552:29;-1:-1:-1;;;23597:18:40;;;23590:35;23642:18;;10341:60:8;23338:328:40;10341:60:8;10550:15;10587:12;;10583:128;;10629:67;10643:7;10652;10661:8;10671;10681:14;10629:13;:67::i;:::-;10619:77;;10583:128;10728:7;10724:108;;;10759:6;10742:33;10767:7;10742:33;;;;160:25:40;;148:2;133:18;;14:177;10742:33:8;;;;;;;;10724:108;;;10816:6;10799:33;10824:7;10799:33;;;;160:25:40;;148:2;133:18;;14:177;10799:33:8;;;;;;;;10724:108;-1:-1:-1;;;;;;;10870:19:8;;;10866:107;;10909:49;;-1:-1:-1;;;10909:49:8;;;;;23839:25:40;;;23907:14;;23900:22;23880:18;;;23873:50;-1:-1:-1;;;;;10909:32:8;;;;;23812:18:40;;10909:49:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10866:107;7793:3196;;7433:3556;;;;;;;;;;;;;:::o;12858:353::-;13046:9;;13114:14;13106:32;;;;-1:-1:-1;;;13106:32:8;;24136:2:40;13106:32:8;;;24118:21:40;24175:1;24155:18;;;24148:29;-1:-1:-1;;;24193:18:40;;;24186:35;24238:18;;13106:32:8;23934:328:40;13106:32:8;13148:56;13165:8;13175:4;13181:10;13193;13148:16;:56::i;:::-;12957:254;12858:353;;;:::o;6383:437:13:-;6425:16;6453:22;6492:10;;6478:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6478:25:13;-1:-1:-1;687:3:13;6547:13;6597:23;;;:6;:23;;;;6453:50;;-1:-1:-1;6547:13:13;-1:-1:-1;;;;;6597:23:13;6630:162;-1:-1:-1;;;;;6637:31:13;;687:3;6637:31;6630:162;;6699:12;6684:5;6690;6684:12;;;;;;;;:::i;:::-;-1:-1:-1;;;;;6684:27:13;;;:12;;;;;;;;;;:27;;;;6740:20;;;;;;;:6;:20;;;;;;;;;6774:7;;;;:::i;:::-;;;;6630:162;;;-1:-1:-1;6808:5:13;;6383:437;-1:-1:-1;;6383:437:13:o;1882:486:20:-;2167:1;2164;2146:15;2140:22;2133:4;2116:15;2112:26;2096:14;2089:5;2076:93;2196:7;2190:4;2183:21;;2230:16;2224:4;2217:30;2284:16;2281:1;2275:4;2260:41;2346:4;2328:16;2324:27;2321:1;2314:38;4740:1151:8;5139:32;5151:7;;5139:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5160:10:8;;-1:-1:-1;5139:11:8;;-1:-1:-1;;5139:32:8:i;:::-;-1:-1:-1;;;;;5185:29:8;;;5181:78;;5216:43;5243:15;5216:26;:43::i;:::-;5394:22;5407:2;5411:4;;5394:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5394:12:8;;-1:-1:-1;;;5394:22:8:i;:::-;5431:11;;5427:380;;5737:59;5751:7;5760:1;5763;5766:12;5780:15;5737:13;:59::i;:::-;;5427:380;5831:10;-1:-1:-1;;;;;5821:63:8;;5843:7;;5852:10;5864:2;5868:15;5821:63;;;;;;;;;;:::i;:::-;;;;;;;;4740:1151;;;;;;;;;;:::o;6437:1535:12:-;6522:22;6546:12;-1:-1:-1;;;;;6578:25:12;;1005:3;6578:25;;:51;;;6607:22;6623:5;6607:15;:22::i;:::-;6570:69;;;;-1:-1:-1;;;6570:69:12;;25591:2:40;6570:69:12;;;25573:21:40;25630:1;25610:18;;;25603:29;-1:-1:-1;;;25648:18:40;;;25641:35;25693:18;;6570:69:12;25389:328:40;6570:69:12;6668:1;6657:8;:12;6649:30;;;;-1:-1:-1;;;6649:30:12;;25924:2:40;6649:30:12;;;25906:21:40;25963:1;25943:18;;;25936:29;-1:-1:-1;;;25981:18:40;;;25974:35;26026:18;;6649:30:12;25722:328:40;6649:30:12;6752:8;6738:23;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6738:23:12;-1:-1:-1;;;;;;6845:14:12;;;6805:19;6845:14;;;:7;:14;;;;;;6730:31;;-1:-1:-1;6845:14:12;;;-1:-1:-1;6869:192:12;-1:-1:-1;;;;;6876:18:12;;;;;;:46;;-1:-1:-1;;;;;;6898:24:12;;1005:3;6898:24;;6876:46;:72;;;;;6940:8;6926:11;:22;6876:72;6869:192;;;6985:4;6964:5;6970:11;6964:18;;;;;;;;:::i;:::-;-1:-1:-1;;;;;6964:25:12;;;:18;;;;;;;;;;:25;;;;7010:13;;;;;;;:7;:13;;;;;;;;;;;;7037;;;;:::i;:::-;;;;6869:192;;;-1:-1:-1;;;;;7716:24:12;;1005:3;7716:24;7712:84;;7763:5;7769:15;7783:1;7769:11;:15;:::i;:::-;7763:22;;;;;;;;:::i;:::-;;;;;;;7756:29;;7712:84;7944:11;7937:5;7930:26;7916:50;6437:1535;;;;;:::o;18133:228:8:-;18211:10;18234:1;18204:18;;;:6;:18;;;;;;-1:-1:-1;;;;;18204:18:8;18196:50;;;;-1:-1:-1;;;18196:50:8;;26257:2:40;18196:50:8;;;26239:21:40;26296:1;26276:18;;;26269:29;-1:-1:-1;;;26314:18:40;;;26307:35;26359:18;;18196:50:8;26055:328:40;18196:50:8;18271:10;18256:26;;;;:14;:26;;;;;;;;:41;;;;;;;;;18300:1;18256:45;;18316:38;18283:13;;18316:38;;;18133:228;:::o;21385:478::-;21706:7;21742:113;21764:2;21768:5;21775:4;;21781:9;21792;21803:7;21812:8;21822;21832:14;21848:6;21742:21;:113::i;:::-;21732:124;;;;;;21725:131;;21385:478;;;;;;;;;;;;;:::o;2677:423:12:-;505:17:17;:15;:17::i;:::-;-1:-1:-1;;;;;2854:20:12;::::1;::::0;;::::1;::::0;:50:::1;;-1:-1:-1::0;;;;;;2878:26:12;::::1;1005:3;2878:26;;2854:50;2846:68;;;::::0;-1:-1:-1;;;2846:68:12;;19663:2:40;2846:68:12::1;::::0;::::1;19645:21:40::0;19702:1;19682:18;;;19675:29;-1:-1:-1;;;19720:18:40;;;19713:35;19765:18;;2846:68:12::1;19461:328:40::0;2846:68:12::1;-1:-1:-1::0;;;;;2932:19:12;;::::1;;::::0;;;:7:::1;:19;::::0;;;;;;::::1;:29:::0;;::::1;;2924:47;;;::::0;-1:-1:-1;;;2924:47:12;;26590:2:40;2924:47:12::1;::::0;::::1;26572:21:40::0;26629:1;26609:18;;;26602:29;-1:-1:-1;;;26647:18:40;;;26640:35;26692:18;;2924:47:12::1;26388:328:40::0;2924:47:12::1;-1:-1:-1::0;;;;;3003:15:12;;::::1;;::::0;;;:7:::1;:15;::::0;;;;;;;2981:19;;::::1;::::0;;;;;:37;;3003:15;;;::::1;-1:-1:-1::0;;;;;;2981:37:12;;::::1;;::::0;;;3028:15;;;:28;;;;::::1;::::0;;;3071:22;;3003:15;;3071:22:::1;::::0;::::1;2677:423:::0;;:::o;1962:386:11:-;505:17:17;:15;:17::i;:::-;-1:-1:-1;;;;;2029:19:11;::::1;::::0;2025:123:::1;;2072:55;::::0;-1:-1:-1;;;2072:55:11;;-1:-1:-1;;;2072:55:11::1;::::0;::::1;26865:52:40::0;-1:-1:-1;;;;;2072:30:11;::::1;::::0;::::1;::::0;26838:18:40;;2072:55:11::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2064:73;;;::::0;-1:-1:-1;;;2064:73:11;;27412:2:40;2064:73:11::1;::::0;::::1;27394:21:40::0;27451:1;27431:18;;;27424:29;-1:-1:-1;;;27469:18:40;;;27462:35;27514:18;;2064:73:11::1;27210:328:40::0;2064:73:11::1;1306:66;2279:19:::0;;;2322::::1;::::0;-1:-1:-1;;;;;2322:19:11;::::1;::::0;::::1;::::0;2157:12:::1;::::0;2322:19:::1;2015:333;1962:386:::0;:::o;4416:796:13:-;505:17:17;:15;:17::i;:::-;-1:-1:-1;;;;;4600:22:13;::::1;::::0;;::::1;::::0;:53:::1;;-1:-1:-1::0;;;;;;4626:27:13;::::1;687:3;4626:27;;4600:53;:82;;;;-1:-1:-1::0;;;;;;4657:25:13;::::1;4677:4;4657:25;;4600:82;4592:100;;;;-1:-1:-1::0;;;4592:100:13::1;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;4750:16:13;;::::1;4778:1;4750:16:::0;;;:6:::1;:16;::::0;;;;;::::1;:30:::0;4742:48:::1;;;;-1:-1:-1::0;;;4742:48:13::1;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;4891:22:13;::::1;::::0;;::::1;::::0;:53:::1;;-1:-1:-1::0;;;;;;4917:27:13;::::1;687:3;4917:27;;4891:53;4883:71;;;;-1:-1:-1::0;;;4883:71:13::1;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;4972:17:13;;::::1;;::::0;;;:6:::1;:17;::::0;;;;;;::::1;:29:::0;;::::1;;4964:47;;;::::0;-1:-1:-1;;;4964:47:13;;27745:2:40;4964:47:13::1;::::0;::::1;27727:21:40::0;27784:1;27764:18;;;27757:29;-1:-1:-1;;;27802:18:40;;;27795:35;27847:18;;4964:47:13::1;27543:328:40::0;4964:47:13::1;-1:-1:-1::0;;;;;5040:16:13;;::::1;;::::0;;;:6:::1;:16;::::0;;;;;;;5021;;::::1;::::0;;;;;;:35;;5040:16;;::::1;-1:-1:-1::0;;;;;;5021:35:13;;::::1;;::::0;;5066:17;;::::1;::::0;;;;;:28;;;::::1;::::0;;::::1;::::0;;;5104:16;;;:29;;;;::::1;::::0;;;5148:22;;5040:16;;5148:22:::1;::::0;::::1;5185:20;::::0;-1:-1:-1;;;;;5185:20:13;::::1;::::0;::::1;::::0;;;::::1;4416:796:::0;;;:::o;19858:822:8:-;20182:12;20206:18;2725:66;20278:16;;20312:2;20332:5;20365:4;;20355:15;;;;;;;:::i;:::-;;;;;;;;;20250:321;;;;;20388:9;;20415;;20442:7;;20467:8;;20493;;20519:14;;20551:6;;20250:321;;;:::i;:::-;;;;-1:-1:-1;;20250:321:8;;;;;;;;;20227:354;;20250:321;20227:354;;;;;-1:-1:-1;;;;;;;20643:17:8;:15;:17::i;:::-;20598:75;;-1:-1:-1;;;;;;29403:15:40;;;20598:75:8;;;29391:28:40;29448:15;;;;29435:11;;;29428:36;29480:11;;;29473:27;29516:12;;;29509:28;;;29553:12;;20598:75:8;;;;;;;;;;;;20591:82;;;19858:822;;;;;;;;;;;;;:::o;2437:161:10:-;505:17:17;:15;:17::i;:::-;2510:35:10::1;2537:7;2510:26;:35::i;:::-;2560:31;::::0;-1:-1:-1;;;;;2560:31:10;::::1;::::0;::::1;::::0;;;::::1;2437:161:::0;:::o;18901:149:8:-;18949:7;2402:66;18689:9;18985:57;;;;;;29799:25:40;;;;29840:18;;29833:34;19037:4:8;29883:18:40;;;29876:60;29772:18;;18985:57:8;;;;;;;;;;;;18975:68;;;;;;18968:75;;18901:149;:::o;3380:697:13:-;505:17:17;:15;:17::i;:::-;3586:10:13::1;3581:1;3568:10;;:14;;;;:::i;:::-;:28;;3560:46;;;;-1:-1:-1::0;;;3560:46:13::1;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;3704:19:13;::::1;::::0;;::::1;::::0;:47:::1;;-1:-1:-1::0;;;;;;3727:24:13;::::1;687:3;3727:24;;3704:47;3696:65;;;;-1:-1:-1::0;;;3696:65:13::1;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;3779:17:13;;::::1;;::::0;;;:6:::1;:17;::::0;;;;;;::::1;:26:::0;;::::1;;3771:44;;;::::0;-1:-1:-1;;;3771:44:13;;27745:2:40;3771:44:13::1;::::0;::::1;27727:21:40::0;27784:1;27764:18;;;27757:29;-1:-1:-1;;;27802:18:40;;;27795:35;27847:18;;3771:44:13::1;27543:328:40::0;3771:44:13::1;-1:-1:-1::0;;;;;3845:13:13;;::::1;;::::0;;;:6:::1;:13;::::0;;;;;;;3825:17;;::::1;::::0;;;;;:33;;3845:13;;;::::1;-1:-1:-1::0;;;;;;3825:33:13;;::::1;;::::0;;;3868:13;;;:26;;;;::::1;::::0;;;3904:10:::1;:12:::0;;;::::1;::::0;::::1;:::i;:::-;::::0;;;-1:-1:-1;;3931:19:13::1;::::0;-1:-1:-1;;;;;3931:19:13;::::1;::::0;::::1;::::0;;;::::1;4031:10;4018:9;;:23;4014:56;;4043:27;4059:10;4043:15;:27::i;:::-;3380:697:::0;;;:::o;248:102:17:-;306:10;328:4;306:27;298:45;;;;-1:-1:-1;;;298:45:17;;30290:2:40;298:45:17;;;30272:21:40;30329:1;30309:18;;;30302:29;-1:-1:-1;;;30347:18:40;;;30340:35;30392:18;;298:45:17;30088:328:40;298:45:17;248:102::o;382:421:21:-;440:7;680:1;685;680:6;676:45;;-1:-1:-1;709:1:21;702:8;;676:45;731:9;743:5;747:1;743;:5;:::i;:::-;731:17;-1:-1:-1;775:1:21;766:5;770:1;731:17;766:5;:::i;:::-;:10;758:19;;;;;;795:1;382:421;-1:-1:-1;;;382:421:21:o;1335:145::-;1393:7;;1424:5;1428:1;1424;:5;:::i;:::-;1412:17;;1452:1;1447;:6;;1439:15;;;;;783:639:9;951:12;992:27;979:9;:40;;;;;;;;:::i;:::-;;975:441;;1190:1;1187;1180:4;1174:11;1167:4;1161;1157:15;1153:2;1146:5;1133:59;1122:70;;975:441;;;1390:1;1387;1380:4;1374:11;1367:4;1361;1357:15;1350:5;1346:2;1339:5;1334:58;1323:69;;975:441;783:639;;;;;;;:::o;1646:105:21:-;1704:7;1735:1;1730;:6;;:14;;1743:1;1730:14;;;-1:-1:-1;1739:1:21;;1723:21;-1:-1:-1;1646:105:21:o;1025:145::-;1083:7;1115:1;1110;:6;;1102:15;;;;;;1127:9;1139:5;1143:1;1139;:5;:::i;11514:821:8:-;11702:15;;-1:-1:-1;;;;;11809:28:8;;;:66;;11861:14;11809:66;;;11848:9;11809:66;11782:93;-1:-1:-1;;;;;;11889:22:8;;11885:444;;12042:73;12078:11;12067:8;:22;:47;;12103:11;12067:47;;;12092:8;12067:47;12042:20;:7;12054;12042:11;:20::i;:::-;:24;;:73::i;:::-;12137:22;;12032:83;;-1:-1:-1;;;;;;12137:13:8;;;:22;;;;;12032:83;;12137:22;;;;12032:83;12137:13;:22;;;;;;;12129:40;;;;-1:-1:-1;;;12129:40:8;;30623:2:40;12129:40:8;;;30605:21:40;30662:1;30642:18;;;30635:29;-1:-1:-1;;;30680:18:40;;;30673:35;30725:18;;12129:40:8;30421:328:40;12129:40:8;11885:444;;;12210:34;12235:8;12210:20;:7;12222;12210:11;:20::i;:34::-;12200:44;;12266:42;12280:8;12290;12300:7;12266:13;:42::i;:::-;12258:60;;;;-1:-1:-1;;;12258:60:8;;30956:2:40;12258:60:8;;;30938:21:40;30995:1;30975:18;;;30968:29;-1:-1:-1;;;31013:18:40;;;31006:35;31058:18;;12258:60:8;30754:328:40;12258:60:8;11719:616;11514:821;;;;;;;:::o;1011:1136:13:-;1229:9;;:14;1221:32;;;;-1:-1:-1;;;1221:32:13;;31289:2:40;1221:32:13;;;31271:21:40;31328:1;31308:18;;;31301:29;-1:-1:-1;;;31346:18:40;;;31339:35;31391:18;;1221:32:13;31087:328:40;1221:32:13;1360:7;:14;1346:10;:28;;1338:46;;;;-1:-1:-1;;;1338:46:13;;;;;;;:::i;:::-;1468:1;1454:10;:15;;1446:33;;;;-1:-1:-1;;;1446:33:13;;20662:2:40;1446:33:13;;;20644:21:40;20701:1;20681:18;;;20674:29;-1:-1:-1;;;20719:18:40;;;20712:35;20764:18;;1446:33:13;20460:328:40;1446:33:13;687:3;1526:20;1574:450;1598:7;:14;1594:1;:18;1574:450;;;1678:13;1694:7;1702:1;1694:10;;;;;;;;:::i;:::-;;;;;;;1678:26;;1743:1;-1:-1:-1;;;;;1726:19:13;:5;-1:-1:-1;;;;;1726:19:13;;;:47;;;;-1:-1:-1;;;;;;1749:24:13;;687:3;1749:24;;1726:47;:73;;;;-1:-1:-1;;;;;;1777:22:13;;1794:4;1777:22;;1726:73;:98;;;;;1819:5;-1:-1:-1;;;;;1803:21:13;:12;-1:-1:-1;;;;;1803:21:13;;;1726:98;1718:116;;;;-1:-1:-1;;;1718:116:13;;;;;;;:::i;:::-;-1:-1:-1;;;;;1900:13:13;;;1925:1;1900:13;;;:6;:13;;;;;;;:27;1892:45;;;;-1:-1:-1;;;1892:45:13;;;;;;;:::i;:::-;-1:-1:-1;;;;;1951:20:13;;;;;;;:6;:20;;;;;:28;;-1:-1:-1;;;;;;1951:28:13;;;;;;;;;;;-1:-1:-1;1614:3:13;1574:450;;;-1:-1:-1;;;;;;2033:20:13;;;;;:6;:20;;;;;:38;;-1:-1:-1;;;;;;2033:38:13;687:3;2033:38;;;2094:14;;2081:10;:27;2118:9;:22;1011:1136::o;689:1423:10:-;1916:4;-1:-1:-1;;;;;1897:24:10;;;1889:42;;;;-1:-1:-1;;;1889:42:10;;31622:2:40;1889:42:10;;;31604:21:40;31661:1;31641:18;;;31634:29;-1:-1:-1;;;31679:18:40;;;31672:35;31724:18;;1889:42:10;31420:328:40;1889:42:10;479:66;2075:21;689:1423::o;1367:450:12:-;1447:7;1484:1;1447:25;;;;;;;-1:-1:-1;;;;;1447:25:12;:39;1439:57;;;;-1:-1:-1;;;1439:57:12;;31955:2:40;1439:57:12;;;31937:21:40;31994:1;31974:18;;;31967:29;-1:-1:-1;;;32012:18:40;;;32005:35;32057:18;;1439:57:12;31753:328:40;1439:57:12;1005:3;1506:25;;;;;;;;;:44;;-1:-1:-1;;;;;;1506:44:12;;;;;;-1:-1:-1;;;;;1564:16:12;;;1560:251;;8462:20;;1596:32;;;;-1:-1:-1;;;1596:32:12;;32288:2:40;1596:32:12;;;32270:21:40;32327:1;32307:18;;;32300:29;-1:-1:-1;;;32345:18:40;;;32338:35;32390:18;;1596:32:12;32086:328:40;1596:32:12;1722:68;1730:2;1734:1;1737:4;1743:27;-1:-1:-1;;1722:7:12;:68::i;:::-;1714:86;;;;-1:-1:-1;;;1714:86:12;;32621:2:40;1714:86:12;;;32603:21:40;32660:1;32640:18;;;32633:29;-1:-1:-1;;;32678:18:40;;;32671:35;32723:18;;1714:86:12;32419:328:40;763:904:16;962:52;;;-1:-1:-1;;;;;32944:32:40;;962:52:16;;;32926:51:40;32993:18;;;;32986:34;;;962:52:16;;;;;;;;;;32899:18:40;;;;962:52:16;;;;;;;;;-1:-1:-1;;;;;962:52:16;-1:-1:-1;;;962:52:16;;;1336:11;;-1:-1:-1;;962:52:16;;-1:-1:-1;;1336:11:16;-1:-1:-1;1309:5:16;1301;1294;1290:17;1285:72;1377:16;1406:61;;;;1485:4;1480:102;;;;1636:1;1621:16;;1370:281;;1406:61;1446:7;1431:22;;1406:61;;1480:102;1563:1;1557:8;1550:16;1540:7;1533:15;1530:37;1523:45;1508:60;;1370:281;;;1089:572;763:904;;;;;:::o;196:131:40:-;-1:-1:-1;;;;;271:31:40;;261:42;;251:70;;317:1;314;307:12;251:70;196:131;:::o;332:134::-;400:20;;429:31;400:20;429:31;:::i;:::-;332:134;;;:::o;471:315::-;539:6;547;600:2;588:9;579:7;575:23;571:32;568:52;;;616:1;613;606:12;568:52;655:9;642:23;674:31;699:5;674:31;:::i;:::-;724:5;776:2;761:18;;;;748:32;;-1:-1:-1;;;471:315:40:o;791:127::-;852:10;847:3;843:20;840:1;833:31;883:4;880:1;873:15;907:4;904:1;897:15;923:718;965:5;1018:3;1011:4;1003:6;999:17;995:27;985:55;;1036:1;1033;1026:12;985:55;1072:6;1059:20;1098:18;1135:2;1131;1128:10;1125:36;;;1141:18;;:::i;:::-;1216:2;1210:9;1184:2;1270:13;;-1:-1:-1;;1266:22:40;;;1290:2;1262:31;1258:40;1246:53;;;1314:18;;;1334:22;;;1311:46;1308:72;;;1360:18;;:::i;:::-;1400:10;1396:2;1389:22;1435:2;1427:6;1420:18;1481:3;1474:4;1469:2;1461:6;1457:15;1453:26;1450:35;1447:55;;;1498:1;1495;1488:12;1447:55;1562:2;1555:4;1547:6;1543:17;1536:4;1528:6;1524:17;1511:54;1609:1;1602:4;1597:2;1589:6;1585:15;1581:26;1574:37;1629:6;1620:15;;;;;;923:718;;;;:::o;1646:676::-;1750:6;1758;1766;1774;1827:3;1815:9;1806:7;1802:23;1798:33;1795:53;;;1844:1;1841;1834:12;1795:53;1880:9;1867:23;1857:33;;1941:2;1930:9;1926:18;1913:32;1964:18;2005:2;1997:6;1994:14;1991:34;;;2021:1;2018;2011:12;1991:34;2044:49;2085:7;2076:6;2065:9;2061:22;2044:49;:::i;:::-;2034:59;;2146:2;2135:9;2131:18;2118:32;2102:48;;2175:2;2165:8;2162:16;2159:36;;;2191:1;2188;2181:12;2159:36;;2214:51;2257:7;2246:8;2235:9;2231:24;2214:51;:::i;:::-;1646:676;;;;-1:-1:-1;2204:61:40;;2312:2;2297:18;2284:32;;-1:-1:-1;;;1646:676:40:o;2327:247::-;2386:6;2439:2;2427:9;2418:7;2414:23;2410:32;2407:52;;;2455:1;2452;2445:12;2407:52;2494:9;2481:23;2513:31;2538:5;2513:31;:::i;2771:150::-;2846:20;;2895:1;2885:12;;2875:40;;2911:1;2908;2901:12;2926:619;3035:6;3043;3051;3059;3112:3;3100:9;3091:7;3087:23;3083:33;3080:53;;;3129:1;3126;3119:12;3080:53;3168:9;3155:23;3187:31;3212:5;3187:31;:::i;:::-;3237:5;-1:-1:-1;3289:2:40;3274:18;;3261:32;;-1:-1:-1;3344:2:40;3329:18;;3316:32;3371:18;3360:30;;3357:50;;;3403:1;3400;3393:12;3357:50;3426:49;3467:7;3458:6;3447:9;3443:22;3426:49;:::i;:::-;3416:59;;;3494:45;3535:2;3524:9;3520:18;3494:45;:::i;:::-;3484:55;;2926:619;;;;;;;:::o;3550:422::-;3591:3;3629:5;3623:12;3656:6;3651:3;3644:19;3681:1;3691:162;3705:6;3702:1;3699:13;3691:162;;;3767:4;3823:13;;;3819:22;;3813:29;3795:11;;;3791:20;;3784:59;3720:12;3691:162;;;3695:3;3898:1;3891:4;3882:6;3877:3;3873:16;3869:27;3862:38;3961:4;3954:2;3950:7;3945:2;3937:6;3933:15;3929:29;3924:3;3920:39;3916:50;3909:57;;;3550:422;;;;:::o;3977:298::-;4160:6;4153:14;4146:22;4135:9;4128:41;4205:2;4200;4189:9;4185:18;4178:30;4109:4;4225:44;4265:2;4254:9;4250:18;4242:6;4225:44;:::i;4280:248::-;4348:6;4356;4409:2;4397:9;4388:7;4384:23;4380:32;4377:52;;;4425:1;4422;4415:12;4377:52;-1:-1:-1;;4448:23:40;;;4518:2;4503:18;;;4490:32;;-1:-1:-1;4280:248:40:o;4533:217::-;4680:2;4669:9;4662:21;4643:4;4700:44;4740:2;4729:9;4725:18;4717:6;4700:44;:::i;4755:180::-;4814:6;4867:2;4855:9;4846:7;4842:23;4838:32;4835:52;;;4883:1;4880;4873:12;4835:52;-1:-1:-1;4906:23:40;;4755:180;-1:-1:-1;4755:180:40:o;5125:347::-;5176:8;5186:6;5240:3;5233:4;5225:6;5221:17;5217:27;5207:55;;5258:1;5255;5248:12;5207:55;-1:-1:-1;5281:20:40;;5324:18;5313:30;;5310:50;;;5356:1;5353;5346:12;5310:50;5393:4;5385:6;5381:17;5369:29;;5445:3;5438:4;5429:6;5421;5417:19;5413:30;5410:39;5407:59;;;5462:1;5459;5452:12;5407:59;5125:347;;;;;:::o;5477:1223::-;5659:6;5667;5675;5683;5691;5699;5707;5715;5723;5731;5739:7;5793:3;5781:9;5772:7;5768:23;5764:33;5761:53;;;5810:1;5807;5800:12;5761:53;5833:29;5852:9;5833:29;:::i;:::-;5823:39;;5909:2;5898:9;5894:18;5881:32;5871:42;;5932:18;5999:2;5993;5982:9;5978:18;5965:32;5962:40;5959:60;;;6015:1;6012;6005:12;5959:60;6054:84;6130:7;6123:2;6112:9;6108:18;6095:32;6084:9;6080:48;6054:84;:::i;:::-;6157:8;;-1:-1:-1;6184:8:40;-1:-1:-1;6211:45:40;6252:2;6237:18;;6211:45;:::i;:::-;6201:55;;6303:3;6292:9;6288:19;6275:33;6265:43;;6355:3;6344:9;6340:19;6327:33;6317:43;;6407:3;6396:9;6392:19;6379:33;6369:43;;6431:39;6465:3;6454:9;6450:19;6431:39;:::i;:::-;6421:49;;6489:39;6523:3;6512:9;6508:19;6489:39;:::i;:::-;6479:49;;6578:2;6571:3;6560:9;6556:19;6543:33;6540:41;6537:61;;;6594:1;6591;6584:12;6537:61;;6618:76;6686:7;6678:3;6667:9;6663:19;6650:33;6639:9;6635:49;6618:76;:::i;:::-;6607:87;;5477:1223;;;;;;;;;;;;;;:::o;7025:607::-;7120:6;7128;7136;7189:2;7177:9;7168:7;7164:23;7160:32;7157:52;;;7205:1;7202;7195:12;7157:52;7241:9;7228:23;7218:33;;7302:2;7291:9;7287:18;7274:32;7325:18;7366:2;7358:6;7355:14;7352:34;;;7382:1;7379;7372:12;7352:34;7405:49;7446:7;7437:6;7426:9;7422:22;7405:49;:::i;:::-;7395:59;;7507:2;7496:9;7492:18;7479:32;7463:48;;7536:2;7526:8;7523:16;7520:36;;;7552:1;7549;7542:12;7520:36;;7575:51;7618:7;7607:8;7596:9;7592:24;7575:51;:::i;:::-;7565:61;;;7025:607;;;;;:::o;7746:465::-;7799:3;7837:5;7831:12;7864:6;7859:3;7852:19;7890:4;7919;7914:3;7910:14;7903:21;;7958:4;7951:5;7947:16;7981:1;7991:195;8005:6;8002:1;7999:13;7991:195;;;8070:13;;-1:-1:-1;;;;;8066:39:40;8054:52;;8126:12;;;;8161:15;;;;8102:1;8020:9;7991:195;;;-1:-1:-1;8202:3:40;;7746:465;-1:-1:-1;;;;;7746:465:40:o;8216:261::-;8395:2;8384:9;8377:21;8358:4;8415:56;8467:2;8456:9;8452:18;8444:6;8415:56;:::i;8482:455::-;8559:6;8567;8620:2;8608:9;8599:7;8595:23;8591:32;8588:52;;;8636:1;8633;8626:12;8588:52;8675:9;8662:23;8694:31;8719:5;8694:31;:::i;:::-;8744:5;-1:-1:-1;8800:2:40;8785:18;;8772:32;8827:18;8816:30;;8813:50;;;8859:1;8856;8849:12;8813:50;8882:49;8923:7;8914:6;8903:9;8899:22;8882:49;:::i;:::-;8872:59;;;8482:455;;;;;:::o;8942:1353::-;9110:6;9118;9126;9134;9142;9150;9158;9166;9174;9182;9235:3;9223:9;9214:7;9210:23;9206:33;9203:53;;;9252:1;9249;9242:12;9203:53;9292:9;9279:23;9321:18;9362:2;9354:6;9351:14;9348:34;;;9378:1;9375;9368:12;9348:34;9416:6;9405:9;9401:22;9391:32;;9461:7;9454:4;9450:2;9446:13;9442:27;9432:55;;9483:1;9480;9473:12;9432:55;9523:2;9510:16;9549:2;9541:6;9538:14;9535:34;;;9565:1;9562;9555:12;9535:34;9620:7;9613:4;9603:6;9600:1;9596:14;9592:2;9588:23;9584:34;9581:47;9578:67;;;9641:1;9638;9631:12;9578:67;9672:4;9664:13;;;;-1:-1:-1;9696:6:40;;-1:-1:-1;9734:20:40;;9721:34;;-1:-1:-1;9774:38:40;9808:2;9793:18;;9774:38;:::i;:::-;9764:48;;9865:2;9854:9;9850:18;9837:32;9821:48;;9894:2;9884:8;9881:16;9878:36;;;9910:1;9907;9900:12;9878:36;;9949:60;10001:7;9990:8;9979:9;9975:24;9949:60;:::i;:::-;10028:8;;-1:-1:-1;9923:86:40;-1:-1:-1;10082:39:40;;-1:-1:-1;10116:3:40;10101:19;;10082:39;:::i;:::-;10072:49;;10140:39;10174:3;10163:9;10159:19;10140:39;:::i;:::-;10130:49;;10226:3;10215:9;10211:19;10198:33;10188:43;;10250:39;10284:3;10273:9;10269:19;10250:39;:::i;:::-;10240:49;;8942:1353;;;;;;;;;;;;;:::o;10300:358::-;10507:2;10496:9;10489:21;10470:4;10527:56;10579:2;10568:9;10564:18;10556:6;10527:56;:::i;:::-;10519:64;;10648:1;10644;10639:3;10635:11;10631:19;10623:6;10619:32;10614:2;10603:9;10599:18;10592:60;10300:358;;;;;:::o;10663:1270::-;10828:6;10836;10844;10852;10860;10868;10876;10884;10892;10900;10908:7;10962:3;10950:9;10941:7;10937:23;10933:33;10930:53;;;10979:1;10976;10969:12;10930:53;11018:9;11005:23;11037:31;11062:5;11037:31;:::i;:::-;11087:5;-1:-1:-1;11139:2:40;11124:18;;11111:32;;-1:-1:-1;11194:2:40;11179:18;;11166:32;11221:18;11210:30;;11207:50;;;11253:1;11250;11243:12;11207:50;11292:58;11342:7;11333:6;11322:9;11318:22;11292:58;:::i;:::-;11369:8;;-1:-1:-1;11266:84:40;-1:-1:-1;11423:45:40;;-1:-1:-1;11464:2:40;11449:18;;11423:45;:::i;:::-;11413:55;;11515:3;11504:9;11500:19;11487:33;11477:43;;11567:3;11556:9;11552:19;11539:33;11529:43;;11619:3;11608:9;11604:19;11591:33;11581:43;;11676:3;11665:9;11661:19;11648:33;11690;11715:7;11690:33;:::i;:::-;11742:7;-1:-1:-1;11801:3:40;11786:19;;11773:33;11815;11773;11815;:::i;:::-;11867:7;11857:17;;;11922:3;11911:9;11907:19;11894:33;11883:44;;10663:1270;;;;;;;;;;;;;;:::o;12120:388::-;12188:6;12196;12249:2;12237:9;12228:7;12224:23;12220:32;12217:52;;;12265:1;12262;12255:12;12217:52;12304:9;12291:23;12323:31;12348:5;12323:31;:::i;:::-;12373:5;-1:-1:-1;12430:2:40;12415:18;;12402:32;12443:33;12402:32;12443:33;:::i;:::-;12495:7;12485:17;;;12120:388;;;;;:::o;12513:529::-;12590:6;12598;12606;12659:2;12647:9;12638:7;12634:23;12630:32;12627:52;;;12675:1;12672;12665:12;12627:52;12714:9;12701:23;12733:31;12758:5;12733:31;:::i;:::-;12783:5;-1:-1:-1;12840:2:40;12825:18;;12812:32;12853:33;12812:32;12853:33;:::i;:::-;12905:7;-1:-1:-1;12964:2:40;12949:18;;12936:32;12977:33;12936:32;12977:33;:::i;:::-;13029:7;13019:17;;;12513:529;;;;;:::o;13047:456::-;13124:6;13132;13140;13193:2;13181:9;13172:7;13168:23;13164:32;13161:52;;;13209:1;13206;13199:12;13161:52;13248:9;13235:23;13267:31;13292:5;13267:31;:::i;:::-;13317:5;-1:-1:-1;13374:2:40;13359:18;;13346:32;13387:33;13346:32;13387:33;:::i;:::-;13047:456;;13439:7;;-1:-1:-1;;;13493:2:40;13478:18;;;;13465:32;;13047:456::o;13732:328::-;13934:2;13916:21;;;13973:1;13953:18;;;13946:29;-1:-1:-1;;;14006:2:40;13991:18;;13984:35;14051:2;14036:18;;13732:328::o;14065:::-;14267:2;14249:21;;;14306:1;14286:18;;;14279:29;-1:-1:-1;;;14339:2:40;14324:18;;14317:35;14384:2;14369:18;;14065:328::o;14398:127::-;14459:10;14454:3;14450:20;14447:1;14440:31;14490:4;14487:1;14480:15;14514:4;14511:1;14504:15;14530:135;14569:3;14590:17;;;14587:43;;14610:18;;:::i;:::-;-1:-1:-1;14657:1:40;14646:13;;14530:135::o;16335:377::-;16528:2;16517:9;16510:21;16491:4;16554:44;16594:2;16583:9;16579:18;16571:6;16554:44;:::i;:::-;16646:9;16638:6;16634:22;16629:2;16618:9;16614:18;16607:50;16674:32;16699:6;16691;16674:32;:::i;16717:290::-;16786:6;16839:2;16827:9;16818:7;16814:23;16810:32;16807:52;;;16855:1;16852;16845:12;16807:52;16881:16;;-1:-1:-1;;;;;;16926:32:40;;16916:43;;16906:71;;16973:1;16970;16963:12;18063:151;18153:4;18146:12;;;18132;;;18128:31;;18171:14;;18168:40;;;18188:18;;:::i;19288:168::-;19361:9;;;19392;;19409:15;;;19403:22;;19389:37;19379:71;;19430:18;;:::i;20127:328::-;20329:2;20311:21;;;20368:1;20348:18;;;20341:29;-1:-1:-1;;;20401:2:40;20386:18;;20379:35;20446:2;20431:18;;20127:328::o;20793:127::-;20854:10;20849:3;20845:20;20842:1;20835:31;20885:4;20882:1;20875:15;20909:4;20906:1;20899:15;20925:237;21006:1;20999:5;20996:12;20986:143;;21051:10;21046:3;21042:20;21039:1;21032:31;21086:4;21083:1;21076:15;21114:4;21111:1;21104:15;20986:143;21138:18;;20925:237::o;21167:1348::-;-1:-1:-1;;;;;21674:32:40;;21656:51;;21738:2;21723:18;;21716:34;;;21644:3;21781:2;21766:18;;21759:30;;;21805:18;;21798:34;;;21615:4;21851:3;21825:6;21896;21876:18;;;21863:48;21960:1;21931:22;;;21927:31;;21920:42;22021:2;22000:15;;-1:-1:-1;;21996:29:40;21981:45;;22035:53;22084:2;22069:18;;22061:6;22035:53;:::i;:::-;22125:6;22119:3;22108:9;22104:19;22097:35;22169:6;22163:3;22152:9;22148:19;22141:35;22213:6;22207:3;22196:9;22192:19;22185:35;22229:47;22271:3;22260:9;22256:19;22248:6;-1:-1:-1;;;;;7703:31:40;7691:44;;7637:104;22229:47;-1:-1:-1;;;;;7703:31:40;;22327:3;22312:19;;7691:44;22393:2;22381:9;22377:2;22373:18;22369:27;22363:3;22352:9;22348:19;22341:56;22414:38;22448:2;22444;22440:11;22431:7;22414:38;:::i;:::-;22406:46;;;;22461:48;22504:3;22493:9;22489:19;22480:7;-1:-1:-1;;;;;7703:31:40;7691:44;;7637:104;22461:48;21167:1348;;;;;;;;;;;;;;;:::o;22520:125::-;22585:9;;;22606:10;;;22603:36;;;22619:18;;:::i;22650:217::-;22690:1;22716;22706:132;;22760:10;22755:3;22751:20;22748:1;22741:31;22795:4;22792:1;22785:15;22823:4;22820:1;22813:15;22706:132;-1:-1:-1;22852:9:40;;22650:217::o;23205:128::-;23272:9;;;23293:11;;;23290:37;;;23307:18;;:::i;24267:127::-;24328:10;24323:3;24319:20;24316:1;24309:31;24359:4;24356:1;24349:15;24383:4;24380:1;24373:15;24399:985;24683:3;24696:22;;;24668:19;;24753:22;;;24635:4;24833:6;24806:3;24791:19;;24635:4;24867:304;24881:6;24878:1;24875:13;24867:304;;;24956:6;24943:20;24976:31;25001:5;24976:31;:::i;:::-;-1:-1:-1;;;;;25032:31:40;25020:44;;25087:4;25146:15;;;;25111:12;;;;25060:1;24896:9;24867:304;;;-1:-1:-1;25222:4:40;25207:20;;25200:36;;;;-1:-1:-1;;;;;;;25310:15:40;;;25305:2;25290:18;;25283:43;25362:15;;25357:2;25342:18;;;25335:43;25188:3;24399:985;-1:-1:-1;;24399:985:40:o;26928:277::-;26995:6;27048:2;27036:9;27027:7;27023:23;27019:32;27016:52;;;27064:1;27061;27054:12;27016:52;27096:9;27090:16;27149:5;27142:13;27135:21;27128:5;27125:32;27115:60;;27171:1;27168;27161:12;27876:271;28059:6;28051;28046:3;28033:33;28015:3;28085:16;;28110:13;;;28085:16;27876:271;-1:-1:-1;27876:271:40:o;28152:993::-;28592:25;;;-1:-1:-1;;;;;28691:15:40;;;28686:2;28671:18;;28664:43;28738:2;28723:18;;28716:34;;;28781:2;28766:18;;28759:34;;;28579:3;28564:19;;;28802:54;28851:3;28836:19;;28828:6;28802:54;:::i;:::-;28887:3;28872:19;;28865:35;;;;28931:3;28916:19;;28909:35;;;;28975:3;28960:19;;28953:35;;;;29025:15;;;29019:3;29004:19;;28997:44;29078:15;;;29072:3;29057:19;;29050:44;29125:3;29110:19;29103:36;;;;28152:993;;-1:-1:-1;;;;;28152:993:40:o;29947:136::-;29986:3;30014:5;30004:39;;30023:18;;:::i;:::-;-1:-1:-1;;;30059:18:40;;29947:136::o"},"gasEstimates":{"creation":{"codeDepositCost":"2496800","executionCost":"24801","totalCost":"2521601"},"external":{"":"infinite","VERSION()":"infinite","addOwnerWithThreshold(address,uint256)":"infinite","approveHash(bytes32)":"26260","approvedHashes(address,bytes32)":"2673","changeThreshold(uint256)":"25698","checkNSignatures(bytes32,bytes,bytes,uint256)":"infinite","checkSignatures(bytes32,bytes,bytes)":"infinite","disableModule(address,address)":"infinite","domainSeparator()":"453","enableModule(address)":"54571","encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)":"infinite","execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)":"infinite","execTransactionFromModule(address,uint256,bytes,uint8)":"infinite","execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":"infinite","getChainId()":"248","getModulesPaginated(address,uint256)":"infinite","getOwners()":"infinite","getStorageAt(uint256,uint256)":"infinite","getThreshold()":"2381","getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)":"infinite","isModuleEnabled(address)":"2706","isOwner(address)":"2655","nonce()":"2341","removeOwner(address,address,uint256)":"infinite","setFallbackHandler(address)":"23724","setGuard(address)":"infinite","setup(address[],uint256,address,bytes,address,address,uint256,address)":"infinite","signedMessages(bytes32)":"2506","simulateAndRevert(address,bytes)":"infinite","swapOwner(address,address,address)":"infinite"},"internal":{"handlePayment(uint256,uint256,uint256,address,address payable)":"infinite"}},"methodIdentifiers":{"VERSION()":"ffa1ad74","addOwnerWithThreshold(address,uint256)":"0d582f13","approveHash(bytes32)":"d4d9bdcd","approvedHashes(address,bytes32)":"7d832974","changeThreshold(uint256)":"694e80c3","checkNSignatures(bytes32,bytes,bytes,uint256)":"12fb68e0","checkSignatures(bytes32,bytes,bytes)":"934f3a11","disableModule(address,address)":"e009cfde","domainSeparator()":"f698da25","enableModule(address)":"610b5925","encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)":"e86637db","execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)":"6a761202","execTransactionFromModule(address,uint256,bytes,uint8)":"468721a7","execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":"5229073f","getChainId()":"3408e470","getModulesPaginated(address,uint256)":"cc2f8452","getOwners()":"a0e67e2b","getStorageAt(uint256,uint256)":"5624b25b","getThreshold()":"e75235b8","getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)":"d8d11f78","isModuleEnabled(address)":"2d9ad53d","isOwner(address)":"2f54bf6e","nonce()":"affed0e0","removeOwner(address,address,uint256)":"f8dc5dd9","setFallbackHandler(address)":"f08a0323","setGuard(address)":"e19a9dd9","setup(address[],uint256,address,bytes,address,address,uint256,address)":"b63e800d","signedMessages(bytes32)":"5ae6bd37","simulateAndRevert(address,bytes)":"b4faba09","swapOwner(address,address,address)":"e318b52b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AddedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"approvedHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ApproveHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"}],\"name\":\"ChangedFallbackHandler\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"ChangedGuard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ChangedThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"DisabledModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"EnabledModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ExecutionFromModuleFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ExecutionFromModuleSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"ExecutionSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RemovedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fallbackHandler\",\"type\":\"address\"}],\"name\":\"SafeSetup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"}],\"name\":\"SignMsg\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"addOwnerWithThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashToApprove\",\"type\":\"bytes32\"}],\"name\":\"approveHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"approvedHashes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"changeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"requiredSignatures\",\"type\":\"uint256\"}],\"name\":\"checkNSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"checkSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"disableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"enableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"safeTxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"refundReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"encodeTransactionData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"safeTxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"refundReceiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"execTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromModuleReturnData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"start\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"getModulesPaginated\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"array\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getStorageAt\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"safeTxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"refundReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getTransactionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"isModuleEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"}],\"name\":\"setFallbackHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"setGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"fallbackHandler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"paymentReceiver\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"signedMessages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"calldataPayload\",\"type\":\"bytes\"}],\"name\":\"simulateAndRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"swapOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Stefan George - @Georgi87Richard Meissner - @rmeissner\",\"details\":\"Most important concepts:      - Threshold: Number of required confirmations for a Safe transaction.      - Owners: List of addresses that control the Safe. They are the only ones that can add/remove owners, change the threshold and        approve transactions. Managed in `OwnerManager`.      - Transaction Hash: Hash of a transaction is calculated using the EIP-712 typed structured data hashing scheme.      - Nonce: Each transaction should have a different nonce to prevent replay attacks.      - Signature: A valid signature of an owner of the Safe for a transaction hash.      - Guard: Guard is a contract that can execute pre- and post- transaction checks. Managed in `GuardManager`.      - Modules: Modules are contracts that can be used to extend the write functionality of a Safe. Managed in `ModuleManager`.      - Fallback: Fallback handler is a contract that can provide additional read-only functional for Safe. Managed in `FallbackManager`.      Note: This version of the implementation contract doesn't emit events for the sake of gas efficiency and therefore requires a tracing node for indexing/      For the events-based implementation see `SafeL2.sol`.\",\"kind\":\"dev\",\"methods\":{\"addOwnerWithThreshold(address,uint256)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"_threshold\":\"New threshold.\",\"owner\":\"New owner address.\"}},\"approveHash(bytes32)\":{\"details\":\"This can be used with a pre-approved hash transaction signature.      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures\",\"params\":{\"hashToApprove\":\"The hash to mark as approved for signatures that are verified by this contract.\"}},\"changeThreshold(uint256)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"_threshold\":\"New threshold.\"}},\"checkNSignatures(bytes32,bytes,bytes,uint256)\":{\"details\":\"Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\",\"params\":{\"data\":\"That should be signed (this is passed to an external validator contract)\",\"dataHash\":\"Hash of the data (could be either a message hash or transaction hash)\",\"requiredSignatures\":\"Amount of required valid signatures.\",\"signatures\":\"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\"}},\"checkSignatures(bytes32,bytes,bytes)\":{\"params\":{\"data\":\"That should be signed (this is passed to an external validator contract)\",\"dataHash\":\"Hash of the data (could be either a message hash or transaction hash)\",\"signatures\":\"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\"}},\"disableModule(address,address)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"module\":\"Module to be removed.\",\"prevModule\":\"Previous module in the modules linked list.\"}},\"domainSeparator()\":{\"details\":\"Returns the domain separator for this contract, as defined in the EIP-712 standard.\",\"returns\":{\"_0\":\"bytes32 The domain separator hash.\"}},\"enableModule(address)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"module\":\"Module to be whitelisted.\"}},\"encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)\":{\"params\":{\"_nonce\":\"Transaction nonce.\",\"baseGas\":\"Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\",\"data\":\"Data payload.\",\"gasPrice\":\"Maximum gas price that should be used for this transaction.\",\"gasToken\":\"Token address (or 0 if ETH) that is used for the payment.\",\"operation\":\"Operation type.\",\"refundReceiver\":\"Address of receiver of gas payment (or 0 if tx.origin).\",\"safeTxGas\":\"Gas that should be used for the safe transaction.\",\"to\":\"Destination address.\",\"value\":\"Ether value.\"},\"returns\":{\"_0\":\"Transaction hash bytes.\"}},\"execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)\":{\"details\":\"The fees are always transferred, even if the user transaction fails.      This method doesn't perform any sanity check of the transaction, such as:      - if the contract at `to` address has code or not      - if the `gasToken` is a contract or not      It is the responsibility of the caller to perform such checks.\",\"params\":{\"baseGas\":\"Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\",\"data\":\"Data payload of Safe transaction.\",\"gasPrice\":\"Gas price that should be used for the payment calculation.\",\"gasToken\":\"Token address (or 0 if ETH) that is used for the payment.\",\"operation\":\"Operation type of Safe transaction.\",\"refundReceiver\":\"Address of receiver of gas payment (or 0 if tx.origin).\",\"safeTxGas\":\"Gas that should be used for the Safe transaction.\",\"signatures\":\"Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\",\"to\":\"Destination address of Safe transaction.\",\"value\":\"Ether value of Safe transaction.\"},\"returns\":{\"success\":\"Boolean indicating transaction's success.\"}},\"execTransactionFromModule(address,uint256,bytes,uint8)\":{\"details\":\"Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\",\"params\":{\"data\":\"Data payload of module transaction.\",\"operation\":\"Operation type of module transaction.\",\"to\":\"Destination address of module transaction.\",\"value\":\"Ether value of module transaction.\"},\"returns\":{\"success\":\"Boolean flag indicating if the call succeeded.\"}},\"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)\":{\"params\":{\"data\":\"Data payload of module transaction.\",\"operation\":\"Operation type of module transaction.\",\"to\":\"Destination address of module transaction.\",\"value\":\"Ether value of module transaction.\"},\"returns\":{\"returnData\":\"Data returned by the call.\",\"success\":\"Boolean flag indicating if the call succeeded.\"}},\"getChainId()\":{\"returns\":{\"_0\":\"The ID of the current chain as a uint256.\"}},\"getModulesPaginated(address,uint256)\":{\"params\":{\"pageSize\":\"Maximum number of modules that should be returned. Has to be > 0\",\"start\":\"Start of the page. Has to be a module or start pointer (0x1 address)\"},\"returns\":{\"array\":\"Array of modules.\",\"next\":\"Start of the next page.\"}},\"getOwners()\":{\"returns\":{\"_0\":\"Array of Safe owners.\"}},\"getStorageAt(uint256,uint256)\":{\"params\":{\"length\":\"- the number of words (32 bytes) of data to read\",\"offset\":\"- the offset in the current contract's storage in words to start reading from\"},\"returns\":{\"_0\":\"the bytes that were read.\"}},\"getThreshold()\":{\"returns\":{\"_0\":\"Threshold number.\"}},\"getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)\":{\"params\":{\"_nonce\":\"Transaction nonce.\",\"baseGas\":\"Gas costs for data used to trigger the safe transaction.\",\"data\":\"Data payload.\",\"gasPrice\":\"Maximum gas price that should be used for this transaction.\",\"gasToken\":\"Token address (or 0 if ETH) that is used for the payment.\",\"operation\":\"Operation type.\",\"refundReceiver\":\"Address of receiver of gas payment (or 0 if tx.origin).\",\"safeTxGas\":\"Fas that should be used for the safe transaction.\",\"to\":\"Destination address.\",\"value\":\"Ether value.\"},\"returns\":{\"_0\":\"Transaction hash.\"}},\"isModuleEnabled(address)\":{\"returns\":{\"_0\":\"True if the module is enabled\"}},\"isOwner(address)\":{\"returns\":{\"_0\":\"Boolean if owner is an owner of the Safe.\"}},\"removeOwner(address,address,uint256)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"_threshold\":\"New threshold.\",\"owner\":\"Owner address to be removed.\",\"prevOwner\":\"Owner that pointed to the owner to be removed in the linked list\"}},\"setFallbackHandler(address)\":{\"details\":\"Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.      Cannot be set to the Safe itself.\",\"params\":{\"handler\":\"contract to handle fallback calls.\"}},\"setGuard(address)\":{\"details\":\"Set a guard that checks transactions before execution      This can only be done via a Safe transaction.      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,        a broken guard can cause a denial of service for the Safe. Make sure to carefully        audit the guard code and design recovery mechanisms.\",\"params\":{\"guard\":\"The address of the guard to be used or the 0 address to disable the guard\"}},\"setup(address[],uint256,address,bytes,address,address,uint256,address)\":{\"details\":\"This method can only be called once.      If a proxy was created without setting up, anyone can call setup and claim the proxy.\",\"params\":{\"_owners\":\"List of Safe owners.\",\"_threshold\":\"Number of required confirmations for a Safe transaction.\",\"data\":\"Data payload for optional delegate call.\",\"fallbackHandler\":\"Handler for fallback calls to this contract\",\"payment\":\"Value that should be paid\",\"paymentReceiver\":\"Address that should receive the payment (or 0 if tx.origin)\",\"paymentToken\":\"Token that should be used for the payment (0 is ETH)\",\"to\":\"Contract address for optional delegate call.\"}},\"simulateAndRevert(address,bytes)\":{\"details\":\"Performs a delegatecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to `abi.encode(bool(success), bytes(response))`. Specifically, the `returndata` after a call to this method will be: `success:bool || response.length:uint256 || response:bytes`.\",\"params\":{\"calldataPayload\":\"Calldata that should be sent to the target contract (encoded method name and arguments).\",\"targetContract\":\"Address of the contract containing the code to execute.\"}},\"swapOwner(address,address,address)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"newOwner\":\"New owner address.\",\"oldOwner\":\"Owner address to be replaced.\",\"prevOwner\":\"Owner that pointed to the owner to be replaced in the linked list\"}}},\"title\":\"Safe - A multisignature wallet with support for confirmations using signed messages based on EIP-712.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addOwnerWithThreshold(address,uint256)\":{\"notice\":\"Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\"},\"approveHash(bytes32)\":{\"notice\":\"Marks hash `hashToApprove` as approved.\"},\"changeThreshold(uint256)\":{\"notice\":\"Changes the threshold of the Safe to `_threshold`.\"},\"checkNSignatures(bytes32,bytes,bytes,uint256)\":{\"notice\":\"Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\"},\"checkSignatures(bytes32,bytes,bytes)\":{\"notice\":\"Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\"},\"disableModule(address,address)\":{\"notice\":\"Disables the module `module` for the Safe.\"},\"enableModule(address)\":{\"notice\":\"Enables the module `module` for the Safe.\"},\"encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)\":{\"notice\":\"Returns the pre-image of the transaction hash (see getTransactionHash).\"},\"execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)\":{\"notice\":\"Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`.\"},\"execTransactionFromModule(address,uint256,bytes,uint8)\":{\"notice\":\"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\"},\"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)\":{\"notice\":\"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\"},\"getChainId()\":{\"notice\":\"Returns the ID of the chain the contract is currently deployed on.\"},\"getModulesPaginated(address,uint256)\":{\"notice\":\"Returns an array of modules.         If all entries fit into a single page, the next pointer will be 0x1.         If another page is present, next will be the last element of the returned array.\"},\"getOwners()\":{\"notice\":\"Returns a list of Safe owners.\"},\"getStorageAt(uint256,uint256)\":{\"notice\":\"Reads `length` bytes of storage in the currents contract\"},\"getThreshold()\":{\"notice\":\"Returns the number of required confirmations for a Safe transaction aka the threshold.\"},\"getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)\":{\"notice\":\"Returns transaction hash to be signed by owners.\"},\"isModuleEnabled(address)\":{\"notice\":\"Returns if an module is enabled\"},\"isOwner(address)\":{\"notice\":\"Returns if `owner` is an owner of the Safe.\"},\"removeOwner(address,address,uint256)\":{\"notice\":\"Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\"},\"setFallbackHandler(address)\":{\"notice\":\"Set Fallback Handler to `handler` for the Safe.\"},\"setGuard(address)\":{\"notice\":\"Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\"},\"setup(address[],uint256,address,bytes,address,address,uint256,address)\":{\"notice\":\"Sets an initial storage of the Safe contract.\"},\"swapOwner(address,address,address)\":{\"notice\":\"Replaces the owner `oldOwner` in the Safe with `newOwner`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-contracts/contracts/Safe.sol\":\"Safe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/Safe.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./base/ModuleManager.sol\\\";\\nimport \\\"./base/OwnerManager.sol\\\";\\nimport \\\"./base/FallbackManager.sol\\\";\\nimport \\\"./base/GuardManager.sol\\\";\\nimport \\\"./common/NativeCurrencyPaymentFallback.sol\\\";\\nimport \\\"./common/Singleton.sol\\\";\\nimport \\\"./common/SignatureDecoder.sol\\\";\\nimport \\\"./common/SecuredTokenTransfer.sol\\\";\\nimport \\\"./common/StorageAccessible.sol\\\";\\nimport \\\"./interfaces/ISignatureValidator.sol\\\";\\nimport \\\"./external/SafeMath.sol\\\";\\n\\n/**\\n * @title Safe - A multisignature wallet with support for confirmations using signed messages based on EIP-712.\\n * @dev Most important concepts:\\n *      - Threshold: Number of required confirmations for a Safe transaction.\\n *      - Owners: List of addresses that control the Safe. They are the only ones that can add/remove owners, change the threshold and\\n *        approve transactions. Managed in `OwnerManager`.\\n *      - Transaction Hash: Hash of a transaction is calculated using the EIP-712 typed structured data hashing scheme.\\n *      - Nonce: Each transaction should have a different nonce to prevent replay attacks.\\n *      - Signature: A valid signature of an owner of the Safe for a transaction hash.\\n *      - Guard: Guard is a contract that can execute pre- and post- transaction checks. Managed in `GuardManager`.\\n *      - Modules: Modules are contracts that can be used to extend the write functionality of a Safe. Managed in `ModuleManager`.\\n *      - Fallback: Fallback handler is a contract that can provide additional read-only functional for Safe. Managed in `FallbackManager`.\\n *      Note: This version of the implementation contract doesn't emit events for the sake of gas efficiency and therefore requires a tracing node for indexing/\\n *      For the events-based implementation see `SafeL2.sol`.\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract Safe is\\n    Singleton,\\n    NativeCurrencyPaymentFallback,\\n    ModuleManager,\\n    OwnerManager,\\n    SignatureDecoder,\\n    SecuredTokenTransfer,\\n    ISignatureValidatorConstants,\\n    FallbackManager,\\n    StorageAccessible,\\n    GuardManager\\n{\\n    using SafeMath for uint256;\\n\\n    string public constant VERSION = \\\"1.4.1\\\";\\n\\n    // keccak256(\\n    //     \\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\"\\n    // );\\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH = 0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\\n\\n    // keccak256(\\n    //     \\\"SafeTx(address to,uint256 value,bytes data,uint8 operation,uint256 safeTxGas,uint256 baseGas,uint256 gasPrice,address gasToken,address refundReceiver,uint256 nonce)\\\"\\n    // );\\n    bytes32 private constant SAFE_TX_TYPEHASH = 0xbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d8;\\n\\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\\n    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\\n    event SignMsg(bytes32 indexed msgHash);\\n    event ExecutionFailure(bytes32 indexed txHash, uint256 payment);\\n    event ExecutionSuccess(bytes32 indexed txHash, uint256 payment);\\n\\n    uint256 public nonce;\\n    bytes32 private _deprecatedDomainSeparator;\\n    // Mapping to keep track of all message hashes that have been approved by ALL REQUIRED owners\\n    mapping(bytes32 => uint256) public signedMessages;\\n    // Mapping to keep track of all hashes (message or transaction) that have been approved by ANY owners\\n    mapping(address => mapping(bytes32 => uint256)) public approvedHashes;\\n\\n    // This constructor ensures that this contract can only be used as a singleton for Proxy contracts\\n    constructor() {\\n        /**\\n         * By setting the threshold it is not possible to call setup anymore,\\n         * so we create a Safe with 0 owners and threshold 1.\\n         * This is an unusable Safe, perfect for the singleton\\n         */\\n        threshold = 1;\\n    }\\n\\n    /**\\n     * @notice Sets an initial storage of the Safe contract.\\n     * @dev This method can only be called once.\\n     *      If a proxy was created without setting up, anyone can call setup and claim the proxy.\\n     * @param _owners List of Safe owners.\\n     * @param _threshold Number of required confirmations for a Safe transaction.\\n     * @param to Contract address for optional delegate call.\\n     * @param data Data payload for optional delegate call.\\n     * @param fallbackHandler Handler for fallback calls to this contract\\n     * @param paymentToken Token that should be used for the payment (0 is ETH)\\n     * @param payment Value that should be paid\\n     * @param paymentReceiver Address that should receive the payment (or 0 if tx.origin)\\n     */\\n    function setup(\\n        address[] calldata _owners,\\n        uint256 _threshold,\\n        address to,\\n        bytes calldata data,\\n        address fallbackHandler,\\n        address paymentToken,\\n        uint256 payment,\\n        address payable paymentReceiver\\n    ) external {\\n        // setupOwners checks if the Threshold is already set, therefore preventing that this method is called twice\\n        setupOwners(_owners, _threshold);\\n        if (fallbackHandler != address(0)) internalSetFallbackHandler(fallbackHandler);\\n        // As setupOwners can only be called if the contract has not been initialized we don't need a check for setupModules\\n        setupModules(to, data);\\n\\n        if (payment > 0) {\\n            // To avoid running into issues with EIP-170 we reuse the handlePayment function (to avoid adjusting code of that has been verified we do not adjust the method itself)\\n            // baseGas = 0, gasPrice = 1 and gas = payment => amount = (payment + 0) * 1 = payment\\n            handlePayment(payment, 0, 1, paymentToken, paymentReceiver);\\n        }\\n        emit SafeSetup(msg.sender, _owners, _threshold, to, fallbackHandler);\\n    }\\n\\n    /** @notice Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)\\n     *          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`.\\n     * @dev The fees are always transferred, even if the user transaction fails.\\n     *      This method doesn't perform any sanity check of the transaction, such as:\\n     *      - if the contract at `to` address has code or not\\n     *      - if the `gasToken` is a contract or not\\n     *      It is the responsibility of the caller to perform such checks.\\n     * @param to Destination address of Safe transaction.\\n     * @param value Ether value of Safe transaction.\\n     * @param data Data payload of Safe transaction.\\n     * @param operation Operation type of Safe transaction.\\n     * @param safeTxGas Gas that should be used for the Safe transaction.\\n     * @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n     * @param gasPrice Gas price that should be used for the payment calculation.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @return success Boolean indicating transaction's success.\\n     */\\n    function execTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures\\n    ) public payable virtual returns (bool success) {\\n        bytes32 txHash;\\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\\n        {\\n            bytes memory txHashData = encodeTransactionData(\\n                // Transaction info\\n                to,\\n                value,\\n                data,\\n                operation,\\n                safeTxGas,\\n                // Payment info\\n                baseGas,\\n                gasPrice,\\n                gasToken,\\n                refundReceiver,\\n                // Signature info\\n                nonce\\n            );\\n            // Increase nonce and execute transaction.\\n            nonce++;\\n            txHash = keccak256(txHashData);\\n            checkSignatures(txHash, txHashData, signatures);\\n        }\\n        address guard = getGuard();\\n        {\\n            if (guard != address(0)) {\\n                Guard(guard).checkTransaction(\\n                    // Transaction info\\n                    to,\\n                    value,\\n                    data,\\n                    operation,\\n                    safeTxGas,\\n                    // Payment info\\n                    baseGas,\\n                    gasPrice,\\n                    gasToken,\\n                    refundReceiver,\\n                    // Signature info\\n                    signatures,\\n                    msg.sender\\n                );\\n            }\\n        }\\n        // We require some gas to emit the events (at least 2500) after the execution and some to perform code until the execution (500)\\n        // We also include the 1/64 in the check that is not send along with a call to counteract potential shortings because of EIP-150\\n        require(gasleft() >= ((safeTxGas * 64) / 63).max(safeTxGas + 2500) + 500, \\\"GS010\\\");\\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\\n        {\\n            uint256 gasUsed = gasleft();\\n            // If the gasPrice is 0 we assume that nearly all available gas can be used (it is always more than safeTxGas)\\n            // We only substract 2500 (compared to the 3000 before) to ensure that the amount passed is still higher than safeTxGas\\n            success = execute(to, value, data, operation, gasPrice == 0 ? (gasleft() - 2500) : safeTxGas);\\n            gasUsed = gasUsed.sub(gasleft());\\n            // If no safeTxGas and no gasPrice was set (e.g. both are 0), then the internal tx is required to be successful\\n            // This makes it possible to use `estimateGas` without issues, as it searches for the minimum gas where the tx doesn't revert\\n            require(success || safeTxGas != 0 || gasPrice != 0, \\\"GS013\\\");\\n            // We transfer the calculated tx costs to the tx.origin to avoid sending it to intermediate contracts that have made calls\\n            uint256 payment = 0;\\n            if (gasPrice > 0) {\\n                payment = handlePayment(gasUsed, baseGas, gasPrice, gasToken, refundReceiver);\\n            }\\n            if (success) emit ExecutionSuccess(txHash, payment);\\n            else emit ExecutionFailure(txHash, payment);\\n        }\\n        {\\n            if (guard != address(0)) {\\n                Guard(guard).checkAfterExecution(txHash, success);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Handles the payment for a Safe transaction.\\n     * @param gasUsed Gas used by the Safe transaction.\\n     * @param baseGas Gas costs that are independent of the transaction execution (e.g. base transaction fee, signature check, payment of the refund).\\n     * @param gasPrice Gas price that should be used for the payment calculation.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @return payment The amount of payment made in the specified token.\\n     */\\n    function handlePayment(\\n        uint256 gasUsed,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver\\n    ) private returns (uint256 payment) {\\n        // solhint-disable-next-line avoid-tx-origin\\n        address payable receiver = refundReceiver == address(0) ? payable(tx.origin) : refundReceiver;\\n        if (gasToken == address(0)) {\\n            // For ETH we will only adjust the gas price to not be higher than the actual used gas price\\n            payment = gasUsed.add(baseGas).mul(gasPrice < tx.gasprice ? gasPrice : tx.gasprice);\\n            require(receiver.send(payment), \\\"GS011\\\");\\n        } else {\\n            payment = gasUsed.add(baseGas).mul(gasPrice);\\n            require(transferToken(gasToken, receiver, payment), \\\"GS012\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param data That should be signed (this is passed to an external validator contract)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory data, bytes memory signatures) public view {\\n        // Load threshold to avoid multiple storage loads\\n        uint256 _threshold = threshold;\\n        // Check that a threshold is set\\n        require(_threshold > 0, \\\"GS001\\\");\\n        checkNSignatures(dataHash, data, signatures, _threshold);\\n    }\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @dev Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param data That should be signed (this is passed to an external validator contract)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @param requiredSignatures Amount of required valid signatures.\\n     */\\n    function checkNSignatures(bytes32 dataHash, bytes memory data, bytes memory signatures, uint256 requiredSignatures) public view {\\n        // Check that the provided signature data is not too short\\n        require(signatures.length >= requiredSignatures.mul(65), \\\"GS020\\\");\\n        // There cannot be an owner with address 0.\\n        address lastOwner = address(0);\\n        address currentOwner;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        uint256 i;\\n        for (i = 0; i < requiredSignatures; i++) {\\n            (v, r, s) = signatureSplit(signatures, i);\\n            if (v == 0) {\\n                require(keccak256(data) == dataHash, \\\"GS027\\\");\\n                // If v is 0 then it is a contract signature\\n                // When handling contract signatures the address of the contract is encoded into r\\n                currentOwner = address(uint160(uint256(r)));\\n\\n                // Check that signature data pointer (s) is not pointing inside the static part of the signatures bytes\\n                // This check is not completely accurate, since it is possible that more signatures than the threshold are send.\\n                // Here we only check that the pointer is not pointing inside the part that is being processed\\n                require(uint256(s) >= requiredSignatures.mul(65), \\\"GS021\\\");\\n\\n                // Check that signature data pointer (s) is in bounds (points to the length of data -> 32 bytes)\\n                require(uint256(s).add(32) <= signatures.length, \\\"GS022\\\");\\n\\n                // Check if the contract signature is in bounds: start of data is s + 32 and end is start + signature length\\n                uint256 contractSignatureLen;\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    contractSignatureLen := mload(add(add(signatures, s), 0x20))\\n                }\\n                require(uint256(s).add(32).add(contractSignatureLen) <= signatures.length, \\\"GS023\\\");\\n\\n                // Check signature\\n                bytes memory contractSignature;\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    // The signature data for contract signatures is appended to the concatenated signatures and the offset is stored in s\\n                    contractSignature := add(add(signatures, s), 0x20)\\n                }\\n                require(ISignatureValidator(currentOwner).isValidSignature(data, contractSignature) == EIP1271_MAGIC_VALUE, \\\"GS024\\\");\\n            } else if (v == 1) {\\n                // If v is 1 then it is an approved hash\\n                // When handling approved hashes the address of the approver is encoded into r\\n                currentOwner = address(uint160(uint256(r)));\\n                // Hashes are automatically approved by the sender of the message or when they have been pre-approved via a separate transaction\\n                require(msg.sender == currentOwner || approvedHashes[currentOwner][dataHash] != 0, \\\"GS025\\\");\\n            } else if (v > 30) {\\n                // If v > 30 then default va (27,28) has been adjusted for eth_sign flow\\n                // To support eth_sign and similar we adjust v and hash the messageHash with the Ethereum message prefix before applying ecrecover\\n                currentOwner = ecrecover(keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", dataHash)), v - 4, r, s);\\n            } else {\\n                // Default is the ecrecover flow with the provided data hash\\n                // Use ecrecover with the messageHash for EOA signatures\\n                currentOwner = ecrecover(dataHash, v, r, s);\\n            }\\n            require(currentOwner > lastOwner && owners[currentOwner] != address(0) && currentOwner != SENTINEL_OWNERS, \\\"GS026\\\");\\n            lastOwner = currentOwner;\\n        }\\n    }\\n\\n    /**\\n     * @notice Marks hash `hashToApprove` as approved.\\n     * @dev This can be used with a pre-approved hash transaction signature.\\n     *      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures\\n     * @param hashToApprove The hash to mark as approved for signatures that are verified by this contract.\\n     */\\n    function approveHash(bytes32 hashToApprove) external {\\n        require(owners[msg.sender] != address(0), \\\"GS030\\\");\\n        approvedHashes[msg.sender][hashToApprove] = 1;\\n        emit ApproveHash(hashToApprove, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Returns the ID of the chain the contract is currently deployed on.\\n     * @return The ID of the current chain as a uint256.\\n     */\\n    function getChainId() public view returns (uint256) {\\n        uint256 id;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\\n     * @return bytes32 The domain separator hash.\\n     */\\n    function domainSeparator() public view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, getChainId(), this));\\n    }\\n\\n    /**\\n     * @notice Returns the pre-image of the transaction hash (see getTransactionHash).\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @param safeTxGas Gas that should be used for the safe transaction.\\n     * @param baseGas Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n     * @param gasPrice Maximum gas price that should be used for this transaction.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param _nonce Transaction nonce.\\n     * @return Transaction hash bytes.\\n     */\\n    function encodeTransactionData(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) public view returns (bytes memory) {\\n        bytes32 safeTxHash = keccak256(\\n            abi.encode(\\n                SAFE_TX_TYPEHASH,\\n                to,\\n                value,\\n                keccak256(data),\\n                operation,\\n                safeTxGas,\\n                baseGas,\\n                gasPrice,\\n                gasToken,\\n                refundReceiver,\\n                _nonce\\n            )\\n        );\\n        return abi.encodePacked(bytes1(0x19), bytes1(0x01), domainSeparator(), safeTxHash);\\n    }\\n\\n    /**\\n     * @notice Returns transaction hash to be signed by owners.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @param safeTxGas Fas that should be used for the safe transaction.\\n     * @param baseGas Gas costs for data used to trigger the safe transaction.\\n     * @param gasPrice Maximum gas price that should be used for this transaction.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param _nonce Transaction nonce.\\n     * @return Transaction hash.\\n     */\\n    function getTransactionHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) public view returns (bytes32) {\\n        return keccak256(encodeTransactionData(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce));\\n    }\\n}\\n\",\"keccak256\":\"0xbab2f7bec33283e349342e7b23f5191c678c64fe02065bac4f4f44fb3f5d2638\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/base/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/Enum.sol\\\";\\n\\n/**\\n * @title Executor - A contract that can execute transactions\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Executor {\\n    /**\\n     * @notice Executes either a delegatecall or a call with provided parameters.\\n     * @dev This method doesn't perform any sanity check of the transaction, such as:\\n     *      - if the contract at `to` address has code or not\\n     *      It is the responsibility of the caller to perform such checks.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @return success boolean flag indicating if the call succeeded.\\n     */\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 txGas\\n    ) internal returns (bool success) {\\n        if (operation == Enum.Operation.DelegateCall) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\\n            }\\n        } else {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf0be832e7529e92000544170a5529d73666a9b5e836b30c6f2ed6ef7d7d8c94a\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/base/FallbackManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../common/SelfAuthorized.sol\\\";\\n\\n/**\\n * @title Fallback Manager - A contract managing fallback calls made to this contract\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract FallbackManager is SelfAuthorized {\\n    event ChangedFallbackHandler(address indexed handler);\\n\\n    // keccak256(\\\"fallback_manager.handler.address\\\")\\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\\n\\n    /**\\n     *  @notice Internal function to set the fallback handler.\\n     *  @param handler contract to handle fallback calls.\\n     */\\n    function internalSetFallbackHandler(address handler) internal {\\n        /*\\n            If a fallback handler is set to self, then the following attack vector is opened:\\n            Imagine we have a function like this:\\n            function withdraw() internal authorized {\\n                withdrawalAddress.call.value(address(this).balance)(\\\"\\\");\\n            }\\n\\n            If the fallback method is triggered, the fallback handler appends the msg.sender address to the calldata and calls the fallback handler.\\n            A potential attacker could call a Safe with the 3 bytes signature of a withdraw function. Since 3 bytes do not create a valid signature,\\n            the call would end in a fallback handler. Since it appends the msg.sender address to the calldata, the attacker could craft an address \\n            where the first 3 bytes of the previous calldata + the first byte of the address make up a valid function signature. The subsequent call would result in unsanctioned access to Safe's internal protected methods.\\n            For some reason, solidity matches the first 4 bytes of the calldata to a function signature, regardless if more data follow these 4 bytes.\\n        */\\n        require(handler != address(this), \\\"GS400\\\");\\n\\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, handler)\\n        }\\n    }\\n\\n    /**\\n     * @notice Set Fallback Handler to `handler` for the Safe.\\n     * @dev Only fallback calls without value and with data will be forwarded.\\n     *      This can only be done via a Safe transaction.\\n     *      Cannot be set to the Safe itself.\\n     * @param handler contract to handle fallback calls.\\n     */\\n    function setFallbackHandler(address handler) public authorized {\\n        internalSetFallbackHandler(handler);\\n        emit ChangedFallbackHandler(handler);\\n    }\\n\\n    // @notice Forwards all calls to the fallback handler if set. Returns 0 if no handler is set.\\n    // @dev Appends the non-padded caller address to the calldata to be optionally used in the handler\\n    //      The handler can make us of `HandlerContext.sol` to extract the address.\\n    //      This is done because in the next call frame the `msg.sender` will be FallbackManager's address\\n    //      and having the original caller address may enable additional verification scenarios.\\n    // solhint-disable-next-line payable-fallback,no-complex-fallback\\n    fallback() external {\\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let handler := sload(slot)\\n            if iszero(handler) {\\n                return(0, 0)\\n            }\\n            calldatacopy(0, 0, calldatasize())\\n            // The msg.sender address is shifted to the left by 12 bytes to remove the padding\\n            // Then the address without padding is stored right after the calldata\\n            mstore(calldatasize(), shl(96, caller()))\\n            // Add 20 bytes for the address appended add the end\\n            let success := call(gas(), handler, 0, 0, add(calldatasize(), 20), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            if iszero(success) {\\n                revert(0, returndatasize())\\n            }\\n            return(0, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x646b3088f15af8b4f71ac5eeffaa24ce0c1abed5f494f90368208b09e35d5165\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/base/GuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../common/Enum.sol\\\";\\nimport \\\"../common/SelfAuthorized.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\ninterface Guard is IERC165 {\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    function checkAfterExecution(bytes32 txHash, bool success) external;\\n}\\n\\nabstract contract BaseGuard is Guard {\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(Guard).interfaceId || // 0xe6d7a83a\\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\\n    }\\n}\\n\\n/**\\n * @title Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract GuardManager is SelfAuthorized {\\n    event ChangedGuard(address indexed guard);\\n\\n    // keccak256(\\\"guard_manager.guard.address\\\")\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    /**\\n     * @dev Set a guard that checks transactions before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,\\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\\n     *        audit the guard code and design recovery mechanisms.\\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\\n     */\\n    function setGuard(address guard) external authorized {\\n        if (guard != address(0)) {\\n            require(Guard(guard).supportsInterface(type(Guard).interfaceId), \\\"GS300\\\");\\n        }\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, guard)\\n        }\\n        emit ChangedGuard(guard);\\n    }\\n\\n    /**\\n     * @dev Internal method to retrieve the current guard\\n     *      We do not have a public method because we're short on bytecode size limit,\\n     *      to retrieve the guard address, one can use `getStorageAt` from `StorageAccessible` contract\\n     *      with the slot `GUARD_STORAGE_SLOT`\\n     * @return guard The address of the guard\\n     */\\n    function getGuard() internal view returns (address guard) {\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            guard := sload(slot)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xedfc7c830ab35e52d1208986b253f3422c2f0ca68054c10819fb348fcc6ccf5d\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/base/ModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/Enum.sol\\\";\\nimport \\\"../common/SelfAuthorized.sol\\\";\\nimport \\\"./Executor.sol\\\";\\n\\n/**\\n * @title Module Manager - A contract managing Safe modules\\n * @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\\n           \\u26a0\\ufe0f WARNING: Modules are a security risk since they can execute arbitrary transactions, \\n           so only trusted and audited modules should be added to a Safe. A malicious module can\\n           completely takeover a Safe.\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract ModuleManager is SelfAuthorized, Executor {\\n    event EnabledModule(address indexed module);\\n    event DisabledModule(address indexed module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    address internal constant SENTINEL_MODULES = address(0x1);\\n\\n    mapping(address => address) internal modules;\\n\\n    /**\\n     * @notice Setup function sets the initial storage of the contract.\\n     *         Optionally executes a delegate call to another contract to setup the modules.\\n     * @param to Optional destination address of call to execute.\\n     * @param data Optional data of call to execute.\\n     */\\n    function setupModules(address to, bytes memory data) internal {\\n        require(modules[SENTINEL_MODULES] == address(0), \\\"GS100\\\");\\n        modules[SENTINEL_MODULES] = SENTINEL_MODULES;\\n        if (to != address(0)) {\\n            require(isContract(to), \\\"GS002\\\");\\n            // Setup has to complete successfully or transaction fails.\\n            require(execute(to, 0, data, Enum.Operation.DelegateCall, type(uint256).max), \\\"GS000\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Enables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param module Module to be whitelisted.\\n     */\\n    function enableModule(address module) public authorized {\\n        // Module address cannot be null or sentinel.\\n        require(module != address(0) && module != SENTINEL_MODULES, \\\"GS101\\\");\\n        // Module cannot be added twice.\\n        require(modules[module] == address(0), \\\"GS102\\\");\\n        modules[module] = modules[SENTINEL_MODULES];\\n        modules[SENTINEL_MODULES] = module;\\n        emit EnabledModule(module);\\n    }\\n\\n    /**\\n     * @notice Disables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevModule Previous module in the modules linked list.\\n     * @param module Module to be removed.\\n     */\\n    function disableModule(address prevModule, address module) public authorized {\\n        // Validate module address and check that it corresponds to module index.\\n        require(module != address(0) && module != SENTINEL_MODULES, \\\"GS101\\\");\\n        require(modules[prevModule] == module, \\\"GS103\\\");\\n        modules[prevModule] = modules[module];\\n        modules[module] = address(0);\\n        emit DisabledModule(module);\\n    }\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\\n     * @dev Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     */\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public virtual returns (bool success) {\\n        // Only whitelisted modules are allowed.\\n        require(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0), \\\"GS104\\\");\\n        // Execute transaction without further confirmations.\\n        success = execute(to, value, data, operation, type(uint256).max);\\n        if (success) emit ExecutionFromModuleSuccess(msg.sender);\\n        else emit ExecutionFromModuleFailure(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     * @return returnData Data returned by the call.\\n     */\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public returns (bool success, bytes memory returnData) {\\n        success = execTransactionFromModule(to, value, data, operation);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Load free memory location\\n            let ptr := mload(0x40)\\n            // We allocate memory for the return data by setting the free memory location to\\n            // current free memory location + data size + 32 bytes for data size value\\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\\n            // Store the size\\n            mstore(ptr, returndatasize())\\n            // Store the data\\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\\n            // Point the return data to the correct memory location\\n            returnData := ptr\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns if an module is enabled\\n     * @return True if the module is enabled\\n     */\\n    function isModuleEnabled(address module) public view returns (bool) {\\n        return SENTINEL_MODULES != module && modules[module] != address(0);\\n    }\\n\\n    /**\\n     * @notice Returns an array of modules.\\n     *         If all entries fit into a single page, the next pointer will be 0x1.\\n     *         If another page is present, next will be the last element of the returned array.\\n     * @param start Start of the page. Has to be a module or start pointer (0x1 address)\\n     * @param pageSize Maximum number of modules that should be returned. Has to be > 0\\n     * @return array Array of modules.\\n     * @return next Start of the next page.\\n     */\\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next) {\\n        require(start == SENTINEL_MODULES || isModuleEnabled(start), \\\"GS105\\\");\\n        require(pageSize > 0, \\\"GS106\\\");\\n        // Init array with max page size\\n        array = new address[](pageSize);\\n\\n        // Populate return array\\n        uint256 moduleCount = 0;\\n        next = modules[start];\\n        while (next != address(0) && next != SENTINEL_MODULES && moduleCount < pageSize) {\\n            array[moduleCount] = next;\\n            next = modules[next];\\n            moduleCount++;\\n        }\\n\\n        /**\\n          Because of the argument validation, we can assume that the loop will always iterate over the valid module list values\\n          and the `next` variable will either be an enabled module or a sentinel address (signalling the end). \\n          \\n          If we haven't reached the end inside the loop, we need to set the next pointer to the last element of the modules array\\n          because the `next` variable (which is a module by itself) acting as a pointer to the start of the next page is neither \\n          included to the current page, nor will it be included in the next one if you pass it as a start.\\n        */\\n        if (next != SENTINEL_MODULES) {\\n            next = array[moduleCount - 1];\\n        }\\n        // Set correct size of returned array\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(array, moduleCount)\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns true if `account` is a contract.\\n     * @dev This function will return false if invoked during the constructor of a contract,\\n     *      as the code is not actually created until after the constructor finishes.\\n     * @param account The address being queried\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xd71b0d56dce386fa6f67c51061face071b2c7b03ec535d68717e2538ec47113a\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/base/OwnerManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/SelfAuthorized.sol\\\";\\n\\n/**\\n * @title OwnerManager - Manages Safe owners and a threshold to authorize transactions.\\n * @dev Uses a linked list to store the owners because the code generate by the solidity compiler\\n *      is more efficient than using a dynamic array.\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract OwnerManager is SelfAuthorized {\\n    event AddedOwner(address indexed owner);\\n    event RemovedOwner(address indexed owner);\\n    event ChangedThreshold(uint256 threshold);\\n\\n    address internal constant SENTINEL_OWNERS = address(0x1);\\n\\n    mapping(address => address) internal owners;\\n    uint256 internal ownerCount;\\n    uint256 internal threshold;\\n\\n    /**\\n     * @notice Sets the initial storage of the contract.\\n     * @param _owners List of Safe owners.\\n     * @param _threshold Number of required confirmations for a Safe transaction.\\n     */\\n    function setupOwners(address[] memory _owners, uint256 _threshold) internal {\\n        // Threshold can only be 0 at initialization.\\n        // Check ensures that setup function can only be called once.\\n        require(threshold == 0, \\\"GS200\\\");\\n        // Validate that threshold is smaller than number of added owners.\\n        require(_threshold <= _owners.length, \\\"GS201\\\");\\n        // There has to be at least one Safe owner.\\n        require(_threshold >= 1, \\\"GS202\\\");\\n        // Initializing Safe owners.\\n        address currentOwner = SENTINEL_OWNERS;\\n        for (uint256 i = 0; i < _owners.length; i++) {\\n            // Owner address cannot be null.\\n            address owner = _owners[i];\\n            require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this) && currentOwner != owner, \\\"GS203\\\");\\n            // No duplicate owners allowed.\\n            require(owners[owner] == address(0), \\\"GS204\\\");\\n            owners[currentOwner] = owner;\\n            currentOwner = owner;\\n        }\\n        owners[currentOwner] = SENTINEL_OWNERS;\\n        ownerCount = _owners.length;\\n        threshold = _threshold;\\n    }\\n\\n    /**\\n     * @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param owner New owner address.\\n     * @param _threshold New threshold.\\n     */\\n    function addOwnerWithThreshold(address owner, uint256 _threshold) public authorized {\\n        // Owner address cannot be null, the sentinel or the Safe itself.\\n        require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this), \\\"GS203\\\");\\n        // No duplicate owners allowed.\\n        require(owners[owner] == address(0), \\\"GS204\\\");\\n        owners[owner] = owners[SENTINEL_OWNERS];\\n        owners[SENTINEL_OWNERS] = owner;\\n        ownerCount++;\\n        emit AddedOwner(owner);\\n        // Change threshold if threshold was changed.\\n        if (threshold != _threshold) changeThreshold(_threshold);\\n    }\\n\\n    /**\\n     * @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be removed in the linked list\\n     * @param owner Owner address to be removed.\\n     * @param _threshold New threshold.\\n     */\\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) public authorized {\\n        // Only allow to remove an owner, if threshold can still be reached.\\n        require(ownerCount - 1 >= _threshold, \\\"GS201\\\");\\n        // Validate owner address and check that it corresponds to owner index.\\n        require(owner != address(0) && owner != SENTINEL_OWNERS, \\\"GS203\\\");\\n        require(owners[prevOwner] == owner, \\\"GS205\\\");\\n        owners[prevOwner] = owners[owner];\\n        owners[owner] = address(0);\\n        ownerCount--;\\n        emit RemovedOwner(owner);\\n        // Change threshold if threshold was changed.\\n        if (threshold != _threshold) changeThreshold(_threshold);\\n    }\\n\\n    /**\\n     * @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list\\n     * @param oldOwner Owner address to be replaced.\\n     * @param newOwner New owner address.\\n     */\\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) public authorized {\\n        // Owner address cannot be null, the sentinel or the Safe itself.\\n        require(newOwner != address(0) && newOwner != SENTINEL_OWNERS && newOwner != address(this), \\\"GS203\\\");\\n        // No duplicate owners allowed.\\n        require(owners[newOwner] == address(0), \\\"GS204\\\");\\n        // Validate oldOwner address and check that it corresponds to owner index.\\n        require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, \\\"GS203\\\");\\n        require(owners[prevOwner] == oldOwner, \\\"GS205\\\");\\n        owners[newOwner] = owners[oldOwner];\\n        owners[prevOwner] = newOwner;\\n        owners[oldOwner] = address(0);\\n        emit RemovedOwner(oldOwner);\\n        emit AddedOwner(newOwner);\\n    }\\n\\n    /**\\n     * @notice Changes the threshold of the Safe to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param _threshold New threshold.\\n     */\\n    function changeThreshold(uint256 _threshold) public authorized {\\n        // Validate that threshold is smaller than number of owners.\\n        require(_threshold <= ownerCount, \\\"GS201\\\");\\n        // There has to be at least one Safe owner.\\n        require(_threshold >= 1, \\\"GS202\\\");\\n        threshold = _threshold;\\n        emit ChangedThreshold(threshold);\\n    }\\n\\n    /**\\n     * @notice Returns the number of required confirmations for a Safe transaction aka the threshold.\\n     * @return Threshold number.\\n     */\\n    function getThreshold() public view returns (uint256) {\\n        return threshold;\\n    }\\n\\n    /**\\n     * @notice Returns if `owner` is an owner of the Safe.\\n     * @return Boolean if owner is an owner of the Safe.\\n     */\\n    function isOwner(address owner) public view returns (bool) {\\n        return owner != SENTINEL_OWNERS && owners[owner] != address(0);\\n    }\\n\\n    /**\\n     * @notice Returns a list of Safe owners.\\n     * @return Array of Safe owners.\\n     */\\n    function getOwners() public view returns (address[] memory) {\\n        address[] memory array = new address[](ownerCount);\\n\\n        // populate return array\\n        uint256 index = 0;\\n        address currentOwner = owners[SENTINEL_OWNERS];\\n        while (currentOwner != SENTINEL_OWNERS) {\\n            array[index] = currentOwner;\\n            currentOwner = owners[currentOwner];\\n            index++;\\n        }\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xec9799093eb7a73461cd5e563198751ee222f956f754ea622a03fe953e515b2c\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe contracts.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x4ff3008926a118e9f36e6747facc39dd13168e0d00f516888ae966ec20766453\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/NativeCurrencyPaymentFallback.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title NativeCurrencyPaymentFallback - A contract that has a fallback to accept native currency payments.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract NativeCurrencyPaymentFallback {\\n    event SafeReceived(address indexed sender, uint256 value);\\n\\n    /**\\n     * @notice Receive function accepts native currency transactions.\\n     * @dev Emits an event with sender and received value.\\n     */\\n    receive() external payable {\\n        emit SafeReceived(msg.sender, msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0x3ddcd4130c67326033dcf773d2d87d7147e3a8386993ea3ab3f1c38da406adba\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/SecuredTokenTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SecuredTokenTransfer - Secure token transfer.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SecuredTokenTransfer {\\n    /**\\n     * @notice Transfers a token and returns a boolean if it was a success\\n     * @dev It checks the return data of the transfer call and returns true if the transfer was successful.\\n     *      It doesn't check if the `token` address is a contract or not.\\n     * @param token Token that should be transferred\\n     * @param receiver Receiver to whom the token should be transferred\\n     * @param amount The amount of tokens that should be transferred\\n     * @return transferred Returns true if the transfer was successful\\n     */\\n    function transferToken(address token, address receiver, uint256 amount) internal returns (bool transferred) {\\n        // 0xa9059cbb - keccack(\\\"transfer(address,uint256)\\\")\\n        bytes memory data = abi.encodeWithSelector(0xa9059cbb, receiver, amount);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // We write the return value to scratch space.\\n            // See https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory\\n            let success := call(sub(gas(), 10000), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            switch returndatasize()\\n            case 0 {\\n                transferred := success\\n            }\\n            case 0x20 {\\n                transferred := iszero(or(iszero(success), iszero(mload(0))))\\n            }\\n            default {\\n                transferred := 0\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1eb8c3601538b73dd6a823ac4fca49bb8adc97d1302a936622156636c971eb05\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SelfAuthorized {\\n    function requireSelfCall() private view {\\n        require(msg.sender == address(this), \\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfb0e176bb208e047a234fe757e2acd13787e27879570b8544547ac787feb5f13\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/SignatureDecoder.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SignatureDecoder - Decodes signatures encoded as bytes\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SignatureDecoder {\\n    /**\\n     * @notice Splits signature bytes into `uint8 v, bytes32 r, bytes32 s`.\\n     * @dev Make sure to perform a bounds check for @param pos, to avoid out of bounds access on @param signatures\\n     *      The signature format is a compact form of {bytes32 r}{bytes32 s}{uint8 v}\\n     *      Compact means uint8 is not padded to 32 bytes.\\n     * @param pos Which signature to read.\\n     *            A prior bounds check of this parameter should be performed, to avoid out of bounds access.\\n     * @param signatures Concatenated {r, s, v} signatures.\\n     * @return v Recovery ID or Safe signature type.\\n     * @return r Output value r of the signature.\\n     * @return s Output value s of the signature.\\n     */\\n    function signatureSplit(bytes memory signatures, uint256 pos) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let signaturePos := mul(0x41, pos)\\n            r := mload(add(signatures, add(signaturePos, 0x20)))\\n            s := mload(add(signatures, add(signaturePos, 0x40)))\\n            /**\\n             * Here we are loading the last 32 bytes, including 31 bytes\\n             * of 's'. There is no 'mload8' to do this.\\n             * 'byte' is not working due to the Solidity parser, so lets\\n             * use the second best option, 'and'\\n             */\\n            v := and(mload(add(signatures, add(signaturePos, 0x41))), 0xff)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a3baf0efa1585ddf2276505c6d34fa16f01cafff1288e40110d5e67fb459c7c\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/Singleton.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Singleton - Base for singleton contracts (should always be the first super contract)\\n *        This contract is tightly coupled to our proxy contract (see `proxies/SafeProxy.sol`)\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Singleton {\\n    // singleton always has to be the first declared variable to ensure the same location as in the Proxy contract.\\n    // It should also always be ensured the address is stored alone (uses a full word)\\n    address private singleton;\\n}\\n\",\"keccak256\":\"0xcab7c6e5fb6d7295a9343f72fec26a2f632ddfe220a6f267b5c5a1eb2f9bce50\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/StorageAccessible.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title StorageAccessible - A generic base contract that allows callers to access all internal storage.\\n * @notice See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\\n *         It removes a method from the original contract not needed for the Safe contracts.\\n * @author Gnosis Developers\\n */\\nabstract contract StorageAccessible {\\n    /**\\n     * @notice Reads `length` bytes of storage in the currents contract\\n     * @param offset - the offset in the current contract's storage in words to start reading from\\n     * @param length - the number of words (32 bytes) of data to read\\n     * @return the bytes that were read.\\n     */\\n    function getStorageAt(uint256 offset, uint256 length) public view returns (bytes memory) {\\n        bytes memory result = new bytes(length * 32);\\n        for (uint256 index = 0; index < length; index++) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let word := sload(add(offset, index))\\n                mstore(add(add(result, 0x20), mul(index, 0x20)), word)\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Performs a delegatecall on a targetContract in the context of self.\\n     * Internally reverts execution to avoid side effects (making it static).\\n     *\\n     * This method reverts with data equal to `abi.encode(bool(success), bytes(response))`.\\n     * Specifically, the `returndata` after a call to this method will be:\\n     * `success:bool || response.length:uint256 || response:bytes`.\\n     *\\n     * @param targetContract Address of the contract containing the code to execute.\\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\\n     */\\n    function simulateAndRevert(address targetContract, bytes memory calldataPayload) external {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let success := delegatecall(gas(), targetContract, add(calldataPayload, 0x20), mload(calldataPayload), 0, 0)\\n\\n            mstore(0x00, success)\\n            mstore(0x20, returndatasize())\\n            returndatacopy(0x40, 0, returndatasize())\\n            revert(0, add(returndatasize(), 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2c5412a8f014db332322a6b24ee3cedce15dca17a721ae49fdef368568d4391e\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/external/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SafeMath\\n * @notice Math operations with safety checks that revert on error (overflow/underflow)\\n */\\nlibrary SafeMath {\\n    /**\\n     * @notice Multiplies two numbers, reverts on overflow.\\n     * @param a First number\\n     * @param b Second number\\n     * @return Product of a and b\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n     * @param a First number\\n     * @param b Second number\\n     * @return Difference of a and b\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Adds two numbers, reverts on overflow.\\n     * @param a First number\\n     * @param b Second number\\n     * @return Sum of a and b\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Returns the largest of two numbers.\\n     * @param a First number\\n     * @param b Second number\\n     * @return Largest of a and b\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x5f856674d9be11344c5899deb43364e19baa75bc881cada4c159938270b2bd89\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n     * See the corresponding EIP section\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/interfaces/ISignatureValidator.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract ISignatureValidatorConstants {\\n    // bytes4(keccak256(\\\"isValidSignature(bytes,bytes)\\\")\\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x20c13b0b;\\n}\\n\\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\\n    /**\\n     * @notice Legacy EIP1271 method to validate a signature.\\n     * @param _data Arbitrary length data signed on the behalf of address(this).\\n     * @param _signature Signature byte array associated with _data.\\n     *\\n     * MUST return the bytes4 magic value 0x20c13b0b when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(bytes memory _data, bytes memory _signature) public view virtual returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2459cb3ed73ecb80e1e7a6508d09a58cc59570b049f77042f669dedfcc5f6457\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3123,"contract":"@safe-global/safe-contracts/contracts/Safe.sol:Safe","label":"singleton","offset":0,"slot":"0","type":"t_address"},{"astId":2113,"contract":"@safe-global/safe-contracts/contracts/Safe.sol:Safe","label":"modules","offset":0,"slot":"1","type":"t_mapping(t_address,t_address)"},{"astId":2531,"contract":"@safe-global/safe-contracts/contracts/Safe.sol:Safe","label":"owners","offset":0,"slot":"2","type":"t_mapping(t_address,t_address)"},{"astId":2533,"contract":"@safe-global/safe-contracts/contracts/Safe.sol:Safe","label":"ownerCount","offset":0,"slot":"3","type":"t_uint256"},{"astId":2535,"contract":"@safe-global/safe-contracts/contracts/Safe.sol:Safe","label":"threshold","offset":0,"slot":"4","type":"t_uint256"},{"astId":1021,"contract":"@safe-global/safe-contracts/contracts/Safe.sol:Safe","label":"nonce","offset":0,"slot":"5","type":"t_uint256"},{"astId":1023,"contract":"@safe-global/safe-contracts/contracts/Safe.sol:Safe","label":"_deprecatedDomainSeparator","offset":0,"slot":"6","type":"t_bytes32"},{"astId":1027,"contract":"@safe-global/safe-contracts/contracts/Safe.sol:Safe","label":"signedMessages","offset":0,"slot":"7","type":"t_mapping(t_bytes32,t_uint256)"},{"astId":1033,"contract":"@safe-global/safe-contracts/contracts/Safe.sol:Safe","label":"approvedHashes","offset":0,"slot":"8","type":"t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_address)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_address,t_mapping(t_bytes32,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes32 => uint256))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_uint256)"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"addOwnerWithThreshold(address,uint256)":{"notice":"Adds the owner `owner` to the Safe and updates the threshold to `_threshold`."},"approveHash(bytes32)":{"notice":"Marks hash `hashToApprove` as approved."},"changeThreshold(uint256)":{"notice":"Changes the threshold of the Safe to `_threshold`."},"checkNSignatures(bytes32,bytes,bytes,uint256)":{"notice":"Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise."},"checkSignatures(bytes32,bytes,bytes)":{"notice":"Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise."},"disableModule(address,address)":{"notice":"Disables the module `module` for the Safe."},"enableModule(address)":{"notice":"Enables the module `module` for the Safe."},"encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)":{"notice":"Returns the pre-image of the transaction hash (see getTransactionHash)."},"execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)":{"notice":"Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`."},"execTransactionFromModule(address,uint256,bytes,uint8)":{"notice":"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)"},"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":{"notice":"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data"},"getChainId()":{"notice":"Returns the ID of the chain the contract is currently deployed on."},"getModulesPaginated(address,uint256)":{"notice":"Returns an array of modules.         If all entries fit into a single page, the next pointer will be 0x1.         If another page is present, next will be the last element of the returned array."},"getOwners()":{"notice":"Returns a list of Safe owners."},"getStorageAt(uint256,uint256)":{"notice":"Reads `length` bytes of storage in the currents contract"},"getThreshold()":{"notice":"Returns the number of required confirmations for a Safe transaction aka the threshold."},"getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)":{"notice":"Returns transaction hash to be signed by owners."},"isModuleEnabled(address)":{"notice":"Returns if an module is enabled"},"isOwner(address)":{"notice":"Returns if `owner` is an owner of the Safe."},"removeOwner(address,address,uint256)":{"notice":"Removes the owner `owner` from the Safe and updates the threshold to `_threshold`."},"setFallbackHandler(address)":{"notice":"Set Fallback Handler to `handler` for the Safe."},"setGuard(address)":{"notice":"Set Transaction Guard `guard` for the Safe. Make sure you trust the guard."},"setup(address[],uint256,address,bytes,address,address,uint256,address)":{"notice":"Sets an initial storage of the Safe contract."},"swapOwner(address,address,address)":{"notice":"Replaces the owner `oldOwner` in the Safe with `newOwner`."}},"version":1}}},"@safe-global/safe-contracts/contracts/base/Executor.sol":{"Executor":{"abi":[],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{},"title":"Executor - A contract that can execute transactions","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Executor - A contract that can execute transactions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-contracts/contracts/base/Executor.sol\":\"Executor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/base/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/Enum.sol\\\";\\n\\n/**\\n * @title Executor - A contract that can execute transactions\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Executor {\\n    /**\\n     * @notice Executes either a delegatecall or a call with provided parameters.\\n     * @dev This method doesn't perform any sanity check of the transaction, such as:\\n     *      - if the contract at `to` address has code or not\\n     *      It is the responsibility of the caller to perform such checks.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @return success boolean flag indicating if the call succeeded.\\n     */\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 txGas\\n    ) internal returns (bool success) {\\n        if (operation == Enum.Operation.DelegateCall) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\\n            }\\n        } else {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf0be832e7529e92000544170a5529d73666a9b5e836b30c6f2ed6ef7d7d8c94a\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe contracts.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x4ff3008926a118e9f36e6747facc39dd13168e0d00f516888ae966ec20766453\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@safe-global/safe-contracts/contracts/base/FallbackManager.sol":{"FallbackManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"handler","type":"address"}],"name":"ChangedFallbackHandler","type":"event"},{"stateMutability":"nonpayable","type":"fallback"},{"inputs":[{"internalType":"address","name":"handler","type":"address"}],"name":"setFallbackHandler","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{"setFallbackHandler(address)":{"details":"Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.      Cannot be set to the Safe itself.","params":{"handler":"contract to handle fallback calls."}}},"title":"Fallback Manager - A contract managing fallback calls made to this contract","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"setFallbackHandler(address)":"f08a0323"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"}],\"name\":\"ChangedFallbackHandler\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"}],\"name\":\"setFallbackHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{\"setFallbackHandler(address)\":{\"details\":\"Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.      Cannot be set to the Safe itself.\",\"params\":{\"handler\":\"contract to handle fallback calls.\"}}},\"title\":\"Fallback Manager - A contract managing fallback calls made to this contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setFallbackHandler(address)\":{\"notice\":\"Set Fallback Handler to `handler` for the Safe.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-contracts/contracts/base/FallbackManager.sol\":\"FallbackManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/base/FallbackManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../common/SelfAuthorized.sol\\\";\\n\\n/**\\n * @title Fallback Manager - A contract managing fallback calls made to this contract\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract FallbackManager is SelfAuthorized {\\n    event ChangedFallbackHandler(address indexed handler);\\n\\n    // keccak256(\\\"fallback_manager.handler.address\\\")\\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\\n\\n    /**\\n     *  @notice Internal function to set the fallback handler.\\n     *  @param handler contract to handle fallback calls.\\n     */\\n    function internalSetFallbackHandler(address handler) internal {\\n        /*\\n            If a fallback handler is set to self, then the following attack vector is opened:\\n            Imagine we have a function like this:\\n            function withdraw() internal authorized {\\n                withdrawalAddress.call.value(address(this).balance)(\\\"\\\");\\n            }\\n\\n            If the fallback method is triggered, the fallback handler appends the msg.sender address to the calldata and calls the fallback handler.\\n            A potential attacker could call a Safe with the 3 bytes signature of a withdraw function. Since 3 bytes do not create a valid signature,\\n            the call would end in a fallback handler. Since it appends the msg.sender address to the calldata, the attacker could craft an address \\n            where the first 3 bytes of the previous calldata + the first byte of the address make up a valid function signature. The subsequent call would result in unsanctioned access to Safe's internal protected methods.\\n            For some reason, solidity matches the first 4 bytes of the calldata to a function signature, regardless if more data follow these 4 bytes.\\n        */\\n        require(handler != address(this), \\\"GS400\\\");\\n\\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, handler)\\n        }\\n    }\\n\\n    /**\\n     * @notice Set Fallback Handler to `handler` for the Safe.\\n     * @dev Only fallback calls without value and with data will be forwarded.\\n     *      This can only be done via a Safe transaction.\\n     *      Cannot be set to the Safe itself.\\n     * @param handler contract to handle fallback calls.\\n     */\\n    function setFallbackHandler(address handler) public authorized {\\n        internalSetFallbackHandler(handler);\\n        emit ChangedFallbackHandler(handler);\\n    }\\n\\n    // @notice Forwards all calls to the fallback handler if set. Returns 0 if no handler is set.\\n    // @dev Appends the non-padded caller address to the calldata to be optionally used in the handler\\n    //      The handler can make us of `HandlerContext.sol` to extract the address.\\n    //      This is done because in the next call frame the `msg.sender` will be FallbackManager's address\\n    //      and having the original caller address may enable additional verification scenarios.\\n    // solhint-disable-next-line payable-fallback,no-complex-fallback\\n    fallback() external {\\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let handler := sload(slot)\\n            if iszero(handler) {\\n                return(0, 0)\\n            }\\n            calldatacopy(0, 0, calldatasize())\\n            // The msg.sender address is shifted to the left by 12 bytes to remove the padding\\n            // Then the address without padding is stored right after the calldata\\n            mstore(calldatasize(), shl(96, caller()))\\n            // Add 20 bytes for the address appended add the end\\n            let success := call(gas(), handler, 0, 0, add(calldatasize(), 20), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            if iszero(success) {\\n                revert(0, returndatasize())\\n            }\\n            return(0, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x646b3088f15af8b4f71ac5eeffaa24ce0c1abed5f494f90368208b09e35d5165\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SelfAuthorized {\\n    function requireSelfCall() private view {\\n        require(msg.sender == address(this), \\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfb0e176bb208e047a234fe757e2acd13787e27879570b8544547ac787feb5f13\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"setFallbackHandler(address)":{"notice":"Set Fallback Handler to `handler` for the Safe."}},"version":1}}},"@safe-global/safe-contracts/contracts/base/GuardManager.sol":{"BaseGuard":{"abi":[{"inputs":[{"internalType":"bytes32","name":"txHash","type":"bytes32"},{"internalType":"bool","name":"success","type":"bool"}],"name":"checkAfterExecution","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"uint256","name":"safeTxGas","type":"uint256"},{"internalType":"uint256","name":"baseGas","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"gasToken","type":"address"},{"internalType":"address payable","name":"refundReceiver","type":"address"},{"internalType":"bytes","name":"signatures","type":"bytes"},{"internalType":"address","name":"msgSender","type":"address"}],"name":"checkTransaction","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"checkAfterExecution(bytes32,bool)":"93271368","checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":"75f0bb52","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"checkAfterExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"safeTxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"refundReceiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"checkTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-contracts/contracts/base/GuardManager.sol\":\"BaseGuard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/base/GuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../common/Enum.sol\\\";\\nimport \\\"../common/SelfAuthorized.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\ninterface Guard is IERC165 {\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    function checkAfterExecution(bytes32 txHash, bool success) external;\\n}\\n\\nabstract contract BaseGuard is Guard {\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(Guard).interfaceId || // 0xe6d7a83a\\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\\n    }\\n}\\n\\n/**\\n * @title Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract GuardManager is SelfAuthorized {\\n    event ChangedGuard(address indexed guard);\\n\\n    // keccak256(\\\"guard_manager.guard.address\\\")\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    /**\\n     * @dev Set a guard that checks transactions before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,\\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\\n     *        audit the guard code and design recovery mechanisms.\\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\\n     */\\n    function setGuard(address guard) external authorized {\\n        if (guard != address(0)) {\\n            require(Guard(guard).supportsInterface(type(Guard).interfaceId), \\\"GS300\\\");\\n        }\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, guard)\\n        }\\n        emit ChangedGuard(guard);\\n    }\\n\\n    /**\\n     * @dev Internal method to retrieve the current guard\\n     *      We do not have a public method because we're short on bytecode size limit,\\n     *      to retrieve the guard address, one can use `getStorageAt` from `StorageAccessible` contract\\n     *      with the slot `GUARD_STORAGE_SLOT`\\n     * @return guard The address of the guard\\n     */\\n    function getGuard() internal view returns (address guard) {\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            guard := sload(slot)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xedfc7c830ab35e52d1208986b253f3422c2f0ca68054c10819fb348fcc6ccf5d\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe contracts.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x4ff3008926a118e9f36e6747facc39dd13168e0d00f516888ae966ec20766453\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SelfAuthorized {\\n    function requireSelfCall() private view {\\n        require(msg.sender == address(this), \\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfb0e176bb208e047a234fe757e2acd13787e27879570b8544547ac787feb5f13\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n     * See the corresponding EIP section\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"Guard":{"abi":[{"inputs":[{"internalType":"bytes32","name":"txHash","type":"bytes32"},{"internalType":"bool","name":"success","type":"bool"}],"name":"checkAfterExecution","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"uint256","name":"safeTxGas","type":"uint256"},{"internalType":"uint256","name":"baseGas","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"gasToken","type":"address"},{"internalType":"address payable","name":"refundReceiver","type":"address"},{"internalType":"bytes","name":"signatures","type":"bytes"},{"internalType":"address","name":"msgSender","type":"address"}],"name":"checkTransaction","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"checkAfterExecution(bytes32,bool)":"93271368","checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)":"75f0bb52","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"checkAfterExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"safeTxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"refundReceiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"checkTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-contracts/contracts/base/GuardManager.sol\":\"Guard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/base/GuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../common/Enum.sol\\\";\\nimport \\\"../common/SelfAuthorized.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\ninterface Guard is IERC165 {\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    function checkAfterExecution(bytes32 txHash, bool success) external;\\n}\\n\\nabstract contract BaseGuard is Guard {\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(Guard).interfaceId || // 0xe6d7a83a\\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\\n    }\\n}\\n\\n/**\\n * @title Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract GuardManager is SelfAuthorized {\\n    event ChangedGuard(address indexed guard);\\n\\n    // keccak256(\\\"guard_manager.guard.address\\\")\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    /**\\n     * @dev Set a guard that checks transactions before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,\\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\\n     *        audit the guard code and design recovery mechanisms.\\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\\n     */\\n    function setGuard(address guard) external authorized {\\n        if (guard != address(0)) {\\n            require(Guard(guard).supportsInterface(type(Guard).interfaceId), \\\"GS300\\\");\\n        }\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, guard)\\n        }\\n        emit ChangedGuard(guard);\\n    }\\n\\n    /**\\n     * @dev Internal method to retrieve the current guard\\n     *      We do not have a public method because we're short on bytecode size limit,\\n     *      to retrieve the guard address, one can use `getStorageAt` from `StorageAccessible` contract\\n     *      with the slot `GUARD_STORAGE_SLOT`\\n     * @return guard The address of the guard\\n     */\\n    function getGuard() internal view returns (address guard) {\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            guard := sload(slot)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xedfc7c830ab35e52d1208986b253f3422c2f0ca68054c10819fb348fcc6ccf5d\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe contracts.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x4ff3008926a118e9f36e6747facc39dd13168e0d00f516888ae966ec20766453\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SelfAuthorized {\\n    function requireSelfCall() private view {\\n        require(msg.sender == address(this), \\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfb0e176bb208e047a234fe757e2acd13787e27879570b8544547ac787feb5f13\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n     * See the corresponding EIP section\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"GuardManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"guard","type":"address"}],"name":"ChangedGuard","type":"event"},{"inputs":[{"internalType":"address","name":"guard","type":"address"}],"name":"setGuard","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{"setGuard(address)":{"details":"Set a guard that checks transactions before execution      This can only be done via a Safe transaction.      ⚠️ IMPORTANT: Since a guard has full power to block Safe transaction execution,        a broken guard can cause a denial of service for the Safe. Make sure to carefully        audit the guard code and design recovery mechanisms.","params":{"guard":"The address of the guard to be used or the 0 address to disable the guard"}}},"title":"Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"setGuard(address)":"e19a9dd9"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"ChangedGuard\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"setGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{\"setGuard(address)\":{\"details\":\"Set a guard that checks transactions before execution      This can only be done via a Safe transaction.      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,        a broken guard can cause a denial of service for the Safe. Make sure to carefully        audit the guard code and design recovery mechanisms.\",\"params\":{\"guard\":\"The address of the guard to be used or the 0 address to disable the guard\"}}},\"title\":\"Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setGuard(address)\":{\"notice\":\"Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-contracts/contracts/base/GuardManager.sol\":\"GuardManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/base/GuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../common/Enum.sol\\\";\\nimport \\\"../common/SelfAuthorized.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\ninterface Guard is IERC165 {\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    function checkAfterExecution(bytes32 txHash, bool success) external;\\n}\\n\\nabstract contract BaseGuard is Guard {\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(Guard).interfaceId || // 0xe6d7a83a\\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\\n    }\\n}\\n\\n/**\\n * @title Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract GuardManager is SelfAuthorized {\\n    event ChangedGuard(address indexed guard);\\n\\n    // keccak256(\\\"guard_manager.guard.address\\\")\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    /**\\n     * @dev Set a guard that checks transactions before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,\\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\\n     *        audit the guard code and design recovery mechanisms.\\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\\n     */\\n    function setGuard(address guard) external authorized {\\n        if (guard != address(0)) {\\n            require(Guard(guard).supportsInterface(type(Guard).interfaceId), \\\"GS300\\\");\\n        }\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, guard)\\n        }\\n        emit ChangedGuard(guard);\\n    }\\n\\n    /**\\n     * @dev Internal method to retrieve the current guard\\n     *      We do not have a public method because we're short on bytecode size limit,\\n     *      to retrieve the guard address, one can use `getStorageAt` from `StorageAccessible` contract\\n     *      with the slot `GUARD_STORAGE_SLOT`\\n     * @return guard The address of the guard\\n     */\\n    function getGuard() internal view returns (address guard) {\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            guard := sload(slot)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xedfc7c830ab35e52d1208986b253f3422c2f0ca68054c10819fb348fcc6ccf5d\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe contracts.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x4ff3008926a118e9f36e6747facc39dd13168e0d00f516888ae966ec20766453\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SelfAuthorized {\\n    function requireSelfCall() private view {\\n        require(msg.sender == address(this), \\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfb0e176bb208e047a234fe757e2acd13787e27879570b8544547ac787feb5f13\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n     * See the corresponding EIP section\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"setGuard(address)":{"notice":"Set Transaction Guard `guard` for the Safe. Make sure you trust the guard."}},"version":1}}},"@safe-global/safe-contracts/contracts/base/ModuleManager.sol":{"ModuleManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"DisabledModule","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"EnabledModule","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"ExecutionFromModuleFailure","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"module","type":"address"}],"name":"ExecutionFromModuleSuccess","type":"event"},{"inputs":[{"internalType":"address","name":"prevModule","type":"address"},{"internalType":"address","name":"module","type":"address"}],"name":"disableModule","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"module","type":"address"}],"name":"enableModule","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"}],"name":"execTransactionFromModule","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"}],"name":"execTransactionFromModuleReturnData","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"start","type":"address"},{"internalType":"uint256","name":"pageSize","type":"uint256"}],"name":"getModulesPaginated","outputs":[{"internalType":"address[]","name":"array","type":"address[]"},{"internalType":"address","name":"next","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"module","type":"address"}],"name":"isModuleEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"author":"Stefan George - @Georgi87Richard Meissner - @rmeissner","kind":"dev","methods":{"disableModule(address,address)":{"details":"This can only be done via a Safe transaction.","params":{"module":"Module to be removed.","prevModule":"Previous module in the modules linked list."}},"enableModule(address)":{"details":"This can only be done via a Safe transaction.","params":{"module":"Module to be whitelisted."}},"execTransactionFromModule(address,uint256,bytes,uint8)":{"details":"Function is virtual to allow overriding for L2 singleton to emit an event for indexing.","params":{"data":"Data payload of module transaction.","operation":"Operation type of module transaction.","to":"Destination address of module transaction.","value":"Ether value of module transaction."},"returns":{"success":"Boolean flag indicating if the call succeeded."}},"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":{"params":{"data":"Data payload of module transaction.","operation":"Operation type of module transaction.","to":"Destination address of module transaction.","value":"Ether value of module transaction."},"returns":{"returnData":"Data returned by the call.","success":"Boolean flag indicating if the call succeeded."}},"getModulesPaginated(address,uint256)":{"params":{"pageSize":"Maximum number of modules that should be returned. Has to be > 0","start":"Start of the page. Has to be a module or start pointer (0x1 address)"},"returns":{"array":"Array of modules.","next":"Start of the next page."}},"isModuleEnabled(address)":{"returns":{"_0":"True if the module is enabled"}}},"title":"Module Manager - A contract managing Safe modules","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"disableModule(address,address)":"e009cfde","enableModule(address)":"610b5925","execTransactionFromModule(address,uint256,bytes,uint8)":"468721a7","execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":"5229073f","getModulesPaginated(address,uint256)":"cc2f8452","isModuleEnabled(address)":"2d9ad53d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"DisabledModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"EnabledModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ExecutionFromModuleFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ExecutionFromModuleSuccess\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"disableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"enableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromModuleReturnData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"start\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"getModulesPaginated\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"array\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"isModuleEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stefan George - @Georgi87Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{\"disableModule(address,address)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"module\":\"Module to be removed.\",\"prevModule\":\"Previous module in the modules linked list.\"}},\"enableModule(address)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"module\":\"Module to be whitelisted.\"}},\"execTransactionFromModule(address,uint256,bytes,uint8)\":{\"details\":\"Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\",\"params\":{\"data\":\"Data payload of module transaction.\",\"operation\":\"Operation type of module transaction.\",\"to\":\"Destination address of module transaction.\",\"value\":\"Ether value of module transaction.\"},\"returns\":{\"success\":\"Boolean flag indicating if the call succeeded.\"}},\"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)\":{\"params\":{\"data\":\"Data payload of module transaction.\",\"operation\":\"Operation type of module transaction.\",\"to\":\"Destination address of module transaction.\",\"value\":\"Ether value of module transaction.\"},\"returns\":{\"returnData\":\"Data returned by the call.\",\"success\":\"Boolean flag indicating if the call succeeded.\"}},\"getModulesPaginated(address,uint256)\":{\"params\":{\"pageSize\":\"Maximum number of modules that should be returned. Has to be > 0\",\"start\":\"Start of the page. Has to be a module or start pointer (0x1 address)\"},\"returns\":{\"array\":\"Array of modules.\",\"next\":\"Start of the next page.\"}},\"isModuleEnabled(address)\":{\"returns\":{\"_0\":\"True if the module is enabled\"}}},\"title\":\"Module Manager - A contract managing Safe modules\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"disableModule(address,address)\":{\"notice\":\"Disables the module `module` for the Safe.\"},\"enableModule(address)\":{\"notice\":\"Enables the module `module` for the Safe.\"},\"execTransactionFromModule(address,uint256,bytes,uint8)\":{\"notice\":\"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\"},\"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)\":{\"notice\":\"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\"},\"getModulesPaginated(address,uint256)\":{\"notice\":\"Returns an array of modules.         If all entries fit into a single page, the next pointer will be 0x1.         If another page is present, next will be the last element of the returned array.\"},\"isModuleEnabled(address)\":{\"notice\":\"Returns if an module is enabled\"}},\"notice\":\"Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners. \\u26a0\\ufe0f WARNING: Modules are a security risk since they can execute arbitrary transactions,  so only trusted and audited modules should be added to a Safe. A malicious module can completely takeover a Safe.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-contracts/contracts/base/ModuleManager.sol\":\"ModuleManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/base/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/Enum.sol\\\";\\n\\n/**\\n * @title Executor - A contract that can execute transactions\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Executor {\\n    /**\\n     * @notice Executes either a delegatecall or a call with provided parameters.\\n     * @dev This method doesn't perform any sanity check of the transaction, such as:\\n     *      - if the contract at `to` address has code or not\\n     *      It is the responsibility of the caller to perform such checks.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @return success boolean flag indicating if the call succeeded.\\n     */\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 txGas\\n    ) internal returns (bool success) {\\n        if (operation == Enum.Operation.DelegateCall) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\\n            }\\n        } else {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf0be832e7529e92000544170a5529d73666a9b5e836b30c6f2ed6ef7d7d8c94a\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/base/ModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/Enum.sol\\\";\\nimport \\\"../common/SelfAuthorized.sol\\\";\\nimport \\\"./Executor.sol\\\";\\n\\n/**\\n * @title Module Manager - A contract managing Safe modules\\n * @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\\n           \\u26a0\\ufe0f WARNING: Modules are a security risk since they can execute arbitrary transactions, \\n           so only trusted and audited modules should be added to a Safe. A malicious module can\\n           completely takeover a Safe.\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract ModuleManager is SelfAuthorized, Executor {\\n    event EnabledModule(address indexed module);\\n    event DisabledModule(address indexed module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    address internal constant SENTINEL_MODULES = address(0x1);\\n\\n    mapping(address => address) internal modules;\\n\\n    /**\\n     * @notice Setup function sets the initial storage of the contract.\\n     *         Optionally executes a delegate call to another contract to setup the modules.\\n     * @param to Optional destination address of call to execute.\\n     * @param data Optional data of call to execute.\\n     */\\n    function setupModules(address to, bytes memory data) internal {\\n        require(modules[SENTINEL_MODULES] == address(0), \\\"GS100\\\");\\n        modules[SENTINEL_MODULES] = SENTINEL_MODULES;\\n        if (to != address(0)) {\\n            require(isContract(to), \\\"GS002\\\");\\n            // Setup has to complete successfully or transaction fails.\\n            require(execute(to, 0, data, Enum.Operation.DelegateCall, type(uint256).max), \\\"GS000\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Enables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param module Module to be whitelisted.\\n     */\\n    function enableModule(address module) public authorized {\\n        // Module address cannot be null or sentinel.\\n        require(module != address(0) && module != SENTINEL_MODULES, \\\"GS101\\\");\\n        // Module cannot be added twice.\\n        require(modules[module] == address(0), \\\"GS102\\\");\\n        modules[module] = modules[SENTINEL_MODULES];\\n        modules[SENTINEL_MODULES] = module;\\n        emit EnabledModule(module);\\n    }\\n\\n    /**\\n     * @notice Disables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevModule Previous module in the modules linked list.\\n     * @param module Module to be removed.\\n     */\\n    function disableModule(address prevModule, address module) public authorized {\\n        // Validate module address and check that it corresponds to module index.\\n        require(module != address(0) && module != SENTINEL_MODULES, \\\"GS101\\\");\\n        require(modules[prevModule] == module, \\\"GS103\\\");\\n        modules[prevModule] = modules[module];\\n        modules[module] = address(0);\\n        emit DisabledModule(module);\\n    }\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\\n     * @dev Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     */\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public virtual returns (bool success) {\\n        // Only whitelisted modules are allowed.\\n        require(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0), \\\"GS104\\\");\\n        // Execute transaction without further confirmations.\\n        success = execute(to, value, data, operation, type(uint256).max);\\n        if (success) emit ExecutionFromModuleSuccess(msg.sender);\\n        else emit ExecutionFromModuleFailure(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     * @return returnData Data returned by the call.\\n     */\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public returns (bool success, bytes memory returnData) {\\n        success = execTransactionFromModule(to, value, data, operation);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Load free memory location\\n            let ptr := mload(0x40)\\n            // We allocate memory for the return data by setting the free memory location to\\n            // current free memory location + data size + 32 bytes for data size value\\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\\n            // Store the size\\n            mstore(ptr, returndatasize())\\n            // Store the data\\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\\n            // Point the return data to the correct memory location\\n            returnData := ptr\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns if an module is enabled\\n     * @return True if the module is enabled\\n     */\\n    function isModuleEnabled(address module) public view returns (bool) {\\n        return SENTINEL_MODULES != module && modules[module] != address(0);\\n    }\\n\\n    /**\\n     * @notice Returns an array of modules.\\n     *         If all entries fit into a single page, the next pointer will be 0x1.\\n     *         If another page is present, next will be the last element of the returned array.\\n     * @param start Start of the page. Has to be a module or start pointer (0x1 address)\\n     * @param pageSize Maximum number of modules that should be returned. Has to be > 0\\n     * @return array Array of modules.\\n     * @return next Start of the next page.\\n     */\\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next) {\\n        require(start == SENTINEL_MODULES || isModuleEnabled(start), \\\"GS105\\\");\\n        require(pageSize > 0, \\\"GS106\\\");\\n        // Init array with max page size\\n        array = new address[](pageSize);\\n\\n        // Populate return array\\n        uint256 moduleCount = 0;\\n        next = modules[start];\\n        while (next != address(0) && next != SENTINEL_MODULES && moduleCount < pageSize) {\\n            array[moduleCount] = next;\\n            next = modules[next];\\n            moduleCount++;\\n        }\\n\\n        /**\\n          Because of the argument validation, we can assume that the loop will always iterate over the valid module list values\\n          and the `next` variable will either be an enabled module or a sentinel address (signalling the end). \\n          \\n          If we haven't reached the end inside the loop, we need to set the next pointer to the last element of the modules array\\n          because the `next` variable (which is a module by itself) acting as a pointer to the start of the next page is neither \\n          included to the current page, nor will it be included in the next one if you pass it as a start.\\n        */\\n        if (next != SENTINEL_MODULES) {\\n            next = array[moduleCount - 1];\\n        }\\n        // Set correct size of returned array\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(array, moduleCount)\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns true if `account` is a contract.\\n     * @dev This function will return false if invoked during the constructor of a contract,\\n     *      as the code is not actually created until after the constructor finishes.\\n     * @param account The address being queried\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xd71b0d56dce386fa6f67c51061face071b2c7b03ec535d68717e2538ec47113a\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe contracts.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x4ff3008926a118e9f36e6747facc39dd13168e0d00f516888ae966ec20766453\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SelfAuthorized {\\n    function requireSelfCall() private view {\\n        require(msg.sender == address(this), \\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfb0e176bb208e047a234fe757e2acd13787e27879570b8544547ac787feb5f13\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2113,"contract":"@safe-global/safe-contracts/contracts/base/ModuleManager.sol:ModuleManager","label":"modules","offset":0,"slot":"0","type":"t_mapping(t_address,t_address)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_address)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address)","numberOfBytes":"32","value":"t_address"}}},"userdoc":{"kind":"user","methods":{"disableModule(address,address)":{"notice":"Disables the module `module` for the Safe."},"enableModule(address)":{"notice":"Enables the module `module` for the Safe."},"execTransactionFromModule(address,uint256,bytes,uint8)":{"notice":"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)"},"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":{"notice":"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data"},"getModulesPaginated(address,uint256)":{"notice":"Returns an array of modules.         If all entries fit into a single page, the next pointer will be 0x1.         If another page is present, next will be the last element of the returned array."},"isModuleEnabled(address)":{"notice":"Returns if an module is enabled"}},"notice":"Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners. ⚠️ WARNING: Modules are a security risk since they can execute arbitrary transactions,  so only trusted and audited modules should be added to a Safe. A malicious module can completely takeover a Safe.","version":1}}},"@safe-global/safe-contracts/contracts/base/OwnerManager.sol":{"OwnerManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"AddedOwner","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"threshold","type":"uint256"}],"name":"ChangedThreshold","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"RemovedOwner","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"addOwnerWithThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"changeThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getOwners","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getThreshold","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"prevOwner","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"removeOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"prevOwner","type":"address"},{"internalType":"address","name":"oldOwner","type":"address"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"swapOwner","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Stefan George - @Georgi87Richard Meissner - @rmeissner","details":"Uses a linked list to store the owners because the code generate by the solidity compiler      is more efficient than using a dynamic array.","kind":"dev","methods":{"addOwnerWithThreshold(address,uint256)":{"details":"This can only be done via a Safe transaction.","params":{"_threshold":"New threshold.","owner":"New owner address."}},"changeThreshold(uint256)":{"details":"This can only be done via a Safe transaction.","params":{"_threshold":"New threshold."}},"getOwners()":{"returns":{"_0":"Array of Safe owners."}},"getThreshold()":{"returns":{"_0":"Threshold number."}},"isOwner(address)":{"returns":{"_0":"Boolean if owner is an owner of the Safe."}},"removeOwner(address,address,uint256)":{"details":"This can only be done via a Safe transaction.","params":{"_threshold":"New threshold.","owner":"Owner address to be removed.","prevOwner":"Owner that pointed to the owner to be removed in the linked list"}},"swapOwner(address,address,address)":{"details":"This can only be done via a Safe transaction.","params":{"newOwner":"New owner address.","oldOwner":"Owner address to be replaced.","prevOwner":"Owner that pointed to the owner to be replaced in the linked list"}}},"title":"OwnerManager - Manages Safe owners and a threshold to authorize transactions.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addOwnerWithThreshold(address,uint256)":"0d582f13","changeThreshold(uint256)":"694e80c3","getOwners()":"a0e67e2b","getThreshold()":"e75235b8","isOwner(address)":"2f54bf6e","removeOwner(address,address,uint256)":"f8dc5dd9","swapOwner(address,address,address)":"e318b52b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AddedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ChangedThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RemovedOwner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"addOwnerWithThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"changeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"swapOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stefan George - @Georgi87Richard Meissner - @rmeissner\",\"details\":\"Uses a linked list to store the owners because the code generate by the solidity compiler      is more efficient than using a dynamic array.\",\"kind\":\"dev\",\"methods\":{\"addOwnerWithThreshold(address,uint256)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"_threshold\":\"New threshold.\",\"owner\":\"New owner address.\"}},\"changeThreshold(uint256)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"_threshold\":\"New threshold.\"}},\"getOwners()\":{\"returns\":{\"_0\":\"Array of Safe owners.\"}},\"getThreshold()\":{\"returns\":{\"_0\":\"Threshold number.\"}},\"isOwner(address)\":{\"returns\":{\"_0\":\"Boolean if owner is an owner of the Safe.\"}},\"removeOwner(address,address,uint256)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"_threshold\":\"New threshold.\",\"owner\":\"Owner address to be removed.\",\"prevOwner\":\"Owner that pointed to the owner to be removed in the linked list\"}},\"swapOwner(address,address,address)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"newOwner\":\"New owner address.\",\"oldOwner\":\"Owner address to be replaced.\",\"prevOwner\":\"Owner that pointed to the owner to be replaced in the linked list\"}}},\"title\":\"OwnerManager - Manages Safe owners and a threshold to authorize transactions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addOwnerWithThreshold(address,uint256)\":{\"notice\":\"Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\"},\"changeThreshold(uint256)\":{\"notice\":\"Changes the threshold of the Safe to `_threshold`.\"},\"getOwners()\":{\"notice\":\"Returns a list of Safe owners.\"},\"getThreshold()\":{\"notice\":\"Returns the number of required confirmations for a Safe transaction aka the threshold.\"},\"isOwner(address)\":{\"notice\":\"Returns if `owner` is an owner of the Safe.\"},\"removeOwner(address,address,uint256)\":{\"notice\":\"Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\"},\"swapOwner(address,address,address)\":{\"notice\":\"Replaces the owner `oldOwner` in the Safe with `newOwner`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-contracts/contracts/base/OwnerManager.sol\":\"OwnerManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/base/OwnerManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/SelfAuthorized.sol\\\";\\n\\n/**\\n * @title OwnerManager - Manages Safe owners and a threshold to authorize transactions.\\n * @dev Uses a linked list to store the owners because the code generate by the solidity compiler\\n *      is more efficient than using a dynamic array.\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract OwnerManager is SelfAuthorized {\\n    event AddedOwner(address indexed owner);\\n    event RemovedOwner(address indexed owner);\\n    event ChangedThreshold(uint256 threshold);\\n\\n    address internal constant SENTINEL_OWNERS = address(0x1);\\n\\n    mapping(address => address) internal owners;\\n    uint256 internal ownerCount;\\n    uint256 internal threshold;\\n\\n    /**\\n     * @notice Sets the initial storage of the contract.\\n     * @param _owners List of Safe owners.\\n     * @param _threshold Number of required confirmations for a Safe transaction.\\n     */\\n    function setupOwners(address[] memory _owners, uint256 _threshold) internal {\\n        // Threshold can only be 0 at initialization.\\n        // Check ensures that setup function can only be called once.\\n        require(threshold == 0, \\\"GS200\\\");\\n        // Validate that threshold is smaller than number of added owners.\\n        require(_threshold <= _owners.length, \\\"GS201\\\");\\n        // There has to be at least one Safe owner.\\n        require(_threshold >= 1, \\\"GS202\\\");\\n        // Initializing Safe owners.\\n        address currentOwner = SENTINEL_OWNERS;\\n        for (uint256 i = 0; i < _owners.length; i++) {\\n            // Owner address cannot be null.\\n            address owner = _owners[i];\\n            require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this) && currentOwner != owner, \\\"GS203\\\");\\n            // No duplicate owners allowed.\\n            require(owners[owner] == address(0), \\\"GS204\\\");\\n            owners[currentOwner] = owner;\\n            currentOwner = owner;\\n        }\\n        owners[currentOwner] = SENTINEL_OWNERS;\\n        ownerCount = _owners.length;\\n        threshold = _threshold;\\n    }\\n\\n    /**\\n     * @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param owner New owner address.\\n     * @param _threshold New threshold.\\n     */\\n    function addOwnerWithThreshold(address owner, uint256 _threshold) public authorized {\\n        // Owner address cannot be null, the sentinel or the Safe itself.\\n        require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this), \\\"GS203\\\");\\n        // No duplicate owners allowed.\\n        require(owners[owner] == address(0), \\\"GS204\\\");\\n        owners[owner] = owners[SENTINEL_OWNERS];\\n        owners[SENTINEL_OWNERS] = owner;\\n        ownerCount++;\\n        emit AddedOwner(owner);\\n        // Change threshold if threshold was changed.\\n        if (threshold != _threshold) changeThreshold(_threshold);\\n    }\\n\\n    /**\\n     * @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be removed in the linked list\\n     * @param owner Owner address to be removed.\\n     * @param _threshold New threshold.\\n     */\\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) public authorized {\\n        // Only allow to remove an owner, if threshold can still be reached.\\n        require(ownerCount - 1 >= _threshold, \\\"GS201\\\");\\n        // Validate owner address and check that it corresponds to owner index.\\n        require(owner != address(0) && owner != SENTINEL_OWNERS, \\\"GS203\\\");\\n        require(owners[prevOwner] == owner, \\\"GS205\\\");\\n        owners[prevOwner] = owners[owner];\\n        owners[owner] = address(0);\\n        ownerCount--;\\n        emit RemovedOwner(owner);\\n        // Change threshold if threshold was changed.\\n        if (threshold != _threshold) changeThreshold(_threshold);\\n    }\\n\\n    /**\\n     * @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list\\n     * @param oldOwner Owner address to be replaced.\\n     * @param newOwner New owner address.\\n     */\\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) public authorized {\\n        // Owner address cannot be null, the sentinel or the Safe itself.\\n        require(newOwner != address(0) && newOwner != SENTINEL_OWNERS && newOwner != address(this), \\\"GS203\\\");\\n        // No duplicate owners allowed.\\n        require(owners[newOwner] == address(0), \\\"GS204\\\");\\n        // Validate oldOwner address and check that it corresponds to owner index.\\n        require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, \\\"GS203\\\");\\n        require(owners[prevOwner] == oldOwner, \\\"GS205\\\");\\n        owners[newOwner] = owners[oldOwner];\\n        owners[prevOwner] = newOwner;\\n        owners[oldOwner] = address(0);\\n        emit RemovedOwner(oldOwner);\\n        emit AddedOwner(newOwner);\\n    }\\n\\n    /**\\n     * @notice Changes the threshold of the Safe to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param _threshold New threshold.\\n     */\\n    function changeThreshold(uint256 _threshold) public authorized {\\n        // Validate that threshold is smaller than number of owners.\\n        require(_threshold <= ownerCount, \\\"GS201\\\");\\n        // There has to be at least one Safe owner.\\n        require(_threshold >= 1, \\\"GS202\\\");\\n        threshold = _threshold;\\n        emit ChangedThreshold(threshold);\\n    }\\n\\n    /**\\n     * @notice Returns the number of required confirmations for a Safe transaction aka the threshold.\\n     * @return Threshold number.\\n     */\\n    function getThreshold() public view returns (uint256) {\\n        return threshold;\\n    }\\n\\n    /**\\n     * @notice Returns if `owner` is an owner of the Safe.\\n     * @return Boolean if owner is an owner of the Safe.\\n     */\\n    function isOwner(address owner) public view returns (bool) {\\n        return owner != SENTINEL_OWNERS && owners[owner] != address(0);\\n    }\\n\\n    /**\\n     * @notice Returns a list of Safe owners.\\n     * @return Array of Safe owners.\\n     */\\n    function getOwners() public view returns (address[] memory) {\\n        address[] memory array = new address[](ownerCount);\\n\\n        // populate return array\\n        uint256 index = 0;\\n        address currentOwner = owners[SENTINEL_OWNERS];\\n        while (currentOwner != SENTINEL_OWNERS) {\\n            array[index] = currentOwner;\\n            currentOwner = owners[currentOwner];\\n            index++;\\n        }\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xec9799093eb7a73461cd5e563198751ee222f956f754ea622a03fe953e515b2c\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SelfAuthorized {\\n    function requireSelfCall() private view {\\n        require(msg.sender == address(this), \\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfb0e176bb208e047a234fe757e2acd13787e27879570b8544547ac787feb5f13\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2531,"contract":"@safe-global/safe-contracts/contracts/base/OwnerManager.sol:OwnerManager","label":"owners","offset":0,"slot":"0","type":"t_mapping(t_address,t_address)"},{"astId":2533,"contract":"@safe-global/safe-contracts/contracts/base/OwnerManager.sol:OwnerManager","label":"ownerCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2535,"contract":"@safe-global/safe-contracts/contracts/base/OwnerManager.sol:OwnerManager","label":"threshold","offset":0,"slot":"2","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_address)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address)","numberOfBytes":"32","value":"t_address"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"addOwnerWithThreshold(address,uint256)":{"notice":"Adds the owner `owner` to the Safe and updates the threshold to `_threshold`."},"changeThreshold(uint256)":{"notice":"Changes the threshold of the Safe to `_threshold`."},"getOwners()":{"notice":"Returns a list of Safe owners."},"getThreshold()":{"notice":"Returns the number of required confirmations for a Safe transaction aka the threshold."},"isOwner(address)":{"notice":"Returns if `owner` is an owner of the Safe."},"removeOwner(address,address,uint256)":{"notice":"Removes the owner `owner` from the Safe and updates the threshold to `_threshold`."},"swapOwner(address,address,address)":{"notice":"Replaces the owner `oldOwner` in the Safe with `newOwner`."}},"version":1}}},"@safe-global/safe-contracts/contracts/common/Enum.sol":{"Enum":{"abi":[],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{},"title":"Enum - Collection of enums used in Safe contracts.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Enum - Collection of enums used in Safe contracts.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-contracts/contracts/common/Enum.sol\":\"Enum\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/common/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe contracts.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x4ff3008926a118e9f36e6747facc39dd13168e0d00f516888ae966ec20766453\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@safe-global/safe-contracts/contracts/common/NativeCurrencyPaymentFallback.sol":{"NativeCurrencyPaymentFallback":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeReceived","type":"event"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{},"title":"NativeCurrencyPaymentFallback - A contract that has a fallback to accept native currency payments.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeReceived\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{},\"title\":\"NativeCurrencyPaymentFallback - A contract that has a fallback to accept native currency payments.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-contracts/contracts/common/NativeCurrencyPaymentFallback.sol\":\"NativeCurrencyPaymentFallback\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/common/NativeCurrencyPaymentFallback.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title NativeCurrencyPaymentFallback - A contract that has a fallback to accept native currency payments.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract NativeCurrencyPaymentFallback {\\n    event SafeReceived(address indexed sender, uint256 value);\\n\\n    /**\\n     * @notice Receive function accepts native currency transactions.\\n     * @dev Emits an event with sender and received value.\\n     */\\n    receive() external payable {\\n        emit SafeReceived(msg.sender, msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0x3ddcd4130c67326033dcf773d2d87d7147e3a8386993ea3ab3f1c38da406adba\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@safe-global/safe-contracts/contracts/common/SecuredTokenTransfer.sol":{"SecuredTokenTransfer":{"abi":[],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{},"title":"SecuredTokenTransfer - Secure token transfer.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SecuredTokenTransfer - Secure token transfer.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-contracts/contracts/common/SecuredTokenTransfer.sol\":\"SecuredTokenTransfer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/common/SecuredTokenTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SecuredTokenTransfer - Secure token transfer.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SecuredTokenTransfer {\\n    /**\\n     * @notice Transfers a token and returns a boolean if it was a success\\n     * @dev It checks the return data of the transfer call and returns true if the transfer was successful.\\n     *      It doesn't check if the `token` address is a contract or not.\\n     * @param token Token that should be transferred\\n     * @param receiver Receiver to whom the token should be transferred\\n     * @param amount The amount of tokens that should be transferred\\n     * @return transferred Returns true if the transfer was successful\\n     */\\n    function transferToken(address token, address receiver, uint256 amount) internal returns (bool transferred) {\\n        // 0xa9059cbb - keccack(\\\"transfer(address,uint256)\\\")\\n        bytes memory data = abi.encodeWithSelector(0xa9059cbb, receiver, amount);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // We write the return value to scratch space.\\n            // See https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory\\n            let success := call(sub(gas(), 10000), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            switch returndatasize()\\n            case 0 {\\n                transferred := success\\n            }\\n            case 0x20 {\\n                transferred := iszero(or(iszero(success), iszero(mload(0))))\\n            }\\n            default {\\n                transferred := 0\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1eb8c3601538b73dd6a823ac4fca49bb8adc97d1302a936622156636c971eb05\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@safe-global/safe-contracts/contracts/common/SelfAuthorized.sol":{"SelfAuthorized":{"abi":[],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{},"title":"SelfAuthorized - Authorizes current contract to perform actions to itself.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SelfAuthorized - Authorizes current contract to perform actions to itself.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-contracts/contracts/common/SelfAuthorized.sol\":\"SelfAuthorized\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SelfAuthorized {\\n    function requireSelfCall() private view {\\n        require(msg.sender == address(this), \\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfb0e176bb208e047a234fe757e2acd13787e27879570b8544547ac787feb5f13\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@safe-global/safe-contracts/contracts/common/SignatureDecoder.sol":{"SignatureDecoder":{"abi":[],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{},"title":"SignatureDecoder - Decodes signatures encoded as bytes","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SignatureDecoder - Decodes signatures encoded as bytes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-contracts/contracts/common/SignatureDecoder.sol\":\"SignatureDecoder\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/common/SignatureDecoder.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SignatureDecoder - Decodes signatures encoded as bytes\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SignatureDecoder {\\n    /**\\n     * @notice Splits signature bytes into `uint8 v, bytes32 r, bytes32 s`.\\n     * @dev Make sure to perform a bounds check for @param pos, to avoid out of bounds access on @param signatures\\n     *      The signature format is a compact form of {bytes32 r}{bytes32 s}{uint8 v}\\n     *      Compact means uint8 is not padded to 32 bytes.\\n     * @param pos Which signature to read.\\n     *            A prior bounds check of this parameter should be performed, to avoid out of bounds access.\\n     * @param signatures Concatenated {r, s, v} signatures.\\n     * @return v Recovery ID or Safe signature type.\\n     * @return r Output value r of the signature.\\n     * @return s Output value s of the signature.\\n     */\\n    function signatureSplit(bytes memory signatures, uint256 pos) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let signaturePos := mul(0x41, pos)\\n            r := mload(add(signatures, add(signaturePos, 0x20)))\\n            s := mload(add(signatures, add(signaturePos, 0x40)))\\n            /**\\n             * Here we are loading the last 32 bytes, including 31 bytes\\n             * of 's'. There is no 'mload8' to do this.\\n             * 'byte' is not working due to the Solidity parser, so lets\\n             * use the second best option, 'and'\\n             */\\n            v := and(mload(add(signatures, add(signaturePos, 0x41))), 0xff)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a3baf0efa1585ddf2276505c6d34fa16f01cafff1288e40110d5e67fb459c7c\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@safe-global/safe-contracts/contracts/common/Singleton.sol":{"Singleton":{"abi":[],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{},"title":"Singleton - Base for singleton contracts (should always be the first super contract)        This contract is tightly coupled to our proxy contract (see `proxies/SafeProxy.sol`)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Singleton - Base for singleton contracts (should always be the first super contract)        This contract is tightly coupled to our proxy contract (see `proxies/SafeProxy.sol`)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-contracts/contracts/common/Singleton.sol\":\"Singleton\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/common/Singleton.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Singleton - Base for singleton contracts (should always be the first super contract)\\n *        This contract is tightly coupled to our proxy contract (see `proxies/SafeProxy.sol`)\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Singleton {\\n    // singleton always has to be the first declared variable to ensure the same location as in the Proxy contract.\\n    // It should also always be ensured the address is stored alone (uses a full word)\\n    address private singleton;\\n}\\n\",\"keccak256\":\"0xcab7c6e5fb6d7295a9343f72fec26a2f632ddfe220a6f267b5c5a1eb2f9bce50\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3123,"contract":"@safe-global/safe-contracts/contracts/common/Singleton.sol:Singleton","label":"singleton","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@safe-global/safe-contracts/contracts/common/StorageAccessible.sol":{"StorageAccessible":{"abi":[{"inputs":[{"internalType":"uint256","name":"offset","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"name":"getStorageAt","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"targetContract","type":"address"},{"internalType":"bytes","name":"calldataPayload","type":"bytes"}],"name":"simulateAndRevert","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Gnosis Developers","kind":"dev","methods":{"getStorageAt(uint256,uint256)":{"params":{"length":"- the number of words (32 bytes) of data to read","offset":"- the offset in the current contract's storage in words to start reading from"},"returns":{"_0":"the bytes that were read."}},"simulateAndRevert(address,bytes)":{"details":"Performs a delegatecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to `abi.encode(bool(success), bytes(response))`. Specifically, the `returndata` after a call to this method will be: `success:bool || response.length:uint256 || response:bytes`.","params":{"calldataPayload":"Calldata that should be sent to the target contract (encoded method name and arguments).","targetContract":"Address of the contract containing the code to execute."}}},"title":"StorageAccessible - A generic base contract that allows callers to access all internal storage.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getStorageAt(uint256,uint256)":"5624b25b","simulateAndRevert(address,bytes)":"b4faba09"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getStorageAt\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"calldataPayload\",\"type\":\"bytes\"}],\"name\":\"simulateAndRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Gnosis Developers\",\"kind\":\"dev\",\"methods\":{\"getStorageAt(uint256,uint256)\":{\"params\":{\"length\":\"- the number of words (32 bytes) of data to read\",\"offset\":\"- the offset in the current contract's storage in words to start reading from\"},\"returns\":{\"_0\":\"the bytes that were read.\"}},\"simulateAndRevert(address,bytes)\":{\"details\":\"Performs a delegatecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to `abi.encode(bool(success), bytes(response))`. Specifically, the `returndata` after a call to this method will be: `success:bool || response.length:uint256 || response:bytes`.\",\"params\":{\"calldataPayload\":\"Calldata that should be sent to the target contract (encoded method name and arguments).\",\"targetContract\":\"Address of the contract containing the code to execute.\"}}},\"title\":\"StorageAccessible - A generic base contract that allows callers to access all internal storage.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getStorageAt(uint256,uint256)\":{\"notice\":\"Reads `length` bytes of storage in the currents contract\"}},\"notice\":\"See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol         It removes a method from the original contract not needed for the Safe contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-contracts/contracts/common/StorageAccessible.sol\":\"StorageAccessible\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/common/StorageAccessible.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title StorageAccessible - A generic base contract that allows callers to access all internal storage.\\n * @notice See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\\n *         It removes a method from the original contract not needed for the Safe contracts.\\n * @author Gnosis Developers\\n */\\nabstract contract StorageAccessible {\\n    /**\\n     * @notice Reads `length` bytes of storage in the currents contract\\n     * @param offset - the offset in the current contract's storage in words to start reading from\\n     * @param length - the number of words (32 bytes) of data to read\\n     * @return the bytes that were read.\\n     */\\n    function getStorageAt(uint256 offset, uint256 length) public view returns (bytes memory) {\\n        bytes memory result = new bytes(length * 32);\\n        for (uint256 index = 0; index < length; index++) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let word := sload(add(offset, index))\\n                mstore(add(add(result, 0x20), mul(index, 0x20)), word)\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Performs a delegatecall on a targetContract in the context of self.\\n     * Internally reverts execution to avoid side effects (making it static).\\n     *\\n     * This method reverts with data equal to `abi.encode(bool(success), bytes(response))`.\\n     * Specifically, the `returndata` after a call to this method will be:\\n     * `success:bool || response.length:uint256 || response:bytes`.\\n     *\\n     * @param targetContract Address of the contract containing the code to execute.\\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\\n     */\\n    function simulateAndRevert(address targetContract, bytes memory calldataPayload) external {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let success := delegatecall(gas(), targetContract, add(calldataPayload, 0x20), mload(calldataPayload), 0, 0)\\n\\n            mstore(0x00, success)\\n            mstore(0x20, returndatasize())\\n            returndatacopy(0x40, 0, returndatasize())\\n            revert(0, add(returndatasize(), 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2c5412a8f014db332322a6b24ee3cedce15dca17a721ae49fdef368568d4391e\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"getStorageAt(uint256,uint256)":{"notice":"Reads `length` bytes of storage in the currents contract"}},"notice":"See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol         It removes a method from the original contract not needed for the Safe contracts.","version":1}}},"@safe-global/safe-contracts/contracts/external/SafeMath.sol":{"SafeMath":{"abi":[],"devdoc":{"kind":"dev","methods":{},"title":"SafeMath","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122003af42049ac01440bd3bec3194f89cb9ae18ec90b6671646262f4ca0fbf333b964736f6c63430008170033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SUB 0xAF TIMESTAMP DIV SWAP11 0xC0 EQ BLOCKHASH 0xBD EXTCODESIZE 0xEC BALANCE SWAP5 0xF8 SWAP13 0xB9 0xAE XOR 0xEC SWAP1 0xB6 PUSH8 0x1646262F4CA0FBF3 CALLER 0xB9 PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ","sourceMap":"190:1563:21:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;190:1563:21;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122003af42049ac01440bd3bec3194f89cb9ae18ec90b6671646262f4ca0fbf333b964736f6c63430008170033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SUB 0xAF TIMESTAMP DIV SWAP11 0xC0 EQ BLOCKHASH 0xBD EXTCODESIZE 0xEC BALANCE SWAP5 0xF8 SWAP13 0xB9 0xAE XOR 0xEC SWAP1 0xB6 PUSH8 0x1646262F4CA0FBF3 CALLER 0xB9 PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ","sourceMap":"190:1563:21:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"add(uint256,uint256)":"infinite","max(uint256,uint256)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeMath\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Math operations with safety checks that revert on error (overflow/underflow)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-contracts/contracts/external/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/external/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SafeMath\\n * @notice Math operations with safety checks that revert on error (overflow/underflow)\\n */\\nlibrary SafeMath {\\n    /**\\n     * @notice Multiplies two numbers, reverts on overflow.\\n     * @param a First number\\n     * @param b Second number\\n     * @return Product of a and b\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n     * @param a First number\\n     * @param b Second number\\n     * @return Difference of a and b\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Adds two numbers, reverts on overflow.\\n     * @param a First number\\n     * @param b Second number\\n     * @return Sum of a and b\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Returns the largest of two numbers.\\n     * @param a First number\\n     * @param b Second number\\n     * @return Largest of a and b\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x5f856674d9be11344c5899deb43364e19baa75bc881cada4c159938270b2bd89\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Math operations with safety checks that revert on error (overflow/underflow)","version":1}}},"@safe-global/safe-contracts/contracts/handler/CompatibilityFallbackHandler.sol":{"CompatibilityFallbackHandler":{"abi":[{"inputs":[{"internalType":"contract Safe","name":"safe","type":"address"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"encodeMessageDataForSafe","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"message","type":"bytes"}],"name":"getMessageHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract Safe","name":"safe","type":"address"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"getMessageHashForSafe","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getModules","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_dataHash","type":"bytes32"},{"internalType":"bytes","name":"_signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"_data","type":"bytes"},{"internalType":"bytes","name":"_signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"targetContract","type":"address"},{"internalType":"bytes","name":"calldataPayload","type":"bytes"}],"name":"simulate","outputs":[{"internalType":"bytes","name":"response","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"tokensReceived","outputs":[],"stateMutability":"pure","type":"function"}],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{"encodeMessageDataForSafe(address,bytes)":{"details":"Returns the pre-image of the message hash (see getMessageHashForSafe).","params":{"message":"Message that should be encoded.","safe":"Safe to which the message is targeted."},"returns":{"_0":"Encoded message."}},"getMessageHash(bytes)":{"details":"Returns the hash of a message to be signed by owners.","params":{"message":"Raw message bytes."},"returns":{"_0":"Message hash."}},"getMessageHashForSafe(address,bytes)":{"details":"Returns hash of a message that can be signed by owners.","params":{"message":"Message that should be hashed.","safe":"Safe to which the message is targeted."},"returns":{"_0":"Message hash."}},"getModules()":{"details":"Returns array of first 10 modules.","returns":{"_0":"Array of modules."}},"isValidSignature(bytes,bytes)":{"details":"Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)","params":{"_data":"Arbitrary length data signed on the behalf of address(msg.sender).","_signature":"Signature byte array associated with _data."},"returns":{"_0":"The EIP-1271 magic value."}},"isValidSignature(bytes32,bytes)":{"params":{"_dataHash":"Hash of the data signed on the behalf of address(msg.sender)","_signature":"Signature byte array associated with _dataHash"},"returns":{"_0":"Updated EIP1271 magic value if signature is valid, otherwise 0x0"}},"simulate(address,bytes)":{"details":"Performs a delegatecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). Catches revert and returns encoded result as bytes.Inspired by https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol","params":{"calldataPayload":"Calldata that should be sent to the target contract (encoded method name and arguments).","targetContract":"Address of the contract containing the code to execute."}},"supportsInterface(bytes4)":{"params":{"interfaceId":"Id of the interface."},"returns":{"_0":"if the interface is supported."}}},"title":"Compatibility Fallback Handler - Provides compatibility between pre 1.3.0 and 1.3.0+ Safe contracts.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50610dfe806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b35760003560e01c8063230316401161007157806323031640146101795780636ac2478414610199578063b2494df3146101ac578063bc197c81146101c1578063bd61951d146101e3578063f23a6e61146101f657600080fd5b806223de29146100b857806301ffc9a7146100d25780630a1028c4146100fa578063150b7a021461011b5780631626ba7e1461015357806320c13b0b14610166575b600080fd5b6100d06100c63660046106ce565b5050505050505050565b005b6100e56100e0366004610794565b610216565b60405190151581526020015b60405180910390f35b61010d610108366004610866565b610268565b6040519081526020016100f1565b61013a6101293660046108a2565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016100f1565b61013a610161366004610914565b610274565b61013a61017436600461095f565b610332565b61018c6101873660046109c2565b61047c565b6040516100f19190610a4d565b61010d6101a73660046109c2565b61058e565b6101b46105a9565b6040516100f19190610a60565b61013a6101cf366004610af1565b63bc197c8160e01b98975050505050505050565b61018c6101f1366004610b8e565b610624565b61013a610204366004610bc9565b63f23a6e6160e01b9695505050505050565b60006001600160e01b03198216630271189760e51b148061024757506001600160e01b03198216630a85bd0160e11b145b8061026257506001600160e01b031982166301ffc9a760e01b145b92915050565b6000610262338361058e565b60408051602080820186905282518083039091018152818301928390526320c13b0b60e01b9092526000913391839183916320c13b0b916102bb9189908990604401610c44565b602060405180830381865afa1580156102d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fc9190610c8a565b90506001600160e01b031981166320c13b0b60e01b1461031d576000610326565b630b135d3f60e11b5b925050505b9392505050565b60003381610340828661047c565b8051602082012085519192509060000361040957604051635ae6bd3760e01b8152600481018290526001600160a01b03841690635ae6bd3790602401602060405180830381865afa158015610399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bd9190610ca7565b6000036104045760405162461bcd60e51b815260206004820152601160248201527012185cda081b9bdd08185c1c1c9bdd9959607a1b604482015260640160405180910390fd5b61046a565b60405163934f3a1160e01b81526001600160a01b0384169063934f3a119061043990849086908a90600401610cc0565b60006040518083038186803b15801561045157600080fd5b505afa158015610465573d6000803e3d6000fd5b505050505b506320c13b0b60e01b95945050505050565b606060007f60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca60001b83805190602001206040516020016104c6929190918252602082015260400190565b604051602081830303815290604052805190602001209050601960f81b600160f81b856001600160a01b031663f698da256040518163ffffffff1660e01b8152600401602060405180830381865afa158015610526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054a9190610ca7565b6040516001600160f81b0319938416602082015292909116602183015260228201526042810182905260620160405160208183030381529060405291505092915050565b600061059a838361047c565b80519060200120905092915050565b604051636617c22960e11b815260016004820152600a60248201526060903390600090829063cc2f845290604401600060405180830381865afa1580156105f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261061c9190810190610d05565b509392505050565b606060405163b4faba0960e01b8152600436036004808301376020600036836000335af1505060203d036040519150808201604052806020833e5060005161032b57805160208201fd5b6001600160a01b038116811461068357600080fd5b50565b60008083601f84011261069857600080fd5b5081356001600160401b038111156106af57600080fd5b6020830191508360208285010111156106c757600080fd5b9250929050565b60008060008060008060008060c0898b0312156106ea57600080fd5b88356106f58161066e565b975060208901356107058161066e565b965060408901356107158161066e565b95506060890135945060808901356001600160401b038082111561073857600080fd5b6107448c838d01610686565b909650945060a08b013591508082111561075d57600080fd5b5061076a8b828c01610686565b999c989b5096995094979396929594505050565b6001600160e01b03198116811461068357600080fd5b6000602082840312156107a657600080fd5b813561032b8161077e565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156107ef576107ef6107b1565b604052919050565b600082601f83011261080857600080fd5b81356001600160401b03811115610821576108216107b1565b610834601f8201601f19166020016107c7565b81815284602083860101111561084957600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561087857600080fd5b81356001600160401b0381111561088e57600080fd5b61089a848285016107f7565b949350505050565b6000806000806000608086880312156108ba57600080fd5b85356108c58161066e565b945060208601356108d58161066e565b93506040860135925060608601356001600160401b038111156108f757600080fd5b61090388828901610686565b969995985093965092949392505050565b60008060006040848603121561092957600080fd5b8335925060208401356001600160401b0381111561094657600080fd5b61095286828701610686565b9497909650939450505050565b6000806040838503121561097257600080fd5b82356001600160401b038082111561098957600080fd5b610995868387016107f7565b935060208501359150808211156109ab57600080fd5b506109b8858286016107f7565b9150509250929050565b600080604083850312156109d557600080fd5b82356109e08161066e565b915060208301356001600160401b038111156109fb57600080fd5b6109b8858286016107f7565b6000815180845260005b81811015610a2d57602081850181015186830182015201610a11565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061032b6020830184610a07565b6020808252825182820181905260009190848201906040850190845b81811015610aa15783516001600160a01b031683529284019291840191600101610a7c565b50909695505050505050565b60008083601f840112610abf57600080fd5b5081356001600160401b03811115610ad657600080fd5b6020830191508360208260051b85010111156106c757600080fd5b60008060008060008060008060a0898b031215610b0d57600080fd5b8835610b188161066e565b97506020890135610b288161066e565b965060408901356001600160401b0380821115610b4457600080fd5b610b508c838d01610aad565b909850965060608b0135915080821115610b6957600080fd5b610b758c838d01610aad565b909650945060808b013591508082111561075d57600080fd5b600080600060408486031215610ba357600080fd5b8335610bae8161066e565b925060208401356001600160401b0381111561094657600080fd5b60008060008060008060a08789031215610be257600080fd5b8635610bed8161066e565b95506020870135610bfd8161066e565b9450604087013593506060870135925060808701356001600160401b03811115610c2657600080fd5b610c3289828a01610686565b979a9699509497509295939492505050565b604081526000610c576040830186610a07565b8281036020840152838152838560208301376000602085830101526020601f19601f860116820101915050949350505050565b600060208284031215610c9c57600080fd5b815161032b8161077e565b600060208284031215610cb957600080fd5b5051919050565b838152606060208201526000610cd96060830185610a07565b8281036040840152610ceb8185610a07565b9695505050505050565b8051610d008161066e565b919050565b60008060408385031215610d1857600080fd5b82516001600160401b0380821115610d2f57600080fd5b818501915085601f830112610d4357600080fd5b8151602082821115610d5757610d576107b1565b8160051b9250610d688184016107c7565b8281529284018101928181019089851115610d8257600080fd5b948201945b84861015610dac5785519350610d9c8461066e565b8382529482019490820190610d87565b9650610dbb9050878201610cf5565b945050505050925092905056fea2646970667358221220e767bd389afc790344b025f640b9f5efe677e1fb2429b37c469a30c2c9eafcef64736f6c63430008170033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDFE DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x23031640 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x23031640 EQ PUSH2 0x179 JUMPI DUP1 PUSH4 0x6AC24784 EQ PUSH2 0x199 JUMPI DUP1 PUSH4 0xB2494DF3 EQ PUSH2 0x1AC JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x1C1 JUMPI DUP1 PUSH4 0xBD61951D EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x1F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x23DE29 EQ PUSH2 0xB8 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD2 JUMPI DUP1 PUSH4 0xA1028C4 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x11B JUMPI DUP1 PUSH4 0x1626BA7E EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0x20C13B0B EQ PUSH2 0x166 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD0 PUSH2 0xC6 CALLDATASIZE PUSH1 0x4 PUSH2 0x6CE JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE5 PUSH2 0xE0 CALLDATASIZE PUSH1 0x4 PUSH2 0x794 JUMP JUMPDEST PUSH2 0x216 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10D PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0x866 JUMP JUMPDEST PUSH2 0x268 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF1 JUMP JUMPDEST PUSH2 0x13A PUSH2 0x129 CALLDATASIZE PUSH1 0x4 PUSH2 0x8A2 JUMP JUMPDEST PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF1 JUMP JUMPDEST PUSH2 0x13A PUSH2 0x161 CALLDATASIZE PUSH1 0x4 PUSH2 0x914 JUMP JUMPDEST PUSH2 0x274 JUMP JUMPDEST PUSH2 0x13A PUSH2 0x174 CALLDATASIZE PUSH1 0x4 PUSH2 0x95F JUMP JUMPDEST PUSH2 0x332 JUMP JUMPDEST PUSH2 0x18C PUSH2 0x187 CALLDATASIZE PUSH1 0x4 PUSH2 0x9C2 JUMP JUMPDEST PUSH2 0x47C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF1 SWAP2 SWAP1 PUSH2 0xA4D JUMP JUMPDEST PUSH2 0x10D PUSH2 0x1A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x9C2 JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST PUSH2 0x1B4 PUSH2 0x5A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF1 SWAP2 SWAP1 PUSH2 0xA60 JUMP JUMPDEST PUSH2 0x13A PUSH2 0x1CF CALLDATASIZE PUSH1 0x4 PUSH2 0xAF1 JUMP JUMPDEST PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x18C PUSH2 0x1F1 CALLDATASIZE PUSH1 0x4 PUSH2 0xB8E JUMP JUMPDEST PUSH2 0x624 JUMP JUMPDEST PUSH2 0x13A PUSH2 0x204 CALLDATASIZE PUSH1 0x4 PUSH2 0xBC9 JUMP JUMPDEST PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x2711897 PUSH1 0xE5 SHL EQ DUP1 PUSH2 0x247 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ JUMPDEST DUP1 PUSH2 0x262 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x262 CALLER DUP4 PUSH2 0x58E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP7 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE DUP2 DUP4 ADD SWAP3 DUP4 SWAP1 MSTORE PUSH4 0x20C13B0B PUSH1 0xE0 SHL SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 CALLER SWAP2 DUP4 SWAP2 DUP4 SWAP2 PUSH4 0x20C13B0B SWAP2 PUSH2 0x2BB SWAP2 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x44 ADD PUSH2 0xC44 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2D8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2FC SWAP2 SWAP1 PUSH2 0xC8A JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x20C13B0B PUSH1 0xE0 SHL EQ PUSH2 0x31D JUMPI PUSH1 0x0 PUSH2 0x326 JUMP JUMPDEST PUSH4 0xB135D3F PUSH1 0xE1 SHL JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x340 DUP3 DUP7 PUSH2 0x47C JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD KECCAK256 DUP6 MLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x0 SUB PUSH2 0x409 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5AE6BD37 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x5AE6BD37 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x399 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3BD SWAP2 SWAP1 PUSH2 0xCA7 JUMP JUMPDEST PUSH1 0x0 SUB PUSH2 0x404 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x12185CDA081B9BDD08185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x46A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x934F3A11 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x934F3A11 SWAP1 PUSH2 0x439 SWAP1 DUP5 SWAP1 DUP7 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xCC0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x451 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x465 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP PUSH4 0x20C13B0B PUSH1 0xE0 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH32 0x60B3CBF8B4A223D68D641B3B6DDF9A298E7F33710CF3D3A9D1146B5A6150FBCA PUSH1 0x0 SHL DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4C6 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x19 PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0xF8 SHL DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF698DA25 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x526 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x54A SWAP2 SWAP1 PUSH2 0xCA7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT SWAP4 DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x21 DUP4 ADD MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x62 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x59A DUP4 DUP4 PUSH2 0x47C JUMP JUMPDEST DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6617C229 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x60 SWAP1 CALLER SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH4 0xCC2F8452 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5F4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x61C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xD05 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH4 0xB4FABA09 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 CALLDATASIZE SUB PUSH1 0x4 DUP1 DUP4 ADD CALLDATACOPY PUSH1 0x20 PUSH1 0x0 CALLDATASIZE DUP4 PUSH1 0x0 CALLER GAS CALL POP POP PUSH1 0x20 RETURNDATASIZE SUB PUSH1 0x40 MLOAD SWAP2 POP DUP1 DUP3 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP4 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH2 0x32B JUMPI DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x683 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x698 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x6AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x6C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x6EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0x6F5 DUP2 PUSH2 0x66E JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH2 0x705 DUP2 PUSH2 0x66E JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH2 0x715 DUP2 PUSH2 0x66E JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x738 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x744 DUP13 DUP4 DUP14 ADD PUSH2 0x686 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0xA0 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x75D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x76A DUP12 DUP3 DUP13 ADD PUSH2 0x686 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x683 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x32B DUP2 PUSH2 0x77E JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x7EF JUMPI PUSH2 0x7EF PUSH2 0x7B1 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x808 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x821 JUMPI PUSH2 0x821 PUSH2 0x7B1 JUMP JUMPDEST PUSH2 0x834 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x7C7 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x849 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x878 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x88E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x89A DUP5 DUP3 DUP6 ADD PUSH2 0x7F7 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x8BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8C5 DUP2 PUSH2 0x66E JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x8D5 DUP2 PUSH2 0x66E JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x903 DUP9 DUP3 DUP10 ADD PUSH2 0x686 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x929 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x946 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x952 DUP7 DUP3 DUP8 ADD PUSH2 0x686 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x972 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x989 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x995 DUP7 DUP4 DUP8 ADD PUSH2 0x7F7 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x9AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9B8 DUP6 DUP3 DUP7 ADD PUSH2 0x7F7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x9E0 DUP2 PUSH2 0x66E JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9B8 DUP6 DUP3 DUP7 ADD PUSH2 0x7F7 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA2D JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xA11 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x32B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xA07 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xAA1 JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xA7C JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xABF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xAD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x6C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0xB0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0xB18 DUP2 PUSH2 0x66E JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH2 0xB28 DUP2 PUSH2 0x66E JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0xB44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB50 DUP13 DUP4 DUP14 ADD PUSH2 0xAAD JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xB69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB75 DUP13 DUP4 DUP14 ADD PUSH2 0xAAD JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x75D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xBA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0xBAE DUP2 PUSH2 0x66E JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x946 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xBE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0xBED DUP2 PUSH2 0x66E JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0xBFD DUP2 PUSH2 0x66E JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xC26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC32 DUP10 DUP3 DUP11 ADD PUSH2 0x686 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0xC57 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0xA07 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE DUP4 DUP2 MSTORE DUP4 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP7 ADD AND DUP3 ADD ADD SWAP2 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x32B DUP2 PUSH2 0x77E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xCD9 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0xA07 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0xCEB DUP2 DUP6 PUSH2 0xA07 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0xD00 DUP2 PUSH2 0x66E JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0xD2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH2 0xD57 JUMPI PUSH2 0xD57 PUSH2 0x7B1 JUMP JUMPDEST DUP2 PUSH1 0x5 SHL SWAP3 POP PUSH2 0xD68 DUP2 DUP5 ADD PUSH2 0x7C7 JUMP JUMPDEST DUP3 DUP2 MSTORE SWAP3 DUP5 ADD DUP2 ADD SWAP3 DUP2 DUP2 ADD SWAP1 DUP10 DUP6 GT ISZERO PUSH2 0xD82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP5 DUP7 LT ISZERO PUSH2 0xDAC JUMPI DUP6 MLOAD SWAP4 POP PUSH2 0xD9C DUP5 PUSH2 0x66E JUMP JUMPDEST DUP4 DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0xD87 JUMP JUMPDEST SWAP7 POP PUSH2 0xDBB SWAP1 POP DUP8 DUP3 ADD PUSH2 0xCF5 JUMP JUMPDEST SWAP5 POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE7 PUSH8 0xBD389AFC790344B0 0x25 0xF6 BLOCKHASH 0xB9 CREATE2 0xEF 0xE6 PUSH24 0xE1FB2429B37C469A30C2C9EAFCEF64736F6C634300081700 CALLER ","sourceMap":"343:7385:22:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@encodeMessageDataForSafe_3432":{"entryPoint":1148,"id":3432,"parameterSlots":2,"returnSlots":1},"@getMessageHashForSafe_3451":{"entryPoint":1422,"id":3451,"parameterSlots":2,"returnSlots":1},"@getMessageHash_3392":{"entryPoint":616,"id":3392,"parameterSlots":1,"returnSlots":1},"@getModules_3524":{"entryPoint":1449,"id":3524,"parameterSlots":0,"returnSlots":1},"@isValidSignature_3372":{"entryPoint":818,"id":3372,"parameterSlots":2,"returnSlots":1},"@isValidSignature_3492":{"entryPoint":628,"id":3492,"parameterSlots":3,"returnSlots":1},"@onERC1155BatchReceived_3620":{"entryPoint":null,"id":3620,"parameterSlots":8,"returnSlots":1},"@onERC1155Received_3598":{"entryPoint":null,"id":3598,"parameterSlots":6,"returnSlots":1},"@onERC721Received_3638":{"entryPoint":null,"id":3638,"parameterSlots":5,"returnSlots":1},"@simulate_3540":{"entryPoint":1572,"id":3540,"parameterSlots":3,"returnSlots":1},"@supportsInterface_3687":{"entryPoint":534,"id":3687,"parameterSlots":1,"returnSlots":1},"@tokensReceived_3656":{"entryPoint":null,"id":3656,"parameterSlots":8,"returnSlots":0},"abi_decode_address_fromMemory":{"entryPoint":3317,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn_calldata":{"entryPoint":2733,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bytes":{"entryPoint":2039,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes_calldata":{"entryPoint":1670,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_addresst_uint256t_bytes_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":1742,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":2801,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":2210,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr":{"entryPoint":3017,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_addresst_bytes_calldata_ptr":{"entryPoint":2958,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_address_fromMemory":{"entryPoint":3333,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_bytes_calldata_ptr":{"entryPoint":2324,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes4":{"entryPoint":1940,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":3210,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes_memory_ptr":{"entryPoint":2150,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes_memory_ptrt_bytes_memory_ptr":{"entryPoint":2399,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_contract$_Safe_$1853t_bytes_memory_ptr":{"entryPoint":2498,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":3239,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes":{"entryPoint":2567,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes1_t_bytes1_t_bytes32_t_bytes32__to_t_bytes1_t_bytes1_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_rational_10_by_1__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":2656,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes32_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":3264,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":2637,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr_t_bytes_calldata_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":3140,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fd8211c71ab965565e8a56b84284a02d17d4d89e6f05f14b26449d5de3a8c5b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory":{"entryPoint":1991,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x41":{"entryPoint":1969,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":1646,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":1918,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:14798:40","nodeType":"YulBlock","src":"0:14798:40","statements":[{"nativeSrc":"6:3:40","nodeType":"YulBlock","src":"6:3:40","statements":[]},{"body":{"nativeSrc":"59:86:40","nodeType":"YulBlock","src":"59:86:40","statements":[{"body":{"nativeSrc":"123:16:40","nodeType":"YulBlock","src":"123:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"132:1:40","nodeType":"YulLiteral","src":"132:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"135:1:40","nodeType":"YulLiteral","src":"135:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"125:6:40","nodeType":"YulIdentifier","src":"125:6:40"},"nativeSrc":"125:12:40","nodeType":"YulFunctionCall","src":"125:12:40"},"nativeSrc":"125:12:40","nodeType":"YulExpressionStatement","src":"125:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"82:5:40","nodeType":"YulIdentifier","src":"82:5:40"},{"arguments":[{"name":"value","nativeSrc":"93:5:40","nodeType":"YulIdentifier","src":"93:5:40"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"108:3:40","nodeType":"YulLiteral","src":"108:3:40","type":"","value":"160"},{"kind":"number","nativeSrc":"113:1:40","nodeType":"YulLiteral","src":"113:1:40","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"104:3:40","nodeType":"YulIdentifier","src":"104:3:40"},"nativeSrc":"104:11:40","nodeType":"YulFunctionCall","src":"104:11:40"},{"kind":"number","nativeSrc":"117:1:40","nodeType":"YulLiteral","src":"117:1:40","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"100:3:40","nodeType":"YulIdentifier","src":"100:3:40"},"nativeSrc":"100:19:40","nodeType":"YulFunctionCall","src":"100:19:40"}],"functionName":{"name":"and","nativeSrc":"89:3:40","nodeType":"YulIdentifier","src":"89:3:40"},"nativeSrc":"89:31:40","nodeType":"YulFunctionCall","src":"89:31:40"}],"functionName":{"name":"eq","nativeSrc":"79:2:40","nodeType":"YulIdentifier","src":"79:2:40"},"nativeSrc":"79:42:40","nodeType":"YulFunctionCall","src":"79:42:40"}],"functionName":{"name":"iszero","nativeSrc":"72:6:40","nodeType":"YulIdentifier","src":"72:6:40"},"nativeSrc":"72:50:40","nodeType":"YulFunctionCall","src":"72:50:40"},"nativeSrc":"69:70:40","nodeType":"YulIf","src":"69:70:40"}]},"name":"validator_revert_address","nativeSrc":"14:131:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"48:5:40","nodeType":"YulTypedName","src":"48:5:40","type":""}],"src":"14:131:40"},{"body":{"nativeSrc":"222:275:40","nodeType":"YulBlock","src":"222:275:40","statements":[{"body":{"nativeSrc":"271:16:40","nodeType":"YulBlock","src":"271:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"280:1:40","nodeType":"YulLiteral","src":"280:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"283:1:40","nodeType":"YulLiteral","src":"283:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"273:6:40","nodeType":"YulIdentifier","src":"273:6:40"},"nativeSrc":"273:12:40","nodeType":"YulFunctionCall","src":"273:12:40"},"nativeSrc":"273:12:40","nodeType":"YulExpressionStatement","src":"273:12:40"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"250:6:40","nodeType":"YulIdentifier","src":"250:6:40"},{"kind":"number","nativeSrc":"258:4:40","nodeType":"YulLiteral","src":"258:4:40","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"246:3:40","nodeType":"YulIdentifier","src":"246:3:40"},"nativeSrc":"246:17:40","nodeType":"YulFunctionCall","src":"246:17:40"},{"name":"end","nativeSrc":"265:3:40","nodeType":"YulIdentifier","src":"265:3:40"}],"functionName":{"name":"slt","nativeSrc":"242:3:40","nodeType":"YulIdentifier","src":"242:3:40"},"nativeSrc":"242:27:40","nodeType":"YulFunctionCall","src":"242:27:40"}],"functionName":{"name":"iszero","nativeSrc":"235:6:40","nodeType":"YulIdentifier","src":"235:6:40"},"nativeSrc":"235:35:40","nodeType":"YulFunctionCall","src":"235:35:40"},"nativeSrc":"232:55:40","nodeType":"YulIf","src":"232:55:40"},{"nativeSrc":"296:30:40","nodeType":"YulAssignment","src":"296:30:40","value":{"arguments":[{"name":"offset","nativeSrc":"319:6:40","nodeType":"YulIdentifier","src":"319:6:40"}],"functionName":{"name":"calldataload","nativeSrc":"306:12:40","nodeType":"YulIdentifier","src":"306:12:40"},"nativeSrc":"306:20:40","nodeType":"YulFunctionCall","src":"306:20:40"},"variableNames":[{"name":"length","nativeSrc":"296:6:40","nodeType":"YulIdentifier","src":"296:6:40"}]},{"body":{"nativeSrc":"369:16:40","nodeType":"YulBlock","src":"369:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"378:1:40","nodeType":"YulLiteral","src":"378:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"381:1:40","nodeType":"YulLiteral","src":"381:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"371:6:40","nodeType":"YulIdentifier","src":"371:6:40"},"nativeSrc":"371:12:40","nodeType":"YulFunctionCall","src":"371:12:40"},"nativeSrc":"371:12:40","nodeType":"YulExpressionStatement","src":"371:12:40"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"341:6:40","nodeType":"YulIdentifier","src":"341:6:40"},{"kind":"number","nativeSrc":"349:18:40","nodeType":"YulLiteral","src":"349:18:40","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"338:2:40","nodeType":"YulIdentifier","src":"338:2:40"},"nativeSrc":"338:30:40","nodeType":"YulFunctionCall","src":"338:30:40"},"nativeSrc":"335:50:40","nodeType":"YulIf","src":"335:50:40"},{"nativeSrc":"394:29:40","nodeType":"YulAssignment","src":"394:29:40","value":{"arguments":[{"name":"offset","nativeSrc":"410:6:40","nodeType":"YulIdentifier","src":"410:6:40"},{"kind":"number","nativeSrc":"418:4:40","nodeType":"YulLiteral","src":"418:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"406:3:40","nodeType":"YulIdentifier","src":"406:3:40"},"nativeSrc":"406:17:40","nodeType":"YulFunctionCall","src":"406:17:40"},"variableNames":[{"name":"arrayPos","nativeSrc":"394:8:40","nodeType":"YulIdentifier","src":"394:8:40"}]},{"body":{"nativeSrc":"475:16:40","nodeType":"YulBlock","src":"475:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"484:1:40","nodeType":"YulLiteral","src":"484:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"487:1:40","nodeType":"YulLiteral","src":"487:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"477:6:40","nodeType":"YulIdentifier","src":"477:6:40"},"nativeSrc":"477:12:40","nodeType":"YulFunctionCall","src":"477:12:40"},"nativeSrc":"477:12:40","nodeType":"YulExpressionStatement","src":"477:12:40"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"446:6:40","nodeType":"YulIdentifier","src":"446:6:40"},{"name":"length","nativeSrc":"454:6:40","nodeType":"YulIdentifier","src":"454:6:40"}],"functionName":{"name":"add","nativeSrc":"442:3:40","nodeType":"YulIdentifier","src":"442:3:40"},"nativeSrc":"442:19:40","nodeType":"YulFunctionCall","src":"442:19:40"},{"kind":"number","nativeSrc":"463:4:40","nodeType":"YulLiteral","src":"463:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"438:3:40","nodeType":"YulIdentifier","src":"438:3:40"},"nativeSrc":"438:30:40","nodeType":"YulFunctionCall","src":"438:30:40"},{"name":"end","nativeSrc":"470:3:40","nodeType":"YulIdentifier","src":"470:3:40"}],"functionName":{"name":"gt","nativeSrc":"435:2:40","nodeType":"YulIdentifier","src":"435:2:40"},"nativeSrc":"435:39:40","nodeType":"YulFunctionCall","src":"435:39:40"},"nativeSrc":"432:59:40","nodeType":"YulIf","src":"432:59:40"}]},"name":"abi_decode_bytes_calldata","nativeSrc":"150:347:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"185:6:40","nodeType":"YulTypedName","src":"185:6:40","type":""},{"name":"end","nativeSrc":"193:3:40","nodeType":"YulTypedName","src":"193:3:40","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"201:8:40","nodeType":"YulTypedName","src":"201:8:40","type":""},{"name":"length","nativeSrc":"211:6:40","nodeType":"YulTypedName","src":"211:6:40","type":""}],"src":"150:347:40"},{"body":{"nativeSrc":"695:1012:40","nodeType":"YulBlock","src":"695:1012:40","statements":[{"body":{"nativeSrc":"742:16:40","nodeType":"YulBlock","src":"742:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"751:1:40","nodeType":"YulLiteral","src":"751:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"754:1:40","nodeType":"YulLiteral","src":"754:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"744:6:40","nodeType":"YulIdentifier","src":"744:6:40"},"nativeSrc":"744:12:40","nodeType":"YulFunctionCall","src":"744:12:40"},"nativeSrc":"744:12:40","nodeType":"YulExpressionStatement","src":"744:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"716:7:40","nodeType":"YulIdentifier","src":"716:7:40"},{"name":"headStart","nativeSrc":"725:9:40","nodeType":"YulIdentifier","src":"725:9:40"}],"functionName":{"name":"sub","nativeSrc":"712:3:40","nodeType":"YulIdentifier","src":"712:3:40"},"nativeSrc":"712:23:40","nodeType":"YulFunctionCall","src":"712:23:40"},{"kind":"number","nativeSrc":"737:3:40","nodeType":"YulLiteral","src":"737:3:40","type":"","value":"192"}],"functionName":{"name":"slt","nativeSrc":"708:3:40","nodeType":"YulIdentifier","src":"708:3:40"},"nativeSrc":"708:33:40","nodeType":"YulFunctionCall","src":"708:33:40"},"nativeSrc":"705:53:40","nodeType":"YulIf","src":"705:53:40"},{"nativeSrc":"767:36:40","nodeType":"YulVariableDeclaration","src":"767:36:40","value":{"arguments":[{"name":"headStart","nativeSrc":"793:9:40","nodeType":"YulIdentifier","src":"793:9:40"}],"functionName":{"name":"calldataload","nativeSrc":"780:12:40","nodeType":"YulIdentifier","src":"780:12:40"},"nativeSrc":"780:23:40","nodeType":"YulFunctionCall","src":"780:23:40"},"variables":[{"name":"value","nativeSrc":"771:5:40","nodeType":"YulTypedName","src":"771:5:40","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"837:5:40","nodeType":"YulIdentifier","src":"837:5:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"812:24:40","nodeType":"YulIdentifier","src":"812:24:40"},"nativeSrc":"812:31:40","nodeType":"YulFunctionCall","src":"812:31:40"},"nativeSrc":"812:31:40","nodeType":"YulExpressionStatement","src":"812:31:40"},{"nativeSrc":"852:15:40","nodeType":"YulAssignment","src":"852:15:40","value":{"name":"value","nativeSrc":"862:5:40","nodeType":"YulIdentifier","src":"862:5:40"},"variableNames":[{"name":"value0","nativeSrc":"852:6:40","nodeType":"YulIdentifier","src":"852:6:40"}]},{"nativeSrc":"876:47:40","nodeType":"YulVariableDeclaration","src":"876:47:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"908:9:40","nodeType":"YulIdentifier","src":"908:9:40"},{"kind":"number","nativeSrc":"919:2:40","nodeType":"YulLiteral","src":"919:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"904:3:40","nodeType":"YulIdentifier","src":"904:3:40"},"nativeSrc":"904:18:40","nodeType":"YulFunctionCall","src":"904:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"891:12:40","nodeType":"YulIdentifier","src":"891:12:40"},"nativeSrc":"891:32:40","nodeType":"YulFunctionCall","src":"891:32:40"},"variables":[{"name":"value_1","nativeSrc":"880:7:40","nodeType":"YulTypedName","src":"880:7:40","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"957:7:40","nodeType":"YulIdentifier","src":"957:7:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"932:24:40","nodeType":"YulIdentifier","src":"932:24:40"},"nativeSrc":"932:33:40","nodeType":"YulFunctionCall","src":"932:33:40"},"nativeSrc":"932:33:40","nodeType":"YulExpressionStatement","src":"932:33:40"},{"nativeSrc":"974:17:40","nodeType":"YulAssignment","src":"974:17:40","value":{"name":"value_1","nativeSrc":"984:7:40","nodeType":"YulIdentifier","src":"984:7:40"},"variableNames":[{"name":"value1","nativeSrc":"974:6:40","nodeType":"YulIdentifier","src":"974:6:40"}]},{"nativeSrc":"1000:47:40","nodeType":"YulVariableDeclaration","src":"1000:47:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1032:9:40","nodeType":"YulIdentifier","src":"1032:9:40"},{"kind":"number","nativeSrc":"1043:2:40","nodeType":"YulLiteral","src":"1043:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1028:3:40","nodeType":"YulIdentifier","src":"1028:3:40"},"nativeSrc":"1028:18:40","nodeType":"YulFunctionCall","src":"1028:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"1015:12:40","nodeType":"YulIdentifier","src":"1015:12:40"},"nativeSrc":"1015:32:40","nodeType":"YulFunctionCall","src":"1015:32:40"},"variables":[{"name":"value_2","nativeSrc":"1004:7:40","nodeType":"YulTypedName","src":"1004:7:40","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"1081:7:40","nodeType":"YulIdentifier","src":"1081:7:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"1056:24:40","nodeType":"YulIdentifier","src":"1056:24:40"},"nativeSrc":"1056:33:40","nodeType":"YulFunctionCall","src":"1056:33:40"},"nativeSrc":"1056:33:40","nodeType":"YulExpressionStatement","src":"1056:33:40"},{"nativeSrc":"1098:17:40","nodeType":"YulAssignment","src":"1098:17:40","value":{"name":"value_2","nativeSrc":"1108:7:40","nodeType":"YulIdentifier","src":"1108:7:40"},"variableNames":[{"name":"value2","nativeSrc":"1098:6:40","nodeType":"YulIdentifier","src":"1098:6:40"}]},{"nativeSrc":"1124:42:40","nodeType":"YulAssignment","src":"1124:42:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1151:9:40","nodeType":"YulIdentifier","src":"1151:9:40"},{"kind":"number","nativeSrc":"1162:2:40","nodeType":"YulLiteral","src":"1162:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"1147:3:40","nodeType":"YulIdentifier","src":"1147:3:40"},"nativeSrc":"1147:18:40","nodeType":"YulFunctionCall","src":"1147:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"1134:12:40","nodeType":"YulIdentifier","src":"1134:12:40"},"nativeSrc":"1134:32:40","nodeType":"YulFunctionCall","src":"1134:32:40"},"variableNames":[{"name":"value3","nativeSrc":"1124:6:40","nodeType":"YulIdentifier","src":"1124:6:40"}]},{"nativeSrc":"1175:47:40","nodeType":"YulVariableDeclaration","src":"1175:47:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1206:9:40","nodeType":"YulIdentifier","src":"1206:9:40"},{"kind":"number","nativeSrc":"1217:3:40","nodeType":"YulLiteral","src":"1217:3:40","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"1202:3:40","nodeType":"YulIdentifier","src":"1202:3:40"},"nativeSrc":"1202:19:40","nodeType":"YulFunctionCall","src":"1202:19:40"}],"functionName":{"name":"calldataload","nativeSrc":"1189:12:40","nodeType":"YulIdentifier","src":"1189:12:40"},"nativeSrc":"1189:33:40","nodeType":"YulFunctionCall","src":"1189:33:40"},"variables":[{"name":"offset","nativeSrc":"1179:6:40","nodeType":"YulTypedName","src":"1179:6:40","type":""}]},{"nativeSrc":"1231:28:40","nodeType":"YulVariableDeclaration","src":"1231:28:40","value":{"kind":"number","nativeSrc":"1241:18:40","nodeType":"YulLiteral","src":"1241:18:40","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"1235:2:40","nodeType":"YulTypedName","src":"1235:2:40","type":""}]},{"body":{"nativeSrc":"1286:16:40","nodeType":"YulBlock","src":"1286:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1295:1:40","nodeType":"YulLiteral","src":"1295:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"1298:1:40","nodeType":"YulLiteral","src":"1298:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1288:6:40","nodeType":"YulIdentifier","src":"1288:6:40"},"nativeSrc":"1288:12:40","nodeType":"YulFunctionCall","src":"1288:12:40"},"nativeSrc":"1288:12:40","nodeType":"YulExpressionStatement","src":"1288:12:40"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"1274:6:40","nodeType":"YulIdentifier","src":"1274:6:40"},{"name":"_1","nativeSrc":"1282:2:40","nodeType":"YulIdentifier","src":"1282:2:40"}],"functionName":{"name":"gt","nativeSrc":"1271:2:40","nodeType":"YulIdentifier","src":"1271:2:40"},"nativeSrc":"1271:14:40","nodeType":"YulFunctionCall","src":"1271:14:40"},"nativeSrc":"1268:34:40","nodeType":"YulIf","src":"1268:34:40"},{"nativeSrc":"1311:84:40","nodeType":"YulVariableDeclaration","src":"1311:84:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1367:9:40","nodeType":"YulIdentifier","src":"1367:9:40"},{"name":"offset","nativeSrc":"1378:6:40","nodeType":"YulIdentifier","src":"1378:6:40"}],"functionName":{"name":"add","nativeSrc":"1363:3:40","nodeType":"YulIdentifier","src":"1363:3:40"},"nativeSrc":"1363:22:40","nodeType":"YulFunctionCall","src":"1363:22:40"},{"name":"dataEnd","nativeSrc":"1387:7:40","nodeType":"YulIdentifier","src":"1387:7:40"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"1337:25:40","nodeType":"YulIdentifier","src":"1337:25:40"},"nativeSrc":"1337:58:40","nodeType":"YulFunctionCall","src":"1337:58:40"},"variables":[{"name":"value4_1","nativeSrc":"1315:8:40","nodeType":"YulTypedName","src":"1315:8:40","type":""},{"name":"value5_1","nativeSrc":"1325:8:40","nodeType":"YulTypedName","src":"1325:8:40","type":""}]},{"nativeSrc":"1404:18:40","nodeType":"YulAssignment","src":"1404:18:40","value":{"name":"value4_1","nativeSrc":"1414:8:40","nodeType":"YulIdentifier","src":"1414:8:40"},"variableNames":[{"name":"value4","nativeSrc":"1404:6:40","nodeType":"YulIdentifier","src":"1404:6:40"}]},{"nativeSrc":"1431:18:40","nodeType":"YulAssignment","src":"1431:18:40","value":{"name":"value5_1","nativeSrc":"1441:8:40","nodeType":"YulIdentifier","src":"1441:8:40"},"variableNames":[{"name":"value5","nativeSrc":"1431:6:40","nodeType":"YulIdentifier","src":"1431:6:40"}]},{"nativeSrc":"1458:49:40","nodeType":"YulVariableDeclaration","src":"1458:49:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1491:9:40","nodeType":"YulIdentifier","src":"1491:9:40"},{"kind":"number","nativeSrc":"1502:3:40","nodeType":"YulLiteral","src":"1502:3:40","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"1487:3:40","nodeType":"YulIdentifier","src":"1487:3:40"},"nativeSrc":"1487:19:40","nodeType":"YulFunctionCall","src":"1487:19:40"}],"functionName":{"name":"calldataload","nativeSrc":"1474:12:40","nodeType":"YulIdentifier","src":"1474:12:40"},"nativeSrc":"1474:33:40","nodeType":"YulFunctionCall","src":"1474:33:40"},"variables":[{"name":"offset_1","nativeSrc":"1462:8:40","nodeType":"YulTypedName","src":"1462:8:40","type":""}]},{"body":{"nativeSrc":"1536:16:40","nodeType":"YulBlock","src":"1536:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1545:1:40","nodeType":"YulLiteral","src":"1545:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"1548:1:40","nodeType":"YulLiteral","src":"1548:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1538:6:40","nodeType":"YulIdentifier","src":"1538:6:40"},"nativeSrc":"1538:12:40","nodeType":"YulFunctionCall","src":"1538:12:40"},"nativeSrc":"1538:12:40","nodeType":"YulExpressionStatement","src":"1538:12:40"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"1522:8:40","nodeType":"YulIdentifier","src":"1522:8:40"},{"name":"_1","nativeSrc":"1532:2:40","nodeType":"YulIdentifier","src":"1532:2:40"}],"functionName":{"name":"gt","nativeSrc":"1519:2:40","nodeType":"YulIdentifier","src":"1519:2:40"},"nativeSrc":"1519:16:40","nodeType":"YulFunctionCall","src":"1519:16:40"},"nativeSrc":"1516:36:40","nodeType":"YulIf","src":"1516:36:40"},{"nativeSrc":"1561:86:40","nodeType":"YulVariableDeclaration","src":"1561:86:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1617:9:40","nodeType":"YulIdentifier","src":"1617:9:40"},{"name":"offset_1","nativeSrc":"1628:8:40","nodeType":"YulIdentifier","src":"1628:8:40"}],"functionName":{"name":"add","nativeSrc":"1613:3:40","nodeType":"YulIdentifier","src":"1613:3:40"},"nativeSrc":"1613:24:40","nodeType":"YulFunctionCall","src":"1613:24:40"},{"name":"dataEnd","nativeSrc":"1639:7:40","nodeType":"YulIdentifier","src":"1639:7:40"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"1587:25:40","nodeType":"YulIdentifier","src":"1587:25:40"},"nativeSrc":"1587:60:40","nodeType":"YulFunctionCall","src":"1587:60:40"},"variables":[{"name":"value6_1","nativeSrc":"1565:8:40","nodeType":"YulTypedName","src":"1565:8:40","type":""},{"name":"value7_1","nativeSrc":"1575:8:40","nodeType":"YulTypedName","src":"1575:8:40","type":""}]},{"nativeSrc":"1656:18:40","nodeType":"YulAssignment","src":"1656:18:40","value":{"name":"value6_1","nativeSrc":"1666:8:40","nodeType":"YulIdentifier","src":"1666:8:40"},"variableNames":[{"name":"value6","nativeSrc":"1656:6:40","nodeType":"YulIdentifier","src":"1656:6:40"}]},{"nativeSrc":"1683:18:40","nodeType":"YulAssignment","src":"1683:18:40","value":{"name":"value7_1","nativeSrc":"1693:8:40","nodeType":"YulIdentifier","src":"1693:8:40"},"variableNames":[{"name":"value7","nativeSrc":"1683:6:40","nodeType":"YulIdentifier","src":"1683:6:40"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_addresst_uint256t_bytes_calldata_ptrt_bytes_calldata_ptr","nativeSrc":"502:1205:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"605:9:40","nodeType":"YulTypedName","src":"605:9:40","type":""},{"name":"dataEnd","nativeSrc":"616:7:40","nodeType":"YulTypedName","src":"616:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"628:6:40","nodeType":"YulTypedName","src":"628:6:40","type":""},{"name":"value1","nativeSrc":"636:6:40","nodeType":"YulTypedName","src":"636:6:40","type":""},{"name":"value2","nativeSrc":"644:6:40","nodeType":"YulTypedName","src":"644:6:40","type":""},{"name":"value3","nativeSrc":"652:6:40","nodeType":"YulTypedName","src":"652:6:40","type":""},{"name":"value4","nativeSrc":"660:6:40","nodeType":"YulTypedName","src":"660:6:40","type":""},{"name":"value5","nativeSrc":"668:6:40","nodeType":"YulTypedName","src":"668:6:40","type":""},{"name":"value6","nativeSrc":"676:6:40","nodeType":"YulTypedName","src":"676:6:40","type":""},{"name":"value7","nativeSrc":"684:6:40","nodeType":"YulTypedName","src":"684:6:40","type":""}],"src":"502:1205:40"},{"body":{"nativeSrc":"1756:87:40","nodeType":"YulBlock","src":"1756:87:40","statements":[{"body":{"nativeSrc":"1821:16:40","nodeType":"YulBlock","src":"1821:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1830:1:40","nodeType":"YulLiteral","src":"1830:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"1833:1:40","nodeType":"YulLiteral","src":"1833:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1823:6:40","nodeType":"YulIdentifier","src":"1823:6:40"},"nativeSrc":"1823:12:40","nodeType":"YulFunctionCall","src":"1823:12:40"},"nativeSrc":"1823:12:40","nodeType":"YulExpressionStatement","src":"1823:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1779:5:40","nodeType":"YulIdentifier","src":"1779:5:40"},{"arguments":[{"name":"value","nativeSrc":"1790:5:40","nodeType":"YulIdentifier","src":"1790:5:40"},{"arguments":[{"kind":"number","nativeSrc":"1801:3:40","nodeType":"YulLiteral","src":"1801:3:40","type":"","value":"224"},{"kind":"number","nativeSrc":"1806:10:40","nodeType":"YulLiteral","src":"1806:10:40","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nativeSrc":"1797:3:40","nodeType":"YulIdentifier","src":"1797:3:40"},"nativeSrc":"1797:20:40","nodeType":"YulFunctionCall","src":"1797:20:40"}],"functionName":{"name":"and","nativeSrc":"1786:3:40","nodeType":"YulIdentifier","src":"1786:3:40"},"nativeSrc":"1786:32:40","nodeType":"YulFunctionCall","src":"1786:32:40"}],"functionName":{"name":"eq","nativeSrc":"1776:2:40","nodeType":"YulIdentifier","src":"1776:2:40"},"nativeSrc":"1776:43:40","nodeType":"YulFunctionCall","src":"1776:43:40"}],"functionName":{"name":"iszero","nativeSrc":"1769:6:40","nodeType":"YulIdentifier","src":"1769:6:40"},"nativeSrc":"1769:51:40","nodeType":"YulFunctionCall","src":"1769:51:40"},"nativeSrc":"1766:71:40","nodeType":"YulIf","src":"1766:71:40"}]},"name":"validator_revert_bytes4","nativeSrc":"1712:131:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1745:5:40","nodeType":"YulTypedName","src":"1745:5:40","type":""}],"src":"1712:131:40"},{"body":{"nativeSrc":"1917:176:40","nodeType":"YulBlock","src":"1917:176:40","statements":[{"body":{"nativeSrc":"1963:16:40","nodeType":"YulBlock","src":"1963:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1972:1:40","nodeType":"YulLiteral","src":"1972:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"1975:1:40","nodeType":"YulLiteral","src":"1975:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1965:6:40","nodeType":"YulIdentifier","src":"1965:6:40"},"nativeSrc":"1965:12:40","nodeType":"YulFunctionCall","src":"1965:12:40"},"nativeSrc":"1965:12:40","nodeType":"YulExpressionStatement","src":"1965:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1938:7:40","nodeType":"YulIdentifier","src":"1938:7:40"},{"name":"headStart","nativeSrc":"1947:9:40","nodeType":"YulIdentifier","src":"1947:9:40"}],"functionName":{"name":"sub","nativeSrc":"1934:3:40","nodeType":"YulIdentifier","src":"1934:3:40"},"nativeSrc":"1934:23:40","nodeType":"YulFunctionCall","src":"1934:23:40"},{"kind":"number","nativeSrc":"1959:2:40","nodeType":"YulLiteral","src":"1959:2:40","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1930:3:40","nodeType":"YulIdentifier","src":"1930:3:40"},"nativeSrc":"1930:32:40","nodeType":"YulFunctionCall","src":"1930:32:40"},"nativeSrc":"1927:52:40","nodeType":"YulIf","src":"1927:52:40"},{"nativeSrc":"1988:36:40","nodeType":"YulVariableDeclaration","src":"1988:36:40","value":{"arguments":[{"name":"headStart","nativeSrc":"2014:9:40","nodeType":"YulIdentifier","src":"2014:9:40"}],"functionName":{"name":"calldataload","nativeSrc":"2001:12:40","nodeType":"YulIdentifier","src":"2001:12:40"},"nativeSrc":"2001:23:40","nodeType":"YulFunctionCall","src":"2001:23:40"},"variables":[{"name":"value","nativeSrc":"1992:5:40","nodeType":"YulTypedName","src":"1992:5:40","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2057:5:40","nodeType":"YulIdentifier","src":"2057:5:40"}],"functionName":{"name":"validator_revert_bytes4","nativeSrc":"2033:23:40","nodeType":"YulIdentifier","src":"2033:23:40"},"nativeSrc":"2033:30:40","nodeType":"YulFunctionCall","src":"2033:30:40"},"nativeSrc":"2033:30:40","nodeType":"YulExpressionStatement","src":"2033:30:40"},{"nativeSrc":"2072:15:40","nodeType":"YulAssignment","src":"2072:15:40","value":{"name":"value","nativeSrc":"2082:5:40","nodeType":"YulIdentifier","src":"2082:5:40"},"variableNames":[{"name":"value0","nativeSrc":"2072:6:40","nodeType":"YulIdentifier","src":"2072:6:40"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"1848:245:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1883:9:40","nodeType":"YulTypedName","src":"1883:9:40","type":""},{"name":"dataEnd","nativeSrc":"1894:7:40","nodeType":"YulTypedName","src":"1894:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1906:6:40","nodeType":"YulTypedName","src":"1906:6:40","type":""}],"src":"1848:245:40"},{"body":{"nativeSrc":"2193:92:40","nodeType":"YulBlock","src":"2193:92:40","statements":[{"nativeSrc":"2203:26:40","nodeType":"YulAssignment","src":"2203:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"2215:9:40","nodeType":"YulIdentifier","src":"2215:9:40"},{"kind":"number","nativeSrc":"2226:2:40","nodeType":"YulLiteral","src":"2226:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2211:3:40","nodeType":"YulIdentifier","src":"2211:3:40"},"nativeSrc":"2211:18:40","nodeType":"YulFunctionCall","src":"2211:18:40"},"variableNames":[{"name":"tail","nativeSrc":"2203:4:40","nodeType":"YulIdentifier","src":"2203:4:40"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2245:9:40","nodeType":"YulIdentifier","src":"2245:9:40"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"2270:6:40","nodeType":"YulIdentifier","src":"2270:6:40"}],"functionName":{"name":"iszero","nativeSrc":"2263:6:40","nodeType":"YulIdentifier","src":"2263:6:40"},"nativeSrc":"2263:14:40","nodeType":"YulFunctionCall","src":"2263:14:40"}],"functionName":{"name":"iszero","nativeSrc":"2256:6:40","nodeType":"YulIdentifier","src":"2256:6:40"},"nativeSrc":"2256:22:40","nodeType":"YulFunctionCall","src":"2256:22:40"}],"functionName":{"name":"mstore","nativeSrc":"2238:6:40","nodeType":"YulIdentifier","src":"2238:6:40"},"nativeSrc":"2238:41:40","nodeType":"YulFunctionCall","src":"2238:41:40"},"nativeSrc":"2238:41:40","nodeType":"YulExpressionStatement","src":"2238:41:40"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"2098:187:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2162:9:40","nodeType":"YulTypedName","src":"2162:9:40","type":""},{"name":"value0","nativeSrc":"2173:6:40","nodeType":"YulTypedName","src":"2173:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2184:4:40","nodeType":"YulTypedName","src":"2184:4:40","type":""}],"src":"2098:187:40"},{"body":{"nativeSrc":"2322:95:40","nodeType":"YulBlock","src":"2322:95:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2339:1:40","nodeType":"YulLiteral","src":"2339:1:40","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"2346:3:40","nodeType":"YulLiteral","src":"2346:3:40","type":"","value":"224"},{"kind":"number","nativeSrc":"2351:10:40","nodeType":"YulLiteral","src":"2351:10:40","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"2342:3:40","nodeType":"YulIdentifier","src":"2342:3:40"},"nativeSrc":"2342:20:40","nodeType":"YulFunctionCall","src":"2342:20:40"}],"functionName":{"name":"mstore","nativeSrc":"2332:6:40","nodeType":"YulIdentifier","src":"2332:6:40"},"nativeSrc":"2332:31:40","nodeType":"YulFunctionCall","src":"2332:31:40"},"nativeSrc":"2332:31:40","nodeType":"YulExpressionStatement","src":"2332:31:40"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2379:1:40","nodeType":"YulLiteral","src":"2379:1:40","type":"","value":"4"},{"kind":"number","nativeSrc":"2382:4:40","nodeType":"YulLiteral","src":"2382:4:40","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"2372:6:40","nodeType":"YulIdentifier","src":"2372:6:40"},"nativeSrc":"2372:15:40","nodeType":"YulFunctionCall","src":"2372:15:40"},"nativeSrc":"2372:15:40","nodeType":"YulExpressionStatement","src":"2372:15:40"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2403:1:40","nodeType":"YulLiteral","src":"2403:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"2406:4:40","nodeType":"YulLiteral","src":"2406:4:40","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"2396:6:40","nodeType":"YulIdentifier","src":"2396:6:40"},"nativeSrc":"2396:15:40","nodeType":"YulFunctionCall","src":"2396:15:40"},"nativeSrc":"2396:15:40","nodeType":"YulExpressionStatement","src":"2396:15:40"}]},"name":"panic_error_0x41","nativeSrc":"2290:127:40","nodeType":"YulFunctionDefinition","src":"2290:127:40"},{"body":{"nativeSrc":"2467:230:40","nodeType":"YulBlock","src":"2467:230:40","statements":[{"nativeSrc":"2477:19:40","nodeType":"YulAssignment","src":"2477:19:40","value":{"arguments":[{"kind":"number","nativeSrc":"2493:2:40","nodeType":"YulLiteral","src":"2493:2:40","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"2487:5:40","nodeType":"YulIdentifier","src":"2487:5:40"},"nativeSrc":"2487:9:40","nodeType":"YulFunctionCall","src":"2487:9:40"},"variableNames":[{"name":"memPtr","nativeSrc":"2477:6:40","nodeType":"YulIdentifier","src":"2477:6:40"}]},{"nativeSrc":"2505:58:40","nodeType":"YulVariableDeclaration","src":"2505:58:40","value":{"arguments":[{"name":"memPtr","nativeSrc":"2527:6:40","nodeType":"YulIdentifier","src":"2527:6:40"},{"arguments":[{"arguments":[{"name":"size","nativeSrc":"2543:4:40","nodeType":"YulIdentifier","src":"2543:4:40"},{"kind":"number","nativeSrc":"2549:2:40","nodeType":"YulLiteral","src":"2549:2:40","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"2539:3:40","nodeType":"YulIdentifier","src":"2539:3:40"},"nativeSrc":"2539:13:40","nodeType":"YulFunctionCall","src":"2539:13:40"},{"arguments":[{"kind":"number","nativeSrc":"2558:2:40","nodeType":"YulLiteral","src":"2558:2:40","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"2554:3:40","nodeType":"YulIdentifier","src":"2554:3:40"},"nativeSrc":"2554:7:40","nodeType":"YulFunctionCall","src":"2554:7:40"}],"functionName":{"name":"and","nativeSrc":"2535:3:40","nodeType":"YulIdentifier","src":"2535:3:40"},"nativeSrc":"2535:27:40","nodeType":"YulFunctionCall","src":"2535:27:40"}],"functionName":{"name":"add","nativeSrc":"2523:3:40","nodeType":"YulIdentifier","src":"2523:3:40"},"nativeSrc":"2523:40:40","nodeType":"YulFunctionCall","src":"2523:40:40"},"variables":[{"name":"newFreePtr","nativeSrc":"2509:10:40","nodeType":"YulTypedName","src":"2509:10:40","type":""}]},{"body":{"nativeSrc":"2638:22:40","nodeType":"YulBlock","src":"2638:22:40","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"2640:16:40","nodeType":"YulIdentifier","src":"2640:16:40"},"nativeSrc":"2640:18:40","nodeType":"YulFunctionCall","src":"2640:18:40"},"nativeSrc":"2640:18:40","nodeType":"YulExpressionStatement","src":"2640:18:40"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"2581:10:40","nodeType":"YulIdentifier","src":"2581:10:40"},{"kind":"number","nativeSrc":"2593:18:40","nodeType":"YulLiteral","src":"2593:18:40","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2578:2:40","nodeType":"YulIdentifier","src":"2578:2:40"},"nativeSrc":"2578:34:40","nodeType":"YulFunctionCall","src":"2578:34:40"},{"arguments":[{"name":"newFreePtr","nativeSrc":"2617:10:40","nodeType":"YulIdentifier","src":"2617:10:40"},{"name":"memPtr","nativeSrc":"2629:6:40","nodeType":"YulIdentifier","src":"2629:6:40"}],"functionName":{"name":"lt","nativeSrc":"2614:2:40","nodeType":"YulIdentifier","src":"2614:2:40"},"nativeSrc":"2614:22:40","nodeType":"YulFunctionCall","src":"2614:22:40"}],"functionName":{"name":"or","nativeSrc":"2575:2:40","nodeType":"YulIdentifier","src":"2575:2:40"},"nativeSrc":"2575:62:40","nodeType":"YulFunctionCall","src":"2575:62:40"},"nativeSrc":"2572:88:40","nodeType":"YulIf","src":"2572:88:40"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2676:2:40","nodeType":"YulLiteral","src":"2676:2:40","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"2680:10:40","nodeType":"YulIdentifier","src":"2680:10:40"}],"functionName":{"name":"mstore","nativeSrc":"2669:6:40","nodeType":"YulIdentifier","src":"2669:6:40"},"nativeSrc":"2669:22:40","nodeType":"YulFunctionCall","src":"2669:22:40"},"nativeSrc":"2669:22:40","nodeType":"YulExpressionStatement","src":"2669:22:40"}]},"name":"allocate_memory","nativeSrc":"2422:275:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nativeSrc":"2447:4:40","nodeType":"YulTypedName","src":"2447:4:40","type":""}],"returnVariables":[{"name":"memPtr","nativeSrc":"2456:6:40","nodeType":"YulTypedName","src":"2456:6:40","type":""}],"src":"2422:275:40"},{"body":{"nativeSrc":"2754:478:40","nodeType":"YulBlock","src":"2754:478:40","statements":[{"body":{"nativeSrc":"2803:16:40","nodeType":"YulBlock","src":"2803:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2812:1:40","nodeType":"YulLiteral","src":"2812:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"2815:1:40","nodeType":"YulLiteral","src":"2815:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2805:6:40","nodeType":"YulIdentifier","src":"2805:6:40"},"nativeSrc":"2805:12:40","nodeType":"YulFunctionCall","src":"2805:12:40"},"nativeSrc":"2805:12:40","nodeType":"YulExpressionStatement","src":"2805:12:40"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2782:6:40","nodeType":"YulIdentifier","src":"2782:6:40"},{"kind":"number","nativeSrc":"2790:4:40","nodeType":"YulLiteral","src":"2790:4:40","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2778:3:40","nodeType":"YulIdentifier","src":"2778:3:40"},"nativeSrc":"2778:17:40","nodeType":"YulFunctionCall","src":"2778:17:40"},{"name":"end","nativeSrc":"2797:3:40","nodeType":"YulIdentifier","src":"2797:3:40"}],"functionName":{"name":"slt","nativeSrc":"2774:3:40","nodeType":"YulIdentifier","src":"2774:3:40"},"nativeSrc":"2774:27:40","nodeType":"YulFunctionCall","src":"2774:27:40"}],"functionName":{"name":"iszero","nativeSrc":"2767:6:40","nodeType":"YulIdentifier","src":"2767:6:40"},"nativeSrc":"2767:35:40","nodeType":"YulFunctionCall","src":"2767:35:40"},"nativeSrc":"2764:55:40","nodeType":"YulIf","src":"2764:55:40"},{"nativeSrc":"2828:30:40","nodeType":"YulVariableDeclaration","src":"2828:30:40","value":{"arguments":[{"name":"offset","nativeSrc":"2851:6:40","nodeType":"YulIdentifier","src":"2851:6:40"}],"functionName":{"name":"calldataload","nativeSrc":"2838:12:40","nodeType":"YulIdentifier","src":"2838:12:40"},"nativeSrc":"2838:20:40","nodeType":"YulFunctionCall","src":"2838:20:40"},"variables":[{"name":"_1","nativeSrc":"2832:2:40","nodeType":"YulTypedName","src":"2832:2:40","type":""}]},{"body":{"nativeSrc":"2897:22:40","nodeType":"YulBlock","src":"2897:22:40","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"2899:16:40","nodeType":"YulIdentifier","src":"2899:16:40"},"nativeSrc":"2899:18:40","nodeType":"YulFunctionCall","src":"2899:18:40"},"nativeSrc":"2899:18:40","nodeType":"YulExpressionStatement","src":"2899:18:40"}]},"condition":{"arguments":[{"name":"_1","nativeSrc":"2873:2:40","nodeType":"YulIdentifier","src":"2873:2:40"},{"kind":"number","nativeSrc":"2877:18:40","nodeType":"YulLiteral","src":"2877:18:40","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2870:2:40","nodeType":"YulIdentifier","src":"2870:2:40"},"nativeSrc":"2870:26:40","nodeType":"YulFunctionCall","src":"2870:26:40"},"nativeSrc":"2867:52:40","nodeType":"YulIf","src":"2867:52:40"},{"nativeSrc":"2928:70:40","nodeType":"YulVariableDeclaration","src":"2928:70:40","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"2971:2:40","nodeType":"YulIdentifier","src":"2971:2:40"},{"kind":"number","nativeSrc":"2975:4:40","nodeType":"YulLiteral","src":"2975:4:40","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2967:3:40","nodeType":"YulIdentifier","src":"2967:3:40"},"nativeSrc":"2967:13:40","nodeType":"YulFunctionCall","src":"2967:13:40"},{"arguments":[{"kind":"number","nativeSrc":"2986:2:40","nodeType":"YulLiteral","src":"2986:2:40","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"2982:3:40","nodeType":"YulIdentifier","src":"2982:3:40"},"nativeSrc":"2982:7:40","nodeType":"YulFunctionCall","src":"2982:7:40"}],"functionName":{"name":"and","nativeSrc":"2963:3:40","nodeType":"YulIdentifier","src":"2963:3:40"},"nativeSrc":"2963:27:40","nodeType":"YulFunctionCall","src":"2963:27:40"},{"kind":"number","nativeSrc":"2992:4:40","nodeType":"YulLiteral","src":"2992:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2959:3:40","nodeType":"YulIdentifier","src":"2959:3:40"},"nativeSrc":"2959:38:40","nodeType":"YulFunctionCall","src":"2959:38:40"}],"functionName":{"name":"allocate_memory","nativeSrc":"2943:15:40","nodeType":"YulIdentifier","src":"2943:15:40"},"nativeSrc":"2943:55:40","nodeType":"YulFunctionCall","src":"2943:55:40"},"variables":[{"name":"array_1","nativeSrc":"2932:7:40","nodeType":"YulTypedName","src":"2932:7:40","type":""}]},{"expression":{"arguments":[{"name":"array_1","nativeSrc":"3014:7:40","nodeType":"YulIdentifier","src":"3014:7:40"},{"name":"_1","nativeSrc":"3023:2:40","nodeType":"YulIdentifier","src":"3023:2:40"}],"functionName":{"name":"mstore","nativeSrc":"3007:6:40","nodeType":"YulIdentifier","src":"3007:6:40"},"nativeSrc":"3007:19:40","nodeType":"YulFunctionCall","src":"3007:19:40"},"nativeSrc":"3007:19:40","nodeType":"YulExpressionStatement","src":"3007:19:40"},{"body":{"nativeSrc":"3074:16:40","nodeType":"YulBlock","src":"3074:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3083:1:40","nodeType":"YulLiteral","src":"3083:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"3086:1:40","nodeType":"YulLiteral","src":"3086:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3076:6:40","nodeType":"YulIdentifier","src":"3076:6:40"},"nativeSrc":"3076:12:40","nodeType":"YulFunctionCall","src":"3076:12:40"},"nativeSrc":"3076:12:40","nodeType":"YulExpressionStatement","src":"3076:12:40"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"3049:6:40","nodeType":"YulIdentifier","src":"3049:6:40"},{"name":"_1","nativeSrc":"3057:2:40","nodeType":"YulIdentifier","src":"3057:2:40"}],"functionName":{"name":"add","nativeSrc":"3045:3:40","nodeType":"YulIdentifier","src":"3045:3:40"},"nativeSrc":"3045:15:40","nodeType":"YulFunctionCall","src":"3045:15:40"},{"kind":"number","nativeSrc":"3062:4:40","nodeType":"YulLiteral","src":"3062:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3041:3:40","nodeType":"YulIdentifier","src":"3041:3:40"},"nativeSrc":"3041:26:40","nodeType":"YulFunctionCall","src":"3041:26:40"},{"name":"end","nativeSrc":"3069:3:40","nodeType":"YulIdentifier","src":"3069:3:40"}],"functionName":{"name":"gt","nativeSrc":"3038:2:40","nodeType":"YulIdentifier","src":"3038:2:40"},"nativeSrc":"3038:35:40","nodeType":"YulFunctionCall","src":"3038:35:40"},"nativeSrc":"3035:55:40","nodeType":"YulIf","src":"3035:55:40"},{"expression":{"arguments":[{"arguments":[{"name":"array_1","nativeSrc":"3116:7:40","nodeType":"YulIdentifier","src":"3116:7:40"},{"kind":"number","nativeSrc":"3125:4:40","nodeType":"YulLiteral","src":"3125:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3112:3:40","nodeType":"YulIdentifier","src":"3112:3:40"},"nativeSrc":"3112:18:40","nodeType":"YulFunctionCall","src":"3112:18:40"},{"arguments":[{"name":"offset","nativeSrc":"3136:6:40","nodeType":"YulIdentifier","src":"3136:6:40"},{"kind":"number","nativeSrc":"3144:4:40","nodeType":"YulLiteral","src":"3144:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3132:3:40","nodeType":"YulIdentifier","src":"3132:3:40"},"nativeSrc":"3132:17:40","nodeType":"YulFunctionCall","src":"3132:17:40"},{"name":"_1","nativeSrc":"3151:2:40","nodeType":"YulIdentifier","src":"3151:2:40"}],"functionName":{"name":"calldatacopy","nativeSrc":"3099:12:40","nodeType":"YulIdentifier","src":"3099:12:40"},"nativeSrc":"3099:55:40","nodeType":"YulFunctionCall","src":"3099:55:40"},"nativeSrc":"3099:55:40","nodeType":"YulExpressionStatement","src":"3099:55:40"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nativeSrc":"3178:7:40","nodeType":"YulIdentifier","src":"3178:7:40"},{"name":"_1","nativeSrc":"3187:2:40","nodeType":"YulIdentifier","src":"3187:2:40"}],"functionName":{"name":"add","nativeSrc":"3174:3:40","nodeType":"YulIdentifier","src":"3174:3:40"},"nativeSrc":"3174:16:40","nodeType":"YulFunctionCall","src":"3174:16:40"},{"kind":"number","nativeSrc":"3192:4:40","nodeType":"YulLiteral","src":"3192:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3170:3:40","nodeType":"YulIdentifier","src":"3170:3:40"},"nativeSrc":"3170:27:40","nodeType":"YulFunctionCall","src":"3170:27:40"},{"kind":"number","nativeSrc":"3199:1:40","nodeType":"YulLiteral","src":"3199:1:40","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"3163:6:40","nodeType":"YulIdentifier","src":"3163:6:40"},"nativeSrc":"3163:38:40","nodeType":"YulFunctionCall","src":"3163:38:40"},"nativeSrc":"3163:38:40","nodeType":"YulExpressionStatement","src":"3163:38:40"},{"nativeSrc":"3210:16:40","nodeType":"YulAssignment","src":"3210:16:40","value":{"name":"array_1","nativeSrc":"3219:7:40","nodeType":"YulIdentifier","src":"3219:7:40"},"variableNames":[{"name":"array","nativeSrc":"3210:5:40","nodeType":"YulIdentifier","src":"3210:5:40"}]}]},"name":"abi_decode_bytes","nativeSrc":"2702:530:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2728:6:40","nodeType":"YulTypedName","src":"2728:6:40","type":""},{"name":"end","nativeSrc":"2736:3:40","nodeType":"YulTypedName","src":"2736:3:40","type":""}],"returnVariables":[{"name":"array","nativeSrc":"2744:5:40","nodeType":"YulTypedName","src":"2744:5:40","type":""}],"src":"2702:530:40"},{"body":{"nativeSrc":"3316:241:40","nodeType":"YulBlock","src":"3316:241:40","statements":[{"body":{"nativeSrc":"3362:16:40","nodeType":"YulBlock","src":"3362:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3371:1:40","nodeType":"YulLiteral","src":"3371:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"3374:1:40","nodeType":"YulLiteral","src":"3374:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3364:6:40","nodeType":"YulIdentifier","src":"3364:6:40"},"nativeSrc":"3364:12:40","nodeType":"YulFunctionCall","src":"3364:12:40"},"nativeSrc":"3364:12:40","nodeType":"YulExpressionStatement","src":"3364:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3337:7:40","nodeType":"YulIdentifier","src":"3337:7:40"},{"name":"headStart","nativeSrc":"3346:9:40","nodeType":"YulIdentifier","src":"3346:9:40"}],"functionName":{"name":"sub","nativeSrc":"3333:3:40","nodeType":"YulIdentifier","src":"3333:3:40"},"nativeSrc":"3333:23:40","nodeType":"YulFunctionCall","src":"3333:23:40"},{"kind":"number","nativeSrc":"3358:2:40","nodeType":"YulLiteral","src":"3358:2:40","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3329:3:40","nodeType":"YulIdentifier","src":"3329:3:40"},"nativeSrc":"3329:32:40","nodeType":"YulFunctionCall","src":"3329:32:40"},"nativeSrc":"3326:52:40","nodeType":"YulIf","src":"3326:52:40"},{"nativeSrc":"3387:37:40","nodeType":"YulVariableDeclaration","src":"3387:37:40","value":{"arguments":[{"name":"headStart","nativeSrc":"3414:9:40","nodeType":"YulIdentifier","src":"3414:9:40"}],"functionName":{"name":"calldataload","nativeSrc":"3401:12:40","nodeType":"YulIdentifier","src":"3401:12:40"},"nativeSrc":"3401:23:40","nodeType":"YulFunctionCall","src":"3401:23:40"},"variables":[{"name":"offset","nativeSrc":"3391:6:40","nodeType":"YulTypedName","src":"3391:6:40","type":""}]},{"body":{"nativeSrc":"3467:16:40","nodeType":"YulBlock","src":"3467:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3476:1:40","nodeType":"YulLiteral","src":"3476:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"3479:1:40","nodeType":"YulLiteral","src":"3479:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3469:6:40","nodeType":"YulIdentifier","src":"3469:6:40"},"nativeSrc":"3469:12:40","nodeType":"YulFunctionCall","src":"3469:12:40"},"nativeSrc":"3469:12:40","nodeType":"YulExpressionStatement","src":"3469:12:40"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3439:6:40","nodeType":"YulIdentifier","src":"3439:6:40"},{"kind":"number","nativeSrc":"3447:18:40","nodeType":"YulLiteral","src":"3447:18:40","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3436:2:40","nodeType":"YulIdentifier","src":"3436:2:40"},"nativeSrc":"3436:30:40","nodeType":"YulFunctionCall","src":"3436:30:40"},"nativeSrc":"3433:50:40","nodeType":"YulIf","src":"3433:50:40"},{"nativeSrc":"3492:59:40","nodeType":"YulAssignment","src":"3492:59:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3523:9:40","nodeType":"YulIdentifier","src":"3523:9:40"},{"name":"offset","nativeSrc":"3534:6:40","nodeType":"YulIdentifier","src":"3534:6:40"}],"functionName":{"name":"add","nativeSrc":"3519:3:40","nodeType":"YulIdentifier","src":"3519:3:40"},"nativeSrc":"3519:22:40","nodeType":"YulFunctionCall","src":"3519:22:40"},{"name":"dataEnd","nativeSrc":"3543:7:40","nodeType":"YulIdentifier","src":"3543:7:40"}],"functionName":{"name":"abi_decode_bytes","nativeSrc":"3502:16:40","nodeType":"YulIdentifier","src":"3502:16:40"},"nativeSrc":"3502:49:40","nodeType":"YulFunctionCall","src":"3502:49:40"},"variableNames":[{"name":"value0","nativeSrc":"3492:6:40","nodeType":"YulIdentifier","src":"3492:6:40"}]}]},"name":"abi_decode_tuple_t_bytes_memory_ptr","nativeSrc":"3237:320:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3282:9:40","nodeType":"YulTypedName","src":"3282:9:40","type":""},{"name":"dataEnd","nativeSrc":"3293:7:40","nodeType":"YulTypedName","src":"3293:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3305:6:40","nodeType":"YulTypedName","src":"3305:6:40","type":""}],"src":"3237:320:40"},{"body":{"nativeSrc":"3663:76:40","nodeType":"YulBlock","src":"3663:76:40","statements":[{"nativeSrc":"3673:26:40","nodeType":"YulAssignment","src":"3673:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"3685:9:40","nodeType":"YulIdentifier","src":"3685:9:40"},{"kind":"number","nativeSrc":"3696:2:40","nodeType":"YulLiteral","src":"3696:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3681:3:40","nodeType":"YulIdentifier","src":"3681:3:40"},"nativeSrc":"3681:18:40","nodeType":"YulFunctionCall","src":"3681:18:40"},"variableNames":[{"name":"tail","nativeSrc":"3673:4:40","nodeType":"YulIdentifier","src":"3673:4:40"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3715:9:40","nodeType":"YulIdentifier","src":"3715:9:40"},{"name":"value0","nativeSrc":"3726:6:40","nodeType":"YulIdentifier","src":"3726:6:40"}],"functionName":{"name":"mstore","nativeSrc":"3708:6:40","nodeType":"YulIdentifier","src":"3708:6:40"},"nativeSrc":"3708:25:40","nodeType":"YulFunctionCall","src":"3708:25:40"},"nativeSrc":"3708:25:40","nodeType":"YulExpressionStatement","src":"3708:25:40"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"3562:177:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3632:9:40","nodeType":"YulTypedName","src":"3632:9:40","type":""},{"name":"value0","nativeSrc":"3643:6:40","nodeType":"YulTypedName","src":"3643:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3654:4:40","nodeType":"YulTypedName","src":"3654:4:40","type":""}],"src":"3562:177:40"},{"body":{"nativeSrc":"3884:614:40","nodeType":"YulBlock","src":"3884:614:40","statements":[{"body":{"nativeSrc":"3931:16:40","nodeType":"YulBlock","src":"3931:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3940:1:40","nodeType":"YulLiteral","src":"3940:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"3943:1:40","nodeType":"YulLiteral","src":"3943:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3933:6:40","nodeType":"YulIdentifier","src":"3933:6:40"},"nativeSrc":"3933:12:40","nodeType":"YulFunctionCall","src":"3933:12:40"},"nativeSrc":"3933:12:40","nodeType":"YulExpressionStatement","src":"3933:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3905:7:40","nodeType":"YulIdentifier","src":"3905:7:40"},{"name":"headStart","nativeSrc":"3914:9:40","nodeType":"YulIdentifier","src":"3914:9:40"}],"functionName":{"name":"sub","nativeSrc":"3901:3:40","nodeType":"YulIdentifier","src":"3901:3:40"},"nativeSrc":"3901:23:40","nodeType":"YulFunctionCall","src":"3901:23:40"},{"kind":"number","nativeSrc":"3926:3:40","nodeType":"YulLiteral","src":"3926:3:40","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"3897:3:40","nodeType":"YulIdentifier","src":"3897:3:40"},"nativeSrc":"3897:33:40","nodeType":"YulFunctionCall","src":"3897:33:40"},"nativeSrc":"3894:53:40","nodeType":"YulIf","src":"3894:53:40"},{"nativeSrc":"3956:36:40","nodeType":"YulVariableDeclaration","src":"3956:36:40","value":{"arguments":[{"name":"headStart","nativeSrc":"3982:9:40","nodeType":"YulIdentifier","src":"3982:9:40"}],"functionName":{"name":"calldataload","nativeSrc":"3969:12:40","nodeType":"YulIdentifier","src":"3969:12:40"},"nativeSrc":"3969:23:40","nodeType":"YulFunctionCall","src":"3969:23:40"},"variables":[{"name":"value","nativeSrc":"3960:5:40","nodeType":"YulTypedName","src":"3960:5:40","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"4026:5:40","nodeType":"YulIdentifier","src":"4026:5:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"4001:24:40","nodeType":"YulIdentifier","src":"4001:24:40"},"nativeSrc":"4001:31:40","nodeType":"YulFunctionCall","src":"4001:31:40"},"nativeSrc":"4001:31:40","nodeType":"YulExpressionStatement","src":"4001:31:40"},{"nativeSrc":"4041:15:40","nodeType":"YulAssignment","src":"4041:15:40","value":{"name":"value","nativeSrc":"4051:5:40","nodeType":"YulIdentifier","src":"4051:5:40"},"variableNames":[{"name":"value0","nativeSrc":"4041:6:40","nodeType":"YulIdentifier","src":"4041:6:40"}]},{"nativeSrc":"4065:47:40","nodeType":"YulVariableDeclaration","src":"4065:47:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4097:9:40","nodeType":"YulIdentifier","src":"4097:9:40"},{"kind":"number","nativeSrc":"4108:2:40","nodeType":"YulLiteral","src":"4108:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4093:3:40","nodeType":"YulIdentifier","src":"4093:3:40"},"nativeSrc":"4093:18:40","nodeType":"YulFunctionCall","src":"4093:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"4080:12:40","nodeType":"YulIdentifier","src":"4080:12:40"},"nativeSrc":"4080:32:40","nodeType":"YulFunctionCall","src":"4080:32:40"},"variables":[{"name":"value_1","nativeSrc":"4069:7:40","nodeType":"YulTypedName","src":"4069:7:40","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"4146:7:40","nodeType":"YulIdentifier","src":"4146:7:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"4121:24:40","nodeType":"YulIdentifier","src":"4121:24:40"},"nativeSrc":"4121:33:40","nodeType":"YulFunctionCall","src":"4121:33:40"},"nativeSrc":"4121:33:40","nodeType":"YulExpressionStatement","src":"4121:33:40"},{"nativeSrc":"4163:17:40","nodeType":"YulAssignment","src":"4163:17:40","value":{"name":"value_1","nativeSrc":"4173:7:40","nodeType":"YulIdentifier","src":"4173:7:40"},"variableNames":[{"name":"value1","nativeSrc":"4163:6:40","nodeType":"YulIdentifier","src":"4163:6:40"}]},{"nativeSrc":"4189:42:40","nodeType":"YulAssignment","src":"4189:42:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4216:9:40","nodeType":"YulIdentifier","src":"4216:9:40"},{"kind":"number","nativeSrc":"4227:2:40","nodeType":"YulLiteral","src":"4227:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4212:3:40","nodeType":"YulIdentifier","src":"4212:3:40"},"nativeSrc":"4212:18:40","nodeType":"YulFunctionCall","src":"4212:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"4199:12:40","nodeType":"YulIdentifier","src":"4199:12:40"},"nativeSrc":"4199:32:40","nodeType":"YulFunctionCall","src":"4199:32:40"},"variableNames":[{"name":"value2","nativeSrc":"4189:6:40","nodeType":"YulIdentifier","src":"4189:6:40"}]},{"nativeSrc":"4240:46:40","nodeType":"YulVariableDeclaration","src":"4240:46:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4271:9:40","nodeType":"YulIdentifier","src":"4271:9:40"},{"kind":"number","nativeSrc":"4282:2:40","nodeType":"YulLiteral","src":"4282:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4267:3:40","nodeType":"YulIdentifier","src":"4267:3:40"},"nativeSrc":"4267:18:40","nodeType":"YulFunctionCall","src":"4267:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"4254:12:40","nodeType":"YulIdentifier","src":"4254:12:40"},"nativeSrc":"4254:32:40","nodeType":"YulFunctionCall","src":"4254:32:40"},"variables":[{"name":"offset","nativeSrc":"4244:6:40","nodeType":"YulTypedName","src":"4244:6:40","type":""}]},{"body":{"nativeSrc":"4329:16:40","nodeType":"YulBlock","src":"4329:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4338:1:40","nodeType":"YulLiteral","src":"4338:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"4341:1:40","nodeType":"YulLiteral","src":"4341:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4331:6:40","nodeType":"YulIdentifier","src":"4331:6:40"},"nativeSrc":"4331:12:40","nodeType":"YulFunctionCall","src":"4331:12:40"},"nativeSrc":"4331:12:40","nodeType":"YulExpressionStatement","src":"4331:12:40"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4301:6:40","nodeType":"YulIdentifier","src":"4301:6:40"},{"kind":"number","nativeSrc":"4309:18:40","nodeType":"YulLiteral","src":"4309:18:40","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4298:2:40","nodeType":"YulIdentifier","src":"4298:2:40"},"nativeSrc":"4298:30:40","nodeType":"YulFunctionCall","src":"4298:30:40"},"nativeSrc":"4295:50:40","nodeType":"YulIf","src":"4295:50:40"},{"nativeSrc":"4354:84:40","nodeType":"YulVariableDeclaration","src":"4354:84:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4410:9:40","nodeType":"YulIdentifier","src":"4410:9:40"},{"name":"offset","nativeSrc":"4421:6:40","nodeType":"YulIdentifier","src":"4421:6:40"}],"functionName":{"name":"add","nativeSrc":"4406:3:40","nodeType":"YulIdentifier","src":"4406:3:40"},"nativeSrc":"4406:22:40","nodeType":"YulFunctionCall","src":"4406:22:40"},{"name":"dataEnd","nativeSrc":"4430:7:40","nodeType":"YulIdentifier","src":"4430:7:40"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"4380:25:40","nodeType":"YulIdentifier","src":"4380:25:40"},"nativeSrc":"4380:58:40","nodeType":"YulFunctionCall","src":"4380:58:40"},"variables":[{"name":"value3_1","nativeSrc":"4358:8:40","nodeType":"YulTypedName","src":"4358:8:40","type":""},{"name":"value4_1","nativeSrc":"4368:8:40","nodeType":"YulTypedName","src":"4368:8:40","type":""}]},{"nativeSrc":"4447:18:40","nodeType":"YulAssignment","src":"4447:18:40","value":{"name":"value3_1","nativeSrc":"4457:8:40","nodeType":"YulIdentifier","src":"4457:8:40"},"variableNames":[{"name":"value3","nativeSrc":"4447:6:40","nodeType":"YulIdentifier","src":"4447:6:40"}]},{"nativeSrc":"4474:18:40","nodeType":"YulAssignment","src":"4474:18:40","value":{"name":"value4_1","nativeSrc":"4484:8:40","nodeType":"YulIdentifier","src":"4484:8:40"},"variableNames":[{"name":"value4","nativeSrc":"4474:6:40","nodeType":"YulIdentifier","src":"4474:6:40"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr","nativeSrc":"3744:754:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3818:9:40","nodeType":"YulTypedName","src":"3818:9:40","type":""},{"name":"dataEnd","nativeSrc":"3829:7:40","nodeType":"YulTypedName","src":"3829:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3841:6:40","nodeType":"YulTypedName","src":"3841:6:40","type":""},{"name":"value1","nativeSrc":"3849:6:40","nodeType":"YulTypedName","src":"3849:6:40","type":""},{"name":"value2","nativeSrc":"3857:6:40","nodeType":"YulTypedName","src":"3857:6:40","type":""},{"name":"value3","nativeSrc":"3865:6:40","nodeType":"YulTypedName","src":"3865:6:40","type":""},{"name":"value4","nativeSrc":"3873:6:40","nodeType":"YulTypedName","src":"3873:6:40","type":""}],"src":"3744:754:40"},{"body":{"nativeSrc":"4602:103:40","nodeType":"YulBlock","src":"4602:103:40","statements":[{"nativeSrc":"4612:26:40","nodeType":"YulAssignment","src":"4612:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"4624:9:40","nodeType":"YulIdentifier","src":"4624:9:40"},{"kind":"number","nativeSrc":"4635:2:40","nodeType":"YulLiteral","src":"4635:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4620:3:40","nodeType":"YulIdentifier","src":"4620:3:40"},"nativeSrc":"4620:18:40","nodeType":"YulFunctionCall","src":"4620:18:40"},"variableNames":[{"name":"tail","nativeSrc":"4612:4:40","nodeType":"YulIdentifier","src":"4612:4:40"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4654:9:40","nodeType":"YulIdentifier","src":"4654:9:40"},{"arguments":[{"name":"value0","nativeSrc":"4669:6:40","nodeType":"YulIdentifier","src":"4669:6:40"},{"arguments":[{"kind":"number","nativeSrc":"4681:3:40","nodeType":"YulLiteral","src":"4681:3:40","type":"","value":"224"},{"kind":"number","nativeSrc":"4686:10:40","nodeType":"YulLiteral","src":"4686:10:40","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nativeSrc":"4677:3:40","nodeType":"YulIdentifier","src":"4677:3:40"},"nativeSrc":"4677:20:40","nodeType":"YulFunctionCall","src":"4677:20:40"}],"functionName":{"name":"and","nativeSrc":"4665:3:40","nodeType":"YulIdentifier","src":"4665:3:40"},"nativeSrc":"4665:33:40","nodeType":"YulFunctionCall","src":"4665:33:40"}],"functionName":{"name":"mstore","nativeSrc":"4647:6:40","nodeType":"YulIdentifier","src":"4647:6:40"},"nativeSrc":"4647:52:40","nodeType":"YulFunctionCall","src":"4647:52:40"},"nativeSrc":"4647:52:40","nodeType":"YulExpressionStatement","src":"4647:52:40"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"4503:202:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4571:9:40","nodeType":"YulTypedName","src":"4571:9:40","type":""},{"name":"value0","nativeSrc":"4582:6:40","nodeType":"YulTypedName","src":"4582:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4593:4:40","nodeType":"YulTypedName","src":"4593:4:40","type":""}],"src":"4503:202:40"},{"body":{"nativeSrc":"4816:371:40","nodeType":"YulBlock","src":"4816:371:40","statements":[{"body":{"nativeSrc":"4862:16:40","nodeType":"YulBlock","src":"4862:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4871:1:40","nodeType":"YulLiteral","src":"4871:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"4874:1:40","nodeType":"YulLiteral","src":"4874:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4864:6:40","nodeType":"YulIdentifier","src":"4864:6:40"},"nativeSrc":"4864:12:40","nodeType":"YulFunctionCall","src":"4864:12:40"},"nativeSrc":"4864:12:40","nodeType":"YulExpressionStatement","src":"4864:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4837:7:40","nodeType":"YulIdentifier","src":"4837:7:40"},{"name":"headStart","nativeSrc":"4846:9:40","nodeType":"YulIdentifier","src":"4846:9:40"}],"functionName":{"name":"sub","nativeSrc":"4833:3:40","nodeType":"YulIdentifier","src":"4833:3:40"},"nativeSrc":"4833:23:40","nodeType":"YulFunctionCall","src":"4833:23:40"},{"kind":"number","nativeSrc":"4858:2:40","nodeType":"YulLiteral","src":"4858:2:40","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"4829:3:40","nodeType":"YulIdentifier","src":"4829:3:40"},"nativeSrc":"4829:32:40","nodeType":"YulFunctionCall","src":"4829:32:40"},"nativeSrc":"4826:52:40","nodeType":"YulIf","src":"4826:52:40"},{"nativeSrc":"4887:33:40","nodeType":"YulAssignment","src":"4887:33:40","value":{"arguments":[{"name":"headStart","nativeSrc":"4910:9:40","nodeType":"YulIdentifier","src":"4910:9:40"}],"functionName":{"name":"calldataload","nativeSrc":"4897:12:40","nodeType":"YulIdentifier","src":"4897:12:40"},"nativeSrc":"4897:23:40","nodeType":"YulFunctionCall","src":"4897:23:40"},"variableNames":[{"name":"value0","nativeSrc":"4887:6:40","nodeType":"YulIdentifier","src":"4887:6:40"}]},{"nativeSrc":"4929:46:40","nodeType":"YulVariableDeclaration","src":"4929:46:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4960:9:40","nodeType":"YulIdentifier","src":"4960:9:40"},{"kind":"number","nativeSrc":"4971:2:40","nodeType":"YulLiteral","src":"4971:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4956:3:40","nodeType":"YulIdentifier","src":"4956:3:40"},"nativeSrc":"4956:18:40","nodeType":"YulFunctionCall","src":"4956:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"4943:12:40","nodeType":"YulIdentifier","src":"4943:12:40"},"nativeSrc":"4943:32:40","nodeType":"YulFunctionCall","src":"4943:32:40"},"variables":[{"name":"offset","nativeSrc":"4933:6:40","nodeType":"YulTypedName","src":"4933:6:40","type":""}]},{"body":{"nativeSrc":"5018:16:40","nodeType":"YulBlock","src":"5018:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5027:1:40","nodeType":"YulLiteral","src":"5027:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"5030:1:40","nodeType":"YulLiteral","src":"5030:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5020:6:40","nodeType":"YulIdentifier","src":"5020:6:40"},"nativeSrc":"5020:12:40","nodeType":"YulFunctionCall","src":"5020:12:40"},"nativeSrc":"5020:12:40","nodeType":"YulExpressionStatement","src":"5020:12:40"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4990:6:40","nodeType":"YulIdentifier","src":"4990:6:40"},{"kind":"number","nativeSrc":"4998:18:40","nodeType":"YulLiteral","src":"4998:18:40","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4987:2:40","nodeType":"YulIdentifier","src":"4987:2:40"},"nativeSrc":"4987:30:40","nodeType":"YulFunctionCall","src":"4987:30:40"},"nativeSrc":"4984:50:40","nodeType":"YulIf","src":"4984:50:40"},{"nativeSrc":"5043:84:40","nodeType":"YulVariableDeclaration","src":"5043:84:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5099:9:40","nodeType":"YulIdentifier","src":"5099:9:40"},{"name":"offset","nativeSrc":"5110:6:40","nodeType":"YulIdentifier","src":"5110:6:40"}],"functionName":{"name":"add","nativeSrc":"5095:3:40","nodeType":"YulIdentifier","src":"5095:3:40"},"nativeSrc":"5095:22:40","nodeType":"YulFunctionCall","src":"5095:22:40"},{"name":"dataEnd","nativeSrc":"5119:7:40","nodeType":"YulIdentifier","src":"5119:7:40"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"5069:25:40","nodeType":"YulIdentifier","src":"5069:25:40"},"nativeSrc":"5069:58:40","nodeType":"YulFunctionCall","src":"5069:58:40"},"variables":[{"name":"value1_1","nativeSrc":"5047:8:40","nodeType":"YulTypedName","src":"5047:8:40","type":""},{"name":"value2_1","nativeSrc":"5057:8:40","nodeType":"YulTypedName","src":"5057:8:40","type":""}]},{"nativeSrc":"5136:18:40","nodeType":"YulAssignment","src":"5136:18:40","value":{"name":"value1_1","nativeSrc":"5146:8:40","nodeType":"YulIdentifier","src":"5146:8:40"},"variableNames":[{"name":"value1","nativeSrc":"5136:6:40","nodeType":"YulIdentifier","src":"5136:6:40"}]},{"nativeSrc":"5163:18:40","nodeType":"YulAssignment","src":"5163:18:40","value":{"name":"value2_1","nativeSrc":"5173:8:40","nodeType":"YulIdentifier","src":"5173:8:40"},"variableNames":[{"name":"value2","nativeSrc":"5163:6:40","nodeType":"YulIdentifier","src":"5163:6:40"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes_calldata_ptr","nativeSrc":"4710:477:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4766:9:40","nodeType":"YulTypedName","src":"4766:9:40","type":""},{"name":"dataEnd","nativeSrc":"4777:7:40","nodeType":"YulTypedName","src":"4777:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4789:6:40","nodeType":"YulTypedName","src":"4789:6:40","type":""},{"name":"value1","nativeSrc":"4797:6:40","nodeType":"YulTypedName","src":"4797:6:40","type":""},{"name":"value2","nativeSrc":"4805:6:40","nodeType":"YulTypedName","src":"4805:6:40","type":""}],"src":"4710:477:40"},{"body":{"nativeSrc":"5297:434:40","nodeType":"YulBlock","src":"5297:434:40","statements":[{"body":{"nativeSrc":"5343:16:40","nodeType":"YulBlock","src":"5343:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5352:1:40","nodeType":"YulLiteral","src":"5352:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"5355:1:40","nodeType":"YulLiteral","src":"5355:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5345:6:40","nodeType":"YulIdentifier","src":"5345:6:40"},"nativeSrc":"5345:12:40","nodeType":"YulFunctionCall","src":"5345:12:40"},"nativeSrc":"5345:12:40","nodeType":"YulExpressionStatement","src":"5345:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5318:7:40","nodeType":"YulIdentifier","src":"5318:7:40"},{"name":"headStart","nativeSrc":"5327:9:40","nodeType":"YulIdentifier","src":"5327:9:40"}],"functionName":{"name":"sub","nativeSrc":"5314:3:40","nodeType":"YulIdentifier","src":"5314:3:40"},"nativeSrc":"5314:23:40","nodeType":"YulFunctionCall","src":"5314:23:40"},{"kind":"number","nativeSrc":"5339:2:40","nodeType":"YulLiteral","src":"5339:2:40","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"5310:3:40","nodeType":"YulIdentifier","src":"5310:3:40"},"nativeSrc":"5310:32:40","nodeType":"YulFunctionCall","src":"5310:32:40"},"nativeSrc":"5307:52:40","nodeType":"YulIf","src":"5307:52:40"},{"nativeSrc":"5368:37:40","nodeType":"YulVariableDeclaration","src":"5368:37:40","value":{"arguments":[{"name":"headStart","nativeSrc":"5395:9:40","nodeType":"YulIdentifier","src":"5395:9:40"}],"functionName":{"name":"calldataload","nativeSrc":"5382:12:40","nodeType":"YulIdentifier","src":"5382:12:40"},"nativeSrc":"5382:23:40","nodeType":"YulFunctionCall","src":"5382:23:40"},"variables":[{"name":"offset","nativeSrc":"5372:6:40","nodeType":"YulTypedName","src":"5372:6:40","type":""}]},{"nativeSrc":"5414:28:40","nodeType":"YulVariableDeclaration","src":"5414:28:40","value":{"kind":"number","nativeSrc":"5424:18:40","nodeType":"YulLiteral","src":"5424:18:40","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"5418:2:40","nodeType":"YulTypedName","src":"5418:2:40","type":""}]},{"body":{"nativeSrc":"5469:16:40","nodeType":"YulBlock","src":"5469:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5478:1:40","nodeType":"YulLiteral","src":"5478:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"5481:1:40","nodeType":"YulLiteral","src":"5481:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5471:6:40","nodeType":"YulIdentifier","src":"5471:6:40"},"nativeSrc":"5471:12:40","nodeType":"YulFunctionCall","src":"5471:12:40"},"nativeSrc":"5471:12:40","nodeType":"YulExpressionStatement","src":"5471:12:40"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"5457:6:40","nodeType":"YulIdentifier","src":"5457:6:40"},{"name":"_1","nativeSrc":"5465:2:40","nodeType":"YulIdentifier","src":"5465:2:40"}],"functionName":{"name":"gt","nativeSrc":"5454:2:40","nodeType":"YulIdentifier","src":"5454:2:40"},"nativeSrc":"5454:14:40","nodeType":"YulFunctionCall","src":"5454:14:40"},"nativeSrc":"5451:34:40","nodeType":"YulIf","src":"5451:34:40"},{"nativeSrc":"5494:59:40","nodeType":"YulAssignment","src":"5494:59:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5525:9:40","nodeType":"YulIdentifier","src":"5525:9:40"},{"name":"offset","nativeSrc":"5536:6:40","nodeType":"YulIdentifier","src":"5536:6:40"}],"functionName":{"name":"add","nativeSrc":"5521:3:40","nodeType":"YulIdentifier","src":"5521:3:40"},"nativeSrc":"5521:22:40","nodeType":"YulFunctionCall","src":"5521:22:40"},{"name":"dataEnd","nativeSrc":"5545:7:40","nodeType":"YulIdentifier","src":"5545:7:40"}],"functionName":{"name":"abi_decode_bytes","nativeSrc":"5504:16:40","nodeType":"YulIdentifier","src":"5504:16:40"},"nativeSrc":"5504:49:40","nodeType":"YulFunctionCall","src":"5504:49:40"},"variableNames":[{"name":"value0","nativeSrc":"5494:6:40","nodeType":"YulIdentifier","src":"5494:6:40"}]},{"nativeSrc":"5562:48:40","nodeType":"YulVariableDeclaration","src":"5562:48:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5595:9:40","nodeType":"YulIdentifier","src":"5595:9:40"},{"kind":"number","nativeSrc":"5606:2:40","nodeType":"YulLiteral","src":"5606:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5591:3:40","nodeType":"YulIdentifier","src":"5591:3:40"},"nativeSrc":"5591:18:40","nodeType":"YulFunctionCall","src":"5591:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"5578:12:40","nodeType":"YulIdentifier","src":"5578:12:40"},"nativeSrc":"5578:32:40","nodeType":"YulFunctionCall","src":"5578:32:40"},"variables":[{"name":"offset_1","nativeSrc":"5566:8:40","nodeType":"YulTypedName","src":"5566:8:40","type":""}]},{"body":{"nativeSrc":"5639:16:40","nodeType":"YulBlock","src":"5639:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5648:1:40","nodeType":"YulLiteral","src":"5648:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"5651:1:40","nodeType":"YulLiteral","src":"5651:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5641:6:40","nodeType":"YulIdentifier","src":"5641:6:40"},"nativeSrc":"5641:12:40","nodeType":"YulFunctionCall","src":"5641:12:40"},"nativeSrc":"5641:12:40","nodeType":"YulExpressionStatement","src":"5641:12:40"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"5625:8:40","nodeType":"YulIdentifier","src":"5625:8:40"},{"name":"_1","nativeSrc":"5635:2:40","nodeType":"YulIdentifier","src":"5635:2:40"}],"functionName":{"name":"gt","nativeSrc":"5622:2:40","nodeType":"YulIdentifier","src":"5622:2:40"},"nativeSrc":"5622:16:40","nodeType":"YulFunctionCall","src":"5622:16:40"},"nativeSrc":"5619:36:40","nodeType":"YulIf","src":"5619:36:40"},{"nativeSrc":"5664:61:40","nodeType":"YulAssignment","src":"5664:61:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5695:9:40","nodeType":"YulIdentifier","src":"5695:9:40"},{"name":"offset_1","nativeSrc":"5706:8:40","nodeType":"YulIdentifier","src":"5706:8:40"}],"functionName":{"name":"add","nativeSrc":"5691:3:40","nodeType":"YulIdentifier","src":"5691:3:40"},"nativeSrc":"5691:24:40","nodeType":"YulFunctionCall","src":"5691:24:40"},{"name":"dataEnd","nativeSrc":"5717:7:40","nodeType":"YulIdentifier","src":"5717:7:40"}],"functionName":{"name":"abi_decode_bytes","nativeSrc":"5674:16:40","nodeType":"YulIdentifier","src":"5674:16:40"},"nativeSrc":"5674:51:40","nodeType":"YulFunctionCall","src":"5674:51:40"},"variableNames":[{"name":"value1","nativeSrc":"5664:6:40","nodeType":"YulIdentifier","src":"5664:6:40"}]}]},"name":"abi_decode_tuple_t_bytes_memory_ptrt_bytes_memory_ptr","nativeSrc":"5192:539:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5255:9:40","nodeType":"YulTypedName","src":"5255:9:40","type":""},{"name":"dataEnd","nativeSrc":"5266:7:40","nodeType":"YulTypedName","src":"5266:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5278:6:40","nodeType":"YulTypedName","src":"5278:6:40","type":""},{"name":"value1","nativeSrc":"5286:6:40","nodeType":"YulTypedName","src":"5286:6:40","type":""}],"src":"5192:539:40"},{"body":{"nativeSrc":"5845:359:40","nodeType":"YulBlock","src":"5845:359:40","statements":[{"body":{"nativeSrc":"5891:16:40","nodeType":"YulBlock","src":"5891:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5900:1:40","nodeType":"YulLiteral","src":"5900:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"5903:1:40","nodeType":"YulLiteral","src":"5903:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5893:6:40","nodeType":"YulIdentifier","src":"5893:6:40"},"nativeSrc":"5893:12:40","nodeType":"YulFunctionCall","src":"5893:12:40"},"nativeSrc":"5893:12:40","nodeType":"YulExpressionStatement","src":"5893:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5866:7:40","nodeType":"YulIdentifier","src":"5866:7:40"},{"name":"headStart","nativeSrc":"5875:9:40","nodeType":"YulIdentifier","src":"5875:9:40"}],"functionName":{"name":"sub","nativeSrc":"5862:3:40","nodeType":"YulIdentifier","src":"5862:3:40"},"nativeSrc":"5862:23:40","nodeType":"YulFunctionCall","src":"5862:23:40"},{"kind":"number","nativeSrc":"5887:2:40","nodeType":"YulLiteral","src":"5887:2:40","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"5858:3:40","nodeType":"YulIdentifier","src":"5858:3:40"},"nativeSrc":"5858:32:40","nodeType":"YulFunctionCall","src":"5858:32:40"},"nativeSrc":"5855:52:40","nodeType":"YulIf","src":"5855:52:40"},{"nativeSrc":"5916:36:40","nodeType":"YulVariableDeclaration","src":"5916:36:40","value":{"arguments":[{"name":"headStart","nativeSrc":"5942:9:40","nodeType":"YulIdentifier","src":"5942:9:40"}],"functionName":{"name":"calldataload","nativeSrc":"5929:12:40","nodeType":"YulIdentifier","src":"5929:12:40"},"nativeSrc":"5929:23:40","nodeType":"YulFunctionCall","src":"5929:23:40"},"variables":[{"name":"value","nativeSrc":"5920:5:40","nodeType":"YulTypedName","src":"5920:5:40","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"5986:5:40","nodeType":"YulIdentifier","src":"5986:5:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"5961:24:40","nodeType":"YulIdentifier","src":"5961:24:40"},"nativeSrc":"5961:31:40","nodeType":"YulFunctionCall","src":"5961:31:40"},"nativeSrc":"5961:31:40","nodeType":"YulExpressionStatement","src":"5961:31:40"},{"nativeSrc":"6001:15:40","nodeType":"YulAssignment","src":"6001:15:40","value":{"name":"value","nativeSrc":"6011:5:40","nodeType":"YulIdentifier","src":"6011:5:40"},"variableNames":[{"name":"value0","nativeSrc":"6001:6:40","nodeType":"YulIdentifier","src":"6001:6:40"}]},{"nativeSrc":"6025:46:40","nodeType":"YulVariableDeclaration","src":"6025:46:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6056:9:40","nodeType":"YulIdentifier","src":"6056:9:40"},{"kind":"number","nativeSrc":"6067:2:40","nodeType":"YulLiteral","src":"6067:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6052:3:40","nodeType":"YulIdentifier","src":"6052:3:40"},"nativeSrc":"6052:18:40","nodeType":"YulFunctionCall","src":"6052:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"6039:12:40","nodeType":"YulIdentifier","src":"6039:12:40"},"nativeSrc":"6039:32:40","nodeType":"YulFunctionCall","src":"6039:32:40"},"variables":[{"name":"offset","nativeSrc":"6029:6:40","nodeType":"YulTypedName","src":"6029:6:40","type":""}]},{"body":{"nativeSrc":"6114:16:40","nodeType":"YulBlock","src":"6114:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6123:1:40","nodeType":"YulLiteral","src":"6123:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"6126:1:40","nodeType":"YulLiteral","src":"6126:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6116:6:40","nodeType":"YulIdentifier","src":"6116:6:40"},"nativeSrc":"6116:12:40","nodeType":"YulFunctionCall","src":"6116:12:40"},"nativeSrc":"6116:12:40","nodeType":"YulExpressionStatement","src":"6116:12:40"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"6086:6:40","nodeType":"YulIdentifier","src":"6086:6:40"},{"kind":"number","nativeSrc":"6094:18:40","nodeType":"YulLiteral","src":"6094:18:40","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"6083:2:40","nodeType":"YulIdentifier","src":"6083:2:40"},"nativeSrc":"6083:30:40","nodeType":"YulFunctionCall","src":"6083:30:40"},"nativeSrc":"6080:50:40","nodeType":"YulIf","src":"6080:50:40"},{"nativeSrc":"6139:59:40","nodeType":"YulAssignment","src":"6139:59:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6170:9:40","nodeType":"YulIdentifier","src":"6170:9:40"},{"name":"offset","nativeSrc":"6181:6:40","nodeType":"YulIdentifier","src":"6181:6:40"}],"functionName":{"name":"add","nativeSrc":"6166:3:40","nodeType":"YulIdentifier","src":"6166:3:40"},"nativeSrc":"6166:22:40","nodeType":"YulFunctionCall","src":"6166:22:40"},{"name":"dataEnd","nativeSrc":"6190:7:40","nodeType":"YulIdentifier","src":"6190:7:40"}],"functionName":{"name":"abi_decode_bytes","nativeSrc":"6149:16:40","nodeType":"YulIdentifier","src":"6149:16:40"},"nativeSrc":"6149:49:40","nodeType":"YulFunctionCall","src":"6149:49:40"},"variableNames":[{"name":"value1","nativeSrc":"6139:6:40","nodeType":"YulIdentifier","src":"6139:6:40"}]}]},"name":"abi_decode_tuple_t_contract$_Safe_$1853t_bytes_memory_ptr","nativeSrc":"5736:468:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5803:9:40","nodeType":"YulTypedName","src":"5803:9:40","type":""},{"name":"dataEnd","nativeSrc":"5814:7:40","nodeType":"YulTypedName","src":"5814:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5826:6:40","nodeType":"YulTypedName","src":"5826:6:40","type":""},{"name":"value1","nativeSrc":"5834:6:40","nodeType":"YulTypedName","src":"5834:6:40","type":""}],"src":"5736:468:40"},{"body":{"nativeSrc":"6258:373:40","nodeType":"YulBlock","src":"6258:373:40","statements":[{"nativeSrc":"6268:26:40","nodeType":"YulVariableDeclaration","src":"6268:26:40","value":{"arguments":[{"name":"value","nativeSrc":"6288:5:40","nodeType":"YulIdentifier","src":"6288:5:40"}],"functionName":{"name":"mload","nativeSrc":"6282:5:40","nodeType":"YulIdentifier","src":"6282:5:40"},"nativeSrc":"6282:12:40","nodeType":"YulFunctionCall","src":"6282:12:40"},"variables":[{"name":"length","nativeSrc":"6272:6:40","nodeType":"YulTypedName","src":"6272:6:40","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"6310:3:40","nodeType":"YulIdentifier","src":"6310:3:40"},{"name":"length","nativeSrc":"6315:6:40","nodeType":"YulIdentifier","src":"6315:6:40"}],"functionName":{"name":"mstore","nativeSrc":"6303:6:40","nodeType":"YulIdentifier","src":"6303:6:40"},"nativeSrc":"6303:19:40","nodeType":"YulFunctionCall","src":"6303:19:40"},"nativeSrc":"6303:19:40","nodeType":"YulExpressionStatement","src":"6303:19:40"},{"nativeSrc":"6331:10:40","nodeType":"YulVariableDeclaration","src":"6331:10:40","value":{"kind":"number","nativeSrc":"6340:1:40","nodeType":"YulLiteral","src":"6340:1:40","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"6335:1:40","nodeType":"YulTypedName","src":"6335:1:40","type":""}]},{"body":{"nativeSrc":"6402:110:40","nodeType":"YulBlock","src":"6402:110:40","statements":[{"nativeSrc":"6416:14:40","nodeType":"YulVariableDeclaration","src":"6416:14:40","value":{"kind":"number","nativeSrc":"6426:4:40","nodeType":"YulLiteral","src":"6426:4:40","type":"","value":"0x20"},"variables":[{"name":"_1","nativeSrc":"6420:2:40","nodeType":"YulTypedName","src":"6420:2:40","type":""}]},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"6458:3:40","nodeType":"YulIdentifier","src":"6458:3:40"},{"name":"i","nativeSrc":"6463:1:40","nodeType":"YulIdentifier","src":"6463:1:40"}],"functionName":{"name":"add","nativeSrc":"6454:3:40","nodeType":"YulIdentifier","src":"6454:3:40"},"nativeSrc":"6454:11:40","nodeType":"YulFunctionCall","src":"6454:11:40"},{"name":"_1","nativeSrc":"6467:2:40","nodeType":"YulIdentifier","src":"6467:2:40"}],"functionName":{"name":"add","nativeSrc":"6450:3:40","nodeType":"YulIdentifier","src":"6450:3:40"},"nativeSrc":"6450:20:40","nodeType":"YulFunctionCall","src":"6450:20:40"},{"arguments":[{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6486:5:40","nodeType":"YulIdentifier","src":"6486:5:40"},{"name":"i","nativeSrc":"6493:1:40","nodeType":"YulIdentifier","src":"6493:1:40"}],"functionName":{"name":"add","nativeSrc":"6482:3:40","nodeType":"YulIdentifier","src":"6482:3:40"},"nativeSrc":"6482:13:40","nodeType":"YulFunctionCall","src":"6482:13:40"},{"name":"_1","nativeSrc":"6497:2:40","nodeType":"YulIdentifier","src":"6497:2:40"}],"functionName":{"name":"add","nativeSrc":"6478:3:40","nodeType":"YulIdentifier","src":"6478:3:40"},"nativeSrc":"6478:22:40","nodeType":"YulFunctionCall","src":"6478:22:40"}],"functionName":{"name":"mload","nativeSrc":"6472:5:40","nodeType":"YulIdentifier","src":"6472:5:40"},"nativeSrc":"6472:29:40","nodeType":"YulFunctionCall","src":"6472:29:40"}],"functionName":{"name":"mstore","nativeSrc":"6443:6:40","nodeType":"YulIdentifier","src":"6443:6:40"},"nativeSrc":"6443:59:40","nodeType":"YulFunctionCall","src":"6443:59:40"},"nativeSrc":"6443:59:40","nodeType":"YulExpressionStatement","src":"6443:59:40"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"6361:1:40","nodeType":"YulIdentifier","src":"6361:1:40"},{"name":"length","nativeSrc":"6364:6:40","nodeType":"YulIdentifier","src":"6364:6:40"}],"functionName":{"name":"lt","nativeSrc":"6358:2:40","nodeType":"YulIdentifier","src":"6358:2:40"},"nativeSrc":"6358:13:40","nodeType":"YulFunctionCall","src":"6358:13:40"},"nativeSrc":"6350:162:40","nodeType":"YulForLoop","post":{"nativeSrc":"6372:21:40","nodeType":"YulBlock","src":"6372:21:40","statements":[{"nativeSrc":"6374:17:40","nodeType":"YulAssignment","src":"6374:17:40","value":{"arguments":[{"name":"i","nativeSrc":"6383:1:40","nodeType":"YulIdentifier","src":"6383:1:40"},{"kind":"number","nativeSrc":"6386:4:40","nodeType":"YulLiteral","src":"6386:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6379:3:40","nodeType":"YulIdentifier","src":"6379:3:40"},"nativeSrc":"6379:12:40","nodeType":"YulFunctionCall","src":"6379:12:40"},"variableNames":[{"name":"i","nativeSrc":"6374:1:40","nodeType":"YulIdentifier","src":"6374:1:40"}]}]},"pre":{"nativeSrc":"6354:3:40","nodeType":"YulBlock","src":"6354:3:40","statements":[]},"src":"6350:162:40"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"6536:3:40","nodeType":"YulIdentifier","src":"6536:3:40"},{"name":"length","nativeSrc":"6541:6:40","nodeType":"YulIdentifier","src":"6541:6:40"}],"functionName":{"name":"add","nativeSrc":"6532:3:40","nodeType":"YulIdentifier","src":"6532:3:40"},"nativeSrc":"6532:16:40","nodeType":"YulFunctionCall","src":"6532:16:40"},{"kind":"number","nativeSrc":"6550:4:40","nodeType":"YulLiteral","src":"6550:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6528:3:40","nodeType":"YulIdentifier","src":"6528:3:40"},"nativeSrc":"6528:27:40","nodeType":"YulFunctionCall","src":"6528:27:40"},{"kind":"number","nativeSrc":"6557:1:40","nodeType":"YulLiteral","src":"6557:1:40","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"6521:6:40","nodeType":"YulIdentifier","src":"6521:6:40"},"nativeSrc":"6521:38:40","nodeType":"YulFunctionCall","src":"6521:38:40"},"nativeSrc":"6521:38:40","nodeType":"YulExpressionStatement","src":"6521:38:40"},{"nativeSrc":"6568:57:40","nodeType":"YulAssignment","src":"6568:57:40","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"6583:3:40","nodeType":"YulIdentifier","src":"6583:3:40"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"6596:6:40","nodeType":"YulIdentifier","src":"6596:6:40"},{"kind":"number","nativeSrc":"6604:2:40","nodeType":"YulLiteral","src":"6604:2:40","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"6592:3:40","nodeType":"YulIdentifier","src":"6592:3:40"},"nativeSrc":"6592:15:40","nodeType":"YulFunctionCall","src":"6592:15:40"},{"arguments":[{"kind":"number","nativeSrc":"6613:2:40","nodeType":"YulLiteral","src":"6613:2:40","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"6609:3:40","nodeType":"YulIdentifier","src":"6609:3:40"},"nativeSrc":"6609:7:40","nodeType":"YulFunctionCall","src":"6609:7:40"}],"functionName":{"name":"and","nativeSrc":"6588:3:40","nodeType":"YulIdentifier","src":"6588:3:40"},"nativeSrc":"6588:29:40","nodeType":"YulFunctionCall","src":"6588:29:40"}],"functionName":{"name":"add","nativeSrc":"6579:3:40","nodeType":"YulIdentifier","src":"6579:3:40"},"nativeSrc":"6579:39:40","nodeType":"YulFunctionCall","src":"6579:39:40"},{"kind":"number","nativeSrc":"6620:4:40","nodeType":"YulLiteral","src":"6620:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6575:3:40","nodeType":"YulIdentifier","src":"6575:3:40"},"nativeSrc":"6575:50:40","nodeType":"YulFunctionCall","src":"6575:50:40"},"variableNames":[{"name":"end","nativeSrc":"6568:3:40","nodeType":"YulIdentifier","src":"6568:3:40"}]}]},"name":"abi_encode_bytes","nativeSrc":"6209:422:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"6235:5:40","nodeType":"YulTypedName","src":"6235:5:40","type":""},{"name":"pos","nativeSrc":"6242:3:40","nodeType":"YulTypedName","src":"6242:3:40","type":""}],"returnVariables":[{"name":"end","nativeSrc":"6250:3:40","nodeType":"YulTypedName","src":"6250:3:40","type":""}],"src":"6209:422:40"},{"body":{"nativeSrc":"6755:98:40","nodeType":"YulBlock","src":"6755:98:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6772:9:40","nodeType":"YulIdentifier","src":"6772:9:40"},{"kind":"number","nativeSrc":"6783:2:40","nodeType":"YulLiteral","src":"6783:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"6765:6:40","nodeType":"YulIdentifier","src":"6765:6:40"},"nativeSrc":"6765:21:40","nodeType":"YulFunctionCall","src":"6765:21:40"},"nativeSrc":"6765:21:40","nodeType":"YulExpressionStatement","src":"6765:21:40"},{"nativeSrc":"6795:52:40","nodeType":"YulAssignment","src":"6795:52:40","value":{"arguments":[{"name":"value0","nativeSrc":"6820:6:40","nodeType":"YulIdentifier","src":"6820:6:40"},{"arguments":[{"name":"headStart","nativeSrc":"6832:9:40","nodeType":"YulIdentifier","src":"6832:9:40"},{"kind":"number","nativeSrc":"6843:2:40","nodeType":"YulLiteral","src":"6843:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6828:3:40","nodeType":"YulIdentifier","src":"6828:3:40"},"nativeSrc":"6828:18:40","nodeType":"YulFunctionCall","src":"6828:18:40"}],"functionName":{"name":"abi_encode_bytes","nativeSrc":"6803:16:40","nodeType":"YulIdentifier","src":"6803:16:40"},"nativeSrc":"6803:44:40","nodeType":"YulFunctionCall","src":"6803:44:40"},"variableNames":[{"name":"tail","nativeSrc":"6795:4:40","nodeType":"YulIdentifier","src":"6795:4:40"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"6636:217:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6724:9:40","nodeType":"YulTypedName","src":"6724:9:40","type":""},{"name":"value0","nativeSrc":"6735:6:40","nodeType":"YulTypedName","src":"6735:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6746:4:40","nodeType":"YulTypedName","src":"6746:4:40","type":""}],"src":"6636:217:40"},{"body":{"nativeSrc":"7009:507:40","nodeType":"YulBlock","src":"7009:507:40","statements":[{"nativeSrc":"7019:12:40","nodeType":"YulVariableDeclaration","src":"7019:12:40","value":{"kind":"number","nativeSrc":"7029:2:40","nodeType":"YulLiteral","src":"7029:2:40","type":"","value":"32"},"variables":[{"name":"_1","nativeSrc":"7023:2:40","nodeType":"YulTypedName","src":"7023:2:40","type":""}]},{"nativeSrc":"7040:32:40","nodeType":"YulVariableDeclaration","src":"7040:32:40","value":{"arguments":[{"name":"headStart","nativeSrc":"7058:9:40","nodeType":"YulIdentifier","src":"7058:9:40"},{"kind":"number","nativeSrc":"7069:2:40","nodeType":"YulLiteral","src":"7069:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7054:3:40","nodeType":"YulIdentifier","src":"7054:3:40"},"nativeSrc":"7054:18:40","nodeType":"YulFunctionCall","src":"7054:18:40"},"variables":[{"name":"tail_1","nativeSrc":"7044:6:40","nodeType":"YulTypedName","src":"7044:6:40","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7088:9:40","nodeType":"YulIdentifier","src":"7088:9:40"},{"kind":"number","nativeSrc":"7099:2:40","nodeType":"YulLiteral","src":"7099:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"7081:6:40","nodeType":"YulIdentifier","src":"7081:6:40"},"nativeSrc":"7081:21:40","nodeType":"YulFunctionCall","src":"7081:21:40"},"nativeSrc":"7081:21:40","nodeType":"YulExpressionStatement","src":"7081:21:40"},{"nativeSrc":"7111:17:40","nodeType":"YulVariableDeclaration","src":"7111:17:40","value":{"name":"tail_1","nativeSrc":"7122:6:40","nodeType":"YulIdentifier","src":"7122:6:40"},"variables":[{"name":"pos","nativeSrc":"7115:3:40","nodeType":"YulTypedName","src":"7115:3:40","type":""}]},{"nativeSrc":"7137:27:40","nodeType":"YulVariableDeclaration","src":"7137:27:40","value":{"arguments":[{"name":"value0","nativeSrc":"7157:6:40","nodeType":"YulIdentifier","src":"7157:6:40"}],"functionName":{"name":"mload","nativeSrc":"7151:5:40","nodeType":"YulIdentifier","src":"7151:5:40"},"nativeSrc":"7151:13:40","nodeType":"YulFunctionCall","src":"7151:13:40"},"variables":[{"name":"length","nativeSrc":"7141:6:40","nodeType":"YulTypedName","src":"7141:6:40","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nativeSrc":"7180:6:40","nodeType":"YulIdentifier","src":"7180:6:40"},{"name":"length","nativeSrc":"7188:6:40","nodeType":"YulIdentifier","src":"7188:6:40"}],"functionName":{"name":"mstore","nativeSrc":"7173:6:40","nodeType":"YulIdentifier","src":"7173:6:40"},"nativeSrc":"7173:22:40","nodeType":"YulFunctionCall","src":"7173:22:40"},"nativeSrc":"7173:22:40","nodeType":"YulExpressionStatement","src":"7173:22:40"},{"nativeSrc":"7204:25:40","nodeType":"YulAssignment","src":"7204:25:40","value":{"arguments":[{"name":"headStart","nativeSrc":"7215:9:40","nodeType":"YulIdentifier","src":"7215:9:40"},{"kind":"number","nativeSrc":"7226:2:40","nodeType":"YulLiteral","src":"7226:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7211:3:40","nodeType":"YulIdentifier","src":"7211:3:40"},"nativeSrc":"7211:18:40","nodeType":"YulFunctionCall","src":"7211:18:40"},"variableNames":[{"name":"pos","nativeSrc":"7204:3:40","nodeType":"YulIdentifier","src":"7204:3:40"}]},{"nativeSrc":"7238:29:40","nodeType":"YulVariableDeclaration","src":"7238:29:40","value":{"arguments":[{"name":"value0","nativeSrc":"7256:6:40","nodeType":"YulIdentifier","src":"7256:6:40"},{"kind":"number","nativeSrc":"7264:2:40","nodeType":"YulLiteral","src":"7264:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7252:3:40","nodeType":"YulIdentifier","src":"7252:3:40"},"nativeSrc":"7252:15:40","nodeType":"YulFunctionCall","src":"7252:15:40"},"variables":[{"name":"srcPtr","nativeSrc":"7242:6:40","nodeType":"YulTypedName","src":"7242:6:40","type":""}]},{"nativeSrc":"7276:10:40","nodeType":"YulVariableDeclaration","src":"7276:10:40","value":{"kind":"number","nativeSrc":"7285:1:40","nodeType":"YulLiteral","src":"7285:1:40","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"7280:1:40","nodeType":"YulTypedName","src":"7280:1:40","type":""}]},{"body":{"nativeSrc":"7344:146:40","nodeType":"YulBlock","src":"7344:146:40","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"7365:3:40","nodeType":"YulIdentifier","src":"7365:3:40"},{"arguments":[{"arguments":[{"name":"srcPtr","nativeSrc":"7380:6:40","nodeType":"YulIdentifier","src":"7380:6:40"}],"functionName":{"name":"mload","nativeSrc":"7374:5:40","nodeType":"YulIdentifier","src":"7374:5:40"},"nativeSrc":"7374:13:40","nodeType":"YulFunctionCall","src":"7374:13:40"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"7397:3:40","nodeType":"YulLiteral","src":"7397:3:40","type":"","value":"160"},{"kind":"number","nativeSrc":"7402:1:40","nodeType":"YulLiteral","src":"7402:1:40","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"7393:3:40","nodeType":"YulIdentifier","src":"7393:3:40"},"nativeSrc":"7393:11:40","nodeType":"YulFunctionCall","src":"7393:11:40"},{"kind":"number","nativeSrc":"7406:1:40","nodeType":"YulLiteral","src":"7406:1:40","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"7389:3:40","nodeType":"YulIdentifier","src":"7389:3:40"},"nativeSrc":"7389:19:40","nodeType":"YulFunctionCall","src":"7389:19:40"}],"functionName":{"name":"and","nativeSrc":"7370:3:40","nodeType":"YulIdentifier","src":"7370:3:40"},"nativeSrc":"7370:39:40","nodeType":"YulFunctionCall","src":"7370:39:40"}],"functionName":{"name":"mstore","nativeSrc":"7358:6:40","nodeType":"YulIdentifier","src":"7358:6:40"},"nativeSrc":"7358:52:40","nodeType":"YulFunctionCall","src":"7358:52:40"},"nativeSrc":"7358:52:40","nodeType":"YulExpressionStatement","src":"7358:52:40"},{"nativeSrc":"7423:19:40","nodeType":"YulAssignment","src":"7423:19:40","value":{"arguments":[{"name":"pos","nativeSrc":"7434:3:40","nodeType":"YulIdentifier","src":"7434:3:40"},{"name":"_1","nativeSrc":"7439:2:40","nodeType":"YulIdentifier","src":"7439:2:40"}],"functionName":{"name":"add","nativeSrc":"7430:3:40","nodeType":"YulIdentifier","src":"7430:3:40"},"nativeSrc":"7430:12:40","nodeType":"YulFunctionCall","src":"7430:12:40"},"variableNames":[{"name":"pos","nativeSrc":"7423:3:40","nodeType":"YulIdentifier","src":"7423:3:40"}]},{"nativeSrc":"7455:25:40","nodeType":"YulAssignment","src":"7455:25:40","value":{"arguments":[{"name":"srcPtr","nativeSrc":"7469:6:40","nodeType":"YulIdentifier","src":"7469:6:40"},{"name":"_1","nativeSrc":"7477:2:40","nodeType":"YulIdentifier","src":"7477:2:40"}],"functionName":{"name":"add","nativeSrc":"7465:3:40","nodeType":"YulIdentifier","src":"7465:3:40"},"nativeSrc":"7465:15:40","nodeType":"YulFunctionCall","src":"7465:15:40"},"variableNames":[{"name":"srcPtr","nativeSrc":"7455:6:40","nodeType":"YulIdentifier","src":"7455:6:40"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"7306:1:40","nodeType":"YulIdentifier","src":"7306:1:40"},{"name":"length","nativeSrc":"7309:6:40","nodeType":"YulIdentifier","src":"7309:6:40"}],"functionName":{"name":"lt","nativeSrc":"7303:2:40","nodeType":"YulIdentifier","src":"7303:2:40"},"nativeSrc":"7303:13:40","nodeType":"YulFunctionCall","src":"7303:13:40"},"nativeSrc":"7295:195:40","nodeType":"YulForLoop","post":{"nativeSrc":"7317:18:40","nodeType":"YulBlock","src":"7317:18:40","statements":[{"nativeSrc":"7319:14:40","nodeType":"YulAssignment","src":"7319:14:40","value":{"arguments":[{"name":"i","nativeSrc":"7328:1:40","nodeType":"YulIdentifier","src":"7328:1:40"},{"kind":"number","nativeSrc":"7331:1:40","nodeType":"YulLiteral","src":"7331:1:40","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"7324:3:40","nodeType":"YulIdentifier","src":"7324:3:40"},"nativeSrc":"7324:9:40","nodeType":"YulFunctionCall","src":"7324:9:40"},"variableNames":[{"name":"i","nativeSrc":"7319:1:40","nodeType":"YulIdentifier","src":"7319:1:40"}]}]},"pre":{"nativeSrc":"7299:3:40","nodeType":"YulBlock","src":"7299:3:40","statements":[]},"src":"7295:195:40"},{"nativeSrc":"7499:11:40","nodeType":"YulAssignment","src":"7499:11:40","value":{"name":"pos","nativeSrc":"7507:3:40","nodeType":"YulIdentifier","src":"7507:3:40"},"variableNames":[{"name":"tail","nativeSrc":"7499:4:40","nodeType":"YulIdentifier","src":"7499:4:40"}]}]},"name":"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"6858:658:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6978:9:40","nodeType":"YulTypedName","src":"6978:9:40","type":""},{"name":"value0","nativeSrc":"6989:6:40","nodeType":"YulTypedName","src":"6989:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7000:4:40","nodeType":"YulTypedName","src":"7000:4:40","type":""}],"src":"6858:658:40"},{"body":{"nativeSrc":"7605:283:40","nodeType":"YulBlock","src":"7605:283:40","statements":[{"body":{"nativeSrc":"7654:16:40","nodeType":"YulBlock","src":"7654:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7663:1:40","nodeType":"YulLiteral","src":"7663:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"7666:1:40","nodeType":"YulLiteral","src":"7666:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7656:6:40","nodeType":"YulIdentifier","src":"7656:6:40"},"nativeSrc":"7656:12:40","nodeType":"YulFunctionCall","src":"7656:12:40"},"nativeSrc":"7656:12:40","nodeType":"YulExpressionStatement","src":"7656:12:40"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"7633:6:40","nodeType":"YulIdentifier","src":"7633:6:40"},{"kind":"number","nativeSrc":"7641:4:40","nodeType":"YulLiteral","src":"7641:4:40","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"7629:3:40","nodeType":"YulIdentifier","src":"7629:3:40"},"nativeSrc":"7629:17:40","nodeType":"YulFunctionCall","src":"7629:17:40"},{"name":"end","nativeSrc":"7648:3:40","nodeType":"YulIdentifier","src":"7648:3:40"}],"functionName":{"name":"slt","nativeSrc":"7625:3:40","nodeType":"YulIdentifier","src":"7625:3:40"},"nativeSrc":"7625:27:40","nodeType":"YulFunctionCall","src":"7625:27:40"}],"functionName":{"name":"iszero","nativeSrc":"7618:6:40","nodeType":"YulIdentifier","src":"7618:6:40"},"nativeSrc":"7618:35:40","nodeType":"YulFunctionCall","src":"7618:35:40"},"nativeSrc":"7615:55:40","nodeType":"YulIf","src":"7615:55:40"},{"nativeSrc":"7679:30:40","nodeType":"YulAssignment","src":"7679:30:40","value":{"arguments":[{"name":"offset","nativeSrc":"7702:6:40","nodeType":"YulIdentifier","src":"7702:6:40"}],"functionName":{"name":"calldataload","nativeSrc":"7689:12:40","nodeType":"YulIdentifier","src":"7689:12:40"},"nativeSrc":"7689:20:40","nodeType":"YulFunctionCall","src":"7689:20:40"},"variableNames":[{"name":"length","nativeSrc":"7679:6:40","nodeType":"YulIdentifier","src":"7679:6:40"}]},{"body":{"nativeSrc":"7752:16:40","nodeType":"YulBlock","src":"7752:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7761:1:40","nodeType":"YulLiteral","src":"7761:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"7764:1:40","nodeType":"YulLiteral","src":"7764:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7754:6:40","nodeType":"YulIdentifier","src":"7754:6:40"},"nativeSrc":"7754:12:40","nodeType":"YulFunctionCall","src":"7754:12:40"},"nativeSrc":"7754:12:40","nodeType":"YulExpressionStatement","src":"7754:12:40"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"7724:6:40","nodeType":"YulIdentifier","src":"7724:6:40"},{"kind":"number","nativeSrc":"7732:18:40","nodeType":"YulLiteral","src":"7732:18:40","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7721:2:40","nodeType":"YulIdentifier","src":"7721:2:40"},"nativeSrc":"7721:30:40","nodeType":"YulFunctionCall","src":"7721:30:40"},"nativeSrc":"7718:50:40","nodeType":"YulIf","src":"7718:50:40"},{"nativeSrc":"7777:29:40","nodeType":"YulAssignment","src":"7777:29:40","value":{"arguments":[{"name":"offset","nativeSrc":"7793:6:40","nodeType":"YulIdentifier","src":"7793:6:40"},{"kind":"number","nativeSrc":"7801:4:40","nodeType":"YulLiteral","src":"7801:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"7789:3:40","nodeType":"YulIdentifier","src":"7789:3:40"},"nativeSrc":"7789:17:40","nodeType":"YulFunctionCall","src":"7789:17:40"},"variableNames":[{"name":"arrayPos","nativeSrc":"7777:8:40","nodeType":"YulIdentifier","src":"7777:8:40"}]},{"body":{"nativeSrc":"7866:16:40","nodeType":"YulBlock","src":"7866:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7875:1:40","nodeType":"YulLiteral","src":"7875:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"7878:1:40","nodeType":"YulLiteral","src":"7878:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7868:6:40","nodeType":"YulIdentifier","src":"7868:6:40"},"nativeSrc":"7868:12:40","nodeType":"YulFunctionCall","src":"7868:12:40"},"nativeSrc":"7868:12:40","nodeType":"YulExpressionStatement","src":"7868:12:40"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"7829:6:40","nodeType":"YulIdentifier","src":"7829:6:40"},{"arguments":[{"kind":"number","nativeSrc":"7841:1:40","nodeType":"YulLiteral","src":"7841:1:40","type":"","value":"5"},{"name":"length","nativeSrc":"7844:6:40","nodeType":"YulIdentifier","src":"7844:6:40"}],"functionName":{"name":"shl","nativeSrc":"7837:3:40","nodeType":"YulIdentifier","src":"7837:3:40"},"nativeSrc":"7837:14:40","nodeType":"YulFunctionCall","src":"7837:14:40"}],"functionName":{"name":"add","nativeSrc":"7825:3:40","nodeType":"YulIdentifier","src":"7825:3:40"},"nativeSrc":"7825:27:40","nodeType":"YulFunctionCall","src":"7825:27:40"},{"kind":"number","nativeSrc":"7854:4:40","nodeType":"YulLiteral","src":"7854:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"7821:3:40","nodeType":"YulIdentifier","src":"7821:3:40"},"nativeSrc":"7821:38:40","nodeType":"YulFunctionCall","src":"7821:38:40"},{"name":"end","nativeSrc":"7861:3:40","nodeType":"YulIdentifier","src":"7861:3:40"}],"functionName":{"name":"gt","nativeSrc":"7818:2:40","nodeType":"YulIdentifier","src":"7818:2:40"},"nativeSrc":"7818:47:40","nodeType":"YulFunctionCall","src":"7818:47:40"},"nativeSrc":"7815:67:40","nodeType":"YulIf","src":"7815:67:40"}]},"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"7521:367:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"7568:6:40","nodeType":"YulTypedName","src":"7568:6:40","type":""},{"name":"end","nativeSrc":"7576:3:40","nodeType":"YulTypedName","src":"7576:3:40","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"7584:8:40","nodeType":"YulTypedName","src":"7584:8:40","type":""},{"name":"length","nativeSrc":"7594:6:40","nodeType":"YulTypedName","src":"7594:6:40","type":""}],"src":"7521:367:40"},{"body":{"nativeSrc":"8120:1111:40","nodeType":"YulBlock","src":"8120:1111:40","statements":[{"body":{"nativeSrc":"8167:16:40","nodeType":"YulBlock","src":"8167:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8176:1:40","nodeType":"YulLiteral","src":"8176:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"8179:1:40","nodeType":"YulLiteral","src":"8179:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8169:6:40","nodeType":"YulIdentifier","src":"8169:6:40"},"nativeSrc":"8169:12:40","nodeType":"YulFunctionCall","src":"8169:12:40"},"nativeSrc":"8169:12:40","nodeType":"YulExpressionStatement","src":"8169:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8141:7:40","nodeType":"YulIdentifier","src":"8141:7:40"},{"name":"headStart","nativeSrc":"8150:9:40","nodeType":"YulIdentifier","src":"8150:9:40"}],"functionName":{"name":"sub","nativeSrc":"8137:3:40","nodeType":"YulIdentifier","src":"8137:3:40"},"nativeSrc":"8137:23:40","nodeType":"YulFunctionCall","src":"8137:23:40"},{"kind":"number","nativeSrc":"8162:3:40","nodeType":"YulLiteral","src":"8162:3:40","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"8133:3:40","nodeType":"YulIdentifier","src":"8133:3:40"},"nativeSrc":"8133:33:40","nodeType":"YulFunctionCall","src":"8133:33:40"},"nativeSrc":"8130:53:40","nodeType":"YulIf","src":"8130:53:40"},{"nativeSrc":"8192:36:40","nodeType":"YulVariableDeclaration","src":"8192:36:40","value":{"arguments":[{"name":"headStart","nativeSrc":"8218:9:40","nodeType":"YulIdentifier","src":"8218:9:40"}],"functionName":{"name":"calldataload","nativeSrc":"8205:12:40","nodeType":"YulIdentifier","src":"8205:12:40"},"nativeSrc":"8205:23:40","nodeType":"YulFunctionCall","src":"8205:23:40"},"variables":[{"name":"value","nativeSrc":"8196:5:40","nodeType":"YulTypedName","src":"8196:5:40","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"8262:5:40","nodeType":"YulIdentifier","src":"8262:5:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"8237:24:40","nodeType":"YulIdentifier","src":"8237:24:40"},"nativeSrc":"8237:31:40","nodeType":"YulFunctionCall","src":"8237:31:40"},"nativeSrc":"8237:31:40","nodeType":"YulExpressionStatement","src":"8237:31:40"},{"nativeSrc":"8277:15:40","nodeType":"YulAssignment","src":"8277:15:40","value":{"name":"value","nativeSrc":"8287:5:40","nodeType":"YulIdentifier","src":"8287:5:40"},"variableNames":[{"name":"value0","nativeSrc":"8277:6:40","nodeType":"YulIdentifier","src":"8277:6:40"}]},{"nativeSrc":"8301:47:40","nodeType":"YulVariableDeclaration","src":"8301:47:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8333:9:40","nodeType":"YulIdentifier","src":"8333:9:40"},{"kind":"number","nativeSrc":"8344:2:40","nodeType":"YulLiteral","src":"8344:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8329:3:40","nodeType":"YulIdentifier","src":"8329:3:40"},"nativeSrc":"8329:18:40","nodeType":"YulFunctionCall","src":"8329:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"8316:12:40","nodeType":"YulIdentifier","src":"8316:12:40"},"nativeSrc":"8316:32:40","nodeType":"YulFunctionCall","src":"8316:32:40"},"variables":[{"name":"value_1","nativeSrc":"8305:7:40","nodeType":"YulTypedName","src":"8305:7:40","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"8382:7:40","nodeType":"YulIdentifier","src":"8382:7:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"8357:24:40","nodeType":"YulIdentifier","src":"8357:24:40"},"nativeSrc":"8357:33:40","nodeType":"YulFunctionCall","src":"8357:33:40"},"nativeSrc":"8357:33:40","nodeType":"YulExpressionStatement","src":"8357:33:40"},{"nativeSrc":"8399:17:40","nodeType":"YulAssignment","src":"8399:17:40","value":{"name":"value_1","nativeSrc":"8409:7:40","nodeType":"YulIdentifier","src":"8409:7:40"},"variableNames":[{"name":"value1","nativeSrc":"8399:6:40","nodeType":"YulIdentifier","src":"8399:6:40"}]},{"nativeSrc":"8425:46:40","nodeType":"YulVariableDeclaration","src":"8425:46:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8456:9:40","nodeType":"YulIdentifier","src":"8456:9:40"},{"kind":"number","nativeSrc":"8467:2:40","nodeType":"YulLiteral","src":"8467:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8452:3:40","nodeType":"YulIdentifier","src":"8452:3:40"},"nativeSrc":"8452:18:40","nodeType":"YulFunctionCall","src":"8452:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"8439:12:40","nodeType":"YulIdentifier","src":"8439:12:40"},"nativeSrc":"8439:32:40","nodeType":"YulFunctionCall","src":"8439:32:40"},"variables":[{"name":"offset","nativeSrc":"8429:6:40","nodeType":"YulTypedName","src":"8429:6:40","type":""}]},{"nativeSrc":"8480:28:40","nodeType":"YulVariableDeclaration","src":"8480:28:40","value":{"kind":"number","nativeSrc":"8490:18:40","nodeType":"YulLiteral","src":"8490:18:40","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"8484:2:40","nodeType":"YulTypedName","src":"8484:2:40","type":""}]},{"body":{"nativeSrc":"8535:16:40","nodeType":"YulBlock","src":"8535:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8544:1:40","nodeType":"YulLiteral","src":"8544:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"8547:1:40","nodeType":"YulLiteral","src":"8547:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8537:6:40","nodeType":"YulIdentifier","src":"8537:6:40"},"nativeSrc":"8537:12:40","nodeType":"YulFunctionCall","src":"8537:12:40"},"nativeSrc":"8537:12:40","nodeType":"YulExpressionStatement","src":"8537:12:40"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"8523:6:40","nodeType":"YulIdentifier","src":"8523:6:40"},{"name":"_1","nativeSrc":"8531:2:40","nodeType":"YulIdentifier","src":"8531:2:40"}],"functionName":{"name":"gt","nativeSrc":"8520:2:40","nodeType":"YulIdentifier","src":"8520:2:40"},"nativeSrc":"8520:14:40","nodeType":"YulFunctionCall","src":"8520:14:40"},"nativeSrc":"8517:34:40","nodeType":"YulIf","src":"8517:34:40"},{"nativeSrc":"8560:96:40","nodeType":"YulVariableDeclaration","src":"8560:96:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8628:9:40","nodeType":"YulIdentifier","src":"8628:9:40"},{"name":"offset","nativeSrc":"8639:6:40","nodeType":"YulIdentifier","src":"8639:6:40"}],"functionName":{"name":"add","nativeSrc":"8624:3:40","nodeType":"YulIdentifier","src":"8624:3:40"},"nativeSrc":"8624:22:40","nodeType":"YulFunctionCall","src":"8624:22:40"},{"name":"dataEnd","nativeSrc":"8648:7:40","nodeType":"YulIdentifier","src":"8648:7:40"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"8586:37:40","nodeType":"YulIdentifier","src":"8586:37:40"},"nativeSrc":"8586:70:40","nodeType":"YulFunctionCall","src":"8586:70:40"},"variables":[{"name":"value2_1","nativeSrc":"8564:8:40","nodeType":"YulTypedName","src":"8564:8:40","type":""},{"name":"value3_1","nativeSrc":"8574:8:40","nodeType":"YulTypedName","src":"8574:8:40","type":""}]},{"nativeSrc":"8665:18:40","nodeType":"YulAssignment","src":"8665:18:40","value":{"name":"value2_1","nativeSrc":"8675:8:40","nodeType":"YulIdentifier","src":"8675:8:40"},"variableNames":[{"name":"value2","nativeSrc":"8665:6:40","nodeType":"YulIdentifier","src":"8665:6:40"}]},{"nativeSrc":"8692:18:40","nodeType":"YulAssignment","src":"8692:18:40","value":{"name":"value3_1","nativeSrc":"8702:8:40","nodeType":"YulIdentifier","src":"8702:8:40"},"variableNames":[{"name":"value3","nativeSrc":"8692:6:40","nodeType":"YulIdentifier","src":"8692:6:40"}]},{"nativeSrc":"8719:48:40","nodeType":"YulVariableDeclaration","src":"8719:48:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8752:9:40","nodeType":"YulIdentifier","src":"8752:9:40"},{"kind":"number","nativeSrc":"8763:2:40","nodeType":"YulLiteral","src":"8763:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"8748:3:40","nodeType":"YulIdentifier","src":"8748:3:40"},"nativeSrc":"8748:18:40","nodeType":"YulFunctionCall","src":"8748:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"8735:12:40","nodeType":"YulIdentifier","src":"8735:12:40"},"nativeSrc":"8735:32:40","nodeType":"YulFunctionCall","src":"8735:32:40"},"variables":[{"name":"offset_1","nativeSrc":"8723:8:40","nodeType":"YulTypedName","src":"8723:8:40","type":""}]},{"body":{"nativeSrc":"8796:16:40","nodeType":"YulBlock","src":"8796:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8805:1:40","nodeType":"YulLiteral","src":"8805:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"8808:1:40","nodeType":"YulLiteral","src":"8808:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8798:6:40","nodeType":"YulIdentifier","src":"8798:6:40"},"nativeSrc":"8798:12:40","nodeType":"YulFunctionCall","src":"8798:12:40"},"nativeSrc":"8798:12:40","nodeType":"YulExpressionStatement","src":"8798:12:40"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"8782:8:40","nodeType":"YulIdentifier","src":"8782:8:40"},{"name":"_1","nativeSrc":"8792:2:40","nodeType":"YulIdentifier","src":"8792:2:40"}],"functionName":{"name":"gt","nativeSrc":"8779:2:40","nodeType":"YulIdentifier","src":"8779:2:40"},"nativeSrc":"8779:16:40","nodeType":"YulFunctionCall","src":"8779:16:40"},"nativeSrc":"8776:36:40","nodeType":"YulIf","src":"8776:36:40"},{"nativeSrc":"8821:98:40","nodeType":"YulVariableDeclaration","src":"8821:98:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8889:9:40","nodeType":"YulIdentifier","src":"8889:9:40"},{"name":"offset_1","nativeSrc":"8900:8:40","nodeType":"YulIdentifier","src":"8900:8:40"}],"functionName":{"name":"add","nativeSrc":"8885:3:40","nodeType":"YulIdentifier","src":"8885:3:40"},"nativeSrc":"8885:24:40","nodeType":"YulFunctionCall","src":"8885:24:40"},{"name":"dataEnd","nativeSrc":"8911:7:40","nodeType":"YulIdentifier","src":"8911:7:40"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"8847:37:40","nodeType":"YulIdentifier","src":"8847:37:40"},"nativeSrc":"8847:72:40","nodeType":"YulFunctionCall","src":"8847:72:40"},"variables":[{"name":"value4_1","nativeSrc":"8825:8:40","nodeType":"YulTypedName","src":"8825:8:40","type":""},{"name":"value5_1","nativeSrc":"8835:8:40","nodeType":"YulTypedName","src":"8835:8:40","type":""}]},{"nativeSrc":"8928:18:40","nodeType":"YulAssignment","src":"8928:18:40","value":{"name":"value4_1","nativeSrc":"8938:8:40","nodeType":"YulIdentifier","src":"8938:8:40"},"variableNames":[{"name":"value4","nativeSrc":"8928:6:40","nodeType":"YulIdentifier","src":"8928:6:40"}]},{"nativeSrc":"8955:18:40","nodeType":"YulAssignment","src":"8955:18:40","value":{"name":"value5_1","nativeSrc":"8965:8:40","nodeType":"YulIdentifier","src":"8965:8:40"},"variableNames":[{"name":"value5","nativeSrc":"8955:6:40","nodeType":"YulIdentifier","src":"8955:6:40"}]},{"nativeSrc":"8982:49:40","nodeType":"YulVariableDeclaration","src":"8982:49:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9015:9:40","nodeType":"YulIdentifier","src":"9015:9:40"},{"kind":"number","nativeSrc":"9026:3:40","nodeType":"YulLiteral","src":"9026:3:40","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"9011:3:40","nodeType":"YulIdentifier","src":"9011:3:40"},"nativeSrc":"9011:19:40","nodeType":"YulFunctionCall","src":"9011:19:40"}],"functionName":{"name":"calldataload","nativeSrc":"8998:12:40","nodeType":"YulIdentifier","src":"8998:12:40"},"nativeSrc":"8998:33:40","nodeType":"YulFunctionCall","src":"8998:33:40"},"variables":[{"name":"offset_2","nativeSrc":"8986:8:40","nodeType":"YulTypedName","src":"8986:8:40","type":""}]},{"body":{"nativeSrc":"9060:16:40","nodeType":"YulBlock","src":"9060:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9069:1:40","nodeType":"YulLiteral","src":"9069:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"9072:1:40","nodeType":"YulLiteral","src":"9072:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9062:6:40","nodeType":"YulIdentifier","src":"9062:6:40"},"nativeSrc":"9062:12:40","nodeType":"YulFunctionCall","src":"9062:12:40"},"nativeSrc":"9062:12:40","nodeType":"YulExpressionStatement","src":"9062:12:40"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"9046:8:40","nodeType":"YulIdentifier","src":"9046:8:40"},{"name":"_1","nativeSrc":"9056:2:40","nodeType":"YulIdentifier","src":"9056:2:40"}],"functionName":{"name":"gt","nativeSrc":"9043:2:40","nodeType":"YulIdentifier","src":"9043:2:40"},"nativeSrc":"9043:16:40","nodeType":"YulFunctionCall","src":"9043:16:40"},"nativeSrc":"9040:36:40","nodeType":"YulIf","src":"9040:36:40"},{"nativeSrc":"9085:86:40","nodeType":"YulVariableDeclaration","src":"9085:86:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9141:9:40","nodeType":"YulIdentifier","src":"9141:9:40"},{"name":"offset_2","nativeSrc":"9152:8:40","nodeType":"YulIdentifier","src":"9152:8:40"}],"functionName":{"name":"add","nativeSrc":"9137:3:40","nodeType":"YulIdentifier","src":"9137:3:40"},"nativeSrc":"9137:24:40","nodeType":"YulFunctionCall","src":"9137:24:40"},{"name":"dataEnd","nativeSrc":"9163:7:40","nodeType":"YulIdentifier","src":"9163:7:40"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"9111:25:40","nodeType":"YulIdentifier","src":"9111:25:40"},"nativeSrc":"9111:60:40","nodeType":"YulFunctionCall","src":"9111:60:40"},"variables":[{"name":"value6_1","nativeSrc":"9089:8:40","nodeType":"YulTypedName","src":"9089:8:40","type":""},{"name":"value7_1","nativeSrc":"9099:8:40","nodeType":"YulTypedName","src":"9099:8:40","type":""}]},{"nativeSrc":"9180:18:40","nodeType":"YulAssignment","src":"9180:18:40","value":{"name":"value6_1","nativeSrc":"9190:8:40","nodeType":"YulIdentifier","src":"9190:8:40"},"variableNames":[{"name":"value6","nativeSrc":"9180:6:40","nodeType":"YulIdentifier","src":"9180:6:40"}]},{"nativeSrc":"9207:18:40","nodeType":"YulAssignment","src":"9207:18:40","value":{"name":"value7_1","nativeSrc":"9217:8:40","nodeType":"YulIdentifier","src":"9217:8:40"},"variableNames":[{"name":"value7","nativeSrc":"9207:6:40","nodeType":"YulIdentifier","src":"9207:6:40"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr","nativeSrc":"7893:1338:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8030:9:40","nodeType":"YulTypedName","src":"8030:9:40","type":""},{"name":"dataEnd","nativeSrc":"8041:7:40","nodeType":"YulTypedName","src":"8041:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8053:6:40","nodeType":"YulTypedName","src":"8053:6:40","type":""},{"name":"value1","nativeSrc":"8061:6:40","nodeType":"YulTypedName","src":"8061:6:40","type":""},{"name":"value2","nativeSrc":"8069:6:40","nodeType":"YulTypedName","src":"8069:6:40","type":""},{"name":"value3","nativeSrc":"8077:6:40","nodeType":"YulTypedName","src":"8077:6:40","type":""},{"name":"value4","nativeSrc":"8085:6:40","nodeType":"YulTypedName","src":"8085:6:40","type":""},{"name":"value5","nativeSrc":"8093:6:40","nodeType":"YulTypedName","src":"8093:6:40","type":""},{"name":"value6","nativeSrc":"8101:6:40","nodeType":"YulTypedName","src":"8101:6:40","type":""},{"name":"value7","nativeSrc":"8109:6:40","nodeType":"YulTypedName","src":"8109:6:40","type":""}],"src":"7893:1338:40"},{"body":{"nativeSrc":"9342:438:40","nodeType":"YulBlock","src":"9342:438:40","statements":[{"body":{"nativeSrc":"9388:16:40","nodeType":"YulBlock","src":"9388:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9397:1:40","nodeType":"YulLiteral","src":"9397:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"9400:1:40","nodeType":"YulLiteral","src":"9400:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9390:6:40","nodeType":"YulIdentifier","src":"9390:6:40"},"nativeSrc":"9390:12:40","nodeType":"YulFunctionCall","src":"9390:12:40"},"nativeSrc":"9390:12:40","nodeType":"YulExpressionStatement","src":"9390:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"9363:7:40","nodeType":"YulIdentifier","src":"9363:7:40"},{"name":"headStart","nativeSrc":"9372:9:40","nodeType":"YulIdentifier","src":"9372:9:40"}],"functionName":{"name":"sub","nativeSrc":"9359:3:40","nodeType":"YulIdentifier","src":"9359:3:40"},"nativeSrc":"9359:23:40","nodeType":"YulFunctionCall","src":"9359:23:40"},{"kind":"number","nativeSrc":"9384:2:40","nodeType":"YulLiteral","src":"9384:2:40","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"9355:3:40","nodeType":"YulIdentifier","src":"9355:3:40"},"nativeSrc":"9355:32:40","nodeType":"YulFunctionCall","src":"9355:32:40"},"nativeSrc":"9352:52:40","nodeType":"YulIf","src":"9352:52:40"},{"nativeSrc":"9413:36:40","nodeType":"YulVariableDeclaration","src":"9413:36:40","value":{"arguments":[{"name":"headStart","nativeSrc":"9439:9:40","nodeType":"YulIdentifier","src":"9439:9:40"}],"functionName":{"name":"calldataload","nativeSrc":"9426:12:40","nodeType":"YulIdentifier","src":"9426:12:40"},"nativeSrc":"9426:23:40","nodeType":"YulFunctionCall","src":"9426:23:40"},"variables":[{"name":"value","nativeSrc":"9417:5:40","nodeType":"YulTypedName","src":"9417:5:40","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"9483:5:40","nodeType":"YulIdentifier","src":"9483:5:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"9458:24:40","nodeType":"YulIdentifier","src":"9458:24:40"},"nativeSrc":"9458:31:40","nodeType":"YulFunctionCall","src":"9458:31:40"},"nativeSrc":"9458:31:40","nodeType":"YulExpressionStatement","src":"9458:31:40"},{"nativeSrc":"9498:15:40","nodeType":"YulAssignment","src":"9498:15:40","value":{"name":"value","nativeSrc":"9508:5:40","nodeType":"YulIdentifier","src":"9508:5:40"},"variableNames":[{"name":"value0","nativeSrc":"9498:6:40","nodeType":"YulIdentifier","src":"9498:6:40"}]},{"nativeSrc":"9522:46:40","nodeType":"YulVariableDeclaration","src":"9522:46:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9553:9:40","nodeType":"YulIdentifier","src":"9553:9:40"},{"kind":"number","nativeSrc":"9564:2:40","nodeType":"YulLiteral","src":"9564:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9549:3:40","nodeType":"YulIdentifier","src":"9549:3:40"},"nativeSrc":"9549:18:40","nodeType":"YulFunctionCall","src":"9549:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"9536:12:40","nodeType":"YulIdentifier","src":"9536:12:40"},"nativeSrc":"9536:32:40","nodeType":"YulFunctionCall","src":"9536:32:40"},"variables":[{"name":"offset","nativeSrc":"9526:6:40","nodeType":"YulTypedName","src":"9526:6:40","type":""}]},{"body":{"nativeSrc":"9611:16:40","nodeType":"YulBlock","src":"9611:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9620:1:40","nodeType":"YulLiteral","src":"9620:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"9623:1:40","nodeType":"YulLiteral","src":"9623:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9613:6:40","nodeType":"YulIdentifier","src":"9613:6:40"},"nativeSrc":"9613:12:40","nodeType":"YulFunctionCall","src":"9613:12:40"},"nativeSrc":"9613:12:40","nodeType":"YulExpressionStatement","src":"9613:12:40"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"9583:6:40","nodeType":"YulIdentifier","src":"9583:6:40"},{"kind":"number","nativeSrc":"9591:18:40","nodeType":"YulLiteral","src":"9591:18:40","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"9580:2:40","nodeType":"YulIdentifier","src":"9580:2:40"},"nativeSrc":"9580:30:40","nodeType":"YulFunctionCall","src":"9580:30:40"},"nativeSrc":"9577:50:40","nodeType":"YulIf","src":"9577:50:40"},{"nativeSrc":"9636:84:40","nodeType":"YulVariableDeclaration","src":"9636:84:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9692:9:40","nodeType":"YulIdentifier","src":"9692:9:40"},{"name":"offset","nativeSrc":"9703:6:40","nodeType":"YulIdentifier","src":"9703:6:40"}],"functionName":{"name":"add","nativeSrc":"9688:3:40","nodeType":"YulIdentifier","src":"9688:3:40"},"nativeSrc":"9688:22:40","nodeType":"YulFunctionCall","src":"9688:22:40"},{"name":"dataEnd","nativeSrc":"9712:7:40","nodeType":"YulIdentifier","src":"9712:7:40"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"9662:25:40","nodeType":"YulIdentifier","src":"9662:25:40"},"nativeSrc":"9662:58:40","nodeType":"YulFunctionCall","src":"9662:58:40"},"variables":[{"name":"value1_1","nativeSrc":"9640:8:40","nodeType":"YulTypedName","src":"9640:8:40","type":""},{"name":"value2_1","nativeSrc":"9650:8:40","nodeType":"YulTypedName","src":"9650:8:40","type":""}]},{"nativeSrc":"9729:18:40","nodeType":"YulAssignment","src":"9729:18:40","value":{"name":"value1_1","nativeSrc":"9739:8:40","nodeType":"YulIdentifier","src":"9739:8:40"},"variableNames":[{"name":"value1","nativeSrc":"9729:6:40","nodeType":"YulIdentifier","src":"9729:6:40"}]},{"nativeSrc":"9756:18:40","nodeType":"YulAssignment","src":"9756:18:40","value":{"name":"value2_1","nativeSrc":"9766:8:40","nodeType":"YulIdentifier","src":"9766:8:40"},"variableNames":[{"name":"value2","nativeSrc":"9756:6:40","nodeType":"YulIdentifier","src":"9756:6:40"}]}]},"name":"abi_decode_tuple_t_addresst_bytes_calldata_ptr","nativeSrc":"9236:544:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9292:9:40","nodeType":"YulTypedName","src":"9292:9:40","type":""},{"name":"dataEnd","nativeSrc":"9303:7:40","nodeType":"YulTypedName","src":"9303:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"9315:6:40","nodeType":"YulTypedName","src":"9315:6:40","type":""},{"name":"value1","nativeSrc":"9323:6:40","nodeType":"YulTypedName","src":"9323:6:40","type":""},{"name":"value2","nativeSrc":"9331:6:40","nodeType":"YulTypedName","src":"9331:6:40","type":""}],"src":"9236:544:40"},{"body":{"nativeSrc":"9942:666:40","nodeType":"YulBlock","src":"9942:666:40","statements":[{"body":{"nativeSrc":"9989:16:40","nodeType":"YulBlock","src":"9989:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9998:1:40","nodeType":"YulLiteral","src":"9998:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"10001:1:40","nodeType":"YulLiteral","src":"10001:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9991:6:40","nodeType":"YulIdentifier","src":"9991:6:40"},"nativeSrc":"9991:12:40","nodeType":"YulFunctionCall","src":"9991:12:40"},"nativeSrc":"9991:12:40","nodeType":"YulExpressionStatement","src":"9991:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"9963:7:40","nodeType":"YulIdentifier","src":"9963:7:40"},{"name":"headStart","nativeSrc":"9972:9:40","nodeType":"YulIdentifier","src":"9972:9:40"}],"functionName":{"name":"sub","nativeSrc":"9959:3:40","nodeType":"YulIdentifier","src":"9959:3:40"},"nativeSrc":"9959:23:40","nodeType":"YulFunctionCall","src":"9959:23:40"},{"kind":"number","nativeSrc":"9984:3:40","nodeType":"YulLiteral","src":"9984:3:40","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"9955:3:40","nodeType":"YulIdentifier","src":"9955:3:40"},"nativeSrc":"9955:33:40","nodeType":"YulFunctionCall","src":"9955:33:40"},"nativeSrc":"9952:53:40","nodeType":"YulIf","src":"9952:53:40"},{"nativeSrc":"10014:36:40","nodeType":"YulVariableDeclaration","src":"10014:36:40","value":{"arguments":[{"name":"headStart","nativeSrc":"10040:9:40","nodeType":"YulIdentifier","src":"10040:9:40"}],"functionName":{"name":"calldataload","nativeSrc":"10027:12:40","nodeType":"YulIdentifier","src":"10027:12:40"},"nativeSrc":"10027:23:40","nodeType":"YulFunctionCall","src":"10027:23:40"},"variables":[{"name":"value","nativeSrc":"10018:5:40","nodeType":"YulTypedName","src":"10018:5:40","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"10084:5:40","nodeType":"YulIdentifier","src":"10084:5:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"10059:24:40","nodeType":"YulIdentifier","src":"10059:24:40"},"nativeSrc":"10059:31:40","nodeType":"YulFunctionCall","src":"10059:31:40"},"nativeSrc":"10059:31:40","nodeType":"YulExpressionStatement","src":"10059:31:40"},{"nativeSrc":"10099:15:40","nodeType":"YulAssignment","src":"10099:15:40","value":{"name":"value","nativeSrc":"10109:5:40","nodeType":"YulIdentifier","src":"10109:5:40"},"variableNames":[{"name":"value0","nativeSrc":"10099:6:40","nodeType":"YulIdentifier","src":"10099:6:40"}]},{"nativeSrc":"10123:47:40","nodeType":"YulVariableDeclaration","src":"10123:47:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10155:9:40","nodeType":"YulIdentifier","src":"10155:9:40"},{"kind":"number","nativeSrc":"10166:2:40","nodeType":"YulLiteral","src":"10166:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10151:3:40","nodeType":"YulIdentifier","src":"10151:3:40"},"nativeSrc":"10151:18:40","nodeType":"YulFunctionCall","src":"10151:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"10138:12:40","nodeType":"YulIdentifier","src":"10138:12:40"},"nativeSrc":"10138:32:40","nodeType":"YulFunctionCall","src":"10138:32:40"},"variables":[{"name":"value_1","nativeSrc":"10127:7:40","nodeType":"YulTypedName","src":"10127:7:40","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"10204:7:40","nodeType":"YulIdentifier","src":"10204:7:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"10179:24:40","nodeType":"YulIdentifier","src":"10179:24:40"},"nativeSrc":"10179:33:40","nodeType":"YulFunctionCall","src":"10179:33:40"},"nativeSrc":"10179:33:40","nodeType":"YulExpressionStatement","src":"10179:33:40"},{"nativeSrc":"10221:17:40","nodeType":"YulAssignment","src":"10221:17:40","value":{"name":"value_1","nativeSrc":"10231:7:40","nodeType":"YulIdentifier","src":"10231:7:40"},"variableNames":[{"name":"value1","nativeSrc":"10221:6:40","nodeType":"YulIdentifier","src":"10221:6:40"}]},{"nativeSrc":"10247:42:40","nodeType":"YulAssignment","src":"10247:42:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10274:9:40","nodeType":"YulIdentifier","src":"10274:9:40"},{"kind":"number","nativeSrc":"10285:2:40","nodeType":"YulLiteral","src":"10285:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10270:3:40","nodeType":"YulIdentifier","src":"10270:3:40"},"nativeSrc":"10270:18:40","nodeType":"YulFunctionCall","src":"10270:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"10257:12:40","nodeType":"YulIdentifier","src":"10257:12:40"},"nativeSrc":"10257:32:40","nodeType":"YulFunctionCall","src":"10257:32:40"},"variableNames":[{"name":"value2","nativeSrc":"10247:6:40","nodeType":"YulIdentifier","src":"10247:6:40"}]},{"nativeSrc":"10298:42:40","nodeType":"YulAssignment","src":"10298:42:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10325:9:40","nodeType":"YulIdentifier","src":"10325:9:40"},{"kind":"number","nativeSrc":"10336:2:40","nodeType":"YulLiteral","src":"10336:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10321:3:40","nodeType":"YulIdentifier","src":"10321:3:40"},"nativeSrc":"10321:18:40","nodeType":"YulFunctionCall","src":"10321:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"10308:12:40","nodeType":"YulIdentifier","src":"10308:12:40"},"nativeSrc":"10308:32:40","nodeType":"YulFunctionCall","src":"10308:32:40"},"variableNames":[{"name":"value3","nativeSrc":"10298:6:40","nodeType":"YulIdentifier","src":"10298:6:40"}]},{"nativeSrc":"10349:47:40","nodeType":"YulVariableDeclaration","src":"10349:47:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10380:9:40","nodeType":"YulIdentifier","src":"10380:9:40"},{"kind":"number","nativeSrc":"10391:3:40","nodeType":"YulLiteral","src":"10391:3:40","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"10376:3:40","nodeType":"YulIdentifier","src":"10376:3:40"},"nativeSrc":"10376:19:40","nodeType":"YulFunctionCall","src":"10376:19:40"}],"functionName":{"name":"calldataload","nativeSrc":"10363:12:40","nodeType":"YulIdentifier","src":"10363:12:40"},"nativeSrc":"10363:33:40","nodeType":"YulFunctionCall","src":"10363:33:40"},"variables":[{"name":"offset","nativeSrc":"10353:6:40","nodeType":"YulTypedName","src":"10353:6:40","type":""}]},{"body":{"nativeSrc":"10439:16:40","nodeType":"YulBlock","src":"10439:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10448:1:40","nodeType":"YulLiteral","src":"10448:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"10451:1:40","nodeType":"YulLiteral","src":"10451:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10441:6:40","nodeType":"YulIdentifier","src":"10441:6:40"},"nativeSrc":"10441:12:40","nodeType":"YulFunctionCall","src":"10441:12:40"},"nativeSrc":"10441:12:40","nodeType":"YulExpressionStatement","src":"10441:12:40"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"10411:6:40","nodeType":"YulIdentifier","src":"10411:6:40"},{"kind":"number","nativeSrc":"10419:18:40","nodeType":"YulLiteral","src":"10419:18:40","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"10408:2:40","nodeType":"YulIdentifier","src":"10408:2:40"},"nativeSrc":"10408:30:40","nodeType":"YulFunctionCall","src":"10408:30:40"},"nativeSrc":"10405:50:40","nodeType":"YulIf","src":"10405:50:40"},{"nativeSrc":"10464:84:40","nodeType":"YulVariableDeclaration","src":"10464:84:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10520:9:40","nodeType":"YulIdentifier","src":"10520:9:40"},{"name":"offset","nativeSrc":"10531:6:40","nodeType":"YulIdentifier","src":"10531:6:40"}],"functionName":{"name":"add","nativeSrc":"10516:3:40","nodeType":"YulIdentifier","src":"10516:3:40"},"nativeSrc":"10516:22:40","nodeType":"YulFunctionCall","src":"10516:22:40"},{"name":"dataEnd","nativeSrc":"10540:7:40","nodeType":"YulIdentifier","src":"10540:7:40"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"10490:25:40","nodeType":"YulIdentifier","src":"10490:25:40"},"nativeSrc":"10490:58:40","nodeType":"YulFunctionCall","src":"10490:58:40"},"variables":[{"name":"value4_1","nativeSrc":"10468:8:40","nodeType":"YulTypedName","src":"10468:8:40","type":""},{"name":"value5_1","nativeSrc":"10478:8:40","nodeType":"YulTypedName","src":"10478:8:40","type":""}]},{"nativeSrc":"10557:18:40","nodeType":"YulAssignment","src":"10557:18:40","value":{"name":"value4_1","nativeSrc":"10567:8:40","nodeType":"YulIdentifier","src":"10567:8:40"},"variableNames":[{"name":"value4","nativeSrc":"10557:6:40","nodeType":"YulIdentifier","src":"10557:6:40"}]},{"nativeSrc":"10584:18:40","nodeType":"YulAssignment","src":"10584:18:40","value":{"name":"value5_1","nativeSrc":"10594:8:40","nodeType":"YulIdentifier","src":"10594:8:40"},"variableNames":[{"name":"value5","nativeSrc":"10584:6:40","nodeType":"YulIdentifier","src":"10584:6:40"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr","nativeSrc":"9785:823:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9868:9:40","nodeType":"YulTypedName","src":"9868:9:40","type":""},{"name":"dataEnd","nativeSrc":"9879:7:40","nodeType":"YulTypedName","src":"9879:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"9891:6:40","nodeType":"YulTypedName","src":"9891:6:40","type":""},{"name":"value1","nativeSrc":"9899:6:40","nodeType":"YulTypedName","src":"9899:6:40","type":""},{"name":"value2","nativeSrc":"9907:6:40","nodeType":"YulTypedName","src":"9907:6:40","type":""},{"name":"value3","nativeSrc":"9915:6:40","nodeType":"YulTypedName","src":"9915:6:40","type":""},{"name":"value4","nativeSrc":"9923:6:40","nodeType":"YulTypedName","src":"9923:6:40","type":""},{"name":"value5","nativeSrc":"9931:6:40","nodeType":"YulTypedName","src":"9931:6:40","type":""}],"src":"9785:823:40"},{"body":{"nativeSrc":"10788:364:40","nodeType":"YulBlock","src":"10788:364:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10805:9:40","nodeType":"YulIdentifier","src":"10805:9:40"},{"kind":"number","nativeSrc":"10816:2:40","nodeType":"YulLiteral","src":"10816:2:40","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"10798:6:40","nodeType":"YulIdentifier","src":"10798:6:40"},"nativeSrc":"10798:21:40","nodeType":"YulFunctionCall","src":"10798:21:40"},"nativeSrc":"10798:21:40","nodeType":"YulExpressionStatement","src":"10798:21:40"},{"nativeSrc":"10828:58:40","nodeType":"YulVariableDeclaration","src":"10828:58:40","value":{"arguments":[{"name":"value0","nativeSrc":"10859:6:40","nodeType":"YulIdentifier","src":"10859:6:40"},{"arguments":[{"name":"headStart","nativeSrc":"10871:9:40","nodeType":"YulIdentifier","src":"10871:9:40"},{"kind":"number","nativeSrc":"10882:2:40","nodeType":"YulLiteral","src":"10882:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10867:3:40","nodeType":"YulIdentifier","src":"10867:3:40"},"nativeSrc":"10867:18:40","nodeType":"YulFunctionCall","src":"10867:18:40"}],"functionName":{"name":"abi_encode_bytes","nativeSrc":"10842:16:40","nodeType":"YulIdentifier","src":"10842:16:40"},"nativeSrc":"10842:44:40","nodeType":"YulFunctionCall","src":"10842:44:40"},"variables":[{"name":"tail_1","nativeSrc":"10832:6:40","nodeType":"YulTypedName","src":"10832:6:40","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10906:9:40","nodeType":"YulIdentifier","src":"10906:9:40"},{"kind":"number","nativeSrc":"10917:2:40","nodeType":"YulLiteral","src":"10917:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10902:3:40","nodeType":"YulIdentifier","src":"10902:3:40"},"nativeSrc":"10902:18:40","nodeType":"YulFunctionCall","src":"10902:18:40"},{"arguments":[{"name":"tail_1","nativeSrc":"10926:6:40","nodeType":"YulIdentifier","src":"10926:6:40"},{"name":"headStart","nativeSrc":"10934:9:40","nodeType":"YulIdentifier","src":"10934:9:40"}],"functionName":{"name":"sub","nativeSrc":"10922:3:40","nodeType":"YulIdentifier","src":"10922:3:40"},"nativeSrc":"10922:22:40","nodeType":"YulFunctionCall","src":"10922:22:40"}],"functionName":{"name":"mstore","nativeSrc":"10895:6:40","nodeType":"YulIdentifier","src":"10895:6:40"},"nativeSrc":"10895:50:40","nodeType":"YulFunctionCall","src":"10895:50:40"},"nativeSrc":"10895:50:40","nodeType":"YulExpressionStatement","src":"10895:50:40"},{"expression":{"arguments":[{"name":"tail_1","nativeSrc":"10961:6:40","nodeType":"YulIdentifier","src":"10961:6:40"},{"name":"value2","nativeSrc":"10969:6:40","nodeType":"YulIdentifier","src":"10969:6:40"}],"functionName":{"name":"mstore","nativeSrc":"10954:6:40","nodeType":"YulIdentifier","src":"10954:6:40"},"nativeSrc":"10954:22:40","nodeType":"YulFunctionCall","src":"10954:22:40"},"nativeSrc":"10954:22:40","nodeType":"YulExpressionStatement","src":"10954:22:40"},{"expression":{"arguments":[{"arguments":[{"name":"tail_1","nativeSrc":"11002:6:40","nodeType":"YulIdentifier","src":"11002:6:40"},{"kind":"number","nativeSrc":"11010:2:40","nodeType":"YulLiteral","src":"11010:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10998:3:40","nodeType":"YulIdentifier","src":"10998:3:40"},"nativeSrc":"10998:15:40","nodeType":"YulFunctionCall","src":"10998:15:40"},{"name":"value1","nativeSrc":"11015:6:40","nodeType":"YulIdentifier","src":"11015:6:40"},{"name":"value2","nativeSrc":"11023:6:40","nodeType":"YulIdentifier","src":"11023:6:40"}],"functionName":{"name":"calldatacopy","nativeSrc":"10985:12:40","nodeType":"YulIdentifier","src":"10985:12:40"},"nativeSrc":"10985:45:40","nodeType":"YulFunctionCall","src":"10985:45:40"},"nativeSrc":"10985:45:40","nodeType":"YulExpressionStatement","src":"10985:45:40"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"tail_1","nativeSrc":"11054:6:40","nodeType":"YulIdentifier","src":"11054:6:40"},{"name":"value2","nativeSrc":"11062:6:40","nodeType":"YulIdentifier","src":"11062:6:40"}],"functionName":{"name":"add","nativeSrc":"11050:3:40","nodeType":"YulIdentifier","src":"11050:3:40"},"nativeSrc":"11050:19:40","nodeType":"YulFunctionCall","src":"11050:19:40"},{"kind":"number","nativeSrc":"11071:2:40","nodeType":"YulLiteral","src":"11071:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11046:3:40","nodeType":"YulIdentifier","src":"11046:3:40"},"nativeSrc":"11046:28:40","nodeType":"YulFunctionCall","src":"11046:28:40"},{"kind":"number","nativeSrc":"11076:1:40","nodeType":"YulLiteral","src":"11076:1:40","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"11039:6:40","nodeType":"YulIdentifier","src":"11039:6:40"},"nativeSrc":"11039:39:40","nodeType":"YulFunctionCall","src":"11039:39:40"},"nativeSrc":"11039:39:40","nodeType":"YulExpressionStatement","src":"11039:39:40"},{"nativeSrc":"11087:59:40","nodeType":"YulAssignment","src":"11087:59:40","value":{"arguments":[{"arguments":[{"name":"tail_1","nativeSrc":"11103:6:40","nodeType":"YulIdentifier","src":"11103:6:40"},{"arguments":[{"arguments":[{"name":"value2","nativeSrc":"11119:6:40","nodeType":"YulIdentifier","src":"11119:6:40"},{"kind":"number","nativeSrc":"11127:2:40","nodeType":"YulLiteral","src":"11127:2:40","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"11115:3:40","nodeType":"YulIdentifier","src":"11115:3:40"},"nativeSrc":"11115:15:40","nodeType":"YulFunctionCall","src":"11115:15:40"},{"arguments":[{"kind":"number","nativeSrc":"11136:2:40","nodeType":"YulLiteral","src":"11136:2:40","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"11132:3:40","nodeType":"YulIdentifier","src":"11132:3:40"},"nativeSrc":"11132:7:40","nodeType":"YulFunctionCall","src":"11132:7:40"}],"functionName":{"name":"and","nativeSrc":"11111:3:40","nodeType":"YulIdentifier","src":"11111:3:40"},"nativeSrc":"11111:29:40","nodeType":"YulFunctionCall","src":"11111:29:40"}],"functionName":{"name":"add","nativeSrc":"11099:3:40","nodeType":"YulIdentifier","src":"11099:3:40"},"nativeSrc":"11099:42:40","nodeType":"YulFunctionCall","src":"11099:42:40"},{"kind":"number","nativeSrc":"11143:2:40","nodeType":"YulLiteral","src":"11143:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11095:3:40","nodeType":"YulIdentifier","src":"11095:3:40"},"nativeSrc":"11095:51:40","nodeType":"YulFunctionCall","src":"11095:51:40"},"variableNames":[{"name":"tail","nativeSrc":"11087:4:40","nodeType":"YulIdentifier","src":"11087:4:40"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr_t_bytes_calldata_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"10613:539:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10741:9:40","nodeType":"YulTypedName","src":"10741:9:40","type":""},{"name":"value2","nativeSrc":"10752:6:40","nodeType":"YulTypedName","src":"10752:6:40","type":""},{"name":"value1","nativeSrc":"10760:6:40","nodeType":"YulTypedName","src":"10760:6:40","type":""},{"name":"value0","nativeSrc":"10768:6:40","nodeType":"YulTypedName","src":"10768:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10779:4:40","nodeType":"YulTypedName","src":"10779:4:40","type":""}],"src":"10613:539:40"},{"body":{"nativeSrc":"11237:169:40","nodeType":"YulBlock","src":"11237:169:40","statements":[{"body":{"nativeSrc":"11283:16:40","nodeType":"YulBlock","src":"11283:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11292:1:40","nodeType":"YulLiteral","src":"11292:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"11295:1:40","nodeType":"YulLiteral","src":"11295:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11285:6:40","nodeType":"YulIdentifier","src":"11285:6:40"},"nativeSrc":"11285:12:40","nodeType":"YulFunctionCall","src":"11285:12:40"},"nativeSrc":"11285:12:40","nodeType":"YulExpressionStatement","src":"11285:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"11258:7:40","nodeType":"YulIdentifier","src":"11258:7:40"},{"name":"headStart","nativeSrc":"11267:9:40","nodeType":"YulIdentifier","src":"11267:9:40"}],"functionName":{"name":"sub","nativeSrc":"11254:3:40","nodeType":"YulIdentifier","src":"11254:3:40"},"nativeSrc":"11254:23:40","nodeType":"YulFunctionCall","src":"11254:23:40"},{"kind":"number","nativeSrc":"11279:2:40","nodeType":"YulLiteral","src":"11279:2:40","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"11250:3:40","nodeType":"YulIdentifier","src":"11250:3:40"},"nativeSrc":"11250:32:40","nodeType":"YulFunctionCall","src":"11250:32:40"},"nativeSrc":"11247:52:40","nodeType":"YulIf","src":"11247:52:40"},{"nativeSrc":"11308:29:40","nodeType":"YulVariableDeclaration","src":"11308:29:40","value":{"arguments":[{"name":"headStart","nativeSrc":"11327:9:40","nodeType":"YulIdentifier","src":"11327:9:40"}],"functionName":{"name":"mload","nativeSrc":"11321:5:40","nodeType":"YulIdentifier","src":"11321:5:40"},"nativeSrc":"11321:16:40","nodeType":"YulFunctionCall","src":"11321:16:40"},"variables":[{"name":"value","nativeSrc":"11312:5:40","nodeType":"YulTypedName","src":"11312:5:40","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"11370:5:40","nodeType":"YulIdentifier","src":"11370:5:40"}],"functionName":{"name":"validator_revert_bytes4","nativeSrc":"11346:23:40","nodeType":"YulIdentifier","src":"11346:23:40"},"nativeSrc":"11346:30:40","nodeType":"YulFunctionCall","src":"11346:30:40"},"nativeSrc":"11346:30:40","nodeType":"YulExpressionStatement","src":"11346:30:40"},{"nativeSrc":"11385:15:40","nodeType":"YulAssignment","src":"11385:15:40","value":{"name":"value","nativeSrc":"11395:5:40","nodeType":"YulIdentifier","src":"11395:5:40"},"variableNames":[{"name":"value0","nativeSrc":"11385:6:40","nodeType":"YulIdentifier","src":"11385:6:40"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nativeSrc":"11157:249:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11203:9:40","nodeType":"YulTypedName","src":"11203:9:40","type":""},{"name":"dataEnd","nativeSrc":"11214:7:40","nodeType":"YulTypedName","src":"11214:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"11226:6:40","nodeType":"YulTypedName","src":"11226:6:40","type":""}],"src":"11157:249:40"},{"body":{"nativeSrc":"11492:103:40","nodeType":"YulBlock","src":"11492:103:40","statements":[{"body":{"nativeSrc":"11538:16:40","nodeType":"YulBlock","src":"11538:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11547:1:40","nodeType":"YulLiteral","src":"11547:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"11550:1:40","nodeType":"YulLiteral","src":"11550:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11540:6:40","nodeType":"YulIdentifier","src":"11540:6:40"},"nativeSrc":"11540:12:40","nodeType":"YulFunctionCall","src":"11540:12:40"},"nativeSrc":"11540:12:40","nodeType":"YulExpressionStatement","src":"11540:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"11513:7:40","nodeType":"YulIdentifier","src":"11513:7:40"},{"name":"headStart","nativeSrc":"11522:9:40","nodeType":"YulIdentifier","src":"11522:9:40"}],"functionName":{"name":"sub","nativeSrc":"11509:3:40","nodeType":"YulIdentifier","src":"11509:3:40"},"nativeSrc":"11509:23:40","nodeType":"YulFunctionCall","src":"11509:23:40"},{"kind":"number","nativeSrc":"11534:2:40","nodeType":"YulLiteral","src":"11534:2:40","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"11505:3:40","nodeType":"YulIdentifier","src":"11505:3:40"},"nativeSrc":"11505:32:40","nodeType":"YulFunctionCall","src":"11505:32:40"},"nativeSrc":"11502:52:40","nodeType":"YulIf","src":"11502:52:40"},{"nativeSrc":"11563:26:40","nodeType":"YulAssignment","src":"11563:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"11579:9:40","nodeType":"YulIdentifier","src":"11579:9:40"}],"functionName":{"name":"mload","nativeSrc":"11573:5:40","nodeType":"YulIdentifier","src":"11573:5:40"},"nativeSrc":"11573:16:40","nodeType":"YulFunctionCall","src":"11573:16:40"},"variableNames":[{"name":"value0","nativeSrc":"11563:6:40","nodeType":"YulIdentifier","src":"11563:6:40"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nativeSrc":"11411:184:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11458:9:40","nodeType":"YulTypedName","src":"11458:9:40","type":""},{"name":"dataEnd","nativeSrc":"11469:7:40","nodeType":"YulTypedName","src":"11469:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"11481:6:40","nodeType":"YulTypedName","src":"11481:6:40","type":""}],"src":"11411:184:40"},{"body":{"nativeSrc":"11774:167:40","nodeType":"YulBlock","src":"11774:167:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11791:9:40","nodeType":"YulIdentifier","src":"11791:9:40"},{"kind":"number","nativeSrc":"11802:2:40","nodeType":"YulLiteral","src":"11802:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"11784:6:40","nodeType":"YulIdentifier","src":"11784:6:40"},"nativeSrc":"11784:21:40","nodeType":"YulFunctionCall","src":"11784:21:40"},"nativeSrc":"11784:21:40","nodeType":"YulExpressionStatement","src":"11784:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11825:9:40","nodeType":"YulIdentifier","src":"11825:9:40"},{"kind":"number","nativeSrc":"11836:2:40","nodeType":"YulLiteral","src":"11836:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11821:3:40","nodeType":"YulIdentifier","src":"11821:3:40"},"nativeSrc":"11821:18:40","nodeType":"YulFunctionCall","src":"11821:18:40"},{"kind":"number","nativeSrc":"11841:2:40","nodeType":"YulLiteral","src":"11841:2:40","type":"","value":"17"}],"functionName":{"name":"mstore","nativeSrc":"11814:6:40","nodeType":"YulIdentifier","src":"11814:6:40"},"nativeSrc":"11814:30:40","nodeType":"YulFunctionCall","src":"11814:30:40"},"nativeSrc":"11814:30:40","nodeType":"YulExpressionStatement","src":"11814:30:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11864:9:40","nodeType":"YulIdentifier","src":"11864:9:40"},{"kind":"number","nativeSrc":"11875:2:40","nodeType":"YulLiteral","src":"11875:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11860:3:40","nodeType":"YulIdentifier","src":"11860:3:40"},"nativeSrc":"11860:18:40","nodeType":"YulFunctionCall","src":"11860:18:40"},{"hexValue":"48617368206e6f7420617070726f766564","kind":"string","nativeSrc":"11880:19:40","nodeType":"YulLiteral","src":"11880:19:40","type":"","value":"Hash not approved"}],"functionName":{"name":"mstore","nativeSrc":"11853:6:40","nodeType":"YulIdentifier","src":"11853:6:40"},"nativeSrc":"11853:47:40","nodeType":"YulFunctionCall","src":"11853:47:40"},"nativeSrc":"11853:47:40","nodeType":"YulExpressionStatement","src":"11853:47:40"},{"nativeSrc":"11909:26:40","nodeType":"YulAssignment","src":"11909:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"11921:9:40","nodeType":"YulIdentifier","src":"11921:9:40"},{"kind":"number","nativeSrc":"11932:2:40","nodeType":"YulLiteral","src":"11932:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11917:3:40","nodeType":"YulIdentifier","src":"11917:3:40"},"nativeSrc":"11917:18:40","nodeType":"YulFunctionCall","src":"11917:18:40"},"variableNames":[{"name":"tail","nativeSrc":"11909:4:40","nodeType":"YulIdentifier","src":"11909:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_fd8211c71ab965565e8a56b84284a02d17d4d89e6f05f14b26449d5de3a8c5b6__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"11600:341:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11751:9:40","nodeType":"YulTypedName","src":"11751:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11765:4:40","nodeType":"YulTypedName","src":"11765:4:40","type":""}],"src":"11600:341:40"},{"body":{"nativeSrc":"12139:255:40","nodeType":"YulBlock","src":"12139:255:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12156:9:40","nodeType":"YulIdentifier","src":"12156:9:40"},{"name":"value0","nativeSrc":"12167:6:40","nodeType":"YulIdentifier","src":"12167:6:40"}],"functionName":{"name":"mstore","nativeSrc":"12149:6:40","nodeType":"YulIdentifier","src":"12149:6:40"},"nativeSrc":"12149:25:40","nodeType":"YulFunctionCall","src":"12149:25:40"},"nativeSrc":"12149:25:40","nodeType":"YulExpressionStatement","src":"12149:25:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12194:9:40","nodeType":"YulIdentifier","src":"12194:9:40"},{"kind":"number","nativeSrc":"12205:2:40","nodeType":"YulLiteral","src":"12205:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12190:3:40","nodeType":"YulIdentifier","src":"12190:3:40"},"nativeSrc":"12190:18:40","nodeType":"YulFunctionCall","src":"12190:18:40"},{"kind":"number","nativeSrc":"12210:2:40","nodeType":"YulLiteral","src":"12210:2:40","type":"","value":"96"}],"functionName":{"name":"mstore","nativeSrc":"12183:6:40","nodeType":"YulIdentifier","src":"12183:6:40"},"nativeSrc":"12183:30:40","nodeType":"YulFunctionCall","src":"12183:30:40"},"nativeSrc":"12183:30:40","nodeType":"YulExpressionStatement","src":"12183:30:40"},{"nativeSrc":"12222:58:40","nodeType":"YulVariableDeclaration","src":"12222:58:40","value":{"arguments":[{"name":"value1","nativeSrc":"12253:6:40","nodeType":"YulIdentifier","src":"12253:6:40"},{"arguments":[{"name":"headStart","nativeSrc":"12265:9:40","nodeType":"YulIdentifier","src":"12265:9:40"},{"kind":"number","nativeSrc":"12276:2:40","nodeType":"YulLiteral","src":"12276:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"12261:3:40","nodeType":"YulIdentifier","src":"12261:3:40"},"nativeSrc":"12261:18:40","nodeType":"YulFunctionCall","src":"12261:18:40"}],"functionName":{"name":"abi_encode_bytes","nativeSrc":"12236:16:40","nodeType":"YulIdentifier","src":"12236:16:40"},"nativeSrc":"12236:44:40","nodeType":"YulFunctionCall","src":"12236:44:40"},"variables":[{"name":"tail_1","nativeSrc":"12226:6:40","nodeType":"YulTypedName","src":"12226:6:40","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12300:9:40","nodeType":"YulIdentifier","src":"12300:9:40"},{"kind":"number","nativeSrc":"12311:2:40","nodeType":"YulLiteral","src":"12311:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12296:3:40","nodeType":"YulIdentifier","src":"12296:3:40"},"nativeSrc":"12296:18:40","nodeType":"YulFunctionCall","src":"12296:18:40"},{"arguments":[{"name":"tail_1","nativeSrc":"12320:6:40","nodeType":"YulIdentifier","src":"12320:6:40"},{"name":"headStart","nativeSrc":"12328:9:40","nodeType":"YulIdentifier","src":"12328:9:40"}],"functionName":{"name":"sub","nativeSrc":"12316:3:40","nodeType":"YulIdentifier","src":"12316:3:40"},"nativeSrc":"12316:22:40","nodeType":"YulFunctionCall","src":"12316:22:40"}],"functionName":{"name":"mstore","nativeSrc":"12289:6:40","nodeType":"YulIdentifier","src":"12289:6:40"},"nativeSrc":"12289:50:40","nodeType":"YulFunctionCall","src":"12289:50:40"},"nativeSrc":"12289:50:40","nodeType":"YulExpressionStatement","src":"12289:50:40"},{"nativeSrc":"12348:40:40","nodeType":"YulAssignment","src":"12348:40:40","value":{"arguments":[{"name":"value2","nativeSrc":"12373:6:40","nodeType":"YulIdentifier","src":"12373:6:40"},{"name":"tail_1","nativeSrc":"12381:6:40","nodeType":"YulIdentifier","src":"12381:6:40"}],"functionName":{"name":"abi_encode_bytes","nativeSrc":"12356:16:40","nodeType":"YulIdentifier","src":"12356:16:40"},"nativeSrc":"12356:32:40","nodeType":"YulFunctionCall","src":"12356:32:40"},"variableNames":[{"name":"tail","nativeSrc":"12348:4:40","nodeType":"YulIdentifier","src":"12348:4:40"}]}]},"name":"abi_encode_tuple_t_bytes32_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes32_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"11946:448:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12092:9:40","nodeType":"YulTypedName","src":"12092:9:40","type":""},{"name":"value2","nativeSrc":"12103:6:40","nodeType":"YulTypedName","src":"12103:6:40","type":""},{"name":"value1","nativeSrc":"12111:6:40","nodeType":"YulTypedName","src":"12111:6:40","type":""},{"name":"value0","nativeSrc":"12119:6:40","nodeType":"YulTypedName","src":"12119:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12130:4:40","nodeType":"YulTypedName","src":"12130:4:40","type":""}],"src":"11946:448:40"},{"body":{"nativeSrc":"12528:119:40","nodeType":"YulBlock","src":"12528:119:40","statements":[{"nativeSrc":"12538:26:40","nodeType":"YulAssignment","src":"12538:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"12550:9:40","nodeType":"YulIdentifier","src":"12550:9:40"},{"kind":"number","nativeSrc":"12561:2:40","nodeType":"YulLiteral","src":"12561:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12546:3:40","nodeType":"YulIdentifier","src":"12546:3:40"},"nativeSrc":"12546:18:40","nodeType":"YulFunctionCall","src":"12546:18:40"},"variableNames":[{"name":"tail","nativeSrc":"12538:4:40","nodeType":"YulIdentifier","src":"12538:4:40"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12580:9:40","nodeType":"YulIdentifier","src":"12580:9:40"},{"name":"value0","nativeSrc":"12591:6:40","nodeType":"YulIdentifier","src":"12591:6:40"}],"functionName":{"name":"mstore","nativeSrc":"12573:6:40","nodeType":"YulIdentifier","src":"12573:6:40"},"nativeSrc":"12573:25:40","nodeType":"YulFunctionCall","src":"12573:25:40"},"nativeSrc":"12573:25:40","nodeType":"YulExpressionStatement","src":"12573:25:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12618:9:40","nodeType":"YulIdentifier","src":"12618:9:40"},{"kind":"number","nativeSrc":"12629:2:40","nodeType":"YulLiteral","src":"12629:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12614:3:40","nodeType":"YulIdentifier","src":"12614:3:40"},"nativeSrc":"12614:18:40","nodeType":"YulFunctionCall","src":"12614:18:40"},{"name":"value1","nativeSrc":"12634:6:40","nodeType":"YulIdentifier","src":"12634:6:40"}],"functionName":{"name":"mstore","nativeSrc":"12607:6:40","nodeType":"YulIdentifier","src":"12607:6:40"},"nativeSrc":"12607:34:40","nodeType":"YulFunctionCall","src":"12607:34:40"},"nativeSrc":"12607:34:40","nodeType":"YulExpressionStatement","src":"12607:34:40"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed","nativeSrc":"12399:248:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12489:9:40","nodeType":"YulTypedName","src":"12489:9:40","type":""},{"name":"value1","nativeSrc":"12500:6:40","nodeType":"YulTypedName","src":"12500:6:40","type":""},{"name":"value0","nativeSrc":"12508:6:40","nodeType":"YulTypedName","src":"12508:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12519:4:40","nodeType":"YulTypedName","src":"12519:4:40","type":""}],"src":"12399:248:40"},{"body":{"nativeSrc":"12733:103:40","nodeType":"YulBlock","src":"12733:103:40","statements":[{"body":{"nativeSrc":"12779:16:40","nodeType":"YulBlock","src":"12779:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12788:1:40","nodeType":"YulLiteral","src":"12788:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"12791:1:40","nodeType":"YulLiteral","src":"12791:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"12781:6:40","nodeType":"YulIdentifier","src":"12781:6:40"},"nativeSrc":"12781:12:40","nodeType":"YulFunctionCall","src":"12781:12:40"},"nativeSrc":"12781:12:40","nodeType":"YulExpressionStatement","src":"12781:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"12754:7:40","nodeType":"YulIdentifier","src":"12754:7:40"},{"name":"headStart","nativeSrc":"12763:9:40","nodeType":"YulIdentifier","src":"12763:9:40"}],"functionName":{"name":"sub","nativeSrc":"12750:3:40","nodeType":"YulIdentifier","src":"12750:3:40"},"nativeSrc":"12750:23:40","nodeType":"YulFunctionCall","src":"12750:23:40"},{"kind":"number","nativeSrc":"12775:2:40","nodeType":"YulLiteral","src":"12775:2:40","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"12746:3:40","nodeType":"YulIdentifier","src":"12746:3:40"},"nativeSrc":"12746:32:40","nodeType":"YulFunctionCall","src":"12746:32:40"},"nativeSrc":"12743:52:40","nodeType":"YulIf","src":"12743:52:40"},{"nativeSrc":"12804:26:40","nodeType":"YulAssignment","src":"12804:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"12820:9:40","nodeType":"YulIdentifier","src":"12820:9:40"}],"functionName":{"name":"mload","nativeSrc":"12814:5:40","nodeType":"YulIdentifier","src":"12814:5:40"},"nativeSrc":"12814:16:40","nodeType":"YulFunctionCall","src":"12814:16:40"},"variableNames":[{"name":"value0","nativeSrc":"12804:6:40","nodeType":"YulIdentifier","src":"12804:6:40"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nativeSrc":"12652:184:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12699:9:40","nodeType":"YulTypedName","src":"12699:9:40","type":""},{"name":"dataEnd","nativeSrc":"12710:7:40","nodeType":"YulTypedName","src":"12710:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"12722:6:40","nodeType":"YulTypedName","src":"12722:6:40","type":""}],"src":"12652:184:40"},{"body":{"nativeSrc":"13040:222:40","nodeType":"YulBlock","src":"13040:222:40","statements":[{"nativeSrc":"13050:23:40","nodeType":"YulVariableDeclaration","src":"13050:23:40","value":{"arguments":[{"kind":"number","nativeSrc":"13064:3:40","nodeType":"YulLiteral","src":"13064:3:40","type":"","value":"248"},{"kind":"number","nativeSrc":"13069:3:40","nodeType":"YulLiteral","src":"13069:3:40","type":"","value":"255"}],"functionName":{"name":"shl","nativeSrc":"13060:3:40","nodeType":"YulIdentifier","src":"13060:3:40"},"nativeSrc":"13060:13:40","nodeType":"YulFunctionCall","src":"13060:13:40"},"variables":[{"name":"_1","nativeSrc":"13054:2:40","nodeType":"YulTypedName","src":"13054:2:40","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"13089:3:40","nodeType":"YulIdentifier","src":"13089:3:40"},{"arguments":[{"name":"value0","nativeSrc":"13098:6:40","nodeType":"YulIdentifier","src":"13098:6:40"},{"name":"_1","nativeSrc":"13106:2:40","nodeType":"YulIdentifier","src":"13106:2:40"}],"functionName":{"name":"and","nativeSrc":"13094:3:40","nodeType":"YulIdentifier","src":"13094:3:40"},"nativeSrc":"13094:15:40","nodeType":"YulFunctionCall","src":"13094:15:40"}],"functionName":{"name":"mstore","nativeSrc":"13082:6:40","nodeType":"YulIdentifier","src":"13082:6:40"},"nativeSrc":"13082:28:40","nodeType":"YulFunctionCall","src":"13082:28:40"},"nativeSrc":"13082:28:40","nodeType":"YulExpressionStatement","src":"13082:28:40"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"13130:3:40","nodeType":"YulIdentifier","src":"13130:3:40"},{"kind":"number","nativeSrc":"13135:1:40","nodeType":"YulLiteral","src":"13135:1:40","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"13126:3:40","nodeType":"YulIdentifier","src":"13126:3:40"},"nativeSrc":"13126:11:40","nodeType":"YulFunctionCall","src":"13126:11:40"},{"arguments":[{"name":"value1","nativeSrc":"13143:6:40","nodeType":"YulIdentifier","src":"13143:6:40"},{"name":"_1","nativeSrc":"13151:2:40","nodeType":"YulIdentifier","src":"13151:2:40"}],"functionName":{"name":"and","nativeSrc":"13139:3:40","nodeType":"YulIdentifier","src":"13139:3:40"},"nativeSrc":"13139:15:40","nodeType":"YulFunctionCall","src":"13139:15:40"}],"functionName":{"name":"mstore","nativeSrc":"13119:6:40","nodeType":"YulIdentifier","src":"13119:6:40"},"nativeSrc":"13119:36:40","nodeType":"YulFunctionCall","src":"13119:36:40"},"nativeSrc":"13119:36:40","nodeType":"YulExpressionStatement","src":"13119:36:40"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"13175:3:40","nodeType":"YulIdentifier","src":"13175:3:40"},{"kind":"number","nativeSrc":"13180:1:40","nodeType":"YulLiteral","src":"13180:1:40","type":"","value":"2"}],"functionName":{"name":"add","nativeSrc":"13171:3:40","nodeType":"YulIdentifier","src":"13171:3:40"},"nativeSrc":"13171:11:40","nodeType":"YulFunctionCall","src":"13171:11:40"},{"name":"value2","nativeSrc":"13184:6:40","nodeType":"YulIdentifier","src":"13184:6:40"}],"functionName":{"name":"mstore","nativeSrc":"13164:6:40","nodeType":"YulIdentifier","src":"13164:6:40"},"nativeSrc":"13164:27:40","nodeType":"YulFunctionCall","src":"13164:27:40"},"nativeSrc":"13164:27:40","nodeType":"YulExpressionStatement","src":"13164:27:40"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"13211:3:40","nodeType":"YulIdentifier","src":"13211:3:40"},{"kind":"number","nativeSrc":"13216:2:40","nodeType":"YulLiteral","src":"13216:2:40","type":"","value":"34"}],"functionName":{"name":"add","nativeSrc":"13207:3:40","nodeType":"YulIdentifier","src":"13207:3:40"},"nativeSrc":"13207:12:40","nodeType":"YulFunctionCall","src":"13207:12:40"},{"name":"value3","nativeSrc":"13221:6:40","nodeType":"YulIdentifier","src":"13221:6:40"}],"functionName":{"name":"mstore","nativeSrc":"13200:6:40","nodeType":"YulIdentifier","src":"13200:6:40"},"nativeSrc":"13200:28:40","nodeType":"YulFunctionCall","src":"13200:28:40"},"nativeSrc":"13200:28:40","nodeType":"YulExpressionStatement","src":"13200:28:40"},{"nativeSrc":"13237:19:40","nodeType":"YulAssignment","src":"13237:19:40","value":{"arguments":[{"name":"pos","nativeSrc":"13248:3:40","nodeType":"YulIdentifier","src":"13248:3:40"},{"kind":"number","nativeSrc":"13253:2:40","nodeType":"YulLiteral","src":"13253:2:40","type":"","value":"66"}],"functionName":{"name":"add","nativeSrc":"13244:3:40","nodeType":"YulIdentifier","src":"13244:3:40"},"nativeSrc":"13244:12:40","nodeType":"YulFunctionCall","src":"13244:12:40"},"variableNames":[{"name":"end","nativeSrc":"13237:3:40","nodeType":"YulIdentifier","src":"13237:3:40"}]}]},"name":"abi_encode_tuple_packed_t_bytes1_t_bytes1_t_bytes32_t_bytes32__to_t_bytes1_t_bytes1_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed","nativeSrc":"12841:421:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"12992:3:40","nodeType":"YulTypedName","src":"12992:3:40","type":""},{"name":"value3","nativeSrc":"12997:6:40","nodeType":"YulTypedName","src":"12997:6:40","type":""},{"name":"value2","nativeSrc":"13005:6:40","nodeType":"YulTypedName","src":"13005:6:40","type":""},{"name":"value1","nativeSrc":"13013:6:40","nodeType":"YulTypedName","src":"13013:6:40","type":""},{"name":"value0","nativeSrc":"13021:6:40","nodeType":"YulTypedName","src":"13021:6:40","type":""}],"returnVariables":[{"name":"end","nativeSrc":"13032:3:40","nodeType":"YulTypedName","src":"13032:3:40","type":""}],"src":"12841:421:40"},{"body":{"nativeSrc":"13405:145:40","nodeType":"YulBlock","src":"13405:145:40","statements":[{"nativeSrc":"13415:26:40","nodeType":"YulAssignment","src":"13415:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"13427:9:40","nodeType":"YulIdentifier","src":"13427:9:40"},{"kind":"number","nativeSrc":"13438:2:40","nodeType":"YulLiteral","src":"13438:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13423:3:40","nodeType":"YulIdentifier","src":"13423:3:40"},"nativeSrc":"13423:18:40","nodeType":"YulFunctionCall","src":"13423:18:40"},"variableNames":[{"name":"tail","nativeSrc":"13415:4:40","nodeType":"YulIdentifier","src":"13415:4:40"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13457:9:40","nodeType":"YulIdentifier","src":"13457:9:40"},{"arguments":[{"name":"value0","nativeSrc":"13472:6:40","nodeType":"YulIdentifier","src":"13472:6:40"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"13488:3:40","nodeType":"YulLiteral","src":"13488:3:40","type":"","value":"160"},{"kind":"number","nativeSrc":"13493:1:40","nodeType":"YulLiteral","src":"13493:1:40","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"13484:3:40","nodeType":"YulIdentifier","src":"13484:3:40"},"nativeSrc":"13484:11:40","nodeType":"YulFunctionCall","src":"13484:11:40"},{"kind":"number","nativeSrc":"13497:1:40","nodeType":"YulLiteral","src":"13497:1:40","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"13480:3:40","nodeType":"YulIdentifier","src":"13480:3:40"},"nativeSrc":"13480:19:40","nodeType":"YulFunctionCall","src":"13480:19:40"}],"functionName":{"name":"and","nativeSrc":"13468:3:40","nodeType":"YulIdentifier","src":"13468:3:40"},"nativeSrc":"13468:32:40","nodeType":"YulFunctionCall","src":"13468:32:40"}],"functionName":{"name":"mstore","nativeSrc":"13450:6:40","nodeType":"YulIdentifier","src":"13450:6:40"},"nativeSrc":"13450:51:40","nodeType":"YulFunctionCall","src":"13450:51:40"},"nativeSrc":"13450:51:40","nodeType":"YulExpressionStatement","src":"13450:51:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13521:9:40","nodeType":"YulIdentifier","src":"13521:9:40"},{"kind":"number","nativeSrc":"13532:2:40","nodeType":"YulLiteral","src":"13532:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13517:3:40","nodeType":"YulIdentifier","src":"13517:3:40"},"nativeSrc":"13517:18:40","nodeType":"YulFunctionCall","src":"13517:18:40"},{"name":"value1","nativeSrc":"13537:6:40","nodeType":"YulIdentifier","src":"13537:6:40"}],"functionName":{"name":"mstore","nativeSrc":"13510:6:40","nodeType":"YulIdentifier","src":"13510:6:40"},"nativeSrc":"13510:34:40","nodeType":"YulFunctionCall","src":"13510:34:40"},"nativeSrc":"13510:34:40","nodeType":"YulExpressionStatement","src":"13510:34:40"}]},"name":"abi_encode_tuple_t_address_t_rational_10_by_1__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"13267:283:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13366:9:40","nodeType":"YulTypedName","src":"13366:9:40","type":""},{"name":"value1","nativeSrc":"13377:6:40","nodeType":"YulTypedName","src":"13377:6:40","type":""},{"name":"value0","nativeSrc":"13385:6:40","nodeType":"YulTypedName","src":"13385:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13396:4:40","nodeType":"YulTypedName","src":"13396:4:40","type":""}],"src":"13267:283:40"},{"body":{"nativeSrc":"13615:78:40","nodeType":"YulBlock","src":"13615:78:40","statements":[{"nativeSrc":"13625:22:40","nodeType":"YulAssignment","src":"13625:22:40","value":{"arguments":[{"name":"offset","nativeSrc":"13640:6:40","nodeType":"YulIdentifier","src":"13640:6:40"}],"functionName":{"name":"mload","nativeSrc":"13634:5:40","nodeType":"YulIdentifier","src":"13634:5:40"},"nativeSrc":"13634:13:40","nodeType":"YulFunctionCall","src":"13634:13:40"},"variableNames":[{"name":"value","nativeSrc":"13625:5:40","nodeType":"YulIdentifier","src":"13625:5:40"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"13681:5:40","nodeType":"YulIdentifier","src":"13681:5:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"13656:24:40","nodeType":"YulIdentifier","src":"13656:24:40"},"nativeSrc":"13656:31:40","nodeType":"YulFunctionCall","src":"13656:31:40"},"nativeSrc":"13656:31:40","nodeType":"YulExpressionStatement","src":"13656:31:40"}]},"name":"abi_decode_address_fromMemory","nativeSrc":"13555:138:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"13594:6:40","nodeType":"YulTypedName","src":"13594:6:40","type":""}],"returnVariables":[{"name":"value","nativeSrc":"13605:5:40","nodeType":"YulTypedName","src":"13605:5:40","type":""}],"src":"13555:138:40"},{"body":{"nativeSrc":"13821:975:40","nodeType":"YulBlock","src":"13821:975:40","statements":[{"body":{"nativeSrc":"13867:16:40","nodeType":"YulBlock","src":"13867:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"13876:1:40","nodeType":"YulLiteral","src":"13876:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"13879:1:40","nodeType":"YulLiteral","src":"13879:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"13869:6:40","nodeType":"YulIdentifier","src":"13869:6:40"},"nativeSrc":"13869:12:40","nodeType":"YulFunctionCall","src":"13869:12:40"},"nativeSrc":"13869:12:40","nodeType":"YulExpressionStatement","src":"13869:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"13842:7:40","nodeType":"YulIdentifier","src":"13842:7:40"},{"name":"headStart","nativeSrc":"13851:9:40","nodeType":"YulIdentifier","src":"13851:9:40"}],"functionName":{"name":"sub","nativeSrc":"13838:3:40","nodeType":"YulIdentifier","src":"13838:3:40"},"nativeSrc":"13838:23:40","nodeType":"YulFunctionCall","src":"13838:23:40"},{"kind":"number","nativeSrc":"13863:2:40","nodeType":"YulLiteral","src":"13863:2:40","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"13834:3:40","nodeType":"YulIdentifier","src":"13834:3:40"},"nativeSrc":"13834:32:40","nodeType":"YulFunctionCall","src":"13834:32:40"},"nativeSrc":"13831:52:40","nodeType":"YulIf","src":"13831:52:40"},{"nativeSrc":"13892:30:40","nodeType":"YulVariableDeclaration","src":"13892:30:40","value":{"arguments":[{"name":"headStart","nativeSrc":"13912:9:40","nodeType":"YulIdentifier","src":"13912:9:40"}],"functionName":{"name":"mload","nativeSrc":"13906:5:40","nodeType":"YulIdentifier","src":"13906:5:40"},"nativeSrc":"13906:16:40","nodeType":"YulFunctionCall","src":"13906:16:40"},"variables":[{"name":"offset","nativeSrc":"13896:6:40","nodeType":"YulTypedName","src":"13896:6:40","type":""}]},{"nativeSrc":"13931:28:40","nodeType":"YulVariableDeclaration","src":"13931:28:40","value":{"kind":"number","nativeSrc":"13941:18:40","nodeType":"YulLiteral","src":"13941:18:40","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"13935:2:40","nodeType":"YulTypedName","src":"13935:2:40","type":""}]},{"body":{"nativeSrc":"13986:16:40","nodeType":"YulBlock","src":"13986:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"13995:1:40","nodeType":"YulLiteral","src":"13995:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"13998:1:40","nodeType":"YulLiteral","src":"13998:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"13988:6:40","nodeType":"YulIdentifier","src":"13988:6:40"},"nativeSrc":"13988:12:40","nodeType":"YulFunctionCall","src":"13988:12:40"},"nativeSrc":"13988:12:40","nodeType":"YulExpressionStatement","src":"13988:12:40"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"13974:6:40","nodeType":"YulIdentifier","src":"13974:6:40"},{"name":"_1","nativeSrc":"13982:2:40","nodeType":"YulIdentifier","src":"13982:2:40"}],"functionName":{"name":"gt","nativeSrc":"13971:2:40","nodeType":"YulIdentifier","src":"13971:2:40"},"nativeSrc":"13971:14:40","nodeType":"YulFunctionCall","src":"13971:14:40"},"nativeSrc":"13968:34:40","nodeType":"YulIf","src":"13968:34:40"},{"nativeSrc":"14011:32:40","nodeType":"YulVariableDeclaration","src":"14011:32:40","value":{"arguments":[{"name":"headStart","nativeSrc":"14025:9:40","nodeType":"YulIdentifier","src":"14025:9:40"},{"name":"offset","nativeSrc":"14036:6:40","nodeType":"YulIdentifier","src":"14036:6:40"}],"functionName":{"name":"add","nativeSrc":"14021:3:40","nodeType":"YulIdentifier","src":"14021:3:40"},"nativeSrc":"14021:22:40","nodeType":"YulFunctionCall","src":"14021:22:40"},"variables":[{"name":"_2","nativeSrc":"14015:2:40","nodeType":"YulTypedName","src":"14015:2:40","type":""}]},{"body":{"nativeSrc":"14091:16:40","nodeType":"YulBlock","src":"14091:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"14100:1:40","nodeType":"YulLiteral","src":"14100:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"14103:1:40","nodeType":"YulLiteral","src":"14103:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"14093:6:40","nodeType":"YulIdentifier","src":"14093:6:40"},"nativeSrc":"14093:12:40","nodeType":"YulFunctionCall","src":"14093:12:40"},"nativeSrc":"14093:12:40","nodeType":"YulExpressionStatement","src":"14093:12:40"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"14070:2:40","nodeType":"YulIdentifier","src":"14070:2:40"},{"kind":"number","nativeSrc":"14074:4:40","nodeType":"YulLiteral","src":"14074:4:40","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"14066:3:40","nodeType":"YulIdentifier","src":"14066:3:40"},"nativeSrc":"14066:13:40","nodeType":"YulFunctionCall","src":"14066:13:40"},{"name":"dataEnd","nativeSrc":"14081:7:40","nodeType":"YulIdentifier","src":"14081:7:40"}],"functionName":{"name":"slt","nativeSrc":"14062:3:40","nodeType":"YulIdentifier","src":"14062:3:40"},"nativeSrc":"14062:27:40","nodeType":"YulFunctionCall","src":"14062:27:40"}],"functionName":{"name":"iszero","nativeSrc":"14055:6:40","nodeType":"YulIdentifier","src":"14055:6:40"},"nativeSrc":"14055:35:40","nodeType":"YulFunctionCall","src":"14055:35:40"},"nativeSrc":"14052:55:40","nodeType":"YulIf","src":"14052:55:40"},{"nativeSrc":"14116:19:40","nodeType":"YulVariableDeclaration","src":"14116:19:40","value":{"arguments":[{"name":"_2","nativeSrc":"14132:2:40","nodeType":"YulIdentifier","src":"14132:2:40"}],"functionName":{"name":"mload","nativeSrc":"14126:5:40","nodeType":"YulIdentifier","src":"14126:5:40"},"nativeSrc":"14126:9:40","nodeType":"YulFunctionCall","src":"14126:9:40"},"variables":[{"name":"_3","nativeSrc":"14120:2:40","nodeType":"YulTypedName","src":"14120:2:40","type":""}]},{"nativeSrc":"14144:14:40","nodeType":"YulVariableDeclaration","src":"14144:14:40","value":{"kind":"number","nativeSrc":"14154:4:40","nodeType":"YulLiteral","src":"14154:4:40","type":"","value":"0x20"},"variables":[{"name":"_4","nativeSrc":"14148:2:40","nodeType":"YulTypedName","src":"14148:2:40","type":""}]},{"body":{"nativeSrc":"14181:22:40","nodeType":"YulBlock","src":"14181:22:40","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"14183:16:40","nodeType":"YulIdentifier","src":"14183:16:40"},"nativeSrc":"14183:18:40","nodeType":"YulFunctionCall","src":"14183:18:40"},"nativeSrc":"14183:18:40","nodeType":"YulExpressionStatement","src":"14183:18:40"}]},"condition":{"arguments":[{"name":"_3","nativeSrc":"14173:2:40","nodeType":"YulIdentifier","src":"14173:2:40"},{"name":"_1","nativeSrc":"14177:2:40","nodeType":"YulIdentifier","src":"14177:2:40"}],"functionName":{"name":"gt","nativeSrc":"14170:2:40","nodeType":"YulIdentifier","src":"14170:2:40"},"nativeSrc":"14170:10:40","nodeType":"YulFunctionCall","src":"14170:10:40"},"nativeSrc":"14167:36:40","nodeType":"YulIf","src":"14167:36:40"},{"nativeSrc":"14212:20:40","nodeType":"YulVariableDeclaration","src":"14212:20:40","value":{"arguments":[{"kind":"number","nativeSrc":"14226:1:40","nodeType":"YulLiteral","src":"14226:1:40","type":"","value":"5"},{"name":"_3","nativeSrc":"14229:2:40","nodeType":"YulIdentifier","src":"14229:2:40"}],"functionName":{"name":"shl","nativeSrc":"14222:3:40","nodeType":"YulIdentifier","src":"14222:3:40"},"nativeSrc":"14222:10:40","nodeType":"YulFunctionCall","src":"14222:10:40"},"variables":[{"name":"_5","nativeSrc":"14216:2:40","nodeType":"YulTypedName","src":"14216:2:40","type":""}]},{"nativeSrc":"14241:39:40","nodeType":"YulVariableDeclaration","src":"14241:39:40","value":{"arguments":[{"arguments":[{"name":"_5","nativeSrc":"14272:2:40","nodeType":"YulIdentifier","src":"14272:2:40"},{"name":"_4","nativeSrc":"14276:2:40","nodeType":"YulIdentifier","src":"14276:2:40"}],"functionName":{"name":"add","nativeSrc":"14268:3:40","nodeType":"YulIdentifier","src":"14268:3:40"},"nativeSrc":"14268:11:40","nodeType":"YulFunctionCall","src":"14268:11:40"}],"functionName":{"name":"allocate_memory","nativeSrc":"14252:15:40","nodeType":"YulIdentifier","src":"14252:15:40"},"nativeSrc":"14252:28:40","nodeType":"YulFunctionCall","src":"14252:28:40"},"variables":[{"name":"dst","nativeSrc":"14245:3:40","nodeType":"YulTypedName","src":"14245:3:40","type":""}]},{"nativeSrc":"14289:16:40","nodeType":"YulVariableDeclaration","src":"14289:16:40","value":{"name":"dst","nativeSrc":"14302:3:40","nodeType":"YulIdentifier","src":"14302:3:40"},"variables":[{"name":"dst_1","nativeSrc":"14293:5:40","nodeType":"YulTypedName","src":"14293:5:40","type":""}]},{"expression":{"arguments":[{"name":"dst","nativeSrc":"14321:3:40","nodeType":"YulIdentifier","src":"14321:3:40"},{"name":"_3","nativeSrc":"14326:2:40","nodeType":"YulIdentifier","src":"14326:2:40"}],"functionName":{"name":"mstore","nativeSrc":"14314:6:40","nodeType":"YulIdentifier","src":"14314:6:40"},"nativeSrc":"14314:15:40","nodeType":"YulFunctionCall","src":"14314:15:40"},"nativeSrc":"14314:15:40","nodeType":"YulExpressionStatement","src":"14314:15:40"},{"nativeSrc":"14338:19:40","nodeType":"YulAssignment","src":"14338:19:40","value":{"arguments":[{"name":"dst","nativeSrc":"14349:3:40","nodeType":"YulIdentifier","src":"14349:3:40"},{"name":"_4","nativeSrc":"14354:2:40","nodeType":"YulIdentifier","src":"14354:2:40"}],"functionName":{"name":"add","nativeSrc":"14345:3:40","nodeType":"YulIdentifier","src":"14345:3:40"},"nativeSrc":"14345:12:40","nodeType":"YulFunctionCall","src":"14345:12:40"},"variableNames":[{"name":"dst","nativeSrc":"14338:3:40","nodeType":"YulIdentifier","src":"14338:3:40"}]},{"nativeSrc":"14366:34:40","nodeType":"YulVariableDeclaration","src":"14366:34:40","value":{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"14388:2:40","nodeType":"YulIdentifier","src":"14388:2:40"},{"name":"_5","nativeSrc":"14392:2:40","nodeType":"YulIdentifier","src":"14392:2:40"}],"functionName":{"name":"add","nativeSrc":"14384:3:40","nodeType":"YulIdentifier","src":"14384:3:40"},"nativeSrc":"14384:11:40","nodeType":"YulFunctionCall","src":"14384:11:40"},{"name":"_4","nativeSrc":"14397:2:40","nodeType":"YulIdentifier","src":"14397:2:40"}],"functionName":{"name":"add","nativeSrc":"14380:3:40","nodeType":"YulIdentifier","src":"14380:3:40"},"nativeSrc":"14380:20:40","nodeType":"YulFunctionCall","src":"14380:20:40"},"variables":[{"name":"srcEnd","nativeSrc":"14370:6:40","nodeType":"YulTypedName","src":"14370:6:40","type":""}]},{"body":{"nativeSrc":"14432:16:40","nodeType":"YulBlock","src":"14432:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"14441:1:40","nodeType":"YulLiteral","src":"14441:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"14444:1:40","nodeType":"YulLiteral","src":"14444:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"14434:6:40","nodeType":"YulIdentifier","src":"14434:6:40"},"nativeSrc":"14434:12:40","nodeType":"YulFunctionCall","src":"14434:12:40"},"nativeSrc":"14434:12:40","nodeType":"YulExpressionStatement","src":"14434:12:40"}]},"condition":{"arguments":[{"name":"srcEnd","nativeSrc":"14415:6:40","nodeType":"YulIdentifier","src":"14415:6:40"},{"name":"dataEnd","nativeSrc":"14423:7:40","nodeType":"YulIdentifier","src":"14423:7:40"}],"functionName":{"name":"gt","nativeSrc":"14412:2:40","nodeType":"YulIdentifier","src":"14412:2:40"},"nativeSrc":"14412:19:40","nodeType":"YulFunctionCall","src":"14412:19:40"},"nativeSrc":"14409:39:40","nodeType":"YulIf","src":"14409:39:40"},{"nativeSrc":"14457:22:40","nodeType":"YulVariableDeclaration","src":"14457:22:40","value":{"arguments":[{"name":"_2","nativeSrc":"14472:2:40","nodeType":"YulIdentifier","src":"14472:2:40"},{"name":"_4","nativeSrc":"14476:2:40","nodeType":"YulIdentifier","src":"14476:2:40"}],"functionName":{"name":"add","nativeSrc":"14468:3:40","nodeType":"YulIdentifier","src":"14468:3:40"},"nativeSrc":"14468:11:40","nodeType":"YulFunctionCall","src":"14468:11:40"},"variables":[{"name":"src","nativeSrc":"14461:3:40","nodeType":"YulTypedName","src":"14461:3:40","type":""}]},{"body":{"nativeSrc":"14544:154:40","nodeType":"YulBlock","src":"14544:154:40","statements":[{"nativeSrc":"14558:23:40","nodeType":"YulVariableDeclaration","src":"14558:23:40","value":{"arguments":[{"name":"src","nativeSrc":"14577:3:40","nodeType":"YulIdentifier","src":"14577:3:40"}],"functionName":{"name":"mload","nativeSrc":"14571:5:40","nodeType":"YulIdentifier","src":"14571:5:40"},"nativeSrc":"14571:10:40","nodeType":"YulFunctionCall","src":"14571:10:40"},"variables":[{"name":"value","nativeSrc":"14562:5:40","nodeType":"YulTypedName","src":"14562:5:40","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"14619:5:40","nodeType":"YulIdentifier","src":"14619:5:40"}],"functionName":{"name":"validator_revert_address","nativeSrc":"14594:24:40","nodeType":"YulIdentifier","src":"14594:24:40"},"nativeSrc":"14594:31:40","nodeType":"YulFunctionCall","src":"14594:31:40"},"nativeSrc":"14594:31:40","nodeType":"YulExpressionStatement","src":"14594:31:40"},{"expression":{"arguments":[{"name":"dst","nativeSrc":"14645:3:40","nodeType":"YulIdentifier","src":"14645:3:40"},{"name":"value","nativeSrc":"14650:5:40","nodeType":"YulIdentifier","src":"14650:5:40"}],"functionName":{"name":"mstore","nativeSrc":"14638:6:40","nodeType":"YulIdentifier","src":"14638:6:40"},"nativeSrc":"14638:18:40","nodeType":"YulFunctionCall","src":"14638:18:40"},"nativeSrc":"14638:18:40","nodeType":"YulExpressionStatement","src":"14638:18:40"},{"nativeSrc":"14669:19:40","nodeType":"YulAssignment","src":"14669:19:40","value":{"arguments":[{"name":"dst","nativeSrc":"14680:3:40","nodeType":"YulIdentifier","src":"14680:3:40"},{"name":"_4","nativeSrc":"14685:2:40","nodeType":"YulIdentifier","src":"14685:2:40"}],"functionName":{"name":"add","nativeSrc":"14676:3:40","nodeType":"YulIdentifier","src":"14676:3:40"},"nativeSrc":"14676:12:40","nodeType":"YulFunctionCall","src":"14676:12:40"},"variableNames":[{"name":"dst","nativeSrc":"14669:3:40","nodeType":"YulIdentifier","src":"14669:3:40"}]}]},"condition":{"arguments":[{"name":"src","nativeSrc":"14499:3:40","nodeType":"YulIdentifier","src":"14499:3:40"},{"name":"srcEnd","nativeSrc":"14504:6:40","nodeType":"YulIdentifier","src":"14504:6:40"}],"functionName":{"name":"lt","nativeSrc":"14496:2:40","nodeType":"YulIdentifier","src":"14496:2:40"},"nativeSrc":"14496:15:40","nodeType":"YulFunctionCall","src":"14496:15:40"},"nativeSrc":"14488:210:40","nodeType":"YulForLoop","post":{"nativeSrc":"14512:23:40","nodeType":"YulBlock","src":"14512:23:40","statements":[{"nativeSrc":"14514:19:40","nodeType":"YulAssignment","src":"14514:19:40","value":{"arguments":[{"name":"src","nativeSrc":"14525:3:40","nodeType":"YulIdentifier","src":"14525:3:40"},{"name":"_4","nativeSrc":"14530:2:40","nodeType":"YulIdentifier","src":"14530:2:40"}],"functionName":{"name":"add","nativeSrc":"14521:3:40","nodeType":"YulIdentifier","src":"14521:3:40"},"nativeSrc":"14521:12:40","nodeType":"YulFunctionCall","src":"14521:12:40"},"variableNames":[{"name":"src","nativeSrc":"14514:3:40","nodeType":"YulIdentifier","src":"14514:3:40"}]}]},"pre":{"nativeSrc":"14492:3:40","nodeType":"YulBlock","src":"14492:3:40","statements":[]},"src":"14488:210:40"},{"nativeSrc":"14707:15:40","nodeType":"YulAssignment","src":"14707:15:40","value":{"name":"dst_1","nativeSrc":"14717:5:40","nodeType":"YulIdentifier","src":"14717:5:40"},"variableNames":[{"name":"value0","nativeSrc":"14707:6:40","nodeType":"YulIdentifier","src":"14707:6:40"}]},{"nativeSrc":"14731:59:40","nodeType":"YulAssignment","src":"14731:59:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14775:9:40","nodeType":"YulIdentifier","src":"14775:9:40"},{"name":"_4","nativeSrc":"14786:2:40","nodeType":"YulIdentifier","src":"14786:2:40"}],"functionName":{"name":"add","nativeSrc":"14771:3:40","nodeType":"YulIdentifier","src":"14771:3:40"},"nativeSrc":"14771:18:40","nodeType":"YulFunctionCall","src":"14771:18:40"}],"functionName":{"name":"abi_decode_address_fromMemory","nativeSrc":"14741:29:40","nodeType":"YulIdentifier","src":"14741:29:40"},"nativeSrc":"14741:49:40","nodeType":"YulFunctionCall","src":"14741:49:40"},"variableNames":[{"name":"value1","nativeSrc":"14731:6:40","nodeType":"YulIdentifier","src":"14731:6:40"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_address_fromMemory","nativeSrc":"13698:1098:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13779:9:40","nodeType":"YulTypedName","src":"13779:9:40","type":""},{"name":"dataEnd","nativeSrc":"13790:7:40","nodeType":"YulTypedName","src":"13790:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"13802:6:40","nodeType":"YulTypedName","src":"13802:6:40","type":""},{"name":"value1","nativeSrc":"13810:6:40","nodeType":"YulTypedName","src":"13810:6:40","type":""}],"src":"13698:1098:40"}]},"contents":"{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_uint256t_bytes_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_address(value_2)\n        value2 := value_2\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n        let offset_1 := calldataload(add(headStart, 160))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value6_1, value7_1 := abi_decode_bytes_calldata(add(headStart, offset_1), dataEnd)\n        value6 := value6_1\n        value7 := value7_1\n    }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let array_1 := allocate_memory(add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), 0)\n        array := array_1\n    }\n    function abi_decode_tuple_t_bytes_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, shl(224, 0xffffffff)))\n    }\n    function abi_decode_tuple_t_bytes32t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n    }\n    function abi_decode_tuple_t_bytes_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_bytes(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset_1), dataEnd)\n    }\n    function abi_decode_tuple_t_contract$_Safe_$1853t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, 32)\n        mstore(headStart, 32)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, 32)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_decode_array_uint256_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value6_1, value7_1 := abi_decode_bytes_calldata(add(headStart, offset_2), dataEnd)\n        value6 := value6_1\n        value7 := value7_1\n    }\n    function abi_decode_tuple_t_addresst_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr_t_bytes_calldata_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_bytes(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        mstore(tail_1, value2)\n        calldatacopy(add(tail_1, 32), value1, value2)\n        mstore(add(add(tail_1, value2), 32), 0)\n        tail := add(add(tail_1, and(add(value2, 31), not(31))), 32)\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_fd8211c71ab965565e8a56b84284a02d17d4d89e6f05f14b26449d5de3a8c5b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Hash not approved\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes32_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), 96)\n        let tail_1 := abi_encode_bytes(value1, add(headStart, 96))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        tail := abi_encode_bytes(value2, tail_1)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_packed_t_bytes1_t_bytes1_t_bytes32_t_bytes32__to_t_bytes1_t_bytes1_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value3, value2, value1, value0) -> end\n    {\n        let _1 := shl(248, 255)\n        mstore(pos, and(value0, _1))\n        mstore(add(pos, 1), and(value1, _1))\n        mstore(add(pos, 2), value2)\n        mstore(add(pos, 34), value3)\n        end := add(pos, 66)\n    }\n    function abi_encode_tuple_t_address_t_rational_10_by_1__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        validator_revert_address(value)\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := mload(_2)\n        let _4 := 0x20\n        if gt(_3, _1) { panic_error_0x41() }\n        let _5 := shl(5, _3)\n        let dst := allocate_memory(add(_5, _4))\n        let dst_1 := dst\n        mstore(dst, _3)\n        dst := add(dst, _4)\n        let srcEnd := add(add(_2, _5), _4)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _4)\n        for { } lt(src, srcEnd) { src := add(src, _4) }\n        {\n            let value := mload(src)\n            validator_revert_address(value)\n            mstore(dst, value)\n            dst := add(dst, _4)\n        }\n        value0 := dst_1\n        value1 := abi_decode_address_fromMemory(add(headStart, _4))\n    }\n}","id":40,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100b35760003560e01c8063230316401161007157806323031640146101795780636ac2478414610199578063b2494df3146101ac578063bc197c81146101c1578063bd61951d146101e3578063f23a6e61146101f657600080fd5b806223de29146100b857806301ffc9a7146100d25780630a1028c4146100fa578063150b7a021461011b5780631626ba7e1461015357806320c13b0b14610166575b600080fd5b6100d06100c63660046106ce565b5050505050505050565b005b6100e56100e0366004610794565b610216565b60405190151581526020015b60405180910390f35b61010d610108366004610866565b610268565b6040519081526020016100f1565b61013a6101293660046108a2565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016100f1565b61013a610161366004610914565b610274565b61013a61017436600461095f565b610332565b61018c6101873660046109c2565b61047c565b6040516100f19190610a4d565b61010d6101a73660046109c2565b61058e565b6101b46105a9565b6040516100f19190610a60565b61013a6101cf366004610af1565b63bc197c8160e01b98975050505050505050565b61018c6101f1366004610b8e565b610624565b61013a610204366004610bc9565b63f23a6e6160e01b9695505050505050565b60006001600160e01b03198216630271189760e51b148061024757506001600160e01b03198216630a85bd0160e11b145b8061026257506001600160e01b031982166301ffc9a760e01b145b92915050565b6000610262338361058e565b60408051602080820186905282518083039091018152818301928390526320c13b0b60e01b9092526000913391839183916320c13b0b916102bb9189908990604401610c44565b602060405180830381865afa1580156102d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fc9190610c8a565b90506001600160e01b031981166320c13b0b60e01b1461031d576000610326565b630b135d3f60e11b5b925050505b9392505050565b60003381610340828661047c565b8051602082012085519192509060000361040957604051635ae6bd3760e01b8152600481018290526001600160a01b03841690635ae6bd3790602401602060405180830381865afa158015610399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bd9190610ca7565b6000036104045760405162461bcd60e51b815260206004820152601160248201527012185cda081b9bdd08185c1c1c9bdd9959607a1b604482015260640160405180910390fd5b61046a565b60405163934f3a1160e01b81526001600160a01b0384169063934f3a119061043990849086908a90600401610cc0565b60006040518083038186803b15801561045157600080fd5b505afa158015610465573d6000803e3d6000fd5b505050505b506320c13b0b60e01b95945050505050565b606060007f60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca60001b83805190602001206040516020016104c6929190918252602082015260400190565b604051602081830303815290604052805190602001209050601960f81b600160f81b856001600160a01b031663f698da256040518163ffffffff1660e01b8152600401602060405180830381865afa158015610526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054a9190610ca7565b6040516001600160f81b0319938416602082015292909116602183015260228201526042810182905260620160405160208183030381529060405291505092915050565b600061059a838361047c565b80519060200120905092915050565b604051636617c22960e11b815260016004820152600a60248201526060903390600090829063cc2f845290604401600060405180830381865afa1580156105f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261061c9190810190610d05565b509392505050565b606060405163b4faba0960e01b8152600436036004808301376020600036836000335af1505060203d036040519150808201604052806020833e5060005161032b57805160208201fd5b6001600160a01b038116811461068357600080fd5b50565b60008083601f84011261069857600080fd5b5081356001600160401b038111156106af57600080fd5b6020830191508360208285010111156106c757600080fd5b9250929050565b60008060008060008060008060c0898b0312156106ea57600080fd5b88356106f58161066e565b975060208901356107058161066e565b965060408901356107158161066e565b95506060890135945060808901356001600160401b038082111561073857600080fd5b6107448c838d01610686565b909650945060a08b013591508082111561075d57600080fd5b5061076a8b828c01610686565b999c989b5096995094979396929594505050565b6001600160e01b03198116811461068357600080fd5b6000602082840312156107a657600080fd5b813561032b8161077e565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156107ef576107ef6107b1565b604052919050565b600082601f83011261080857600080fd5b81356001600160401b03811115610821576108216107b1565b610834601f8201601f19166020016107c7565b81815284602083860101111561084957600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561087857600080fd5b81356001600160401b0381111561088e57600080fd5b61089a848285016107f7565b949350505050565b6000806000806000608086880312156108ba57600080fd5b85356108c58161066e565b945060208601356108d58161066e565b93506040860135925060608601356001600160401b038111156108f757600080fd5b61090388828901610686565b969995985093965092949392505050565b60008060006040848603121561092957600080fd5b8335925060208401356001600160401b0381111561094657600080fd5b61095286828701610686565b9497909650939450505050565b6000806040838503121561097257600080fd5b82356001600160401b038082111561098957600080fd5b610995868387016107f7565b935060208501359150808211156109ab57600080fd5b506109b8858286016107f7565b9150509250929050565b600080604083850312156109d557600080fd5b82356109e08161066e565b915060208301356001600160401b038111156109fb57600080fd5b6109b8858286016107f7565b6000815180845260005b81811015610a2d57602081850181015186830182015201610a11565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061032b6020830184610a07565b6020808252825182820181905260009190848201906040850190845b81811015610aa15783516001600160a01b031683529284019291840191600101610a7c565b50909695505050505050565b60008083601f840112610abf57600080fd5b5081356001600160401b03811115610ad657600080fd5b6020830191508360208260051b85010111156106c757600080fd5b60008060008060008060008060a0898b031215610b0d57600080fd5b8835610b188161066e565b97506020890135610b288161066e565b965060408901356001600160401b0380821115610b4457600080fd5b610b508c838d01610aad565b909850965060608b0135915080821115610b6957600080fd5b610b758c838d01610aad565b909650945060808b013591508082111561075d57600080fd5b600080600060408486031215610ba357600080fd5b8335610bae8161066e565b925060208401356001600160401b0381111561094657600080fd5b60008060008060008060a08789031215610be257600080fd5b8635610bed8161066e565b95506020870135610bfd8161066e565b9450604087013593506060870135925060808701356001600160401b03811115610c2657600080fd5b610c3289828a01610686565b979a9699509497509295939492505050565b604081526000610c576040830186610a07565b8281036020840152838152838560208301376000602085830101526020601f19601f860116820101915050949350505050565b600060208284031215610c9c57600080fd5b815161032b8161077e565b600060208284031215610cb957600080fd5b5051919050565b838152606060208201526000610cd96060830185610a07565b8281036040840152610ceb8185610a07565b9695505050505050565b8051610d008161066e565b919050565b60008060408385031215610d1857600080fd5b82516001600160401b0380821115610d2f57600080fd5b818501915085601f830112610d4357600080fd5b8151602082821115610d5757610d576107b1565b8160051b9250610d688184016107c7565b8281529284018101928181019089851115610d8257600080fd5b948201945b84861015610dac5785519350610d9c8461066e565b8382529482019490820190610d87565b9650610dbb9050878201610cf5565b945050505050925092905056fea2646970667358221220e767bd389afc790344b025f640b9f5efe677e1fb2429b37c469a30c2c9eafcef64736f6c63430008170033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x23031640 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x23031640 EQ PUSH2 0x179 JUMPI DUP1 PUSH4 0x6AC24784 EQ PUSH2 0x199 JUMPI DUP1 PUSH4 0xB2494DF3 EQ PUSH2 0x1AC JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x1C1 JUMPI DUP1 PUSH4 0xBD61951D EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x1F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x23DE29 EQ PUSH2 0xB8 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD2 JUMPI DUP1 PUSH4 0xA1028C4 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x11B JUMPI DUP1 PUSH4 0x1626BA7E EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0x20C13B0B EQ PUSH2 0x166 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD0 PUSH2 0xC6 CALLDATASIZE PUSH1 0x4 PUSH2 0x6CE JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE5 PUSH2 0xE0 CALLDATASIZE PUSH1 0x4 PUSH2 0x794 JUMP JUMPDEST PUSH2 0x216 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10D PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0x866 JUMP JUMPDEST PUSH2 0x268 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF1 JUMP JUMPDEST PUSH2 0x13A PUSH2 0x129 CALLDATASIZE PUSH1 0x4 PUSH2 0x8A2 JUMP JUMPDEST PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF1 JUMP JUMPDEST PUSH2 0x13A PUSH2 0x161 CALLDATASIZE PUSH1 0x4 PUSH2 0x914 JUMP JUMPDEST PUSH2 0x274 JUMP JUMPDEST PUSH2 0x13A PUSH2 0x174 CALLDATASIZE PUSH1 0x4 PUSH2 0x95F JUMP JUMPDEST PUSH2 0x332 JUMP JUMPDEST PUSH2 0x18C PUSH2 0x187 CALLDATASIZE PUSH1 0x4 PUSH2 0x9C2 JUMP JUMPDEST PUSH2 0x47C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF1 SWAP2 SWAP1 PUSH2 0xA4D JUMP JUMPDEST PUSH2 0x10D PUSH2 0x1A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x9C2 JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST PUSH2 0x1B4 PUSH2 0x5A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF1 SWAP2 SWAP1 PUSH2 0xA60 JUMP JUMPDEST PUSH2 0x13A PUSH2 0x1CF CALLDATASIZE PUSH1 0x4 PUSH2 0xAF1 JUMP JUMPDEST PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x18C PUSH2 0x1F1 CALLDATASIZE PUSH1 0x4 PUSH2 0xB8E JUMP JUMPDEST PUSH2 0x624 JUMP JUMPDEST PUSH2 0x13A PUSH2 0x204 CALLDATASIZE PUSH1 0x4 PUSH2 0xBC9 JUMP JUMPDEST PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x2711897 PUSH1 0xE5 SHL EQ DUP1 PUSH2 0x247 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ JUMPDEST DUP1 PUSH2 0x262 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x262 CALLER DUP4 PUSH2 0x58E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP7 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE DUP2 DUP4 ADD SWAP3 DUP4 SWAP1 MSTORE PUSH4 0x20C13B0B PUSH1 0xE0 SHL SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 CALLER SWAP2 DUP4 SWAP2 DUP4 SWAP2 PUSH4 0x20C13B0B SWAP2 PUSH2 0x2BB SWAP2 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x44 ADD PUSH2 0xC44 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2D8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2FC SWAP2 SWAP1 PUSH2 0xC8A JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x20C13B0B PUSH1 0xE0 SHL EQ PUSH2 0x31D JUMPI PUSH1 0x0 PUSH2 0x326 JUMP JUMPDEST PUSH4 0xB135D3F PUSH1 0xE1 SHL JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x340 DUP3 DUP7 PUSH2 0x47C JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD KECCAK256 DUP6 MLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x0 SUB PUSH2 0x409 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5AE6BD37 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x5AE6BD37 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x399 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3BD SWAP2 SWAP1 PUSH2 0xCA7 JUMP JUMPDEST PUSH1 0x0 SUB PUSH2 0x404 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x12185CDA081B9BDD08185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x46A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x934F3A11 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x934F3A11 SWAP1 PUSH2 0x439 SWAP1 DUP5 SWAP1 DUP7 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xCC0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x451 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x465 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP PUSH4 0x20C13B0B PUSH1 0xE0 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH32 0x60B3CBF8B4A223D68D641B3B6DDF9A298E7F33710CF3D3A9D1146B5A6150FBCA PUSH1 0x0 SHL DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4C6 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x19 PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0xF8 SHL DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF698DA25 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x526 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x54A SWAP2 SWAP1 PUSH2 0xCA7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT SWAP4 DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x21 DUP4 ADD MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x62 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x59A DUP4 DUP4 PUSH2 0x47C JUMP JUMPDEST DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6617C229 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x60 SWAP1 CALLER SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH4 0xCC2F8452 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5F4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x61C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xD05 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH4 0xB4FABA09 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 CALLDATASIZE SUB PUSH1 0x4 DUP1 DUP4 ADD CALLDATACOPY PUSH1 0x20 PUSH1 0x0 CALLDATASIZE DUP4 PUSH1 0x0 CALLER GAS CALL POP POP PUSH1 0x20 RETURNDATASIZE SUB PUSH1 0x40 MLOAD SWAP2 POP DUP1 DUP3 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP4 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH2 0x32B JUMPI DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x683 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x698 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x6AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x6C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x6EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0x6F5 DUP2 PUSH2 0x66E JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH2 0x705 DUP2 PUSH2 0x66E JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH2 0x715 DUP2 PUSH2 0x66E JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x738 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x744 DUP13 DUP4 DUP14 ADD PUSH2 0x686 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0xA0 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x75D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x76A DUP12 DUP3 DUP13 ADD PUSH2 0x686 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x683 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x32B DUP2 PUSH2 0x77E JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x7EF JUMPI PUSH2 0x7EF PUSH2 0x7B1 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x808 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x821 JUMPI PUSH2 0x821 PUSH2 0x7B1 JUMP JUMPDEST PUSH2 0x834 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x7C7 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x849 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x878 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x88E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x89A DUP5 DUP3 DUP6 ADD PUSH2 0x7F7 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x8BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8C5 DUP2 PUSH2 0x66E JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x8D5 DUP2 PUSH2 0x66E JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x903 DUP9 DUP3 DUP10 ADD PUSH2 0x686 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x929 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x946 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x952 DUP7 DUP3 DUP8 ADD PUSH2 0x686 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x972 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x989 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x995 DUP7 DUP4 DUP8 ADD PUSH2 0x7F7 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x9AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9B8 DUP6 DUP3 DUP7 ADD PUSH2 0x7F7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x9E0 DUP2 PUSH2 0x66E JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9B8 DUP6 DUP3 DUP7 ADD PUSH2 0x7F7 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA2D JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xA11 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x32B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xA07 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xAA1 JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xA7C JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xABF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xAD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x6C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0xB0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0xB18 DUP2 PUSH2 0x66E JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH2 0xB28 DUP2 PUSH2 0x66E JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0xB44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB50 DUP13 DUP4 DUP14 ADD PUSH2 0xAAD JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xB69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB75 DUP13 DUP4 DUP14 ADD PUSH2 0xAAD JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x75D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xBA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0xBAE DUP2 PUSH2 0x66E JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x946 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xBE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0xBED DUP2 PUSH2 0x66E JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0xBFD DUP2 PUSH2 0x66E JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xC26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC32 DUP10 DUP3 DUP11 ADD PUSH2 0x686 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0xC57 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0xA07 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE DUP4 DUP2 MSTORE DUP4 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP7 ADD AND DUP3 ADD ADD SWAP2 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x32B DUP2 PUSH2 0x77E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xCD9 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0xA07 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0xCEB DUP2 DUP6 PUSH2 0xA07 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0xD00 DUP2 PUSH2 0x66E JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0xD2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH2 0xD57 JUMPI PUSH2 0xD57 PUSH2 0x7B1 JUMP JUMPDEST DUP2 PUSH1 0x5 SHL SWAP3 POP PUSH2 0xD68 DUP2 DUP5 ADD PUSH2 0x7C7 JUMP JUMPDEST DUP3 DUP2 MSTORE SWAP3 DUP5 ADD DUP2 ADD SWAP3 DUP2 DUP2 ADD SWAP1 DUP10 DUP6 GT ISZERO PUSH2 0xD82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP5 DUP7 LT ISZERO PUSH2 0xDAC JUMPI DUP6 MLOAD SWAP4 POP PUSH2 0xD9C DUP5 PUSH2 0x66E JUMP JUMPDEST DUP4 DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0xD87 JUMP JUMPDEST SWAP7 POP PUSH2 0xDBB SWAP1 POP DUP8 DUP3 ADD PUSH2 0xCF5 JUMP JUMPDEST SWAP5 POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE7 PUSH8 0xBD389AFC790344B0 0x25 0xF6 BLOCKHASH 0xB9 CREATE2 0xEF 0xE6 PUSH24 0xE1FB2429B37C469A30C2C9EAFCEF64736F6C634300081700 CALLER ","sourceMap":"343:7385:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1553:199:24;;;;;;:::i;:::-;;;;;;;;;;;;1977:306;;;;;;:::i;:::-;;:::i;:::-;;;2263:14:40;;2256:22;2238:41;;2226:2;2211:18;1977:306:24;;;;;;;;1925:157:22;;;;;;:::i;:::-;;:::i;:::-;;;3708:25:40;;;3696:2;3681:18;1925:157:22;3562:177:40;1301:143:24;;;;;;:::i;:::-;-1:-1:-1;;;1301:143:24;;;;;;;;;;;-1:-1:-1;;;;;;4665:33:40;;;4647:52;;4635:2;4620:18;1301:143:24;4503:202:40;3374:350:22;;;;;;:::i;:::-;;:::i;1187:580::-;;;;;;:::i;:::-;;:::i;2331:307::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2868:168::-;;;;;;:::i;:::-;;:::i;3826:259::-;;;:::i;:::-;;;;;;;:::i;948:226:24:-;;;;;;:::i;:::-;-1:-1:-1;;;948:226:24;;;;;;;;;;;4664:3062:22;;;;;;:::i;:::-;;:::i;656:153:24:-;;;;;;:::i;:::-;-1:-1:-1;;;656:153:24;;;;;;;;;1977:306;2064:4;-1:-1:-1;;;;;;2099:53:24;;-1:-1:-1;;;2099:53:24;;:121;;-1:-1:-1;;;;;;;2168:52:24;;-1:-1:-1;;;2168:52:24;2099:121;:177;;;-1:-1:-1;;;;;;;2236:40:24;;-1:-1:-1;;;2236:40:24;2099:177;2080:196;1977:306;-1:-1:-1;;1977:306:24:o;1925:157:22:-;1992:7;2018:57;2053:10;2067:7;2018:21;:57::i;3374:350::-;3602:21;;;;;;;3708:25:40;;;3602:21:22;;;;;;;;;;3681:18:40;;;3602:21:22;;;;-1:-1:-1;;;3575:61:22;;;3469:6;;3539:10;;3469:6;;3539:10;;3575:26;;:61;;3625:10;;;;3575:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3560:76;-1:-1:-1;;;;;;;3654:28:22;;-1:-1:-1;;;3654:28:22;3653:64;;3715:1;3653:64;;;-1:-1:-1;;;3653:64:22;3646:71;;;;3374:350;;;;;;:::o;1187:580::-;1288:6;1366:10;1288:6;1415:37;1366:10;1446:5;1415:24;:37::i;:::-;1484:22;;;;;;1520:17;;1388:64;;-1:-1:-1;1484:22:22;1462:19;1520:22;1516:209;;1566:32;;-1:-1:-1;;;1566:32:22;;;;;3708:25:40;;;-1:-1:-1;;;;;1566:19:22;;;;;3681:18:40;;1566:32:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1602:1;1566:37;1558:67;;;;-1:-1:-1;;;1558:67:22;;11802:2:40;1558:67:22;;;11784:21:40;11841:2;11821:18;;;11814:30;-1:-1:-1;;;11860:18:40;;;11853:47;11917:18;;1558:67:22;;;;;;;;1516:209;;;1656:58;;-1:-1:-1;;;1656:58:22;;-1:-1:-1;;;;;1656:20:22;;;;;:58;;1677:11;;1690;;1703:10;;1656:58;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1516:209;-1:-1:-1;;;;1741:19:22;1187:580;-1:-1:-1;;;;;1187:580:22:o;2331:307::-;2419:12;2443:23;525:66;2490:17;;2519:7;2509:18;;;;;;2479:49;;;;;;;;12573:25:40;;;12629:2;12614:18;;12607:34;12561:2;12546:18;;12399:248;2479:49:22;;;;;;;;;;;;;2469:60;;;;;;2443:86;;2570:4;2563:12;;2584:4;2577:12;;2591:4;-1:-1:-1;;;;;2591:20:22;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2546:85;;-1:-1:-1;;;;;;13094:15:40;;;2546:85:22;;;13082:28:40;13139:15;;;;13126:11;;;13119:36;13171:11;;;13164:27;13207:12;;;13200:28;;;13244:12;;2546:85:22;;;;;;;;;;;;2539:92;;;2331:307;;;;:::o;2868:168::-;2953:7;2989:39;3014:4;3020:7;2989:24;:39::i;:::-;2979:50;;;;;;2972:57;;2868:168;;;;:::o;3826:259::-;4010:46;;-1:-1:-1;;;4010:46:22;;747:3;4010:46;;;13450:51:40;4053:2:22;13517:18:40;;;13510:34;3871:16:22;;3959:10;;3934:9;;3959:10;;4010:24;;13423:18:40;;4010:46:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4010:46:22;;;;;;;;;;;;:::i;:::-;-1:-1:-1;3981:75:22;3826:259;-1:-1:-1;;;3826:259:22:o;4664:3062::-;4756:21;5157:4;5151:11;-1:-1:-1;;;5333:16:22;5326:44;5835:4;5819:14;5815:25;5809:4;5802;5784:16;5780:27;5767:74;6974:4;6948;6466:14;6428:16;6405:1;6375:8;6248:5;6222:774;6201:809;;7445:4;7427:16;7423:27;7481:4;7475:11;7463:23;;7526:12;7516:8;7512:27;7506:4;7499:41;7584:12;7578:4;7568:8;7553:44;;7627:4;7621:11;7611:99;;7686:8;7680:15;7673:4;7663:8;7659:19;7652:44;14:131:40;-1:-1:-1;;;;;89:31:40;;79:42;;69:70;;135:1;132;125:12;69:70;14:131;:::o;150:347::-;201:8;211:6;265:3;258:4;250:6;246:17;242:27;232:55;;283:1;280;273:12;232:55;-1:-1:-1;306:20:40;;-1:-1:-1;;;;;338:30:40;;335:50;;;381:1;378;371:12;335:50;418:4;410:6;406:17;394:29;;470:3;463:4;454:6;446;442:19;438:30;435:39;432:59;;;487:1;484;477:12;432:59;150:347;;;;;:::o;502:1205::-;628:6;636;644;652;660;668;676;684;737:3;725:9;716:7;712:23;708:33;705:53;;;754:1;751;744:12;705:53;793:9;780:23;812:31;837:5;812:31;:::i;:::-;862:5;-1:-1:-1;919:2:40;904:18;;891:32;932:33;891:32;932:33;:::i;:::-;984:7;-1:-1:-1;1043:2:40;1028:18;;1015:32;1056:33;1015:32;1056:33;:::i;:::-;1108:7;-1:-1:-1;1162:2:40;1147:18;;1134:32;;-1:-1:-1;1217:3:40;1202:19;;1189:33;-1:-1:-1;;;;;1271:14:40;;;1268:34;;;1298:1;1295;1288:12;1268:34;1337:58;1387:7;1378:6;1367:9;1363:22;1337:58;:::i;:::-;1414:8;;-1:-1:-1;1311:84:40;-1:-1:-1;1502:3:40;1487:19;;1474:33;;-1:-1:-1;1519:16:40;;;1516:36;;;1548:1;1545;1538:12;1516:36;;1587:60;1639:7;1628:8;1617:9;1613:24;1587:60;:::i;:::-;502:1205;;;;-1:-1:-1;502:1205:40;;-1:-1:-1;502:1205:40;;;;;;1666:8;-1:-1:-1;;;502:1205:40:o;1712:131::-;-1:-1:-1;;;;;;1786:32:40;;1776:43;;1766:71;;1833:1;1830;1823:12;1848:245;1906:6;1959:2;1947:9;1938:7;1934:23;1930:32;1927:52;;;1975:1;1972;1965:12;1927:52;2014:9;2001:23;2033:30;2057:5;2033:30;:::i;2290:127::-;2351:10;2346:3;2342:20;2339:1;2332:31;2382:4;2379:1;2372:15;2406:4;2403:1;2396:15;2422:275;2493:2;2487:9;2558:2;2539:13;;-1:-1:-1;;2535:27:40;2523:40;;-1:-1:-1;;;;;2578:34:40;;2614:22;;;2575:62;2572:88;;;2640:18;;:::i;:::-;2676:2;2669:22;2422:275;;-1:-1:-1;2422:275:40:o;2702:530::-;2744:5;2797:3;2790:4;2782:6;2778:17;2774:27;2764:55;;2815:1;2812;2805:12;2764:55;2851:6;2838:20;-1:-1:-1;;;;;2873:2:40;2870:26;2867:52;;;2899:18;;:::i;:::-;2943:55;2986:2;2967:13;;-1:-1:-1;;2963:27:40;2992:4;2959:38;2943:55;:::i;:::-;3023:2;3014:7;3007:19;3069:3;3062:4;3057:2;3049:6;3045:15;3041:26;3038:35;3035:55;;;3086:1;3083;3076:12;3035:55;3151:2;3144:4;3136:6;3132:17;3125:4;3116:7;3112:18;3099:55;3199:1;3174:16;;;3192:4;3170:27;3163:38;;;;3178:7;2702:530;-1:-1:-1;;;2702:530:40:o;3237:320::-;3305:6;3358:2;3346:9;3337:7;3333:23;3329:32;3326:52;;;3374:1;3371;3364:12;3326:52;3414:9;3401:23;-1:-1:-1;;;;;3439:6:40;3436:30;3433:50;;;3479:1;3476;3469:12;3433:50;3502:49;3543:7;3534:6;3523:9;3519:22;3502:49;:::i;:::-;3492:59;3237:320;-1:-1:-1;;;;3237:320:40:o;3744:754::-;3841:6;3849;3857;3865;3873;3926:3;3914:9;3905:7;3901:23;3897:33;3894:53;;;3943:1;3940;3933:12;3894:53;3982:9;3969:23;4001:31;4026:5;4001:31;:::i;:::-;4051:5;-1:-1:-1;4108:2:40;4093:18;;4080:32;4121:33;4080:32;4121:33;:::i;:::-;4173:7;-1:-1:-1;4227:2:40;4212:18;;4199:32;;-1:-1:-1;4282:2:40;4267:18;;4254:32;-1:-1:-1;;;;;4298:30:40;;4295:50;;;4341:1;4338;4331:12;4295:50;4380:58;4430:7;4421:6;4410:9;4406:22;4380:58;:::i;:::-;3744:754;;;;-1:-1:-1;3744:754:40;;-1:-1:-1;4457:8:40;;4354:84;3744:754;-1:-1:-1;;;3744:754:40:o;4710:477::-;4789:6;4797;4805;4858:2;4846:9;4837:7;4833:23;4829:32;4826:52;;;4874:1;4871;4864:12;4826:52;4910:9;4897:23;4887:33;;4971:2;4960:9;4956:18;4943:32;-1:-1:-1;;;;;4990:6:40;4987:30;4984:50;;;5030:1;5027;5020:12;4984:50;5069:58;5119:7;5110:6;5099:9;5095:22;5069:58;:::i;:::-;4710:477;;5146:8;;-1:-1:-1;5043:84:40;;-1:-1:-1;;;;4710:477:40:o;5192:539::-;5278:6;5286;5339:2;5327:9;5318:7;5314:23;5310:32;5307:52;;;5355:1;5352;5345:12;5307:52;5395:9;5382:23;-1:-1:-1;;;;;5465:2:40;5457:6;5454:14;5451:34;;;5481:1;5478;5471:12;5451:34;5504:49;5545:7;5536:6;5525:9;5521:22;5504:49;:::i;:::-;5494:59;;5606:2;5595:9;5591:18;5578:32;5562:48;;5635:2;5625:8;5622:16;5619:36;;;5651:1;5648;5641:12;5619:36;;5674:51;5717:7;5706:8;5695:9;5691:24;5674:51;:::i;:::-;5664:61;;;5192:539;;;;;:::o;5736:468::-;5826:6;5834;5887:2;5875:9;5866:7;5862:23;5858:32;5855:52;;;5903:1;5900;5893:12;5855:52;5942:9;5929:23;5961:31;5986:5;5961:31;:::i;:::-;6011:5;-1:-1:-1;6067:2:40;6052:18;;6039:32;-1:-1:-1;;;;;6083:30:40;;6080:50;;;6126:1;6123;6116:12;6080:50;6149:49;6190:7;6181:6;6170:9;6166:22;6149:49;:::i;6209:422::-;6250:3;6288:5;6282:12;6315:6;6310:3;6303:19;6340:1;6350:162;6364:6;6361:1;6358:13;6350:162;;;6426:4;6482:13;;;6478:22;;6472:29;6454:11;;;6450:20;;6443:59;6379:12;6350:162;;;6354:3;6557:1;6550:4;6541:6;6536:3;6532:16;6528:27;6521:38;6620:4;6613:2;6609:7;6604:2;6596:6;6592:15;6588:29;6583:3;6579:39;6575:50;6568:57;;;6209:422;;;;:::o;6636:217::-;6783:2;6772:9;6765:21;6746:4;6803:44;6843:2;6832:9;6828:18;6820:6;6803:44;:::i;6858:658::-;7029:2;7081:21;;;7151:13;;7054:18;;;7173:22;;;7000:4;;7029:2;7252:15;;;;7226:2;7211:18;;;7000:4;7295:195;7309:6;7306:1;7303:13;7295:195;;;7374:13;;-1:-1:-1;;;;;7370:39:40;7358:52;;7465:15;;;;7430:12;;;;7406:1;7324:9;7295:195;;;-1:-1:-1;7507:3:40;;6858:658;-1:-1:-1;;;;;;6858:658:40:o;7521:367::-;7584:8;7594:6;7648:3;7641:4;7633:6;7629:17;7625:27;7615:55;;7666:1;7663;7656:12;7615:55;-1:-1:-1;7689:20:40;;-1:-1:-1;;;;;7721:30:40;;7718:50;;;7764:1;7761;7754:12;7718:50;7801:4;7793:6;7789:17;7777:29;;7861:3;7854:4;7844:6;7841:1;7837:14;7829:6;7825:27;7821:38;7818:47;7815:67;;;7878:1;7875;7868:12;7893:1338;8053:6;8061;8069;8077;8085;8093;8101;8109;8162:3;8150:9;8141:7;8137:23;8133:33;8130:53;;;8179:1;8176;8169:12;8130:53;8218:9;8205:23;8237:31;8262:5;8237:31;:::i;:::-;8287:5;-1:-1:-1;8344:2:40;8329:18;;8316:32;8357:33;8316:32;8357:33;:::i;:::-;8409:7;-1:-1:-1;8467:2:40;8452:18;;8439:32;-1:-1:-1;;;;;8520:14:40;;;8517:34;;;8547:1;8544;8537:12;8517:34;8586:70;8648:7;8639:6;8628:9;8624:22;8586:70;:::i;:::-;8675:8;;-1:-1:-1;8560:96:40;-1:-1:-1;8763:2:40;8748:18;;8735:32;;-1:-1:-1;8779:16:40;;;8776:36;;;8808:1;8805;8798:12;8776:36;8847:72;8911:7;8900:8;8889:9;8885:24;8847:72;:::i;:::-;8938:8;;-1:-1:-1;8821:98:40;-1:-1:-1;9026:3:40;9011:19;;8998:33;;-1:-1:-1;9043:16:40;;;9040:36;;;9072:1;9069;9062:12;9236:544;9315:6;9323;9331;9384:2;9372:9;9363:7;9359:23;9355:32;9352:52;;;9400:1;9397;9390:12;9352:52;9439:9;9426:23;9458:31;9483:5;9458:31;:::i;:::-;9508:5;-1:-1:-1;9564:2:40;9549:18;;9536:32;-1:-1:-1;;;;;9580:30:40;;9577:50;;;9623:1;9620;9613:12;9785:823;9891:6;9899;9907;9915;9923;9931;9984:3;9972:9;9963:7;9959:23;9955:33;9952:53;;;10001:1;9998;9991:12;9952:53;10040:9;10027:23;10059:31;10084:5;10059:31;:::i;:::-;10109:5;-1:-1:-1;10166:2:40;10151:18;;10138:32;10179:33;10138:32;10179:33;:::i;:::-;10231:7;-1:-1:-1;10285:2:40;10270:18;;10257:32;;-1:-1:-1;10336:2:40;10321:18;;10308:32;;-1:-1:-1;10391:3:40;10376:19;;10363:33;-1:-1:-1;;;;;10408:30:40;;10405:50;;;10451:1;10448;10441:12;10405:50;10490:58;10540:7;10531:6;10520:9;10516:22;10490:58;:::i;:::-;9785:823;;;;-1:-1:-1;9785:823:40;;-1:-1:-1;9785:823:40;;10567:8;;9785:823;-1:-1:-1;;;9785:823:40:o;10613:539::-;10816:2;10805:9;10798:21;10779:4;10842:44;10882:2;10871:9;10867:18;10859:6;10842:44;:::i;:::-;10934:9;10926:6;10922:22;10917:2;10906:9;10902:18;10895:50;10969:6;10961;10954:22;11023:6;11015;11010:2;11002:6;10998:15;10985:45;11076:1;11071:2;11062:6;11054;11050:19;11046:28;11039:39;11143:2;11136;11132:7;11127:2;11119:6;11115:15;11111:29;11103:6;11099:42;11095:51;11087:59;;;10613:539;;;;;;:::o;11157:249::-;11226:6;11279:2;11267:9;11258:7;11254:23;11250:32;11247:52;;;11295:1;11292;11285:12;11247:52;11327:9;11321:16;11346:30;11370:5;11346:30;:::i;11411:184::-;11481:6;11534:2;11522:9;11513:7;11509:23;11505:32;11502:52;;;11550:1;11547;11540:12;11502:52;-1:-1:-1;11573:16:40;;11411:184;-1:-1:-1;11411:184:40:o;11946:448::-;12167:6;12156:9;12149:25;12210:2;12205;12194:9;12190:18;12183:30;12130:4;12236:44;12276:2;12265:9;12261:18;12253:6;12236:44;:::i;:::-;12328:9;12320:6;12316:22;12311:2;12300:9;12296:18;12289:50;12356:32;12381:6;12373;12356:32;:::i;:::-;12348:40;11946:448;-1:-1:-1;;;;;;11946:448:40:o;13555:138::-;13634:13;;13656:31;13634:13;13656:31;:::i;:::-;13555:138;;;:::o;13698:1098::-;13802:6;13810;13863:2;13851:9;13842:7;13838:23;13834:32;13831:52;;;13879:1;13876;13869:12;13831:52;13912:9;13906:16;-1:-1:-1;;;;;13982:2:40;13974:6;13971:14;13968:34;;;13998:1;13995;13988:12;13968:34;14036:6;14025:9;14021:22;14011:32;;14081:7;14074:4;14070:2;14066:13;14062:27;14052:55;;14103:1;14100;14093:12;14052:55;14132:2;14126:9;14154:4;14177:2;14173;14170:10;14167:36;;;14183:18;;:::i;:::-;14229:2;14226:1;14222:10;14212:20;;14252:28;14276:2;14272;14268:11;14252:28;:::i;:::-;14314:15;;;14384:11;;;14380:20;;;14345:12;;;;14412:19;;;14409:39;;;14444:1;14441;14434:12;14409:39;14468:11;;;;14488:210;14504:6;14499:3;14496:15;14488:210;;;14577:3;14571:10;14558:23;;14594:31;14619:5;14594:31;:::i;:::-;14638:18;;;14521:12;;;;14676;;;;14488:210;;;14717:5;-1:-1:-1;14741:49:40;;-1:-1:-1;14771:18:40;;;14741:49;:::i;:::-;14731:59;;;;;;13698:1098;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"716400","executionCost":"747","totalCost":"717147"},"external":{"encodeMessageDataForSafe(address,bytes)":"infinite","getMessageHash(bytes)":"infinite","getMessageHashForSafe(address,bytes)":"infinite","getModules()":"infinite","isValidSignature(bytes,bytes)":"infinite","isValidSignature(bytes32,bytes)":"infinite","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"infinite","onERC1155Received(address,address,uint256,uint256,bytes)":"infinite","onERC721Received(address,address,uint256,bytes)":"infinite","simulate(address,bytes)":"infinite","supportsInterface(bytes4)":"533","tokensReceived(address,address,address,uint256,bytes,bytes)":"infinite"}},"methodIdentifiers":{"encodeMessageDataForSafe(address,bytes)":"23031640","getMessageHash(bytes)":"0a1028c4","getMessageHashForSafe(address,bytes)":"6ac24784","getModules()":"b2494df3","isValidSignature(bytes,bytes)":"20c13b0b","isValidSignature(bytes32,bytes)":"1626ba7e","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","onERC721Received(address,address,uint256,bytes)":"150b7a02","simulate(address,bytes)":"bd61951d","supportsInterface(bytes4)":"01ffc9a7","tokensReceived(address,address,address,uint256,bytes,bytes)":"0023de29"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Safe\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"encodeMessageDataForSafe\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Safe\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"getMessageHashForSafe\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getModules\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"calldataPayload\",\"type\":\"bytes\"}],\"name\":\"simulate\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{\"encodeMessageDataForSafe(address,bytes)\":{\"details\":\"Returns the pre-image of the message hash (see getMessageHashForSafe).\",\"params\":{\"message\":\"Message that should be encoded.\",\"safe\":\"Safe to which the message is targeted.\"},\"returns\":{\"_0\":\"Encoded message.\"}},\"getMessageHash(bytes)\":{\"details\":\"Returns the hash of a message to be signed by owners.\",\"params\":{\"message\":\"Raw message bytes.\"},\"returns\":{\"_0\":\"Message hash.\"}},\"getMessageHashForSafe(address,bytes)\":{\"details\":\"Returns hash of a message that can be signed by owners.\",\"params\":{\"message\":\"Message that should be hashed.\",\"safe\":\"Safe to which the message is targeted.\"},\"returns\":{\"_0\":\"Message hash.\"}},\"getModules()\":{\"details\":\"Returns array of first 10 modules.\",\"returns\":{\"_0\":\"Array of modules.\"}},\"isValidSignature(bytes,bytes)\":{\"details\":\"Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)\",\"params\":{\"_data\":\"Arbitrary length data signed on the behalf of address(msg.sender).\",\"_signature\":\"Signature byte array associated with _data.\"},\"returns\":{\"_0\":\"The EIP-1271 magic value.\"}},\"isValidSignature(bytes32,bytes)\":{\"params\":{\"_dataHash\":\"Hash of the data signed on the behalf of address(msg.sender)\",\"_signature\":\"Signature byte array associated with _dataHash\"},\"returns\":{\"_0\":\"Updated EIP1271 magic value if signature is valid, otherwise 0x0\"}},\"simulate(address,bytes)\":{\"details\":\"Performs a delegatecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). Catches revert and returns encoded result as bytes.Inspired by https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\",\"params\":{\"calldataPayload\":\"Calldata that should be sent to the target contract (encoded method name and arguments).\",\"targetContract\":\"Address of the contract containing the code to execute.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"Id of the interface.\"},\"returns\":{\"_0\":\"if the interface is supported.\"}}},\"title\":\"Compatibility Fallback Handler - Provides compatibility between pre 1.3.0 and 1.3.0+ Safe contracts.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isValidSignature(bytes,bytes)\":{\"notice\":\"Legacy EIP-1271 signature validation method.\"},\"isValidSignature(bytes32,bytes)\":{\"notice\":\"Implementation of updated EIP-1271 signature validation method.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handles ERC1155 Token batch callback. return Standardized onERC1155BatchReceived return value.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handles ERC1155 Token callback. return Standardized onERC1155Received return value.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Handles ERC721 Token callback.  return Standardized onERC721Received return value.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Implements ERC165 interface support for ERC1155TokenReceiver, ERC721TokenReceiver and IERC165.\"},\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"notice\":\"Handles ERC777 Token callback. return nothing (not standardized)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-contracts/contracts/handler/CompatibilityFallbackHandler.sol\":\"CompatibilityFallbackHandler\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/Safe.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./base/ModuleManager.sol\\\";\\nimport \\\"./base/OwnerManager.sol\\\";\\nimport \\\"./base/FallbackManager.sol\\\";\\nimport \\\"./base/GuardManager.sol\\\";\\nimport \\\"./common/NativeCurrencyPaymentFallback.sol\\\";\\nimport \\\"./common/Singleton.sol\\\";\\nimport \\\"./common/SignatureDecoder.sol\\\";\\nimport \\\"./common/SecuredTokenTransfer.sol\\\";\\nimport \\\"./common/StorageAccessible.sol\\\";\\nimport \\\"./interfaces/ISignatureValidator.sol\\\";\\nimport \\\"./external/SafeMath.sol\\\";\\n\\n/**\\n * @title Safe - A multisignature wallet with support for confirmations using signed messages based on EIP-712.\\n * @dev Most important concepts:\\n *      - Threshold: Number of required confirmations for a Safe transaction.\\n *      - Owners: List of addresses that control the Safe. They are the only ones that can add/remove owners, change the threshold and\\n *        approve transactions. Managed in `OwnerManager`.\\n *      - Transaction Hash: Hash of a transaction is calculated using the EIP-712 typed structured data hashing scheme.\\n *      - Nonce: Each transaction should have a different nonce to prevent replay attacks.\\n *      - Signature: A valid signature of an owner of the Safe for a transaction hash.\\n *      - Guard: Guard is a contract that can execute pre- and post- transaction checks. Managed in `GuardManager`.\\n *      - Modules: Modules are contracts that can be used to extend the write functionality of a Safe. Managed in `ModuleManager`.\\n *      - Fallback: Fallback handler is a contract that can provide additional read-only functional for Safe. Managed in `FallbackManager`.\\n *      Note: This version of the implementation contract doesn't emit events for the sake of gas efficiency and therefore requires a tracing node for indexing/\\n *      For the events-based implementation see `SafeL2.sol`.\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract Safe is\\n    Singleton,\\n    NativeCurrencyPaymentFallback,\\n    ModuleManager,\\n    OwnerManager,\\n    SignatureDecoder,\\n    SecuredTokenTransfer,\\n    ISignatureValidatorConstants,\\n    FallbackManager,\\n    StorageAccessible,\\n    GuardManager\\n{\\n    using SafeMath for uint256;\\n\\n    string public constant VERSION = \\\"1.4.1\\\";\\n\\n    // keccak256(\\n    //     \\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\"\\n    // );\\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH = 0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\\n\\n    // keccak256(\\n    //     \\\"SafeTx(address to,uint256 value,bytes data,uint8 operation,uint256 safeTxGas,uint256 baseGas,uint256 gasPrice,address gasToken,address refundReceiver,uint256 nonce)\\\"\\n    // );\\n    bytes32 private constant SAFE_TX_TYPEHASH = 0xbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d8;\\n\\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\\n    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\\n    event SignMsg(bytes32 indexed msgHash);\\n    event ExecutionFailure(bytes32 indexed txHash, uint256 payment);\\n    event ExecutionSuccess(bytes32 indexed txHash, uint256 payment);\\n\\n    uint256 public nonce;\\n    bytes32 private _deprecatedDomainSeparator;\\n    // Mapping to keep track of all message hashes that have been approved by ALL REQUIRED owners\\n    mapping(bytes32 => uint256) public signedMessages;\\n    // Mapping to keep track of all hashes (message or transaction) that have been approved by ANY owners\\n    mapping(address => mapping(bytes32 => uint256)) public approvedHashes;\\n\\n    // This constructor ensures that this contract can only be used as a singleton for Proxy contracts\\n    constructor() {\\n        /**\\n         * By setting the threshold it is not possible to call setup anymore,\\n         * so we create a Safe with 0 owners and threshold 1.\\n         * This is an unusable Safe, perfect for the singleton\\n         */\\n        threshold = 1;\\n    }\\n\\n    /**\\n     * @notice Sets an initial storage of the Safe contract.\\n     * @dev This method can only be called once.\\n     *      If a proxy was created without setting up, anyone can call setup and claim the proxy.\\n     * @param _owners List of Safe owners.\\n     * @param _threshold Number of required confirmations for a Safe transaction.\\n     * @param to Contract address for optional delegate call.\\n     * @param data Data payload for optional delegate call.\\n     * @param fallbackHandler Handler for fallback calls to this contract\\n     * @param paymentToken Token that should be used for the payment (0 is ETH)\\n     * @param payment Value that should be paid\\n     * @param paymentReceiver Address that should receive the payment (or 0 if tx.origin)\\n     */\\n    function setup(\\n        address[] calldata _owners,\\n        uint256 _threshold,\\n        address to,\\n        bytes calldata data,\\n        address fallbackHandler,\\n        address paymentToken,\\n        uint256 payment,\\n        address payable paymentReceiver\\n    ) external {\\n        // setupOwners checks if the Threshold is already set, therefore preventing that this method is called twice\\n        setupOwners(_owners, _threshold);\\n        if (fallbackHandler != address(0)) internalSetFallbackHandler(fallbackHandler);\\n        // As setupOwners can only be called if the contract has not been initialized we don't need a check for setupModules\\n        setupModules(to, data);\\n\\n        if (payment > 0) {\\n            // To avoid running into issues with EIP-170 we reuse the handlePayment function (to avoid adjusting code of that has been verified we do not adjust the method itself)\\n            // baseGas = 0, gasPrice = 1 and gas = payment => amount = (payment + 0) * 1 = payment\\n            handlePayment(payment, 0, 1, paymentToken, paymentReceiver);\\n        }\\n        emit SafeSetup(msg.sender, _owners, _threshold, to, fallbackHandler);\\n    }\\n\\n    /** @notice Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)\\n     *          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`.\\n     * @dev The fees are always transferred, even if the user transaction fails.\\n     *      This method doesn't perform any sanity check of the transaction, such as:\\n     *      - if the contract at `to` address has code or not\\n     *      - if the `gasToken` is a contract or not\\n     *      It is the responsibility of the caller to perform such checks.\\n     * @param to Destination address of Safe transaction.\\n     * @param value Ether value of Safe transaction.\\n     * @param data Data payload of Safe transaction.\\n     * @param operation Operation type of Safe transaction.\\n     * @param safeTxGas Gas that should be used for the Safe transaction.\\n     * @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n     * @param gasPrice Gas price that should be used for the payment calculation.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @return success Boolean indicating transaction's success.\\n     */\\n    function execTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures\\n    ) public payable virtual returns (bool success) {\\n        bytes32 txHash;\\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\\n        {\\n            bytes memory txHashData = encodeTransactionData(\\n                // Transaction info\\n                to,\\n                value,\\n                data,\\n                operation,\\n                safeTxGas,\\n                // Payment info\\n                baseGas,\\n                gasPrice,\\n                gasToken,\\n                refundReceiver,\\n                // Signature info\\n                nonce\\n            );\\n            // Increase nonce and execute transaction.\\n            nonce++;\\n            txHash = keccak256(txHashData);\\n            checkSignatures(txHash, txHashData, signatures);\\n        }\\n        address guard = getGuard();\\n        {\\n            if (guard != address(0)) {\\n                Guard(guard).checkTransaction(\\n                    // Transaction info\\n                    to,\\n                    value,\\n                    data,\\n                    operation,\\n                    safeTxGas,\\n                    // Payment info\\n                    baseGas,\\n                    gasPrice,\\n                    gasToken,\\n                    refundReceiver,\\n                    // Signature info\\n                    signatures,\\n                    msg.sender\\n                );\\n            }\\n        }\\n        // We require some gas to emit the events (at least 2500) after the execution and some to perform code until the execution (500)\\n        // We also include the 1/64 in the check that is not send along with a call to counteract potential shortings because of EIP-150\\n        require(gasleft() >= ((safeTxGas * 64) / 63).max(safeTxGas + 2500) + 500, \\\"GS010\\\");\\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\\n        {\\n            uint256 gasUsed = gasleft();\\n            // If the gasPrice is 0 we assume that nearly all available gas can be used (it is always more than safeTxGas)\\n            // We only substract 2500 (compared to the 3000 before) to ensure that the amount passed is still higher than safeTxGas\\n            success = execute(to, value, data, operation, gasPrice == 0 ? (gasleft() - 2500) : safeTxGas);\\n            gasUsed = gasUsed.sub(gasleft());\\n            // If no safeTxGas and no gasPrice was set (e.g. both are 0), then the internal tx is required to be successful\\n            // This makes it possible to use `estimateGas` without issues, as it searches for the minimum gas where the tx doesn't revert\\n            require(success || safeTxGas != 0 || gasPrice != 0, \\\"GS013\\\");\\n            // We transfer the calculated tx costs to the tx.origin to avoid sending it to intermediate contracts that have made calls\\n            uint256 payment = 0;\\n            if (gasPrice > 0) {\\n                payment = handlePayment(gasUsed, baseGas, gasPrice, gasToken, refundReceiver);\\n            }\\n            if (success) emit ExecutionSuccess(txHash, payment);\\n            else emit ExecutionFailure(txHash, payment);\\n        }\\n        {\\n            if (guard != address(0)) {\\n                Guard(guard).checkAfterExecution(txHash, success);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Handles the payment for a Safe transaction.\\n     * @param gasUsed Gas used by the Safe transaction.\\n     * @param baseGas Gas costs that are independent of the transaction execution (e.g. base transaction fee, signature check, payment of the refund).\\n     * @param gasPrice Gas price that should be used for the payment calculation.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @return payment The amount of payment made in the specified token.\\n     */\\n    function handlePayment(\\n        uint256 gasUsed,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver\\n    ) private returns (uint256 payment) {\\n        // solhint-disable-next-line avoid-tx-origin\\n        address payable receiver = refundReceiver == address(0) ? payable(tx.origin) : refundReceiver;\\n        if (gasToken == address(0)) {\\n            // For ETH we will only adjust the gas price to not be higher than the actual used gas price\\n            payment = gasUsed.add(baseGas).mul(gasPrice < tx.gasprice ? gasPrice : tx.gasprice);\\n            require(receiver.send(payment), \\\"GS011\\\");\\n        } else {\\n            payment = gasUsed.add(baseGas).mul(gasPrice);\\n            require(transferToken(gasToken, receiver, payment), \\\"GS012\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param data That should be signed (this is passed to an external validator contract)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory data, bytes memory signatures) public view {\\n        // Load threshold to avoid multiple storage loads\\n        uint256 _threshold = threshold;\\n        // Check that a threshold is set\\n        require(_threshold > 0, \\\"GS001\\\");\\n        checkNSignatures(dataHash, data, signatures, _threshold);\\n    }\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @dev Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param data That should be signed (this is passed to an external validator contract)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @param requiredSignatures Amount of required valid signatures.\\n     */\\n    function checkNSignatures(bytes32 dataHash, bytes memory data, bytes memory signatures, uint256 requiredSignatures) public view {\\n        // Check that the provided signature data is not too short\\n        require(signatures.length >= requiredSignatures.mul(65), \\\"GS020\\\");\\n        // There cannot be an owner with address 0.\\n        address lastOwner = address(0);\\n        address currentOwner;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        uint256 i;\\n        for (i = 0; i < requiredSignatures; i++) {\\n            (v, r, s) = signatureSplit(signatures, i);\\n            if (v == 0) {\\n                require(keccak256(data) == dataHash, \\\"GS027\\\");\\n                // If v is 0 then it is a contract signature\\n                // When handling contract signatures the address of the contract is encoded into r\\n                currentOwner = address(uint160(uint256(r)));\\n\\n                // Check that signature data pointer (s) is not pointing inside the static part of the signatures bytes\\n                // This check is not completely accurate, since it is possible that more signatures than the threshold are send.\\n                // Here we only check that the pointer is not pointing inside the part that is being processed\\n                require(uint256(s) >= requiredSignatures.mul(65), \\\"GS021\\\");\\n\\n                // Check that signature data pointer (s) is in bounds (points to the length of data -> 32 bytes)\\n                require(uint256(s).add(32) <= signatures.length, \\\"GS022\\\");\\n\\n                // Check if the contract signature is in bounds: start of data is s + 32 and end is start + signature length\\n                uint256 contractSignatureLen;\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    contractSignatureLen := mload(add(add(signatures, s), 0x20))\\n                }\\n                require(uint256(s).add(32).add(contractSignatureLen) <= signatures.length, \\\"GS023\\\");\\n\\n                // Check signature\\n                bytes memory contractSignature;\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    // The signature data for contract signatures is appended to the concatenated signatures and the offset is stored in s\\n                    contractSignature := add(add(signatures, s), 0x20)\\n                }\\n                require(ISignatureValidator(currentOwner).isValidSignature(data, contractSignature) == EIP1271_MAGIC_VALUE, \\\"GS024\\\");\\n            } else if (v == 1) {\\n                // If v is 1 then it is an approved hash\\n                // When handling approved hashes the address of the approver is encoded into r\\n                currentOwner = address(uint160(uint256(r)));\\n                // Hashes are automatically approved by the sender of the message or when they have been pre-approved via a separate transaction\\n                require(msg.sender == currentOwner || approvedHashes[currentOwner][dataHash] != 0, \\\"GS025\\\");\\n            } else if (v > 30) {\\n                // If v > 30 then default va (27,28) has been adjusted for eth_sign flow\\n                // To support eth_sign and similar we adjust v and hash the messageHash with the Ethereum message prefix before applying ecrecover\\n                currentOwner = ecrecover(keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", dataHash)), v - 4, r, s);\\n            } else {\\n                // Default is the ecrecover flow with the provided data hash\\n                // Use ecrecover with the messageHash for EOA signatures\\n                currentOwner = ecrecover(dataHash, v, r, s);\\n            }\\n            require(currentOwner > lastOwner && owners[currentOwner] != address(0) && currentOwner != SENTINEL_OWNERS, \\\"GS026\\\");\\n            lastOwner = currentOwner;\\n        }\\n    }\\n\\n    /**\\n     * @notice Marks hash `hashToApprove` as approved.\\n     * @dev This can be used with a pre-approved hash transaction signature.\\n     *      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures\\n     * @param hashToApprove The hash to mark as approved for signatures that are verified by this contract.\\n     */\\n    function approveHash(bytes32 hashToApprove) external {\\n        require(owners[msg.sender] != address(0), \\\"GS030\\\");\\n        approvedHashes[msg.sender][hashToApprove] = 1;\\n        emit ApproveHash(hashToApprove, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Returns the ID of the chain the contract is currently deployed on.\\n     * @return The ID of the current chain as a uint256.\\n     */\\n    function getChainId() public view returns (uint256) {\\n        uint256 id;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\\n     * @return bytes32 The domain separator hash.\\n     */\\n    function domainSeparator() public view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, getChainId(), this));\\n    }\\n\\n    /**\\n     * @notice Returns the pre-image of the transaction hash (see getTransactionHash).\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @param safeTxGas Gas that should be used for the safe transaction.\\n     * @param baseGas Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n     * @param gasPrice Maximum gas price that should be used for this transaction.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param _nonce Transaction nonce.\\n     * @return Transaction hash bytes.\\n     */\\n    function encodeTransactionData(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) public view returns (bytes memory) {\\n        bytes32 safeTxHash = keccak256(\\n            abi.encode(\\n                SAFE_TX_TYPEHASH,\\n                to,\\n                value,\\n                keccak256(data),\\n                operation,\\n                safeTxGas,\\n                baseGas,\\n                gasPrice,\\n                gasToken,\\n                refundReceiver,\\n                _nonce\\n            )\\n        );\\n        return abi.encodePacked(bytes1(0x19), bytes1(0x01), domainSeparator(), safeTxHash);\\n    }\\n\\n    /**\\n     * @notice Returns transaction hash to be signed by owners.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @param safeTxGas Fas that should be used for the safe transaction.\\n     * @param baseGas Gas costs for data used to trigger the safe transaction.\\n     * @param gasPrice Maximum gas price that should be used for this transaction.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param _nonce Transaction nonce.\\n     * @return Transaction hash.\\n     */\\n    function getTransactionHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) public view returns (bytes32) {\\n        return keccak256(encodeTransactionData(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce));\\n    }\\n}\\n\",\"keccak256\":\"0xbab2f7bec33283e349342e7b23f5191c678c64fe02065bac4f4f44fb3f5d2638\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/base/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/Enum.sol\\\";\\n\\n/**\\n * @title Executor - A contract that can execute transactions\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Executor {\\n    /**\\n     * @notice Executes either a delegatecall or a call with provided parameters.\\n     * @dev This method doesn't perform any sanity check of the transaction, such as:\\n     *      - if the contract at `to` address has code or not\\n     *      It is the responsibility of the caller to perform such checks.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @return success boolean flag indicating if the call succeeded.\\n     */\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 txGas\\n    ) internal returns (bool success) {\\n        if (operation == Enum.Operation.DelegateCall) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\\n            }\\n        } else {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf0be832e7529e92000544170a5529d73666a9b5e836b30c6f2ed6ef7d7d8c94a\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/base/FallbackManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../common/SelfAuthorized.sol\\\";\\n\\n/**\\n * @title Fallback Manager - A contract managing fallback calls made to this contract\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract FallbackManager is SelfAuthorized {\\n    event ChangedFallbackHandler(address indexed handler);\\n\\n    // keccak256(\\\"fallback_manager.handler.address\\\")\\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\\n\\n    /**\\n     *  @notice Internal function to set the fallback handler.\\n     *  @param handler contract to handle fallback calls.\\n     */\\n    function internalSetFallbackHandler(address handler) internal {\\n        /*\\n            If a fallback handler is set to self, then the following attack vector is opened:\\n            Imagine we have a function like this:\\n            function withdraw() internal authorized {\\n                withdrawalAddress.call.value(address(this).balance)(\\\"\\\");\\n            }\\n\\n            If the fallback method is triggered, the fallback handler appends the msg.sender address to the calldata and calls the fallback handler.\\n            A potential attacker could call a Safe with the 3 bytes signature of a withdraw function. Since 3 bytes do not create a valid signature,\\n            the call would end in a fallback handler. Since it appends the msg.sender address to the calldata, the attacker could craft an address \\n            where the first 3 bytes of the previous calldata + the first byte of the address make up a valid function signature. The subsequent call would result in unsanctioned access to Safe's internal protected methods.\\n            For some reason, solidity matches the first 4 bytes of the calldata to a function signature, regardless if more data follow these 4 bytes.\\n        */\\n        require(handler != address(this), \\\"GS400\\\");\\n\\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, handler)\\n        }\\n    }\\n\\n    /**\\n     * @notice Set Fallback Handler to `handler` for the Safe.\\n     * @dev Only fallback calls without value and with data will be forwarded.\\n     *      This can only be done via a Safe transaction.\\n     *      Cannot be set to the Safe itself.\\n     * @param handler contract to handle fallback calls.\\n     */\\n    function setFallbackHandler(address handler) public authorized {\\n        internalSetFallbackHandler(handler);\\n        emit ChangedFallbackHandler(handler);\\n    }\\n\\n    // @notice Forwards all calls to the fallback handler if set. Returns 0 if no handler is set.\\n    // @dev Appends the non-padded caller address to the calldata to be optionally used in the handler\\n    //      The handler can make us of `HandlerContext.sol` to extract the address.\\n    //      This is done because in the next call frame the `msg.sender` will be FallbackManager's address\\n    //      and having the original caller address may enable additional verification scenarios.\\n    // solhint-disable-next-line payable-fallback,no-complex-fallback\\n    fallback() external {\\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let handler := sload(slot)\\n            if iszero(handler) {\\n                return(0, 0)\\n            }\\n            calldatacopy(0, 0, calldatasize())\\n            // The msg.sender address is shifted to the left by 12 bytes to remove the padding\\n            // Then the address without padding is stored right after the calldata\\n            mstore(calldatasize(), shl(96, caller()))\\n            // Add 20 bytes for the address appended add the end\\n            let success := call(gas(), handler, 0, 0, add(calldatasize(), 20), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            if iszero(success) {\\n                revert(0, returndatasize())\\n            }\\n            return(0, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x646b3088f15af8b4f71ac5eeffaa24ce0c1abed5f494f90368208b09e35d5165\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/base/GuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../common/Enum.sol\\\";\\nimport \\\"../common/SelfAuthorized.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\ninterface Guard is IERC165 {\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    function checkAfterExecution(bytes32 txHash, bool success) external;\\n}\\n\\nabstract contract BaseGuard is Guard {\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(Guard).interfaceId || // 0xe6d7a83a\\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\\n    }\\n}\\n\\n/**\\n * @title Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract GuardManager is SelfAuthorized {\\n    event ChangedGuard(address indexed guard);\\n\\n    // keccak256(\\\"guard_manager.guard.address\\\")\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    /**\\n     * @dev Set a guard that checks transactions before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,\\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\\n     *        audit the guard code and design recovery mechanisms.\\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\\n     */\\n    function setGuard(address guard) external authorized {\\n        if (guard != address(0)) {\\n            require(Guard(guard).supportsInterface(type(Guard).interfaceId), \\\"GS300\\\");\\n        }\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, guard)\\n        }\\n        emit ChangedGuard(guard);\\n    }\\n\\n    /**\\n     * @dev Internal method to retrieve the current guard\\n     *      We do not have a public method because we're short on bytecode size limit,\\n     *      to retrieve the guard address, one can use `getStorageAt` from `StorageAccessible` contract\\n     *      with the slot `GUARD_STORAGE_SLOT`\\n     * @return guard The address of the guard\\n     */\\n    function getGuard() internal view returns (address guard) {\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            guard := sload(slot)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xedfc7c830ab35e52d1208986b253f3422c2f0ca68054c10819fb348fcc6ccf5d\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/base/ModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/Enum.sol\\\";\\nimport \\\"../common/SelfAuthorized.sol\\\";\\nimport \\\"./Executor.sol\\\";\\n\\n/**\\n * @title Module Manager - A contract managing Safe modules\\n * @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\\n           \\u26a0\\ufe0f WARNING: Modules are a security risk since they can execute arbitrary transactions, \\n           so only trusted and audited modules should be added to a Safe. A malicious module can\\n           completely takeover a Safe.\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract ModuleManager is SelfAuthorized, Executor {\\n    event EnabledModule(address indexed module);\\n    event DisabledModule(address indexed module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    address internal constant SENTINEL_MODULES = address(0x1);\\n\\n    mapping(address => address) internal modules;\\n\\n    /**\\n     * @notice Setup function sets the initial storage of the contract.\\n     *         Optionally executes a delegate call to another contract to setup the modules.\\n     * @param to Optional destination address of call to execute.\\n     * @param data Optional data of call to execute.\\n     */\\n    function setupModules(address to, bytes memory data) internal {\\n        require(modules[SENTINEL_MODULES] == address(0), \\\"GS100\\\");\\n        modules[SENTINEL_MODULES] = SENTINEL_MODULES;\\n        if (to != address(0)) {\\n            require(isContract(to), \\\"GS002\\\");\\n            // Setup has to complete successfully or transaction fails.\\n            require(execute(to, 0, data, Enum.Operation.DelegateCall, type(uint256).max), \\\"GS000\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Enables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param module Module to be whitelisted.\\n     */\\n    function enableModule(address module) public authorized {\\n        // Module address cannot be null or sentinel.\\n        require(module != address(0) && module != SENTINEL_MODULES, \\\"GS101\\\");\\n        // Module cannot be added twice.\\n        require(modules[module] == address(0), \\\"GS102\\\");\\n        modules[module] = modules[SENTINEL_MODULES];\\n        modules[SENTINEL_MODULES] = module;\\n        emit EnabledModule(module);\\n    }\\n\\n    /**\\n     * @notice Disables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevModule Previous module in the modules linked list.\\n     * @param module Module to be removed.\\n     */\\n    function disableModule(address prevModule, address module) public authorized {\\n        // Validate module address and check that it corresponds to module index.\\n        require(module != address(0) && module != SENTINEL_MODULES, \\\"GS101\\\");\\n        require(modules[prevModule] == module, \\\"GS103\\\");\\n        modules[prevModule] = modules[module];\\n        modules[module] = address(0);\\n        emit DisabledModule(module);\\n    }\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\\n     * @dev Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     */\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public virtual returns (bool success) {\\n        // Only whitelisted modules are allowed.\\n        require(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0), \\\"GS104\\\");\\n        // Execute transaction without further confirmations.\\n        success = execute(to, value, data, operation, type(uint256).max);\\n        if (success) emit ExecutionFromModuleSuccess(msg.sender);\\n        else emit ExecutionFromModuleFailure(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     * @return returnData Data returned by the call.\\n     */\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public returns (bool success, bytes memory returnData) {\\n        success = execTransactionFromModule(to, value, data, operation);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Load free memory location\\n            let ptr := mload(0x40)\\n            // We allocate memory for the return data by setting the free memory location to\\n            // current free memory location + data size + 32 bytes for data size value\\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\\n            // Store the size\\n            mstore(ptr, returndatasize())\\n            // Store the data\\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\\n            // Point the return data to the correct memory location\\n            returnData := ptr\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns if an module is enabled\\n     * @return True if the module is enabled\\n     */\\n    function isModuleEnabled(address module) public view returns (bool) {\\n        return SENTINEL_MODULES != module && modules[module] != address(0);\\n    }\\n\\n    /**\\n     * @notice Returns an array of modules.\\n     *         If all entries fit into a single page, the next pointer will be 0x1.\\n     *         If another page is present, next will be the last element of the returned array.\\n     * @param start Start of the page. Has to be a module or start pointer (0x1 address)\\n     * @param pageSize Maximum number of modules that should be returned. Has to be > 0\\n     * @return array Array of modules.\\n     * @return next Start of the next page.\\n     */\\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next) {\\n        require(start == SENTINEL_MODULES || isModuleEnabled(start), \\\"GS105\\\");\\n        require(pageSize > 0, \\\"GS106\\\");\\n        // Init array with max page size\\n        array = new address[](pageSize);\\n\\n        // Populate return array\\n        uint256 moduleCount = 0;\\n        next = modules[start];\\n        while (next != address(0) && next != SENTINEL_MODULES && moduleCount < pageSize) {\\n            array[moduleCount] = next;\\n            next = modules[next];\\n            moduleCount++;\\n        }\\n\\n        /**\\n          Because of the argument validation, we can assume that the loop will always iterate over the valid module list values\\n          and the `next` variable will either be an enabled module or a sentinel address (signalling the end). \\n          \\n          If we haven't reached the end inside the loop, we need to set the next pointer to the last element of the modules array\\n          because the `next` variable (which is a module by itself) acting as a pointer to the start of the next page is neither \\n          included to the current page, nor will it be included in the next one if you pass it as a start.\\n        */\\n        if (next != SENTINEL_MODULES) {\\n            next = array[moduleCount - 1];\\n        }\\n        // Set correct size of returned array\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(array, moduleCount)\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns true if `account` is a contract.\\n     * @dev This function will return false if invoked during the constructor of a contract,\\n     *      as the code is not actually created until after the constructor finishes.\\n     * @param account The address being queried\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xd71b0d56dce386fa6f67c51061face071b2c7b03ec535d68717e2538ec47113a\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/base/OwnerManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/SelfAuthorized.sol\\\";\\n\\n/**\\n * @title OwnerManager - Manages Safe owners and a threshold to authorize transactions.\\n * @dev Uses a linked list to store the owners because the code generate by the solidity compiler\\n *      is more efficient than using a dynamic array.\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract OwnerManager is SelfAuthorized {\\n    event AddedOwner(address indexed owner);\\n    event RemovedOwner(address indexed owner);\\n    event ChangedThreshold(uint256 threshold);\\n\\n    address internal constant SENTINEL_OWNERS = address(0x1);\\n\\n    mapping(address => address) internal owners;\\n    uint256 internal ownerCount;\\n    uint256 internal threshold;\\n\\n    /**\\n     * @notice Sets the initial storage of the contract.\\n     * @param _owners List of Safe owners.\\n     * @param _threshold Number of required confirmations for a Safe transaction.\\n     */\\n    function setupOwners(address[] memory _owners, uint256 _threshold) internal {\\n        // Threshold can only be 0 at initialization.\\n        // Check ensures that setup function can only be called once.\\n        require(threshold == 0, \\\"GS200\\\");\\n        // Validate that threshold is smaller than number of added owners.\\n        require(_threshold <= _owners.length, \\\"GS201\\\");\\n        // There has to be at least one Safe owner.\\n        require(_threshold >= 1, \\\"GS202\\\");\\n        // Initializing Safe owners.\\n        address currentOwner = SENTINEL_OWNERS;\\n        for (uint256 i = 0; i < _owners.length; i++) {\\n            // Owner address cannot be null.\\n            address owner = _owners[i];\\n            require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this) && currentOwner != owner, \\\"GS203\\\");\\n            // No duplicate owners allowed.\\n            require(owners[owner] == address(0), \\\"GS204\\\");\\n            owners[currentOwner] = owner;\\n            currentOwner = owner;\\n        }\\n        owners[currentOwner] = SENTINEL_OWNERS;\\n        ownerCount = _owners.length;\\n        threshold = _threshold;\\n    }\\n\\n    /**\\n     * @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param owner New owner address.\\n     * @param _threshold New threshold.\\n     */\\n    function addOwnerWithThreshold(address owner, uint256 _threshold) public authorized {\\n        // Owner address cannot be null, the sentinel or the Safe itself.\\n        require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this), \\\"GS203\\\");\\n        // No duplicate owners allowed.\\n        require(owners[owner] == address(0), \\\"GS204\\\");\\n        owners[owner] = owners[SENTINEL_OWNERS];\\n        owners[SENTINEL_OWNERS] = owner;\\n        ownerCount++;\\n        emit AddedOwner(owner);\\n        // Change threshold if threshold was changed.\\n        if (threshold != _threshold) changeThreshold(_threshold);\\n    }\\n\\n    /**\\n     * @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be removed in the linked list\\n     * @param owner Owner address to be removed.\\n     * @param _threshold New threshold.\\n     */\\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) public authorized {\\n        // Only allow to remove an owner, if threshold can still be reached.\\n        require(ownerCount - 1 >= _threshold, \\\"GS201\\\");\\n        // Validate owner address and check that it corresponds to owner index.\\n        require(owner != address(0) && owner != SENTINEL_OWNERS, \\\"GS203\\\");\\n        require(owners[prevOwner] == owner, \\\"GS205\\\");\\n        owners[prevOwner] = owners[owner];\\n        owners[owner] = address(0);\\n        ownerCount--;\\n        emit RemovedOwner(owner);\\n        // Change threshold if threshold was changed.\\n        if (threshold != _threshold) changeThreshold(_threshold);\\n    }\\n\\n    /**\\n     * @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list\\n     * @param oldOwner Owner address to be replaced.\\n     * @param newOwner New owner address.\\n     */\\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) public authorized {\\n        // Owner address cannot be null, the sentinel or the Safe itself.\\n        require(newOwner != address(0) && newOwner != SENTINEL_OWNERS && newOwner != address(this), \\\"GS203\\\");\\n        // No duplicate owners allowed.\\n        require(owners[newOwner] == address(0), \\\"GS204\\\");\\n        // Validate oldOwner address and check that it corresponds to owner index.\\n        require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, \\\"GS203\\\");\\n        require(owners[prevOwner] == oldOwner, \\\"GS205\\\");\\n        owners[newOwner] = owners[oldOwner];\\n        owners[prevOwner] = newOwner;\\n        owners[oldOwner] = address(0);\\n        emit RemovedOwner(oldOwner);\\n        emit AddedOwner(newOwner);\\n    }\\n\\n    /**\\n     * @notice Changes the threshold of the Safe to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param _threshold New threshold.\\n     */\\n    function changeThreshold(uint256 _threshold) public authorized {\\n        // Validate that threshold is smaller than number of owners.\\n        require(_threshold <= ownerCount, \\\"GS201\\\");\\n        // There has to be at least one Safe owner.\\n        require(_threshold >= 1, \\\"GS202\\\");\\n        threshold = _threshold;\\n        emit ChangedThreshold(threshold);\\n    }\\n\\n    /**\\n     * @notice Returns the number of required confirmations for a Safe transaction aka the threshold.\\n     * @return Threshold number.\\n     */\\n    function getThreshold() public view returns (uint256) {\\n        return threshold;\\n    }\\n\\n    /**\\n     * @notice Returns if `owner` is an owner of the Safe.\\n     * @return Boolean if owner is an owner of the Safe.\\n     */\\n    function isOwner(address owner) public view returns (bool) {\\n        return owner != SENTINEL_OWNERS && owners[owner] != address(0);\\n    }\\n\\n    /**\\n     * @notice Returns a list of Safe owners.\\n     * @return Array of Safe owners.\\n     */\\n    function getOwners() public view returns (address[] memory) {\\n        address[] memory array = new address[](ownerCount);\\n\\n        // populate return array\\n        uint256 index = 0;\\n        address currentOwner = owners[SENTINEL_OWNERS];\\n        while (currentOwner != SENTINEL_OWNERS) {\\n            array[index] = currentOwner;\\n            currentOwner = owners[currentOwner];\\n            index++;\\n        }\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xec9799093eb7a73461cd5e563198751ee222f956f754ea622a03fe953e515b2c\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe contracts.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x4ff3008926a118e9f36e6747facc39dd13168e0d00f516888ae966ec20766453\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/NativeCurrencyPaymentFallback.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title NativeCurrencyPaymentFallback - A contract that has a fallback to accept native currency payments.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract NativeCurrencyPaymentFallback {\\n    event SafeReceived(address indexed sender, uint256 value);\\n\\n    /**\\n     * @notice Receive function accepts native currency transactions.\\n     * @dev Emits an event with sender and received value.\\n     */\\n    receive() external payable {\\n        emit SafeReceived(msg.sender, msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0x3ddcd4130c67326033dcf773d2d87d7147e3a8386993ea3ab3f1c38da406adba\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/SecuredTokenTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SecuredTokenTransfer - Secure token transfer.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SecuredTokenTransfer {\\n    /**\\n     * @notice Transfers a token and returns a boolean if it was a success\\n     * @dev It checks the return data of the transfer call and returns true if the transfer was successful.\\n     *      It doesn't check if the `token` address is a contract or not.\\n     * @param token Token that should be transferred\\n     * @param receiver Receiver to whom the token should be transferred\\n     * @param amount The amount of tokens that should be transferred\\n     * @return transferred Returns true if the transfer was successful\\n     */\\n    function transferToken(address token, address receiver, uint256 amount) internal returns (bool transferred) {\\n        // 0xa9059cbb - keccack(\\\"transfer(address,uint256)\\\")\\n        bytes memory data = abi.encodeWithSelector(0xa9059cbb, receiver, amount);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // We write the return value to scratch space.\\n            // See https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory\\n            let success := call(sub(gas(), 10000), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            switch returndatasize()\\n            case 0 {\\n                transferred := success\\n            }\\n            case 0x20 {\\n                transferred := iszero(or(iszero(success), iszero(mload(0))))\\n            }\\n            default {\\n                transferred := 0\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1eb8c3601538b73dd6a823ac4fca49bb8adc97d1302a936622156636c971eb05\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SelfAuthorized {\\n    function requireSelfCall() private view {\\n        require(msg.sender == address(this), \\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfb0e176bb208e047a234fe757e2acd13787e27879570b8544547ac787feb5f13\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/SignatureDecoder.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SignatureDecoder - Decodes signatures encoded as bytes\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SignatureDecoder {\\n    /**\\n     * @notice Splits signature bytes into `uint8 v, bytes32 r, bytes32 s`.\\n     * @dev Make sure to perform a bounds check for @param pos, to avoid out of bounds access on @param signatures\\n     *      The signature format is a compact form of {bytes32 r}{bytes32 s}{uint8 v}\\n     *      Compact means uint8 is not padded to 32 bytes.\\n     * @param pos Which signature to read.\\n     *            A prior bounds check of this parameter should be performed, to avoid out of bounds access.\\n     * @param signatures Concatenated {r, s, v} signatures.\\n     * @return v Recovery ID or Safe signature type.\\n     * @return r Output value r of the signature.\\n     * @return s Output value s of the signature.\\n     */\\n    function signatureSplit(bytes memory signatures, uint256 pos) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let signaturePos := mul(0x41, pos)\\n            r := mload(add(signatures, add(signaturePos, 0x20)))\\n            s := mload(add(signatures, add(signaturePos, 0x40)))\\n            /**\\n             * Here we are loading the last 32 bytes, including 31 bytes\\n             * of 's'. There is no 'mload8' to do this.\\n             * 'byte' is not working due to the Solidity parser, so lets\\n             * use the second best option, 'and'\\n             */\\n            v := and(mload(add(signatures, add(signaturePos, 0x41))), 0xff)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a3baf0efa1585ddf2276505c6d34fa16f01cafff1288e40110d5e67fb459c7c\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/Singleton.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Singleton - Base for singleton contracts (should always be the first super contract)\\n *        This contract is tightly coupled to our proxy contract (see `proxies/SafeProxy.sol`)\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Singleton {\\n    // singleton always has to be the first declared variable to ensure the same location as in the Proxy contract.\\n    // It should also always be ensured the address is stored alone (uses a full word)\\n    address private singleton;\\n}\\n\",\"keccak256\":\"0xcab7c6e5fb6d7295a9343f72fec26a2f632ddfe220a6f267b5c5a1eb2f9bce50\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/StorageAccessible.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title StorageAccessible - A generic base contract that allows callers to access all internal storage.\\n * @notice See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\\n *         It removes a method from the original contract not needed for the Safe contracts.\\n * @author Gnosis Developers\\n */\\nabstract contract StorageAccessible {\\n    /**\\n     * @notice Reads `length` bytes of storage in the currents contract\\n     * @param offset - the offset in the current contract's storage in words to start reading from\\n     * @param length - the number of words (32 bytes) of data to read\\n     * @return the bytes that were read.\\n     */\\n    function getStorageAt(uint256 offset, uint256 length) public view returns (bytes memory) {\\n        bytes memory result = new bytes(length * 32);\\n        for (uint256 index = 0; index < length; index++) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let word := sload(add(offset, index))\\n                mstore(add(add(result, 0x20), mul(index, 0x20)), word)\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Performs a delegatecall on a targetContract in the context of self.\\n     * Internally reverts execution to avoid side effects (making it static).\\n     *\\n     * This method reverts with data equal to `abi.encode(bool(success), bytes(response))`.\\n     * Specifically, the `returndata` after a call to this method will be:\\n     * `success:bool || response.length:uint256 || response:bytes`.\\n     *\\n     * @param targetContract Address of the contract containing the code to execute.\\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\\n     */\\n    function simulateAndRevert(address targetContract, bytes memory calldataPayload) external {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let success := delegatecall(gas(), targetContract, add(calldataPayload, 0x20), mload(calldataPayload), 0, 0)\\n\\n            mstore(0x00, success)\\n            mstore(0x20, returndatasize())\\n            returndatacopy(0x40, 0, returndatasize())\\n            revert(0, add(returndatasize(), 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2c5412a8f014db332322a6b24ee3cedce15dca17a721ae49fdef368568d4391e\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/external/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SafeMath\\n * @notice Math operations with safety checks that revert on error (overflow/underflow)\\n */\\nlibrary SafeMath {\\n    /**\\n     * @notice Multiplies two numbers, reverts on overflow.\\n     * @param a First number\\n     * @param b Second number\\n     * @return Product of a and b\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n     * @param a First number\\n     * @param b Second number\\n     * @return Difference of a and b\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Adds two numbers, reverts on overflow.\\n     * @param a First number\\n     * @param b Second number\\n     * @return Sum of a and b\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Returns the largest of two numbers.\\n     * @param a First number\\n     * @param b Second number\\n     * @return Largest of a and b\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x5f856674d9be11344c5899deb43364e19baa75bc881cada4c159938270b2bd89\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/handler/CompatibilityFallbackHandler.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./TokenCallbackHandler.sol\\\";\\nimport \\\"../interfaces/ISignatureValidator.sol\\\";\\nimport \\\"../Safe.sol\\\";\\n\\n/**\\n * @title Compatibility Fallback Handler - Provides compatibility between pre 1.3.0 and 1.3.0+ Safe contracts.\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract CompatibilityFallbackHandler is TokenCallbackHandler, ISignatureValidator {\\n    // keccak256(\\\"SafeMessage(bytes message)\\\");\\n    bytes32 private constant SAFE_MSG_TYPEHASH = 0x60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca;\\n\\n    bytes4 internal constant SIMULATE_SELECTOR = bytes4(keccak256(\\\"simulate(address,bytes)\\\"));\\n\\n    address internal constant SENTINEL_MODULES = address(0x1);\\n    bytes4 internal constant UPDATED_MAGIC_VALUE = 0x1626ba7e;\\n\\n    /**\\n     * @notice Legacy EIP-1271 signature validation method.\\n     * @dev Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)\\n     * @param _data Arbitrary length data signed on the behalf of address(msg.sender).\\n     * @param _signature Signature byte array associated with _data.\\n     * @return The EIP-1271 magic value.\\n     */\\n    function isValidSignature(bytes memory _data, bytes memory _signature) public view override returns (bytes4) {\\n        // Caller should be a Safe\\n        Safe safe = Safe(payable(msg.sender));\\n        bytes memory messageData = encodeMessageDataForSafe(safe, _data);\\n        bytes32 messageHash = keccak256(messageData);\\n        if (_signature.length == 0) {\\n            require(safe.signedMessages(messageHash) != 0, \\\"Hash not approved\\\");\\n        } else {\\n            safe.checkSignatures(messageHash, messageData, _signature);\\n        }\\n        return EIP1271_MAGIC_VALUE;\\n    }\\n\\n    /**\\n     * @dev Returns the hash of a message to be signed by owners.\\n     * @param message Raw message bytes.\\n     * @return Message hash.\\n     */\\n    function getMessageHash(bytes memory message) public view returns (bytes32) {\\n        return getMessageHashForSafe(Safe(payable(msg.sender)), message);\\n    }\\n\\n    /**\\n     * @dev Returns the pre-image of the message hash (see getMessageHashForSafe).\\n     * @param safe Safe to which the message is targeted.\\n     * @param message Message that should be encoded.\\n     * @return Encoded message.\\n     */\\n    function encodeMessageDataForSafe(Safe safe, bytes memory message) public view returns (bytes memory) {\\n        bytes32 safeMessageHash = keccak256(abi.encode(SAFE_MSG_TYPEHASH, keccak256(message)));\\n        return abi.encodePacked(bytes1(0x19), bytes1(0x01), safe.domainSeparator(), safeMessageHash);\\n    }\\n\\n    /**\\n     * @dev Returns hash of a message that can be signed by owners.\\n     * @param safe Safe to which the message is targeted.\\n     * @param message Message that should be hashed.\\n     * @return Message hash.\\n     */\\n    function getMessageHashForSafe(Safe safe, bytes memory message) public view returns (bytes32) {\\n        return keccak256(encodeMessageDataForSafe(safe, message));\\n    }\\n\\n    /**\\n     * @notice Implementation of updated EIP-1271 signature validation method.\\n     * @param _dataHash Hash of the data signed on the behalf of address(msg.sender)\\n     * @param _signature Signature byte array associated with _dataHash\\n     * @return Updated EIP1271 magic value if signature is valid, otherwise 0x0\\n     */\\n    function isValidSignature(bytes32 _dataHash, bytes calldata _signature) external view returns (bytes4) {\\n        ISignatureValidator validator = ISignatureValidator(msg.sender);\\n        bytes4 value = validator.isValidSignature(abi.encode(_dataHash), _signature);\\n        return (value == EIP1271_MAGIC_VALUE) ? UPDATED_MAGIC_VALUE : bytes4(0);\\n    }\\n\\n    /**\\n     * @dev Returns array of first 10 modules.\\n     * @return Array of modules.\\n     */\\n    function getModules() external view returns (address[] memory) {\\n        // Caller should be a Safe\\n        Safe safe = Safe(payable(msg.sender));\\n        (address[] memory array, ) = safe.getModulesPaginated(SENTINEL_MODULES, 10);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Performs a delegatecall on a targetContract in the context of self.\\n     * Internally reverts execution to avoid side effects (making it static). Catches revert and returns encoded result as bytes.\\n     * @dev Inspired by https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\\n     * @param targetContract Address of the contract containing the code to execute.\\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\\n     */\\n    function simulate(address targetContract, bytes calldata calldataPayload) external returns (bytes memory response) {\\n        /**\\n         * Suppress compiler warnings about not using parameters, while allowing\\n         * parameters to keep names for documentation purposes. This does not\\n         * generate code.\\n         */\\n        targetContract;\\n        calldataPayload;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let internalCalldata := mload(0x40)\\n            /**\\n             * Store `simulateAndRevert.selector`.\\n             * String representation is used to force right padding\\n             */\\n            mstore(internalCalldata, \\\"\\\\xb4\\\\xfa\\\\xba\\\\x09\\\")\\n            /**\\n             * Abuse the fact that both this and the internal methods have the\\n             * same signature, and differ only in symbol name (and therefore,\\n             * selector) and copy calldata directly. This saves us approximately\\n             * 250 bytes of code and 300 gas at runtime over the\\n             * `abi.encodeWithSelector` builtin.\\n             */\\n            calldatacopy(add(internalCalldata, 0x04), 0x04, sub(calldatasize(), 0x04))\\n\\n            /**\\n             * `pop` is required here by the compiler, as top level expressions\\n             * can't have return values in inline assembly. `call` typically\\n             * returns a 0 or 1 value indicated whether or not it reverted, but\\n             * since we know it will always revert, we can safely ignore it.\\n             */\\n            pop(\\n                call(\\n                    gas(),\\n                    // address() has been changed to caller() to use the implementation of the Safe\\n                    caller(),\\n                    0,\\n                    internalCalldata,\\n                    calldatasize(),\\n                    /**\\n                     * The `simulateAndRevert` call always reverts, and\\n                     * instead encodes whether or not it was successful in the return\\n                     * data. The first 32-byte word of the return data contains the\\n                     * `success` value, so write it to memory address 0x00 (which is\\n                     * reserved Solidity scratch space and OK to use).\\n                     */\\n                    0x00,\\n                    0x20\\n                )\\n            )\\n\\n            /**\\n             * Allocate and copy the response bytes, making sure to increment\\n             * the free memory pointer accordingly (in case this method is\\n             * called as an internal function). The remaining `returndata[0x20:]`\\n             * contains the ABI encoded response bytes, so we can just write it\\n             * as is to memory.\\n             */\\n            let responseSize := sub(returndatasize(), 0x20)\\n            response := mload(0x40)\\n            mstore(0x40, add(response, responseSize))\\n            returndatacopy(response, 0x20, responseSize)\\n\\n            if iszero(mload(0x00)) {\\n                revert(add(response, 0x20), mload(response))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3eee5c142041e92895d45f8e9acb9ac2203b0ac39418e8d2971e78bf0775bcf7\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/handler/TokenCallbackHandler.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../interfaces/ERC1155TokenReceiver.sol\\\";\\nimport \\\"../interfaces/ERC721TokenReceiver.sol\\\";\\nimport \\\"../interfaces/ERC777TokensRecipient.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @title Default Callback Handler - Handles supported tokens' callbacks, allowing Safes receiving these tokens.\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract TokenCallbackHandler is ERC1155TokenReceiver, ERC777TokensRecipient, ERC721TokenReceiver, IERC165 {\\n    /**\\n     * @notice Handles ERC1155 Token callback.\\n     * return Standardized onERC1155Received return value.\\n     */\\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external pure override returns (bytes4) {\\n        return 0xf23a6e61;\\n    }\\n\\n    /**\\n     * @notice Handles ERC1155 Token batch callback.\\n     * return Standardized onERC1155BatchReceived return value.\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return 0xbc197c81;\\n    }\\n\\n    /**\\n     * @notice Handles ERC721 Token callback.\\n     *  return Standardized onERC721Received return value.\\n     */\\n    function onERC721Received(address, address, uint256, bytes calldata) external pure override returns (bytes4) {\\n        return 0x150b7a02;\\n    }\\n\\n    /**\\n     * @notice Handles ERC777 Token callback.\\n     * return nothing (not standardized)\\n     */\\n    function tokensReceived(address, address, address, uint256, bytes calldata, bytes calldata) external pure override {\\n        // We implement this for completeness, doesn't really have any value\\n    }\\n\\n    /**\\n     * @notice Implements ERC165 interface support for ERC1155TokenReceiver, ERC721TokenReceiver and IERC165.\\n     * @param interfaceId Id of the interface.\\n     * @return if the interface is supported.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(ERC1155TokenReceiver).interfaceId ||\\n            interfaceId == type(ERC721TokenReceiver).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xc8fb9e60f5e561c7e4992a396e928344c278c2fbec8af65aebec44281542e7cb\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/interfaces/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n// Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface ERC1155TokenReceiver {\\n    /**\\n     * @notice Handle the receipt of a single ERC1155 token type.\\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\\n     *      This function MUST return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\\n     *      This function MUST revert if it rejects the transfer.\\n     *      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n     * @param _operator  The address which initiated the transfer (i.e. msg.sender).\\n     * @param _from      The address which previously owned the token.\\n     * @param _id        The ID of the token being transferred.\\n     * @param _value     The amount of tokens being transferred.\\n     * @param _data      Additional data with no specified format.\\n     * @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`.\\n     */\\n    function onERC1155Received(\\n        address _operator,\\n        address _from,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Handle the receipt of multiple ERC1155 token types.\\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\\n     *      This function MUST return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\\n     *      This function MUST revert if it rejects the transfer(s).\\n     *      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n     * @param _operator  The address which initiated the batch transfer (i.e. msg.sender).\\n     * @param _from      The address which previously owned the token.\\n     * @param _ids       An array containing ids of each token being transferred (order and length must match _values array).\\n     * @param _values    An array containing amounts of each token being transferred (order and length must match _ids array).\\n     * @param _data      Additional data with no specified format.\\n     * @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`.\\n     */\\n    function onERC1155BatchReceived(\\n        address _operator,\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x87e62665c041cade64e753ecdccf931cb100ab6e4bcc98769c1e6474be9db493\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/interfaces/ERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\\ninterface ERC721TokenReceiver {\\n    /**\\n     * @notice Handle the receipt of an NFT\\n     * @dev The ERC721 smart contract calls this function on the recipient\\n     *  after a `transfer`. This function MAY throw to revert and reject the\\n     *  transfer. Return of other than the magic value MUST result in the\\n     *  transaction being reverted.\\n     *  Note: the contract address is always the message sender.\\n     * @param _operator The address which called `safeTransferFrom` function.\\n     * @param _from The address which previously owned the token.\\n     * @param _tokenId The NFT identifier which is being transferred.\\n     * @param _data Additional data with no specified format.\\n     * @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n     *  unless throwing\\n     */\\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96c4c5457fede2d4c6012011dfda36f8e8ffdb7388468f2dddb35661538bf479\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/interfaces/ERC777TokensRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title ERC777TokensRecipient\\n * @dev Interface for contracts that will be called with the ERC777 token's `tokensReceived` method.\\n * The contract receiving the tokens must implement this interface in order to receive the tokens.\\n */\\ninterface ERC777TokensRecipient {\\n    /**\\n     * @dev Called by the ERC777 token contract after a successful transfer or a minting operation.\\n     * @param operator The address of the operator performing the transfer or minting operation.\\n     * @param from The address of the sender.\\n     * @param to The address of the recipient.\\n     * @param amount The amount of tokens that were transferred or minted.\\n     * @param data Additional data that was passed during the transfer or minting operation.\\n     * @param operatorData Additional data that was passed by the operator during the transfer or minting operation.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x32ca7f1610659f35e52f5a989e1d844b7847ad57fab06e0cae5bc027248536ac\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n     * See the corresponding EIP section\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/interfaces/ISignatureValidator.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract ISignatureValidatorConstants {\\n    // bytes4(keccak256(\\\"isValidSignature(bytes,bytes)\\\")\\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x20c13b0b;\\n}\\n\\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\\n    /**\\n     * @notice Legacy EIP1271 method to validate a signature.\\n     * @param _data Arbitrary length data signed on the behalf of address(this).\\n     * @param _signature Signature byte array associated with _data.\\n     *\\n     * MUST return the bytes4 magic value 0x20c13b0b when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(bytes memory _data, bytes memory _signature) public view virtual returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2459cb3ed73ecb80e1e7a6508d09a58cc59570b049f77042f669dedfcc5f6457\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isValidSignature(bytes,bytes)":{"notice":"Legacy EIP-1271 signature validation method."},"isValidSignature(bytes32,bytes)":{"notice":"Implementation of updated EIP-1271 signature validation method."},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Handles ERC1155 Token batch callback. return Standardized onERC1155BatchReceived return value."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Handles ERC1155 Token callback. return Standardized onERC1155Received return value."},"onERC721Received(address,address,uint256,bytes)":{"notice":"Handles ERC721 Token callback.  return Standardized onERC721Received return value."},"supportsInterface(bytes4)":{"notice":"Implements ERC165 interface support for ERC1155TokenReceiver, ERC721TokenReceiver and IERC165."},"tokensReceived(address,address,address,uint256,bytes,bytes)":{"notice":"Handles ERC777 Token callback. return nothing (not standardized)"}},"version":1}}},"@safe-global/safe-contracts/contracts/handler/HandlerContext.sol":{"HandlerContext":{"abi":[],"devdoc":{"author":"Richard Meissner - @rmeissner","details":"The fallback manager appends the following context to the calldata:      1. Fallback manager caller address (non-padded) based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/f8cc8b844a9f92f63dc55aa581f7d643a1bc5ac1/contracts/metatx/ERC2771Context.sol","kind":"dev","methods":{},"title":"Handler Context - Allows the fallback handler to extract addition context from the calldata","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"details\":\"The fallback manager appends the following context to the calldata:      1. Fallback manager caller address (non-padded) based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/f8cc8b844a9f92f63dc55aa581f7d643a1bc5ac1/contracts/metatx/ERC2771Context.sol\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Handler Context - Allows the fallback handler to extract addition context from the calldata\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-contracts/contracts/handler/HandlerContext.sol\":\"HandlerContext\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/handler/HandlerContext.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Handler Context - Allows the fallback handler to extract addition context from the calldata\\n * @dev The fallback manager appends the following context to the calldata:\\n *      1. Fallback manager caller address (non-padded)\\n * based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/f8cc8b844a9f92f63dc55aa581f7d643a1bc5ac1/contracts/metatx/ERC2771Context.sol\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract HandlerContext {\\n    /**\\n     * @notice Allows fetching the original caller address.\\n     * @dev This is only reliable in combination with a FallbackManager that supports this (e.g. Safe contract >=1.3.0).\\n     *      When using this functionality make sure that the linked _manager (aka msg.sender) supports this.\\n     *      This function does not rely on a trusted forwarder. Use the returned value only to\\n     *      check information against the calling manager.\\n     * @return sender Original caller address.\\n     */\\n    function _msgSender() internal pure returns (address sender) {\\n        // The assembly code is more direct than the Solidity version using `abi.decode`.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the FallbackManager address\\n     * @return Fallback manager address\\n     */\\n    function _manager() internal view returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\",\"keccak256\":\"0xce6da4c47f8691a4fcf07d20266b1a23ea757e49eedbfcf929f535f3f6e8072d\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@safe-global/safe-contracts/contracts/handler/TokenCallbackHandler.sol":{"TokenCallbackHandler":{"abi":[{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"tokensReceived","outputs":[],"stateMutability":"pure","type":"function"}],"devdoc":{"author":"Richard Meissner - @rmeissner","kind":"dev","methods":{"supportsInterface(bytes4)":{"params":{"interfaceId":"Id of the interface."},"returns":{"_0":"if the interface is supported."}}},"title":"Default Callback Handler - Handles supported tokens' callbacks, allowing Safes receiving these tokens.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b506104a6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100565760003560e01c806223de291461005b57806301ffc9a714610075578063150b7a021461009d578063bc197c81146100d5578063f23a6e61146100f7575b600080fd5b6100736100693660046101ce565b5050505050505050565b005b610088610083366004610279565b610117565b60405190151581526020015b60405180910390f35b6100bc6100ab3660046102aa565b630a85bd0160e11b95945050505050565b6040516001600160e01b03199091168152602001610094565b6100bc6100e336600461035e565b63bc197c8160e01b98975050505050505050565b6100bc6101053660046103f8565b63f23a6e6160e01b9695505050505050565b60006001600160e01b03198216630271189760e51b148061014857506001600160e01b03198216630a85bd0160e11b145b8061016357506001600160e01b031982166301ffc9a760e01b145b92915050565b80356001600160a01b038116811461018057600080fd5b919050565b60008083601f84011261019757600080fd5b50813567ffffffffffffffff8111156101af57600080fd5b6020830191508360208285010111156101c757600080fd5b9250929050565b60008060008060008060008060c0898b0312156101ea57600080fd5b6101f389610169565b975061020160208a01610169565b965061020f60408a01610169565b955060608901359450608089013567ffffffffffffffff8082111561023357600080fd5b61023f8c838d01610185565b909650945060a08b013591508082111561025857600080fd5b506102658b828c01610185565b999c989b5096995094979396929594505050565b60006020828403121561028b57600080fd5b81356001600160e01b0319811681146102a357600080fd5b9392505050565b6000806000806000608086880312156102c257600080fd5b6102cb86610169565b94506102d960208701610169565b935060408601359250606086013567ffffffffffffffff8111156102fc57600080fd5b61030888828901610185565b969995985093965092949392505050565b60008083601f84011261032b57600080fd5b50813567ffffffffffffffff81111561034357600080fd5b6020830191508360208260051b85010111156101c757600080fd5b60008060008060008060008060a0898b03121561037a57600080fd5b61038389610169565b975061039160208a01610169565b9650604089013567ffffffffffffffff808211156103ae57600080fd5b6103ba8c838d01610319565b909850965060608b01359150808211156103d357600080fd5b6103df8c838d01610319565b909650945060808b013591508082111561025857600080fd5b60008060008060008060a0878903121561041157600080fd5b61041a87610169565b955061042860208801610169565b94506040870135935060608701359250608087013567ffffffffffffffff81111561045257600080fd5b61045e89828a01610185565b979a969950949750929593949250505056fea2646970667358221220c6f4f111570a4ec92dd2a7959ef7024a8708c7e04324c79889286d5430f3a2a464736f6c63430008170033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A6 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x56 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0x23DE29 EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x75 JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x9D JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0xF7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x73 PUSH2 0x69 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CE JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST STOP JUMPDEST PUSH2 0x88 PUSH2 0x83 CALLDATASIZE PUSH1 0x4 PUSH2 0x279 JUMP JUMPDEST PUSH2 0x117 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBC PUSH2 0xAB CALLDATASIZE PUSH1 0x4 PUSH2 0x2AA JUMP JUMPDEST PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x94 JUMP JUMPDEST PUSH2 0xBC PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0x35E JUMP JUMPDEST PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xBC PUSH2 0x105 CALLDATASIZE PUSH1 0x4 PUSH2 0x3F8 JUMP JUMPDEST PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x2711897 PUSH1 0xE5 SHL EQ DUP1 PUSH2 0x148 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ JUMPDEST DUP1 PUSH2 0x163 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x197 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x1EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F3 DUP10 PUSH2 0x169 JUMP JUMPDEST SWAP8 POP PUSH2 0x201 PUSH1 0x20 DUP11 ADD PUSH2 0x169 JUMP JUMPDEST SWAP7 POP PUSH2 0x20F PUSH1 0x40 DUP11 ADD PUSH2 0x169 JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x233 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x23F DUP13 DUP4 DUP14 ADD PUSH2 0x185 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0xA0 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x258 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x265 DUP12 DUP3 DUP13 ADD PUSH2 0x185 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x28B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x2A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2CB DUP7 PUSH2 0x169 JUMP JUMPDEST SWAP5 POP PUSH2 0x2D9 PUSH1 0x20 DUP8 ADD PUSH2 0x169 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x308 DUP9 DUP3 DUP10 ADD PUSH2 0x185 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x32B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x343 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x37A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x383 DUP10 PUSH2 0x169 JUMP JUMPDEST SWAP8 POP PUSH2 0x391 PUSH1 0x20 DUP11 ADD PUSH2 0x169 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3BA DUP13 DUP4 DUP14 ADD PUSH2 0x319 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3DF DUP13 DUP4 DUP14 ADD PUSH2 0x319 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x258 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x41A DUP8 PUSH2 0x169 JUMP JUMPDEST SWAP6 POP PUSH2 0x428 PUSH1 0x20 DUP9 ADD PUSH2 0x169 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x452 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x45E DUP10 DUP3 DUP11 ADD PUSH2 0x185 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC6 DELEGATECALL CALL GT JUMPI EXP 0x4E 0xC9 0x2D 0xD2 0xA7 SWAP6 SWAP15 0xF7 MUL 0x4A DUP8 ADDMOD 0xC7 0xE0 NUMBER 0x24 0xC7 SWAP9 DUP10 0x28 PUSH14 0x5430F3A2A464736F6C6343000817 STOP CALLER ","sourceMap":"421:1864:24:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@onERC1155BatchReceived_3620":{"entryPoint":null,"id":3620,"parameterSlots":8,"returnSlots":1},"@onERC1155Received_3598":{"entryPoint":null,"id":3598,"parameterSlots":6,"returnSlots":1},"@onERC721Received_3638":{"entryPoint":null,"id":3638,"parameterSlots":5,"returnSlots":1},"@supportsInterface_3687":{"entryPoint":279,"id":3687,"parameterSlots":1,"returnSlots":1},"@tokensReceived_3656":{"entryPoint":null,"id":3656,"parameterSlots":8,"returnSlots":0},"abi_decode_address":{"entryPoint":361,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn_calldata":{"entryPoint":793,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bytes_calldata":{"entryPoint":389,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_addresst_uint256t_bytes_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":462,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":862,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":682,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr":{"entryPoint":1016,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_bytes4":{"entryPoint":633,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:5164:40","nodeType":"YulBlock","src":"0:5164:40","statements":[{"nativeSrc":"6:3:40","nodeType":"YulBlock","src":"6:3:40","statements":[]},{"body":{"nativeSrc":"63:124:40","nodeType":"YulBlock","src":"63:124:40","statements":[{"nativeSrc":"73:29:40","nodeType":"YulAssignment","src":"73:29:40","value":{"arguments":[{"name":"offset","nativeSrc":"95:6:40","nodeType":"YulIdentifier","src":"95:6:40"}],"functionName":{"name":"calldataload","nativeSrc":"82:12:40","nodeType":"YulIdentifier","src":"82:12:40"},"nativeSrc":"82:20:40","nodeType":"YulFunctionCall","src":"82:20:40"},"variableNames":[{"name":"value","nativeSrc":"73:5:40","nodeType":"YulIdentifier","src":"73:5:40"}]},{"body":{"nativeSrc":"165:16:40","nodeType":"YulBlock","src":"165:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"174:1:40","nodeType":"YulLiteral","src":"174:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"177:1:40","nodeType":"YulLiteral","src":"177:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"167:6:40","nodeType":"YulIdentifier","src":"167:6:40"},"nativeSrc":"167:12:40","nodeType":"YulFunctionCall","src":"167:12:40"},"nativeSrc":"167:12:40","nodeType":"YulExpressionStatement","src":"167:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"124:5:40","nodeType":"YulIdentifier","src":"124:5:40"},{"arguments":[{"name":"value","nativeSrc":"135:5:40","nodeType":"YulIdentifier","src":"135:5:40"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"150:3:40","nodeType":"YulLiteral","src":"150:3:40","type":"","value":"160"},{"kind":"number","nativeSrc":"155:1:40","nodeType":"YulLiteral","src":"155:1:40","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"146:3:40","nodeType":"YulIdentifier","src":"146:3:40"},"nativeSrc":"146:11:40","nodeType":"YulFunctionCall","src":"146:11:40"},{"kind":"number","nativeSrc":"159:1:40","nodeType":"YulLiteral","src":"159:1:40","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"142:3:40","nodeType":"YulIdentifier","src":"142:3:40"},"nativeSrc":"142:19:40","nodeType":"YulFunctionCall","src":"142:19:40"}],"functionName":{"name":"and","nativeSrc":"131:3:40","nodeType":"YulIdentifier","src":"131:3:40"},"nativeSrc":"131:31:40","nodeType":"YulFunctionCall","src":"131:31:40"}],"functionName":{"name":"eq","nativeSrc":"121:2:40","nodeType":"YulIdentifier","src":"121:2:40"},"nativeSrc":"121:42:40","nodeType":"YulFunctionCall","src":"121:42:40"}],"functionName":{"name":"iszero","nativeSrc":"114:6:40","nodeType":"YulIdentifier","src":"114:6:40"},"nativeSrc":"114:50:40","nodeType":"YulFunctionCall","src":"114:50:40"},"nativeSrc":"111:70:40","nodeType":"YulIf","src":"111:70:40"}]},"name":"abi_decode_address","nativeSrc":"14:173:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"42:6:40","nodeType":"YulTypedName","src":"42:6:40","type":""}],"returnVariables":[{"name":"value","nativeSrc":"53:5:40","nodeType":"YulTypedName","src":"53:5:40","type":""}],"src":"14:173:40"},{"body":{"nativeSrc":"264:275:40","nodeType":"YulBlock","src":"264:275:40","statements":[{"body":{"nativeSrc":"313:16:40","nodeType":"YulBlock","src":"313:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"322:1:40","nodeType":"YulLiteral","src":"322:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"325:1:40","nodeType":"YulLiteral","src":"325:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"315:6:40","nodeType":"YulIdentifier","src":"315:6:40"},"nativeSrc":"315:12:40","nodeType":"YulFunctionCall","src":"315:12:40"},"nativeSrc":"315:12:40","nodeType":"YulExpressionStatement","src":"315:12:40"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"292:6:40","nodeType":"YulIdentifier","src":"292:6:40"},{"kind":"number","nativeSrc":"300:4:40","nodeType":"YulLiteral","src":"300:4:40","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"288:3:40","nodeType":"YulIdentifier","src":"288:3:40"},"nativeSrc":"288:17:40","nodeType":"YulFunctionCall","src":"288:17:40"},{"name":"end","nativeSrc":"307:3:40","nodeType":"YulIdentifier","src":"307:3:40"}],"functionName":{"name":"slt","nativeSrc":"284:3:40","nodeType":"YulIdentifier","src":"284:3:40"},"nativeSrc":"284:27:40","nodeType":"YulFunctionCall","src":"284:27:40"}],"functionName":{"name":"iszero","nativeSrc":"277:6:40","nodeType":"YulIdentifier","src":"277:6:40"},"nativeSrc":"277:35:40","nodeType":"YulFunctionCall","src":"277:35:40"},"nativeSrc":"274:55:40","nodeType":"YulIf","src":"274:55:40"},{"nativeSrc":"338:30:40","nodeType":"YulAssignment","src":"338:30:40","value":{"arguments":[{"name":"offset","nativeSrc":"361:6:40","nodeType":"YulIdentifier","src":"361:6:40"}],"functionName":{"name":"calldataload","nativeSrc":"348:12:40","nodeType":"YulIdentifier","src":"348:12:40"},"nativeSrc":"348:20:40","nodeType":"YulFunctionCall","src":"348:20:40"},"variableNames":[{"name":"length","nativeSrc":"338:6:40","nodeType":"YulIdentifier","src":"338:6:40"}]},{"body":{"nativeSrc":"411:16:40","nodeType":"YulBlock","src":"411:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"420:1:40","nodeType":"YulLiteral","src":"420:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"423:1:40","nodeType":"YulLiteral","src":"423:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"413:6:40","nodeType":"YulIdentifier","src":"413:6:40"},"nativeSrc":"413:12:40","nodeType":"YulFunctionCall","src":"413:12:40"},"nativeSrc":"413:12:40","nodeType":"YulExpressionStatement","src":"413:12:40"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"383:6:40","nodeType":"YulIdentifier","src":"383:6:40"},{"kind":"number","nativeSrc":"391:18:40","nodeType":"YulLiteral","src":"391:18:40","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"380:2:40","nodeType":"YulIdentifier","src":"380:2:40"},"nativeSrc":"380:30:40","nodeType":"YulFunctionCall","src":"380:30:40"},"nativeSrc":"377:50:40","nodeType":"YulIf","src":"377:50:40"},{"nativeSrc":"436:29:40","nodeType":"YulAssignment","src":"436:29:40","value":{"arguments":[{"name":"offset","nativeSrc":"452:6:40","nodeType":"YulIdentifier","src":"452:6:40"},{"kind":"number","nativeSrc":"460:4:40","nodeType":"YulLiteral","src":"460:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"448:3:40","nodeType":"YulIdentifier","src":"448:3:40"},"nativeSrc":"448:17:40","nodeType":"YulFunctionCall","src":"448:17:40"},"variableNames":[{"name":"arrayPos","nativeSrc":"436:8:40","nodeType":"YulIdentifier","src":"436:8:40"}]},{"body":{"nativeSrc":"517:16:40","nodeType":"YulBlock","src":"517:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"526:1:40","nodeType":"YulLiteral","src":"526:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"529:1:40","nodeType":"YulLiteral","src":"529:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"519:6:40","nodeType":"YulIdentifier","src":"519:6:40"},"nativeSrc":"519:12:40","nodeType":"YulFunctionCall","src":"519:12:40"},"nativeSrc":"519:12:40","nodeType":"YulExpressionStatement","src":"519:12:40"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"488:6:40","nodeType":"YulIdentifier","src":"488:6:40"},{"name":"length","nativeSrc":"496:6:40","nodeType":"YulIdentifier","src":"496:6:40"}],"functionName":{"name":"add","nativeSrc":"484:3:40","nodeType":"YulIdentifier","src":"484:3:40"},"nativeSrc":"484:19:40","nodeType":"YulFunctionCall","src":"484:19:40"},{"kind":"number","nativeSrc":"505:4:40","nodeType":"YulLiteral","src":"505:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"480:3:40","nodeType":"YulIdentifier","src":"480:3:40"},"nativeSrc":"480:30:40","nodeType":"YulFunctionCall","src":"480:30:40"},{"name":"end","nativeSrc":"512:3:40","nodeType":"YulIdentifier","src":"512:3:40"}],"functionName":{"name":"gt","nativeSrc":"477:2:40","nodeType":"YulIdentifier","src":"477:2:40"},"nativeSrc":"477:39:40","nodeType":"YulFunctionCall","src":"477:39:40"},"nativeSrc":"474:59:40","nodeType":"YulIf","src":"474:59:40"}]},"name":"abi_decode_bytes_calldata","nativeSrc":"192:347:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"227:6:40","nodeType":"YulTypedName","src":"227:6:40","type":""},{"name":"end","nativeSrc":"235:3:40","nodeType":"YulTypedName","src":"235:3:40","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"243:8:40","nodeType":"YulTypedName","src":"243:8:40","type":""},{"name":"length","nativeSrc":"253:6:40","nodeType":"YulTypedName","src":"253:6:40","type":""}],"src":"192:347:40"},{"body":{"nativeSrc":"737:817:40","nodeType":"YulBlock","src":"737:817:40","statements":[{"body":{"nativeSrc":"784:16:40","nodeType":"YulBlock","src":"784:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"793:1:40","nodeType":"YulLiteral","src":"793:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"796:1:40","nodeType":"YulLiteral","src":"796:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"786:6:40","nodeType":"YulIdentifier","src":"786:6:40"},"nativeSrc":"786:12:40","nodeType":"YulFunctionCall","src":"786:12:40"},"nativeSrc":"786:12:40","nodeType":"YulExpressionStatement","src":"786:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"758:7:40","nodeType":"YulIdentifier","src":"758:7:40"},{"name":"headStart","nativeSrc":"767:9:40","nodeType":"YulIdentifier","src":"767:9:40"}],"functionName":{"name":"sub","nativeSrc":"754:3:40","nodeType":"YulIdentifier","src":"754:3:40"},"nativeSrc":"754:23:40","nodeType":"YulFunctionCall","src":"754:23:40"},{"kind":"number","nativeSrc":"779:3:40","nodeType":"YulLiteral","src":"779:3:40","type":"","value":"192"}],"functionName":{"name":"slt","nativeSrc":"750:3:40","nodeType":"YulIdentifier","src":"750:3:40"},"nativeSrc":"750:33:40","nodeType":"YulFunctionCall","src":"750:33:40"},"nativeSrc":"747:53:40","nodeType":"YulIf","src":"747:53:40"},{"nativeSrc":"809:39:40","nodeType":"YulAssignment","src":"809:39:40","value":{"arguments":[{"name":"headStart","nativeSrc":"838:9:40","nodeType":"YulIdentifier","src":"838:9:40"}],"functionName":{"name":"abi_decode_address","nativeSrc":"819:18:40","nodeType":"YulIdentifier","src":"819:18:40"},"nativeSrc":"819:29:40","nodeType":"YulFunctionCall","src":"819:29:40"},"variableNames":[{"name":"value0","nativeSrc":"809:6:40","nodeType":"YulIdentifier","src":"809:6:40"}]},{"nativeSrc":"857:48:40","nodeType":"YulAssignment","src":"857:48:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"890:9:40","nodeType":"YulIdentifier","src":"890:9:40"},{"kind":"number","nativeSrc":"901:2:40","nodeType":"YulLiteral","src":"901:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"886:3:40","nodeType":"YulIdentifier","src":"886:3:40"},"nativeSrc":"886:18:40","nodeType":"YulFunctionCall","src":"886:18:40"}],"functionName":{"name":"abi_decode_address","nativeSrc":"867:18:40","nodeType":"YulIdentifier","src":"867:18:40"},"nativeSrc":"867:38:40","nodeType":"YulFunctionCall","src":"867:38:40"},"variableNames":[{"name":"value1","nativeSrc":"857:6:40","nodeType":"YulIdentifier","src":"857:6:40"}]},{"nativeSrc":"914:48:40","nodeType":"YulAssignment","src":"914:48:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"947:9:40","nodeType":"YulIdentifier","src":"947:9:40"},{"kind":"number","nativeSrc":"958:2:40","nodeType":"YulLiteral","src":"958:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"943:3:40","nodeType":"YulIdentifier","src":"943:3:40"},"nativeSrc":"943:18:40","nodeType":"YulFunctionCall","src":"943:18:40"}],"functionName":{"name":"abi_decode_address","nativeSrc":"924:18:40","nodeType":"YulIdentifier","src":"924:18:40"},"nativeSrc":"924:38:40","nodeType":"YulFunctionCall","src":"924:38:40"},"variableNames":[{"name":"value2","nativeSrc":"914:6:40","nodeType":"YulIdentifier","src":"914:6:40"}]},{"nativeSrc":"971:42:40","nodeType":"YulAssignment","src":"971:42:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"998:9:40","nodeType":"YulIdentifier","src":"998:9:40"},{"kind":"number","nativeSrc":"1009:2:40","nodeType":"YulLiteral","src":"1009:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"994:3:40","nodeType":"YulIdentifier","src":"994:3:40"},"nativeSrc":"994:18:40","nodeType":"YulFunctionCall","src":"994:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"981:12:40","nodeType":"YulIdentifier","src":"981:12:40"},"nativeSrc":"981:32:40","nodeType":"YulFunctionCall","src":"981:32:40"},"variableNames":[{"name":"value3","nativeSrc":"971:6:40","nodeType":"YulIdentifier","src":"971:6:40"}]},{"nativeSrc":"1022:47:40","nodeType":"YulVariableDeclaration","src":"1022:47:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1053:9:40","nodeType":"YulIdentifier","src":"1053:9:40"},{"kind":"number","nativeSrc":"1064:3:40","nodeType":"YulLiteral","src":"1064:3:40","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"1049:3:40","nodeType":"YulIdentifier","src":"1049:3:40"},"nativeSrc":"1049:19:40","nodeType":"YulFunctionCall","src":"1049:19:40"}],"functionName":{"name":"calldataload","nativeSrc":"1036:12:40","nodeType":"YulIdentifier","src":"1036:12:40"},"nativeSrc":"1036:33:40","nodeType":"YulFunctionCall","src":"1036:33:40"},"variables":[{"name":"offset","nativeSrc":"1026:6:40","nodeType":"YulTypedName","src":"1026:6:40","type":""}]},{"nativeSrc":"1078:28:40","nodeType":"YulVariableDeclaration","src":"1078:28:40","value":{"kind":"number","nativeSrc":"1088:18:40","nodeType":"YulLiteral","src":"1088:18:40","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"1082:2:40","nodeType":"YulTypedName","src":"1082:2:40","type":""}]},{"body":{"nativeSrc":"1133:16:40","nodeType":"YulBlock","src":"1133:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1142:1:40","nodeType":"YulLiteral","src":"1142:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"1145:1:40","nodeType":"YulLiteral","src":"1145:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1135:6:40","nodeType":"YulIdentifier","src":"1135:6:40"},"nativeSrc":"1135:12:40","nodeType":"YulFunctionCall","src":"1135:12:40"},"nativeSrc":"1135:12:40","nodeType":"YulExpressionStatement","src":"1135:12:40"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"1121:6:40","nodeType":"YulIdentifier","src":"1121:6:40"},{"name":"_1","nativeSrc":"1129:2:40","nodeType":"YulIdentifier","src":"1129:2:40"}],"functionName":{"name":"gt","nativeSrc":"1118:2:40","nodeType":"YulIdentifier","src":"1118:2:40"},"nativeSrc":"1118:14:40","nodeType":"YulFunctionCall","src":"1118:14:40"},"nativeSrc":"1115:34:40","nodeType":"YulIf","src":"1115:34:40"},{"nativeSrc":"1158:84:40","nodeType":"YulVariableDeclaration","src":"1158:84:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1214:9:40","nodeType":"YulIdentifier","src":"1214:9:40"},{"name":"offset","nativeSrc":"1225:6:40","nodeType":"YulIdentifier","src":"1225:6:40"}],"functionName":{"name":"add","nativeSrc":"1210:3:40","nodeType":"YulIdentifier","src":"1210:3:40"},"nativeSrc":"1210:22:40","nodeType":"YulFunctionCall","src":"1210:22:40"},{"name":"dataEnd","nativeSrc":"1234:7:40","nodeType":"YulIdentifier","src":"1234:7:40"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"1184:25:40","nodeType":"YulIdentifier","src":"1184:25:40"},"nativeSrc":"1184:58:40","nodeType":"YulFunctionCall","src":"1184:58:40"},"variables":[{"name":"value4_1","nativeSrc":"1162:8:40","nodeType":"YulTypedName","src":"1162:8:40","type":""},{"name":"value5_1","nativeSrc":"1172:8:40","nodeType":"YulTypedName","src":"1172:8:40","type":""}]},{"nativeSrc":"1251:18:40","nodeType":"YulAssignment","src":"1251:18:40","value":{"name":"value4_1","nativeSrc":"1261:8:40","nodeType":"YulIdentifier","src":"1261:8:40"},"variableNames":[{"name":"value4","nativeSrc":"1251:6:40","nodeType":"YulIdentifier","src":"1251:6:40"}]},{"nativeSrc":"1278:18:40","nodeType":"YulAssignment","src":"1278:18:40","value":{"name":"value5_1","nativeSrc":"1288:8:40","nodeType":"YulIdentifier","src":"1288:8:40"},"variableNames":[{"name":"value5","nativeSrc":"1278:6:40","nodeType":"YulIdentifier","src":"1278:6:40"}]},{"nativeSrc":"1305:49:40","nodeType":"YulVariableDeclaration","src":"1305:49:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1338:9:40","nodeType":"YulIdentifier","src":"1338:9:40"},{"kind":"number","nativeSrc":"1349:3:40","nodeType":"YulLiteral","src":"1349:3:40","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"1334:3:40","nodeType":"YulIdentifier","src":"1334:3:40"},"nativeSrc":"1334:19:40","nodeType":"YulFunctionCall","src":"1334:19:40"}],"functionName":{"name":"calldataload","nativeSrc":"1321:12:40","nodeType":"YulIdentifier","src":"1321:12:40"},"nativeSrc":"1321:33:40","nodeType":"YulFunctionCall","src":"1321:33:40"},"variables":[{"name":"offset_1","nativeSrc":"1309:8:40","nodeType":"YulTypedName","src":"1309:8:40","type":""}]},{"body":{"nativeSrc":"1383:16:40","nodeType":"YulBlock","src":"1383:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1392:1:40","nodeType":"YulLiteral","src":"1392:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"1395:1:40","nodeType":"YulLiteral","src":"1395:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1385:6:40","nodeType":"YulIdentifier","src":"1385:6:40"},"nativeSrc":"1385:12:40","nodeType":"YulFunctionCall","src":"1385:12:40"},"nativeSrc":"1385:12:40","nodeType":"YulExpressionStatement","src":"1385:12:40"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"1369:8:40","nodeType":"YulIdentifier","src":"1369:8:40"},{"name":"_1","nativeSrc":"1379:2:40","nodeType":"YulIdentifier","src":"1379:2:40"}],"functionName":{"name":"gt","nativeSrc":"1366:2:40","nodeType":"YulIdentifier","src":"1366:2:40"},"nativeSrc":"1366:16:40","nodeType":"YulFunctionCall","src":"1366:16:40"},"nativeSrc":"1363:36:40","nodeType":"YulIf","src":"1363:36:40"},{"nativeSrc":"1408:86:40","nodeType":"YulVariableDeclaration","src":"1408:86:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1464:9:40","nodeType":"YulIdentifier","src":"1464:9:40"},{"name":"offset_1","nativeSrc":"1475:8:40","nodeType":"YulIdentifier","src":"1475:8:40"}],"functionName":{"name":"add","nativeSrc":"1460:3:40","nodeType":"YulIdentifier","src":"1460:3:40"},"nativeSrc":"1460:24:40","nodeType":"YulFunctionCall","src":"1460:24:40"},{"name":"dataEnd","nativeSrc":"1486:7:40","nodeType":"YulIdentifier","src":"1486:7:40"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"1434:25:40","nodeType":"YulIdentifier","src":"1434:25:40"},"nativeSrc":"1434:60:40","nodeType":"YulFunctionCall","src":"1434:60:40"},"variables":[{"name":"value6_1","nativeSrc":"1412:8:40","nodeType":"YulTypedName","src":"1412:8:40","type":""},{"name":"value7_1","nativeSrc":"1422:8:40","nodeType":"YulTypedName","src":"1422:8:40","type":""}]},{"nativeSrc":"1503:18:40","nodeType":"YulAssignment","src":"1503:18:40","value":{"name":"value6_1","nativeSrc":"1513:8:40","nodeType":"YulIdentifier","src":"1513:8:40"},"variableNames":[{"name":"value6","nativeSrc":"1503:6:40","nodeType":"YulIdentifier","src":"1503:6:40"}]},{"nativeSrc":"1530:18:40","nodeType":"YulAssignment","src":"1530:18:40","value":{"name":"value7_1","nativeSrc":"1540:8:40","nodeType":"YulIdentifier","src":"1540:8:40"},"variableNames":[{"name":"value7","nativeSrc":"1530:6:40","nodeType":"YulIdentifier","src":"1530:6:40"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_addresst_uint256t_bytes_calldata_ptrt_bytes_calldata_ptr","nativeSrc":"544:1010:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"647:9:40","nodeType":"YulTypedName","src":"647:9:40","type":""},{"name":"dataEnd","nativeSrc":"658:7:40","nodeType":"YulTypedName","src":"658:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"670:6:40","nodeType":"YulTypedName","src":"670:6:40","type":""},{"name":"value1","nativeSrc":"678:6:40","nodeType":"YulTypedName","src":"678:6:40","type":""},{"name":"value2","nativeSrc":"686:6:40","nodeType":"YulTypedName","src":"686:6:40","type":""},{"name":"value3","nativeSrc":"694:6:40","nodeType":"YulTypedName","src":"694:6:40","type":""},{"name":"value4","nativeSrc":"702:6:40","nodeType":"YulTypedName","src":"702:6:40","type":""},{"name":"value5","nativeSrc":"710:6:40","nodeType":"YulTypedName","src":"710:6:40","type":""},{"name":"value6","nativeSrc":"718:6:40","nodeType":"YulTypedName","src":"718:6:40","type":""},{"name":"value7","nativeSrc":"726:6:40","nodeType":"YulTypedName","src":"726:6:40","type":""}],"src":"544:1010:40"},{"body":{"nativeSrc":"1628:217:40","nodeType":"YulBlock","src":"1628:217:40","statements":[{"body":{"nativeSrc":"1674:16:40","nodeType":"YulBlock","src":"1674:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1683:1:40","nodeType":"YulLiteral","src":"1683:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"1686:1:40","nodeType":"YulLiteral","src":"1686:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1676:6:40","nodeType":"YulIdentifier","src":"1676:6:40"},"nativeSrc":"1676:12:40","nodeType":"YulFunctionCall","src":"1676:12:40"},"nativeSrc":"1676:12:40","nodeType":"YulExpressionStatement","src":"1676:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1649:7:40","nodeType":"YulIdentifier","src":"1649:7:40"},{"name":"headStart","nativeSrc":"1658:9:40","nodeType":"YulIdentifier","src":"1658:9:40"}],"functionName":{"name":"sub","nativeSrc":"1645:3:40","nodeType":"YulIdentifier","src":"1645:3:40"},"nativeSrc":"1645:23:40","nodeType":"YulFunctionCall","src":"1645:23:40"},{"kind":"number","nativeSrc":"1670:2:40","nodeType":"YulLiteral","src":"1670:2:40","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1641:3:40","nodeType":"YulIdentifier","src":"1641:3:40"},"nativeSrc":"1641:32:40","nodeType":"YulFunctionCall","src":"1641:32:40"},"nativeSrc":"1638:52:40","nodeType":"YulIf","src":"1638:52:40"},{"nativeSrc":"1699:36:40","nodeType":"YulVariableDeclaration","src":"1699:36:40","value":{"arguments":[{"name":"headStart","nativeSrc":"1725:9:40","nodeType":"YulIdentifier","src":"1725:9:40"}],"functionName":{"name":"calldataload","nativeSrc":"1712:12:40","nodeType":"YulIdentifier","src":"1712:12:40"},"nativeSrc":"1712:23:40","nodeType":"YulFunctionCall","src":"1712:23:40"},"variables":[{"name":"value","nativeSrc":"1703:5:40","nodeType":"YulTypedName","src":"1703:5:40","type":""}]},{"body":{"nativeSrc":"1799:16:40","nodeType":"YulBlock","src":"1799:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1808:1:40","nodeType":"YulLiteral","src":"1808:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"1811:1:40","nodeType":"YulLiteral","src":"1811:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1801:6:40","nodeType":"YulIdentifier","src":"1801:6:40"},"nativeSrc":"1801:12:40","nodeType":"YulFunctionCall","src":"1801:12:40"},"nativeSrc":"1801:12:40","nodeType":"YulExpressionStatement","src":"1801:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1757:5:40","nodeType":"YulIdentifier","src":"1757:5:40"},{"arguments":[{"name":"value","nativeSrc":"1768:5:40","nodeType":"YulIdentifier","src":"1768:5:40"},{"arguments":[{"kind":"number","nativeSrc":"1779:3:40","nodeType":"YulLiteral","src":"1779:3:40","type":"","value":"224"},{"kind":"number","nativeSrc":"1784:10:40","nodeType":"YulLiteral","src":"1784:10:40","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nativeSrc":"1775:3:40","nodeType":"YulIdentifier","src":"1775:3:40"},"nativeSrc":"1775:20:40","nodeType":"YulFunctionCall","src":"1775:20:40"}],"functionName":{"name":"and","nativeSrc":"1764:3:40","nodeType":"YulIdentifier","src":"1764:3:40"},"nativeSrc":"1764:32:40","nodeType":"YulFunctionCall","src":"1764:32:40"}],"functionName":{"name":"eq","nativeSrc":"1754:2:40","nodeType":"YulIdentifier","src":"1754:2:40"},"nativeSrc":"1754:43:40","nodeType":"YulFunctionCall","src":"1754:43:40"}],"functionName":{"name":"iszero","nativeSrc":"1747:6:40","nodeType":"YulIdentifier","src":"1747:6:40"},"nativeSrc":"1747:51:40","nodeType":"YulFunctionCall","src":"1747:51:40"},"nativeSrc":"1744:71:40","nodeType":"YulIf","src":"1744:71:40"},{"nativeSrc":"1824:15:40","nodeType":"YulAssignment","src":"1824:15:40","value":{"name":"value","nativeSrc":"1834:5:40","nodeType":"YulIdentifier","src":"1834:5:40"},"variableNames":[{"name":"value0","nativeSrc":"1824:6:40","nodeType":"YulIdentifier","src":"1824:6:40"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"1559:286:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1594:9:40","nodeType":"YulTypedName","src":"1594:9:40","type":""},{"name":"dataEnd","nativeSrc":"1605:7:40","nodeType":"YulTypedName","src":"1605:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1617:6:40","nodeType":"YulTypedName","src":"1617:6:40","type":""}],"src":"1559:286:40"},{"body":{"nativeSrc":"1945:92:40","nodeType":"YulBlock","src":"1945:92:40","statements":[{"nativeSrc":"1955:26:40","nodeType":"YulAssignment","src":"1955:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"1967:9:40","nodeType":"YulIdentifier","src":"1967:9:40"},{"kind":"number","nativeSrc":"1978:2:40","nodeType":"YulLiteral","src":"1978:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1963:3:40","nodeType":"YulIdentifier","src":"1963:3:40"},"nativeSrc":"1963:18:40","nodeType":"YulFunctionCall","src":"1963:18:40"},"variableNames":[{"name":"tail","nativeSrc":"1955:4:40","nodeType":"YulIdentifier","src":"1955:4:40"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1997:9:40","nodeType":"YulIdentifier","src":"1997:9:40"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"2022:6:40","nodeType":"YulIdentifier","src":"2022:6:40"}],"functionName":{"name":"iszero","nativeSrc":"2015:6:40","nodeType":"YulIdentifier","src":"2015:6:40"},"nativeSrc":"2015:14:40","nodeType":"YulFunctionCall","src":"2015:14:40"}],"functionName":{"name":"iszero","nativeSrc":"2008:6:40","nodeType":"YulIdentifier","src":"2008:6:40"},"nativeSrc":"2008:22:40","nodeType":"YulFunctionCall","src":"2008:22:40"}],"functionName":{"name":"mstore","nativeSrc":"1990:6:40","nodeType":"YulIdentifier","src":"1990:6:40"},"nativeSrc":"1990:41:40","nodeType":"YulFunctionCall","src":"1990:41:40"},"nativeSrc":"1990:41:40","nodeType":"YulExpressionStatement","src":"1990:41:40"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"1850:187:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1914:9:40","nodeType":"YulTypedName","src":"1914:9:40","type":""},{"name":"value0","nativeSrc":"1925:6:40","nodeType":"YulTypedName","src":"1925:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1936:4:40","nodeType":"YulTypedName","src":"1936:4:40","type":""}],"src":"1850:187:40"},{"body":{"nativeSrc":"2182:486:40","nodeType":"YulBlock","src":"2182:486:40","statements":[{"body":{"nativeSrc":"2229:16:40","nodeType":"YulBlock","src":"2229:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2238:1:40","nodeType":"YulLiteral","src":"2238:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"2241:1:40","nodeType":"YulLiteral","src":"2241:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2231:6:40","nodeType":"YulIdentifier","src":"2231:6:40"},"nativeSrc":"2231:12:40","nodeType":"YulFunctionCall","src":"2231:12:40"},"nativeSrc":"2231:12:40","nodeType":"YulExpressionStatement","src":"2231:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2203:7:40","nodeType":"YulIdentifier","src":"2203:7:40"},{"name":"headStart","nativeSrc":"2212:9:40","nodeType":"YulIdentifier","src":"2212:9:40"}],"functionName":{"name":"sub","nativeSrc":"2199:3:40","nodeType":"YulIdentifier","src":"2199:3:40"},"nativeSrc":"2199:23:40","nodeType":"YulFunctionCall","src":"2199:23:40"},{"kind":"number","nativeSrc":"2224:3:40","nodeType":"YulLiteral","src":"2224:3:40","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"2195:3:40","nodeType":"YulIdentifier","src":"2195:3:40"},"nativeSrc":"2195:33:40","nodeType":"YulFunctionCall","src":"2195:33:40"},"nativeSrc":"2192:53:40","nodeType":"YulIf","src":"2192:53:40"},{"nativeSrc":"2254:39:40","nodeType":"YulAssignment","src":"2254:39:40","value":{"arguments":[{"name":"headStart","nativeSrc":"2283:9:40","nodeType":"YulIdentifier","src":"2283:9:40"}],"functionName":{"name":"abi_decode_address","nativeSrc":"2264:18:40","nodeType":"YulIdentifier","src":"2264:18:40"},"nativeSrc":"2264:29:40","nodeType":"YulFunctionCall","src":"2264:29:40"},"variableNames":[{"name":"value0","nativeSrc":"2254:6:40","nodeType":"YulIdentifier","src":"2254:6:40"}]},{"nativeSrc":"2302:48:40","nodeType":"YulAssignment","src":"2302:48:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2335:9:40","nodeType":"YulIdentifier","src":"2335:9:40"},{"kind":"number","nativeSrc":"2346:2:40","nodeType":"YulLiteral","src":"2346:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2331:3:40","nodeType":"YulIdentifier","src":"2331:3:40"},"nativeSrc":"2331:18:40","nodeType":"YulFunctionCall","src":"2331:18:40"}],"functionName":{"name":"abi_decode_address","nativeSrc":"2312:18:40","nodeType":"YulIdentifier","src":"2312:18:40"},"nativeSrc":"2312:38:40","nodeType":"YulFunctionCall","src":"2312:38:40"},"variableNames":[{"name":"value1","nativeSrc":"2302:6:40","nodeType":"YulIdentifier","src":"2302:6:40"}]},{"nativeSrc":"2359:42:40","nodeType":"YulAssignment","src":"2359:42:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2386:9:40","nodeType":"YulIdentifier","src":"2386:9:40"},{"kind":"number","nativeSrc":"2397:2:40","nodeType":"YulLiteral","src":"2397:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2382:3:40","nodeType":"YulIdentifier","src":"2382:3:40"},"nativeSrc":"2382:18:40","nodeType":"YulFunctionCall","src":"2382:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"2369:12:40","nodeType":"YulIdentifier","src":"2369:12:40"},"nativeSrc":"2369:32:40","nodeType":"YulFunctionCall","src":"2369:32:40"},"variableNames":[{"name":"value2","nativeSrc":"2359:6:40","nodeType":"YulIdentifier","src":"2359:6:40"}]},{"nativeSrc":"2410:46:40","nodeType":"YulVariableDeclaration","src":"2410:46:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2441:9:40","nodeType":"YulIdentifier","src":"2441:9:40"},{"kind":"number","nativeSrc":"2452:2:40","nodeType":"YulLiteral","src":"2452:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"2437:3:40","nodeType":"YulIdentifier","src":"2437:3:40"},"nativeSrc":"2437:18:40","nodeType":"YulFunctionCall","src":"2437:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"2424:12:40","nodeType":"YulIdentifier","src":"2424:12:40"},"nativeSrc":"2424:32:40","nodeType":"YulFunctionCall","src":"2424:32:40"},"variables":[{"name":"offset","nativeSrc":"2414:6:40","nodeType":"YulTypedName","src":"2414:6:40","type":""}]},{"body":{"nativeSrc":"2499:16:40","nodeType":"YulBlock","src":"2499:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2508:1:40","nodeType":"YulLiteral","src":"2508:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"2511:1:40","nodeType":"YulLiteral","src":"2511:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2501:6:40","nodeType":"YulIdentifier","src":"2501:6:40"},"nativeSrc":"2501:12:40","nodeType":"YulFunctionCall","src":"2501:12:40"},"nativeSrc":"2501:12:40","nodeType":"YulExpressionStatement","src":"2501:12:40"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"2471:6:40","nodeType":"YulIdentifier","src":"2471:6:40"},{"kind":"number","nativeSrc":"2479:18:40","nodeType":"YulLiteral","src":"2479:18:40","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2468:2:40","nodeType":"YulIdentifier","src":"2468:2:40"},"nativeSrc":"2468:30:40","nodeType":"YulFunctionCall","src":"2468:30:40"},"nativeSrc":"2465:50:40","nodeType":"YulIf","src":"2465:50:40"},{"nativeSrc":"2524:84:40","nodeType":"YulVariableDeclaration","src":"2524:84:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2580:9:40","nodeType":"YulIdentifier","src":"2580:9:40"},{"name":"offset","nativeSrc":"2591:6:40","nodeType":"YulIdentifier","src":"2591:6:40"}],"functionName":{"name":"add","nativeSrc":"2576:3:40","nodeType":"YulIdentifier","src":"2576:3:40"},"nativeSrc":"2576:22:40","nodeType":"YulFunctionCall","src":"2576:22:40"},{"name":"dataEnd","nativeSrc":"2600:7:40","nodeType":"YulIdentifier","src":"2600:7:40"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"2550:25:40","nodeType":"YulIdentifier","src":"2550:25:40"},"nativeSrc":"2550:58:40","nodeType":"YulFunctionCall","src":"2550:58:40"},"variables":[{"name":"value3_1","nativeSrc":"2528:8:40","nodeType":"YulTypedName","src":"2528:8:40","type":""},{"name":"value4_1","nativeSrc":"2538:8:40","nodeType":"YulTypedName","src":"2538:8:40","type":""}]},{"nativeSrc":"2617:18:40","nodeType":"YulAssignment","src":"2617:18:40","value":{"name":"value3_1","nativeSrc":"2627:8:40","nodeType":"YulIdentifier","src":"2627:8:40"},"variableNames":[{"name":"value3","nativeSrc":"2617:6:40","nodeType":"YulIdentifier","src":"2617:6:40"}]},{"nativeSrc":"2644:18:40","nodeType":"YulAssignment","src":"2644:18:40","value":{"name":"value4_1","nativeSrc":"2654:8:40","nodeType":"YulIdentifier","src":"2654:8:40"},"variableNames":[{"name":"value4","nativeSrc":"2644:6:40","nodeType":"YulIdentifier","src":"2644:6:40"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr","nativeSrc":"2042:626:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2116:9:40","nodeType":"YulTypedName","src":"2116:9:40","type":""},{"name":"dataEnd","nativeSrc":"2127:7:40","nodeType":"YulTypedName","src":"2127:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2139:6:40","nodeType":"YulTypedName","src":"2139:6:40","type":""},{"name":"value1","nativeSrc":"2147:6:40","nodeType":"YulTypedName","src":"2147:6:40","type":""},{"name":"value2","nativeSrc":"2155:6:40","nodeType":"YulTypedName","src":"2155:6:40","type":""},{"name":"value3","nativeSrc":"2163:6:40","nodeType":"YulTypedName","src":"2163:6:40","type":""},{"name":"value4","nativeSrc":"2171:6:40","nodeType":"YulTypedName","src":"2171:6:40","type":""}],"src":"2042:626:40"},{"body":{"nativeSrc":"2772:103:40","nodeType":"YulBlock","src":"2772:103:40","statements":[{"nativeSrc":"2782:26:40","nodeType":"YulAssignment","src":"2782:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"2794:9:40","nodeType":"YulIdentifier","src":"2794:9:40"},{"kind":"number","nativeSrc":"2805:2:40","nodeType":"YulLiteral","src":"2805:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2790:3:40","nodeType":"YulIdentifier","src":"2790:3:40"},"nativeSrc":"2790:18:40","nodeType":"YulFunctionCall","src":"2790:18:40"},"variableNames":[{"name":"tail","nativeSrc":"2782:4:40","nodeType":"YulIdentifier","src":"2782:4:40"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2824:9:40","nodeType":"YulIdentifier","src":"2824:9:40"},{"arguments":[{"name":"value0","nativeSrc":"2839:6:40","nodeType":"YulIdentifier","src":"2839:6:40"},{"arguments":[{"kind":"number","nativeSrc":"2851:3:40","nodeType":"YulLiteral","src":"2851:3:40","type":"","value":"224"},{"kind":"number","nativeSrc":"2856:10:40","nodeType":"YulLiteral","src":"2856:10:40","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nativeSrc":"2847:3:40","nodeType":"YulIdentifier","src":"2847:3:40"},"nativeSrc":"2847:20:40","nodeType":"YulFunctionCall","src":"2847:20:40"}],"functionName":{"name":"and","nativeSrc":"2835:3:40","nodeType":"YulIdentifier","src":"2835:3:40"},"nativeSrc":"2835:33:40","nodeType":"YulFunctionCall","src":"2835:33:40"}],"functionName":{"name":"mstore","nativeSrc":"2817:6:40","nodeType":"YulIdentifier","src":"2817:6:40"},"nativeSrc":"2817:52:40","nodeType":"YulFunctionCall","src":"2817:52:40"},"nativeSrc":"2817:52:40","nodeType":"YulExpressionStatement","src":"2817:52:40"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"2673:202:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2741:9:40","nodeType":"YulTypedName","src":"2741:9:40","type":""},{"name":"value0","nativeSrc":"2752:6:40","nodeType":"YulTypedName","src":"2752:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2763:4:40","nodeType":"YulTypedName","src":"2763:4:40","type":""}],"src":"2673:202:40"},{"body":{"nativeSrc":"2964:283:40","nodeType":"YulBlock","src":"2964:283:40","statements":[{"body":{"nativeSrc":"3013:16:40","nodeType":"YulBlock","src":"3013:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3022:1:40","nodeType":"YulLiteral","src":"3022:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"3025:1:40","nodeType":"YulLiteral","src":"3025:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3015:6:40","nodeType":"YulIdentifier","src":"3015:6:40"},"nativeSrc":"3015:12:40","nodeType":"YulFunctionCall","src":"3015:12:40"},"nativeSrc":"3015:12:40","nodeType":"YulExpressionStatement","src":"3015:12:40"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2992:6:40","nodeType":"YulIdentifier","src":"2992:6:40"},{"kind":"number","nativeSrc":"3000:4:40","nodeType":"YulLiteral","src":"3000:4:40","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2988:3:40","nodeType":"YulIdentifier","src":"2988:3:40"},"nativeSrc":"2988:17:40","nodeType":"YulFunctionCall","src":"2988:17:40"},{"name":"end","nativeSrc":"3007:3:40","nodeType":"YulIdentifier","src":"3007:3:40"}],"functionName":{"name":"slt","nativeSrc":"2984:3:40","nodeType":"YulIdentifier","src":"2984:3:40"},"nativeSrc":"2984:27:40","nodeType":"YulFunctionCall","src":"2984:27:40"}],"functionName":{"name":"iszero","nativeSrc":"2977:6:40","nodeType":"YulIdentifier","src":"2977:6:40"},"nativeSrc":"2977:35:40","nodeType":"YulFunctionCall","src":"2977:35:40"},"nativeSrc":"2974:55:40","nodeType":"YulIf","src":"2974:55:40"},{"nativeSrc":"3038:30:40","nodeType":"YulAssignment","src":"3038:30:40","value":{"arguments":[{"name":"offset","nativeSrc":"3061:6:40","nodeType":"YulIdentifier","src":"3061:6:40"}],"functionName":{"name":"calldataload","nativeSrc":"3048:12:40","nodeType":"YulIdentifier","src":"3048:12:40"},"nativeSrc":"3048:20:40","nodeType":"YulFunctionCall","src":"3048:20:40"},"variableNames":[{"name":"length","nativeSrc":"3038:6:40","nodeType":"YulIdentifier","src":"3038:6:40"}]},{"body":{"nativeSrc":"3111:16:40","nodeType":"YulBlock","src":"3111:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3120:1:40","nodeType":"YulLiteral","src":"3120:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"3123:1:40","nodeType":"YulLiteral","src":"3123:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3113:6:40","nodeType":"YulIdentifier","src":"3113:6:40"},"nativeSrc":"3113:12:40","nodeType":"YulFunctionCall","src":"3113:12:40"},"nativeSrc":"3113:12:40","nodeType":"YulExpressionStatement","src":"3113:12:40"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"3083:6:40","nodeType":"YulIdentifier","src":"3083:6:40"},{"kind":"number","nativeSrc":"3091:18:40","nodeType":"YulLiteral","src":"3091:18:40","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3080:2:40","nodeType":"YulIdentifier","src":"3080:2:40"},"nativeSrc":"3080:30:40","nodeType":"YulFunctionCall","src":"3080:30:40"},"nativeSrc":"3077:50:40","nodeType":"YulIf","src":"3077:50:40"},{"nativeSrc":"3136:29:40","nodeType":"YulAssignment","src":"3136:29:40","value":{"arguments":[{"name":"offset","nativeSrc":"3152:6:40","nodeType":"YulIdentifier","src":"3152:6:40"},{"kind":"number","nativeSrc":"3160:4:40","nodeType":"YulLiteral","src":"3160:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3148:3:40","nodeType":"YulIdentifier","src":"3148:3:40"},"nativeSrc":"3148:17:40","nodeType":"YulFunctionCall","src":"3148:17:40"},"variableNames":[{"name":"arrayPos","nativeSrc":"3136:8:40","nodeType":"YulIdentifier","src":"3136:8:40"}]},{"body":{"nativeSrc":"3225:16:40","nodeType":"YulBlock","src":"3225:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3234:1:40","nodeType":"YulLiteral","src":"3234:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"3237:1:40","nodeType":"YulLiteral","src":"3237:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3227:6:40","nodeType":"YulIdentifier","src":"3227:6:40"},"nativeSrc":"3227:12:40","nodeType":"YulFunctionCall","src":"3227:12:40"},"nativeSrc":"3227:12:40","nodeType":"YulExpressionStatement","src":"3227:12:40"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"3188:6:40","nodeType":"YulIdentifier","src":"3188:6:40"},{"arguments":[{"kind":"number","nativeSrc":"3200:1:40","nodeType":"YulLiteral","src":"3200:1:40","type":"","value":"5"},{"name":"length","nativeSrc":"3203:6:40","nodeType":"YulIdentifier","src":"3203:6:40"}],"functionName":{"name":"shl","nativeSrc":"3196:3:40","nodeType":"YulIdentifier","src":"3196:3:40"},"nativeSrc":"3196:14:40","nodeType":"YulFunctionCall","src":"3196:14:40"}],"functionName":{"name":"add","nativeSrc":"3184:3:40","nodeType":"YulIdentifier","src":"3184:3:40"},"nativeSrc":"3184:27:40","nodeType":"YulFunctionCall","src":"3184:27:40"},{"kind":"number","nativeSrc":"3213:4:40","nodeType":"YulLiteral","src":"3213:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3180:3:40","nodeType":"YulIdentifier","src":"3180:3:40"},"nativeSrc":"3180:38:40","nodeType":"YulFunctionCall","src":"3180:38:40"},{"name":"end","nativeSrc":"3220:3:40","nodeType":"YulIdentifier","src":"3220:3:40"}],"functionName":{"name":"gt","nativeSrc":"3177:2:40","nodeType":"YulIdentifier","src":"3177:2:40"},"nativeSrc":"3177:47:40","nodeType":"YulFunctionCall","src":"3177:47:40"},"nativeSrc":"3174:67:40","nodeType":"YulIf","src":"3174:67:40"}]},"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"2880:367:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2927:6:40","nodeType":"YulTypedName","src":"2927:6:40","type":""},{"name":"end","nativeSrc":"2935:3:40","nodeType":"YulTypedName","src":"2935:3:40","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"2943:8:40","nodeType":"YulTypedName","src":"2943:8:40","type":""},{"name":"length","nativeSrc":"2953:6:40","nodeType":"YulTypedName","src":"2953:6:40","type":""}],"src":"2880:367:40"},{"body":{"nativeSrc":"3479:983:40","nodeType":"YulBlock","src":"3479:983:40","statements":[{"body":{"nativeSrc":"3526:16:40","nodeType":"YulBlock","src":"3526:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3535:1:40","nodeType":"YulLiteral","src":"3535:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"3538:1:40","nodeType":"YulLiteral","src":"3538:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3528:6:40","nodeType":"YulIdentifier","src":"3528:6:40"},"nativeSrc":"3528:12:40","nodeType":"YulFunctionCall","src":"3528:12:40"},"nativeSrc":"3528:12:40","nodeType":"YulExpressionStatement","src":"3528:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3500:7:40","nodeType":"YulIdentifier","src":"3500:7:40"},{"name":"headStart","nativeSrc":"3509:9:40","nodeType":"YulIdentifier","src":"3509:9:40"}],"functionName":{"name":"sub","nativeSrc":"3496:3:40","nodeType":"YulIdentifier","src":"3496:3:40"},"nativeSrc":"3496:23:40","nodeType":"YulFunctionCall","src":"3496:23:40"},{"kind":"number","nativeSrc":"3521:3:40","nodeType":"YulLiteral","src":"3521:3:40","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"3492:3:40","nodeType":"YulIdentifier","src":"3492:3:40"},"nativeSrc":"3492:33:40","nodeType":"YulFunctionCall","src":"3492:33:40"},"nativeSrc":"3489:53:40","nodeType":"YulIf","src":"3489:53:40"},{"nativeSrc":"3551:39:40","nodeType":"YulAssignment","src":"3551:39:40","value":{"arguments":[{"name":"headStart","nativeSrc":"3580:9:40","nodeType":"YulIdentifier","src":"3580:9:40"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3561:18:40","nodeType":"YulIdentifier","src":"3561:18:40"},"nativeSrc":"3561:29:40","nodeType":"YulFunctionCall","src":"3561:29:40"},"variableNames":[{"name":"value0","nativeSrc":"3551:6:40","nodeType":"YulIdentifier","src":"3551:6:40"}]},{"nativeSrc":"3599:48:40","nodeType":"YulAssignment","src":"3599:48:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3632:9:40","nodeType":"YulIdentifier","src":"3632:9:40"},{"kind":"number","nativeSrc":"3643:2:40","nodeType":"YulLiteral","src":"3643:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3628:3:40","nodeType":"YulIdentifier","src":"3628:3:40"},"nativeSrc":"3628:18:40","nodeType":"YulFunctionCall","src":"3628:18:40"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3609:18:40","nodeType":"YulIdentifier","src":"3609:18:40"},"nativeSrc":"3609:38:40","nodeType":"YulFunctionCall","src":"3609:38:40"},"variableNames":[{"name":"value1","nativeSrc":"3599:6:40","nodeType":"YulIdentifier","src":"3599:6:40"}]},{"nativeSrc":"3656:46:40","nodeType":"YulVariableDeclaration","src":"3656:46:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3687:9:40","nodeType":"YulIdentifier","src":"3687:9:40"},{"kind":"number","nativeSrc":"3698:2:40","nodeType":"YulLiteral","src":"3698:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3683:3:40","nodeType":"YulIdentifier","src":"3683:3:40"},"nativeSrc":"3683:18:40","nodeType":"YulFunctionCall","src":"3683:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"3670:12:40","nodeType":"YulIdentifier","src":"3670:12:40"},"nativeSrc":"3670:32:40","nodeType":"YulFunctionCall","src":"3670:32:40"},"variables":[{"name":"offset","nativeSrc":"3660:6:40","nodeType":"YulTypedName","src":"3660:6:40","type":""}]},{"nativeSrc":"3711:28:40","nodeType":"YulVariableDeclaration","src":"3711:28:40","value":{"kind":"number","nativeSrc":"3721:18:40","nodeType":"YulLiteral","src":"3721:18:40","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"3715:2:40","nodeType":"YulTypedName","src":"3715:2:40","type":""}]},{"body":{"nativeSrc":"3766:16:40","nodeType":"YulBlock","src":"3766:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3775:1:40","nodeType":"YulLiteral","src":"3775:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"3778:1:40","nodeType":"YulLiteral","src":"3778:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3768:6:40","nodeType":"YulIdentifier","src":"3768:6:40"},"nativeSrc":"3768:12:40","nodeType":"YulFunctionCall","src":"3768:12:40"},"nativeSrc":"3768:12:40","nodeType":"YulExpressionStatement","src":"3768:12:40"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3754:6:40","nodeType":"YulIdentifier","src":"3754:6:40"},{"name":"_1","nativeSrc":"3762:2:40","nodeType":"YulIdentifier","src":"3762:2:40"}],"functionName":{"name":"gt","nativeSrc":"3751:2:40","nodeType":"YulIdentifier","src":"3751:2:40"},"nativeSrc":"3751:14:40","nodeType":"YulFunctionCall","src":"3751:14:40"},"nativeSrc":"3748:34:40","nodeType":"YulIf","src":"3748:34:40"},{"nativeSrc":"3791:96:40","nodeType":"YulVariableDeclaration","src":"3791:96:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3859:9:40","nodeType":"YulIdentifier","src":"3859:9:40"},{"name":"offset","nativeSrc":"3870:6:40","nodeType":"YulIdentifier","src":"3870:6:40"}],"functionName":{"name":"add","nativeSrc":"3855:3:40","nodeType":"YulIdentifier","src":"3855:3:40"},"nativeSrc":"3855:22:40","nodeType":"YulFunctionCall","src":"3855:22:40"},{"name":"dataEnd","nativeSrc":"3879:7:40","nodeType":"YulIdentifier","src":"3879:7:40"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"3817:37:40","nodeType":"YulIdentifier","src":"3817:37:40"},"nativeSrc":"3817:70:40","nodeType":"YulFunctionCall","src":"3817:70:40"},"variables":[{"name":"value2_1","nativeSrc":"3795:8:40","nodeType":"YulTypedName","src":"3795:8:40","type":""},{"name":"value3_1","nativeSrc":"3805:8:40","nodeType":"YulTypedName","src":"3805:8:40","type":""}]},{"nativeSrc":"3896:18:40","nodeType":"YulAssignment","src":"3896:18:40","value":{"name":"value2_1","nativeSrc":"3906:8:40","nodeType":"YulIdentifier","src":"3906:8:40"},"variableNames":[{"name":"value2","nativeSrc":"3896:6:40","nodeType":"YulIdentifier","src":"3896:6:40"}]},{"nativeSrc":"3923:18:40","nodeType":"YulAssignment","src":"3923:18:40","value":{"name":"value3_1","nativeSrc":"3933:8:40","nodeType":"YulIdentifier","src":"3933:8:40"},"variableNames":[{"name":"value3","nativeSrc":"3923:6:40","nodeType":"YulIdentifier","src":"3923:6:40"}]},{"nativeSrc":"3950:48:40","nodeType":"YulVariableDeclaration","src":"3950:48:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3983:9:40","nodeType":"YulIdentifier","src":"3983:9:40"},{"kind":"number","nativeSrc":"3994:2:40","nodeType":"YulLiteral","src":"3994:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3979:3:40","nodeType":"YulIdentifier","src":"3979:3:40"},"nativeSrc":"3979:18:40","nodeType":"YulFunctionCall","src":"3979:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"3966:12:40","nodeType":"YulIdentifier","src":"3966:12:40"},"nativeSrc":"3966:32:40","nodeType":"YulFunctionCall","src":"3966:32:40"},"variables":[{"name":"offset_1","nativeSrc":"3954:8:40","nodeType":"YulTypedName","src":"3954:8:40","type":""}]},{"body":{"nativeSrc":"4027:16:40","nodeType":"YulBlock","src":"4027:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4036:1:40","nodeType":"YulLiteral","src":"4036:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"4039:1:40","nodeType":"YulLiteral","src":"4039:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4029:6:40","nodeType":"YulIdentifier","src":"4029:6:40"},"nativeSrc":"4029:12:40","nodeType":"YulFunctionCall","src":"4029:12:40"},"nativeSrc":"4029:12:40","nodeType":"YulExpressionStatement","src":"4029:12:40"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"4013:8:40","nodeType":"YulIdentifier","src":"4013:8:40"},{"name":"_1","nativeSrc":"4023:2:40","nodeType":"YulIdentifier","src":"4023:2:40"}],"functionName":{"name":"gt","nativeSrc":"4010:2:40","nodeType":"YulIdentifier","src":"4010:2:40"},"nativeSrc":"4010:16:40","nodeType":"YulFunctionCall","src":"4010:16:40"},"nativeSrc":"4007:36:40","nodeType":"YulIf","src":"4007:36:40"},{"nativeSrc":"4052:98:40","nodeType":"YulVariableDeclaration","src":"4052:98:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4120:9:40","nodeType":"YulIdentifier","src":"4120:9:40"},{"name":"offset_1","nativeSrc":"4131:8:40","nodeType":"YulIdentifier","src":"4131:8:40"}],"functionName":{"name":"add","nativeSrc":"4116:3:40","nodeType":"YulIdentifier","src":"4116:3:40"},"nativeSrc":"4116:24:40","nodeType":"YulFunctionCall","src":"4116:24:40"},{"name":"dataEnd","nativeSrc":"4142:7:40","nodeType":"YulIdentifier","src":"4142:7:40"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"4078:37:40","nodeType":"YulIdentifier","src":"4078:37:40"},"nativeSrc":"4078:72:40","nodeType":"YulFunctionCall","src":"4078:72:40"},"variables":[{"name":"value4_1","nativeSrc":"4056:8:40","nodeType":"YulTypedName","src":"4056:8:40","type":""},{"name":"value5_1","nativeSrc":"4066:8:40","nodeType":"YulTypedName","src":"4066:8:40","type":""}]},{"nativeSrc":"4159:18:40","nodeType":"YulAssignment","src":"4159:18:40","value":{"name":"value4_1","nativeSrc":"4169:8:40","nodeType":"YulIdentifier","src":"4169:8:40"},"variableNames":[{"name":"value4","nativeSrc":"4159:6:40","nodeType":"YulIdentifier","src":"4159:6:40"}]},{"nativeSrc":"4186:18:40","nodeType":"YulAssignment","src":"4186:18:40","value":{"name":"value5_1","nativeSrc":"4196:8:40","nodeType":"YulIdentifier","src":"4196:8:40"},"variableNames":[{"name":"value5","nativeSrc":"4186:6:40","nodeType":"YulIdentifier","src":"4186:6:40"}]},{"nativeSrc":"4213:49:40","nodeType":"YulVariableDeclaration","src":"4213:49:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4246:9:40","nodeType":"YulIdentifier","src":"4246:9:40"},{"kind":"number","nativeSrc":"4257:3:40","nodeType":"YulLiteral","src":"4257:3:40","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"4242:3:40","nodeType":"YulIdentifier","src":"4242:3:40"},"nativeSrc":"4242:19:40","nodeType":"YulFunctionCall","src":"4242:19:40"}],"functionName":{"name":"calldataload","nativeSrc":"4229:12:40","nodeType":"YulIdentifier","src":"4229:12:40"},"nativeSrc":"4229:33:40","nodeType":"YulFunctionCall","src":"4229:33:40"},"variables":[{"name":"offset_2","nativeSrc":"4217:8:40","nodeType":"YulTypedName","src":"4217:8:40","type":""}]},{"body":{"nativeSrc":"4291:16:40","nodeType":"YulBlock","src":"4291:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4300:1:40","nodeType":"YulLiteral","src":"4300:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"4303:1:40","nodeType":"YulLiteral","src":"4303:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4293:6:40","nodeType":"YulIdentifier","src":"4293:6:40"},"nativeSrc":"4293:12:40","nodeType":"YulFunctionCall","src":"4293:12:40"},"nativeSrc":"4293:12:40","nodeType":"YulExpressionStatement","src":"4293:12:40"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"4277:8:40","nodeType":"YulIdentifier","src":"4277:8:40"},{"name":"_1","nativeSrc":"4287:2:40","nodeType":"YulIdentifier","src":"4287:2:40"}],"functionName":{"name":"gt","nativeSrc":"4274:2:40","nodeType":"YulIdentifier","src":"4274:2:40"},"nativeSrc":"4274:16:40","nodeType":"YulFunctionCall","src":"4274:16:40"},"nativeSrc":"4271:36:40","nodeType":"YulIf","src":"4271:36:40"},{"nativeSrc":"4316:86:40","nodeType":"YulVariableDeclaration","src":"4316:86:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4372:9:40","nodeType":"YulIdentifier","src":"4372:9:40"},{"name":"offset_2","nativeSrc":"4383:8:40","nodeType":"YulIdentifier","src":"4383:8:40"}],"functionName":{"name":"add","nativeSrc":"4368:3:40","nodeType":"YulIdentifier","src":"4368:3:40"},"nativeSrc":"4368:24:40","nodeType":"YulFunctionCall","src":"4368:24:40"},{"name":"dataEnd","nativeSrc":"4394:7:40","nodeType":"YulIdentifier","src":"4394:7:40"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"4342:25:40","nodeType":"YulIdentifier","src":"4342:25:40"},"nativeSrc":"4342:60:40","nodeType":"YulFunctionCall","src":"4342:60:40"},"variables":[{"name":"value6_1","nativeSrc":"4320:8:40","nodeType":"YulTypedName","src":"4320:8:40","type":""},{"name":"value7_1","nativeSrc":"4330:8:40","nodeType":"YulTypedName","src":"4330:8:40","type":""}]},{"nativeSrc":"4411:18:40","nodeType":"YulAssignment","src":"4411:18:40","value":{"name":"value6_1","nativeSrc":"4421:8:40","nodeType":"YulIdentifier","src":"4421:8:40"},"variableNames":[{"name":"value6","nativeSrc":"4411:6:40","nodeType":"YulIdentifier","src":"4411:6:40"}]},{"nativeSrc":"4438:18:40","nodeType":"YulAssignment","src":"4438:18:40","value":{"name":"value7_1","nativeSrc":"4448:8:40","nodeType":"YulIdentifier","src":"4448:8:40"},"variableNames":[{"name":"value7","nativeSrc":"4438:6:40","nodeType":"YulIdentifier","src":"4438:6:40"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr","nativeSrc":"3252:1210:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3389:9:40","nodeType":"YulTypedName","src":"3389:9:40","type":""},{"name":"dataEnd","nativeSrc":"3400:7:40","nodeType":"YulTypedName","src":"3400:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3412:6:40","nodeType":"YulTypedName","src":"3412:6:40","type":""},{"name":"value1","nativeSrc":"3420:6:40","nodeType":"YulTypedName","src":"3420:6:40","type":""},{"name":"value2","nativeSrc":"3428:6:40","nodeType":"YulTypedName","src":"3428:6:40","type":""},{"name":"value3","nativeSrc":"3436:6:40","nodeType":"YulTypedName","src":"3436:6:40","type":""},{"name":"value4","nativeSrc":"3444:6:40","nodeType":"YulTypedName","src":"3444:6:40","type":""},{"name":"value5","nativeSrc":"3452:6:40","nodeType":"YulTypedName","src":"3452:6:40","type":""},{"name":"value6","nativeSrc":"3460:6:40","nodeType":"YulTypedName","src":"3460:6:40","type":""},{"name":"value7","nativeSrc":"3468:6:40","nodeType":"YulTypedName","src":"3468:6:40","type":""}],"src":"3252:1210:40"},{"body":{"nativeSrc":"4624:538:40","nodeType":"YulBlock","src":"4624:538:40","statements":[{"body":{"nativeSrc":"4671:16:40","nodeType":"YulBlock","src":"4671:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4680:1:40","nodeType":"YulLiteral","src":"4680:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"4683:1:40","nodeType":"YulLiteral","src":"4683:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4673:6:40","nodeType":"YulIdentifier","src":"4673:6:40"},"nativeSrc":"4673:12:40","nodeType":"YulFunctionCall","src":"4673:12:40"},"nativeSrc":"4673:12:40","nodeType":"YulExpressionStatement","src":"4673:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4645:7:40","nodeType":"YulIdentifier","src":"4645:7:40"},{"name":"headStart","nativeSrc":"4654:9:40","nodeType":"YulIdentifier","src":"4654:9:40"}],"functionName":{"name":"sub","nativeSrc":"4641:3:40","nodeType":"YulIdentifier","src":"4641:3:40"},"nativeSrc":"4641:23:40","nodeType":"YulFunctionCall","src":"4641:23:40"},{"kind":"number","nativeSrc":"4666:3:40","nodeType":"YulLiteral","src":"4666:3:40","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"4637:3:40","nodeType":"YulIdentifier","src":"4637:3:40"},"nativeSrc":"4637:33:40","nodeType":"YulFunctionCall","src":"4637:33:40"},"nativeSrc":"4634:53:40","nodeType":"YulIf","src":"4634:53:40"},{"nativeSrc":"4696:39:40","nodeType":"YulAssignment","src":"4696:39:40","value":{"arguments":[{"name":"headStart","nativeSrc":"4725:9:40","nodeType":"YulIdentifier","src":"4725:9:40"}],"functionName":{"name":"abi_decode_address","nativeSrc":"4706:18:40","nodeType":"YulIdentifier","src":"4706:18:40"},"nativeSrc":"4706:29:40","nodeType":"YulFunctionCall","src":"4706:29:40"},"variableNames":[{"name":"value0","nativeSrc":"4696:6:40","nodeType":"YulIdentifier","src":"4696:6:40"}]},{"nativeSrc":"4744:48:40","nodeType":"YulAssignment","src":"4744:48:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4777:9:40","nodeType":"YulIdentifier","src":"4777:9:40"},{"kind":"number","nativeSrc":"4788:2:40","nodeType":"YulLiteral","src":"4788:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4773:3:40","nodeType":"YulIdentifier","src":"4773:3:40"},"nativeSrc":"4773:18:40","nodeType":"YulFunctionCall","src":"4773:18:40"}],"functionName":{"name":"abi_decode_address","nativeSrc":"4754:18:40","nodeType":"YulIdentifier","src":"4754:18:40"},"nativeSrc":"4754:38:40","nodeType":"YulFunctionCall","src":"4754:38:40"},"variableNames":[{"name":"value1","nativeSrc":"4744:6:40","nodeType":"YulIdentifier","src":"4744:6:40"}]},{"nativeSrc":"4801:42:40","nodeType":"YulAssignment","src":"4801:42:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4828:9:40","nodeType":"YulIdentifier","src":"4828:9:40"},{"kind":"number","nativeSrc":"4839:2:40","nodeType":"YulLiteral","src":"4839:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4824:3:40","nodeType":"YulIdentifier","src":"4824:3:40"},"nativeSrc":"4824:18:40","nodeType":"YulFunctionCall","src":"4824:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"4811:12:40","nodeType":"YulIdentifier","src":"4811:12:40"},"nativeSrc":"4811:32:40","nodeType":"YulFunctionCall","src":"4811:32:40"},"variableNames":[{"name":"value2","nativeSrc":"4801:6:40","nodeType":"YulIdentifier","src":"4801:6:40"}]},{"nativeSrc":"4852:42:40","nodeType":"YulAssignment","src":"4852:42:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4879:9:40","nodeType":"YulIdentifier","src":"4879:9:40"},{"kind":"number","nativeSrc":"4890:2:40","nodeType":"YulLiteral","src":"4890:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4875:3:40","nodeType":"YulIdentifier","src":"4875:3:40"},"nativeSrc":"4875:18:40","nodeType":"YulFunctionCall","src":"4875:18:40"}],"functionName":{"name":"calldataload","nativeSrc":"4862:12:40","nodeType":"YulIdentifier","src":"4862:12:40"},"nativeSrc":"4862:32:40","nodeType":"YulFunctionCall","src":"4862:32:40"},"variableNames":[{"name":"value3","nativeSrc":"4852:6:40","nodeType":"YulIdentifier","src":"4852:6:40"}]},{"nativeSrc":"4903:47:40","nodeType":"YulVariableDeclaration","src":"4903:47:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4934:9:40","nodeType":"YulIdentifier","src":"4934:9:40"},{"kind":"number","nativeSrc":"4945:3:40","nodeType":"YulLiteral","src":"4945:3:40","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"4930:3:40","nodeType":"YulIdentifier","src":"4930:3:40"},"nativeSrc":"4930:19:40","nodeType":"YulFunctionCall","src":"4930:19:40"}],"functionName":{"name":"calldataload","nativeSrc":"4917:12:40","nodeType":"YulIdentifier","src":"4917:12:40"},"nativeSrc":"4917:33:40","nodeType":"YulFunctionCall","src":"4917:33:40"},"variables":[{"name":"offset","nativeSrc":"4907:6:40","nodeType":"YulTypedName","src":"4907:6:40","type":""}]},{"body":{"nativeSrc":"4993:16:40","nodeType":"YulBlock","src":"4993:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5002:1:40","nodeType":"YulLiteral","src":"5002:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"5005:1:40","nodeType":"YulLiteral","src":"5005:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4995:6:40","nodeType":"YulIdentifier","src":"4995:6:40"},"nativeSrc":"4995:12:40","nodeType":"YulFunctionCall","src":"4995:12:40"},"nativeSrc":"4995:12:40","nodeType":"YulExpressionStatement","src":"4995:12:40"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4965:6:40","nodeType":"YulIdentifier","src":"4965:6:40"},{"kind":"number","nativeSrc":"4973:18:40","nodeType":"YulLiteral","src":"4973:18:40","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4962:2:40","nodeType":"YulIdentifier","src":"4962:2:40"},"nativeSrc":"4962:30:40","nodeType":"YulFunctionCall","src":"4962:30:40"},"nativeSrc":"4959:50:40","nodeType":"YulIf","src":"4959:50:40"},{"nativeSrc":"5018:84:40","nodeType":"YulVariableDeclaration","src":"5018:84:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5074:9:40","nodeType":"YulIdentifier","src":"5074:9:40"},{"name":"offset","nativeSrc":"5085:6:40","nodeType":"YulIdentifier","src":"5085:6:40"}],"functionName":{"name":"add","nativeSrc":"5070:3:40","nodeType":"YulIdentifier","src":"5070:3:40"},"nativeSrc":"5070:22:40","nodeType":"YulFunctionCall","src":"5070:22:40"},{"name":"dataEnd","nativeSrc":"5094:7:40","nodeType":"YulIdentifier","src":"5094:7:40"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"5044:25:40","nodeType":"YulIdentifier","src":"5044:25:40"},"nativeSrc":"5044:58:40","nodeType":"YulFunctionCall","src":"5044:58:40"},"variables":[{"name":"value4_1","nativeSrc":"5022:8:40","nodeType":"YulTypedName","src":"5022:8:40","type":""},{"name":"value5_1","nativeSrc":"5032:8:40","nodeType":"YulTypedName","src":"5032:8:40","type":""}]},{"nativeSrc":"5111:18:40","nodeType":"YulAssignment","src":"5111:18:40","value":{"name":"value4_1","nativeSrc":"5121:8:40","nodeType":"YulIdentifier","src":"5121:8:40"},"variableNames":[{"name":"value4","nativeSrc":"5111:6:40","nodeType":"YulIdentifier","src":"5111:6:40"}]},{"nativeSrc":"5138:18:40","nodeType":"YulAssignment","src":"5138:18:40","value":{"name":"value5_1","nativeSrc":"5148:8:40","nodeType":"YulIdentifier","src":"5148:8:40"},"variableNames":[{"name":"value5","nativeSrc":"5138:6:40","nodeType":"YulIdentifier","src":"5138:6:40"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr","nativeSrc":"4467:695:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4550:9:40","nodeType":"YulTypedName","src":"4550:9:40","type":""},{"name":"dataEnd","nativeSrc":"4561:7:40","nodeType":"YulTypedName","src":"4561:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4573:6:40","nodeType":"YulTypedName","src":"4573:6:40","type":""},{"name":"value1","nativeSrc":"4581:6:40","nodeType":"YulTypedName","src":"4581:6:40","type":""},{"name":"value2","nativeSrc":"4589:6:40","nodeType":"YulTypedName","src":"4589:6:40","type":""},{"name":"value3","nativeSrc":"4597:6:40","nodeType":"YulTypedName","src":"4597:6:40","type":""},{"name":"value4","nativeSrc":"4605:6:40","nodeType":"YulTypedName","src":"4605:6:40","type":""},{"name":"value5","nativeSrc":"4613:6:40","nodeType":"YulTypedName","src":"4613:6:40","type":""}],"src":"4467:695:40"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_uint256t_bytes_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := abi_decode_address(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n        let offset_1 := calldataload(add(headStart, 160))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value6_1, value7_1 := abi_decode_bytes_calldata(add(headStart, offset_1), dataEnd)\n        value6 := value6_1\n        value7 := value7_1\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, shl(224, 0xffffffff)))\n    }\n    function abi_decode_array_uint256_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value6_1, value7_1 := abi_decode_bytes_calldata(add(headStart, offset_2), dataEnd)\n        value6 := value6_1\n        value7 := value7_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n}","id":40,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100565760003560e01c806223de291461005b57806301ffc9a714610075578063150b7a021461009d578063bc197c81146100d5578063f23a6e61146100f7575b600080fd5b6100736100693660046101ce565b5050505050505050565b005b610088610083366004610279565b610117565b60405190151581526020015b60405180910390f35b6100bc6100ab3660046102aa565b630a85bd0160e11b95945050505050565b6040516001600160e01b03199091168152602001610094565b6100bc6100e336600461035e565b63bc197c8160e01b98975050505050505050565b6100bc6101053660046103f8565b63f23a6e6160e01b9695505050505050565b60006001600160e01b03198216630271189760e51b148061014857506001600160e01b03198216630a85bd0160e11b145b8061016357506001600160e01b031982166301ffc9a760e01b145b92915050565b80356001600160a01b038116811461018057600080fd5b919050565b60008083601f84011261019757600080fd5b50813567ffffffffffffffff8111156101af57600080fd5b6020830191508360208285010111156101c757600080fd5b9250929050565b60008060008060008060008060c0898b0312156101ea57600080fd5b6101f389610169565b975061020160208a01610169565b965061020f60408a01610169565b955060608901359450608089013567ffffffffffffffff8082111561023357600080fd5b61023f8c838d01610185565b909650945060a08b013591508082111561025857600080fd5b506102658b828c01610185565b999c989b5096995094979396929594505050565b60006020828403121561028b57600080fd5b81356001600160e01b0319811681146102a357600080fd5b9392505050565b6000806000806000608086880312156102c257600080fd5b6102cb86610169565b94506102d960208701610169565b935060408601359250606086013567ffffffffffffffff8111156102fc57600080fd5b61030888828901610185565b969995985093965092949392505050565b60008083601f84011261032b57600080fd5b50813567ffffffffffffffff81111561034357600080fd5b6020830191508360208260051b85010111156101c757600080fd5b60008060008060008060008060a0898b03121561037a57600080fd5b61038389610169565b975061039160208a01610169565b9650604089013567ffffffffffffffff808211156103ae57600080fd5b6103ba8c838d01610319565b909850965060608b01359150808211156103d357600080fd5b6103df8c838d01610319565b909650945060808b013591508082111561025857600080fd5b60008060008060008060a0878903121561041157600080fd5b61041a87610169565b955061042860208801610169565b94506040870135935060608701359250608087013567ffffffffffffffff81111561045257600080fd5b61045e89828a01610185565b979a969950949750929593949250505056fea2646970667358221220c6f4f111570a4ec92dd2a7959ef7024a8708c7e04324c79889286d5430f3a2a464736f6c63430008170033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x56 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0x23DE29 EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x75 JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x9D JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0xF7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x73 PUSH2 0x69 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CE JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST STOP JUMPDEST PUSH2 0x88 PUSH2 0x83 CALLDATASIZE PUSH1 0x4 PUSH2 0x279 JUMP JUMPDEST PUSH2 0x117 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBC PUSH2 0xAB CALLDATASIZE PUSH1 0x4 PUSH2 0x2AA JUMP JUMPDEST PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x94 JUMP JUMPDEST PUSH2 0xBC PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0x35E JUMP JUMPDEST PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xBC PUSH2 0x105 CALLDATASIZE PUSH1 0x4 PUSH2 0x3F8 JUMP JUMPDEST PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x2711897 PUSH1 0xE5 SHL EQ DUP1 PUSH2 0x148 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ JUMPDEST DUP1 PUSH2 0x163 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x197 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x1EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F3 DUP10 PUSH2 0x169 JUMP JUMPDEST SWAP8 POP PUSH2 0x201 PUSH1 0x20 DUP11 ADD PUSH2 0x169 JUMP JUMPDEST SWAP7 POP PUSH2 0x20F PUSH1 0x40 DUP11 ADD PUSH2 0x169 JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x233 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x23F DUP13 DUP4 DUP14 ADD PUSH2 0x185 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0xA0 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x258 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x265 DUP12 DUP3 DUP13 ADD PUSH2 0x185 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x28B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x2A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2CB DUP7 PUSH2 0x169 JUMP JUMPDEST SWAP5 POP PUSH2 0x2D9 PUSH1 0x20 DUP8 ADD PUSH2 0x169 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x308 DUP9 DUP3 DUP10 ADD PUSH2 0x185 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x32B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x343 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x37A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x383 DUP10 PUSH2 0x169 JUMP JUMPDEST SWAP8 POP PUSH2 0x391 PUSH1 0x20 DUP11 ADD PUSH2 0x169 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3BA DUP13 DUP4 DUP14 ADD PUSH2 0x319 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3DF DUP13 DUP4 DUP14 ADD PUSH2 0x319 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x258 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x41A DUP8 PUSH2 0x169 JUMP JUMPDEST SWAP6 POP PUSH2 0x428 PUSH1 0x20 DUP9 ADD PUSH2 0x169 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x452 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x45E DUP10 DUP3 DUP11 ADD PUSH2 0x185 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC6 DELEGATECALL CALL GT JUMPI EXP 0x4E 0xC9 0x2D 0xD2 0xA7 SWAP6 SWAP15 0xF7 MUL 0x4A DUP8 ADDMOD 0xC7 0xE0 NUMBER 0x24 0xC7 SWAP9 DUP10 0x28 PUSH14 0x5430F3A2A464736F6C6343000817 STOP CALLER ","sourceMap":"421:1864:24:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1553:199;;;;;;:::i;:::-;;;;;;;;;;;;1977:306;;;;;;:::i;:::-;;:::i;:::-;;;2015:14:40;;2008:22;1990:41;;1978:2;1963:18;1977:306:24;;;;;;;;1301:143;;;;;;:::i;:::-;-1:-1:-1;;;1301:143:24;;;;;;;;;;;-1:-1:-1;;;;;;2835:33:40;;;2817:52;;2805:2;2790:18;1301:143:24;2673:202:40;948:226:24;;;;;;:::i;:::-;-1:-1:-1;;;948:226:24;;;;;;;;;;;656:153;;;;;;:::i;:::-;-1:-1:-1;;;656:153:24;;;;;;;;;1977:306;2064:4;-1:-1:-1;;;;;;2099:53:24;;-1:-1:-1;;;2099:53:24;;:121;;-1:-1:-1;;;;;;;2168:52:24;;-1:-1:-1;;;2168:52:24;2099:121;:177;;;-1:-1:-1;;;;;;;2236:40:24;;-1:-1:-1;;;2236:40:24;2099:177;2080:196;1977:306;-1:-1:-1;;1977:306:24:o;14:173:40:-;82:20;;-1:-1:-1;;;;;131:31:40;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:347::-;243:8;253:6;307:3;300:4;292:6;288:17;284:27;274:55;;325:1;322;315:12;274:55;-1:-1:-1;348:20:40;;391:18;380:30;;377:50;;;423:1;420;413:12;377:50;460:4;452:6;448:17;436:29;;512:3;505:4;496:6;488;484:19;480:30;477:39;474:59;;;529:1;526;519:12;474:59;192:347;;;;;:::o;544:1010::-;670:6;678;686;694;702;710;718;726;779:3;767:9;758:7;754:23;750:33;747:53;;;796:1;793;786:12;747:53;819:29;838:9;819:29;:::i;:::-;809:39;;867:38;901:2;890:9;886:18;867:38;:::i;:::-;857:48;;924:38;958:2;947:9;943:18;924:38;:::i;:::-;914:48;;1009:2;998:9;994:18;981:32;971:42;;1064:3;1053:9;1049:19;1036:33;1088:18;1129:2;1121:6;1118:14;1115:34;;;1145:1;1142;1135:12;1115:34;1184:58;1234:7;1225:6;1214:9;1210:22;1184:58;:::i;:::-;1261:8;;-1:-1:-1;1158:84:40;-1:-1:-1;1349:3:40;1334:19;;1321:33;;-1:-1:-1;1366:16:40;;;1363:36;;;1395:1;1392;1385:12;1363:36;;1434:60;1486:7;1475:8;1464:9;1460:24;1434:60;:::i;:::-;544:1010;;;;-1:-1:-1;544:1010:40;;-1:-1:-1;544:1010:40;;;;;;1513:8;-1:-1:-1;;;544:1010:40:o;1559:286::-;1617:6;1670:2;1658:9;1649:7;1645:23;1641:32;1638:52;;;1686:1;1683;1676:12;1638:52;1712:23;;-1:-1:-1;;;;;;1764:32:40;;1754:43;;1744:71;;1811:1;1808;1801:12;1744:71;1834:5;1559:286;-1:-1:-1;;;1559:286:40:o;2042:626::-;2139:6;2147;2155;2163;2171;2224:3;2212:9;2203:7;2199:23;2195:33;2192:53;;;2241:1;2238;2231:12;2192:53;2264:29;2283:9;2264:29;:::i;:::-;2254:39;;2312:38;2346:2;2335:9;2331:18;2312:38;:::i;:::-;2302:48;;2397:2;2386:9;2382:18;2369:32;2359:42;;2452:2;2441:9;2437:18;2424:32;2479:18;2471:6;2468:30;2465:50;;;2511:1;2508;2501:12;2465:50;2550:58;2600:7;2591:6;2580:9;2576:22;2550:58;:::i;:::-;2042:626;;;;-1:-1:-1;2042:626:40;;-1:-1:-1;2627:8:40;;2524:84;2042:626;-1:-1:-1;;;2042:626:40:o;2880:367::-;2943:8;2953:6;3007:3;3000:4;2992:6;2988:17;2984:27;2974:55;;3025:1;3022;3015:12;2974:55;-1:-1:-1;3048:20:40;;3091:18;3080:30;;3077:50;;;3123:1;3120;3113:12;3077:50;3160:4;3152:6;3148:17;3136:29;;3220:3;3213:4;3203:6;3200:1;3196:14;3188:6;3184:27;3180:38;3177:47;3174:67;;;3237:1;3234;3227:12;3252:1210;3412:6;3420;3428;3436;3444;3452;3460;3468;3521:3;3509:9;3500:7;3496:23;3492:33;3489:53;;;3538:1;3535;3528:12;3489:53;3561:29;3580:9;3561:29;:::i;:::-;3551:39;;3609:38;3643:2;3632:9;3628:18;3609:38;:::i;:::-;3599:48;;3698:2;3687:9;3683:18;3670:32;3721:18;3762:2;3754:6;3751:14;3748:34;;;3778:1;3775;3768:12;3748:34;3817:70;3879:7;3870:6;3859:9;3855:22;3817:70;:::i;:::-;3906:8;;-1:-1:-1;3791:96:40;-1:-1:-1;3994:2:40;3979:18;;3966:32;;-1:-1:-1;4010:16:40;;;4007:36;;;4039:1;4036;4029:12;4007:36;4078:72;4142:7;4131:8;4120:9;4116:24;4078:72;:::i;:::-;4169:8;;-1:-1:-1;4052:98:40;-1:-1:-1;4257:3:40;4242:19;;4229:33;;-1:-1:-1;4274:16:40;;;4271:36;;;4303:1;4300;4293:12;4467:695;4573:6;4581;4589;4597;4605;4613;4666:3;4654:9;4645:7;4641:23;4637:33;4634:53;;;4683:1;4680;4673:12;4634:53;4706:29;4725:9;4706:29;:::i;:::-;4696:39;;4754:38;4788:2;4777:9;4773:18;4754:38;:::i;:::-;4744:48;;4839:2;4828:9;4824:18;4811:32;4801:42;;4890:2;4879:9;4875:18;4862:32;4852:42;;4945:3;4934:9;4930:19;4917:33;4973:18;4965:6;4962:30;4959:50;;;5005:1;5002;4995:12;4959:50;5044:58;5094:7;5085:6;5074:9;5070:22;5044:58;:::i;:::-;4467:695;;;;-1:-1:-1;4467:695:40;;-1:-1:-1;4467:695:40;;5121:8;;4467:695;-1:-1:-1;;;4467:695:40:o"},"gasEstimates":{"creation":{"codeDepositCost":"238000","executionCost":"281","totalCost":"238281"},"external":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"infinite","onERC1155Received(address,address,uint256,uint256,bytes)":"infinite","onERC721Received(address,address,uint256,bytes)":"infinite","supportsInterface(bytes4)":"481","tokensReceived(address,address,address,uint256,bytes,bytes)":"infinite"}},"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","onERC721Received(address,address,uint256,bytes)":"150b7a02","supportsInterface(bytes4)":"01ffc9a7","tokensReceived(address,address,address,uint256,bytes,bytes)":"0023de29"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"Id of the interface.\"},\"returns\":{\"_0\":\"if the interface is supported.\"}}},\"title\":\"Default Callback Handler - Handles supported tokens' callbacks, allowing Safes receiving these tokens.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handles ERC1155 Token batch callback. return Standardized onERC1155BatchReceived return value.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handles ERC1155 Token callback. return Standardized onERC1155Received return value.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Handles ERC721 Token callback.  return Standardized onERC721Received return value.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Implements ERC165 interface support for ERC1155TokenReceiver, ERC721TokenReceiver and IERC165.\"},\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"notice\":\"Handles ERC777 Token callback. return nothing (not standardized)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-contracts/contracts/handler/TokenCallbackHandler.sol\":\"TokenCallbackHandler\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/handler/TokenCallbackHandler.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../interfaces/ERC1155TokenReceiver.sol\\\";\\nimport \\\"../interfaces/ERC721TokenReceiver.sol\\\";\\nimport \\\"../interfaces/ERC777TokensRecipient.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @title Default Callback Handler - Handles supported tokens' callbacks, allowing Safes receiving these tokens.\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract TokenCallbackHandler is ERC1155TokenReceiver, ERC777TokensRecipient, ERC721TokenReceiver, IERC165 {\\n    /**\\n     * @notice Handles ERC1155 Token callback.\\n     * return Standardized onERC1155Received return value.\\n     */\\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external pure override returns (bytes4) {\\n        return 0xf23a6e61;\\n    }\\n\\n    /**\\n     * @notice Handles ERC1155 Token batch callback.\\n     * return Standardized onERC1155BatchReceived return value.\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return 0xbc197c81;\\n    }\\n\\n    /**\\n     * @notice Handles ERC721 Token callback.\\n     *  return Standardized onERC721Received return value.\\n     */\\n    function onERC721Received(address, address, uint256, bytes calldata) external pure override returns (bytes4) {\\n        return 0x150b7a02;\\n    }\\n\\n    /**\\n     * @notice Handles ERC777 Token callback.\\n     * return nothing (not standardized)\\n     */\\n    function tokensReceived(address, address, address, uint256, bytes calldata, bytes calldata) external pure override {\\n        // We implement this for completeness, doesn't really have any value\\n    }\\n\\n    /**\\n     * @notice Implements ERC165 interface support for ERC1155TokenReceiver, ERC721TokenReceiver and IERC165.\\n     * @param interfaceId Id of the interface.\\n     * @return if the interface is supported.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(ERC1155TokenReceiver).interfaceId ||\\n            interfaceId == type(ERC721TokenReceiver).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xc8fb9e60f5e561c7e4992a396e928344c278c2fbec8af65aebec44281542e7cb\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/interfaces/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n// Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface ERC1155TokenReceiver {\\n    /**\\n     * @notice Handle the receipt of a single ERC1155 token type.\\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\\n     *      This function MUST return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\\n     *      This function MUST revert if it rejects the transfer.\\n     *      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n     * @param _operator  The address which initiated the transfer (i.e. msg.sender).\\n     * @param _from      The address which previously owned the token.\\n     * @param _id        The ID of the token being transferred.\\n     * @param _value     The amount of tokens being transferred.\\n     * @param _data      Additional data with no specified format.\\n     * @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`.\\n     */\\n    function onERC1155Received(\\n        address _operator,\\n        address _from,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Handle the receipt of multiple ERC1155 token types.\\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\\n     *      This function MUST return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\\n     *      This function MUST revert if it rejects the transfer(s).\\n     *      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n     * @param _operator  The address which initiated the batch transfer (i.e. msg.sender).\\n     * @param _from      The address which previously owned the token.\\n     * @param _ids       An array containing ids of each token being transferred (order and length must match _values array).\\n     * @param _values    An array containing amounts of each token being transferred (order and length must match _ids array).\\n     * @param _data      Additional data with no specified format.\\n     * @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`.\\n     */\\n    function onERC1155BatchReceived(\\n        address _operator,\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x87e62665c041cade64e753ecdccf931cb100ab6e4bcc98769c1e6474be9db493\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/interfaces/ERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\\ninterface ERC721TokenReceiver {\\n    /**\\n     * @notice Handle the receipt of an NFT\\n     * @dev The ERC721 smart contract calls this function on the recipient\\n     *  after a `transfer`. This function MAY throw to revert and reject the\\n     *  transfer. Return of other than the magic value MUST result in the\\n     *  transaction being reverted.\\n     *  Note: the contract address is always the message sender.\\n     * @param _operator The address which called `safeTransferFrom` function.\\n     * @param _from The address which previously owned the token.\\n     * @param _tokenId The NFT identifier which is being transferred.\\n     * @param _data Additional data with no specified format.\\n     * @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n     *  unless throwing\\n     */\\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96c4c5457fede2d4c6012011dfda36f8e8ffdb7388468f2dddb35661538bf479\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/interfaces/ERC777TokensRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title ERC777TokensRecipient\\n * @dev Interface for contracts that will be called with the ERC777 token's `tokensReceived` method.\\n * The contract receiving the tokens must implement this interface in order to receive the tokens.\\n */\\ninterface ERC777TokensRecipient {\\n    /**\\n     * @dev Called by the ERC777 token contract after a successful transfer or a minting operation.\\n     * @param operator The address of the operator performing the transfer or minting operation.\\n     * @param from The address of the sender.\\n     * @param to The address of the recipient.\\n     * @param amount The amount of tokens that were transferred or minted.\\n     * @param data Additional data that was passed during the transfer or minting operation.\\n     * @param operatorData Additional data that was passed by the operator during the transfer or minting operation.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x32ca7f1610659f35e52f5a989e1d844b7847ad57fab06e0cae5bc027248536ac\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n     * See the corresponding EIP section\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Handles ERC1155 Token batch callback. return Standardized onERC1155BatchReceived return value."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Handles ERC1155 Token callback. return Standardized onERC1155Received return value."},"onERC721Received(address,address,uint256,bytes)":{"notice":"Handles ERC721 Token callback.  return Standardized onERC721Received return value."},"supportsInterface(bytes4)":{"notice":"Implements ERC165 interface support for ERC1155TokenReceiver, ERC721TokenReceiver and IERC165."},"tokensReceived(address,address,address,uint256,bytes,bytes)":{"notice":"Handles ERC777 Token callback. return nothing (not standardized)"}},"version":1}}},"@safe-global/safe-contracts/contracts/interfaces/ERC1155TokenReceiver.sol":{"ERC1155TokenReceiver":{"abi":[{"inputs":[{"internalType":"address","name":"_operator","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"internalType":"uint256[]","name":"_values","type":"uint256[]"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_operator","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.      This function MUST return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).      This function MUST revert if it rejects the transfer(s).      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.","params":{"_data":"Additional data with no specified format.","_from":"The address which previously owned the token.","_ids":"An array containing ids of each token being transferred (order and length must match _values array).","_operator":"The address which initiated the batch transfer (i.e. msg.sender).","_values":"An array containing amounts of each token being transferred (order and length must match _ids array)."},"returns":{"_0":"`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`."}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.      This function MUST return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61) if it accepts the transfer.      This function MUST revert if it rejects the transfer.      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.","params":{"_data":"Additional data with no specified format.","_from":"The address which previously owned the token.","_id":"The ID of the token being transferred.","_operator":"The address which initiated the transfer (i.e. msg.sender).","_value":"The amount of tokens being transferred."},"returns":{"_0":"`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.      This function MUST return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).      This function MUST revert if it rejects the transfer(s).      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\",\"params\":{\"_data\":\"Additional data with no specified format.\",\"_from\":\"The address which previously owned the token.\",\"_ids\":\"An array containing ids of each token being transferred (order and length must match _values array).\",\"_operator\":\"The address which initiated the batch transfer (i.e. msg.sender).\",\"_values\":\"An array containing amounts of each token being transferred (order and length must match _ids array).\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.      This function MUST return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61) if it accepts the transfer.      This function MUST revert if it rejects the transfer.      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\",\"params\":{\"_data\":\"Additional data with no specified format.\",\"_from\":\"The address which previously owned the token.\",\"_id\":\"The ID of the token being transferred.\",\"_operator\":\"The address which initiated the transfer (i.e. msg.sender).\",\"_value\":\"The amount of tokens being transferred.\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handle the receipt of multiple ERC1155 token types.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handle the receipt of a single ERC1155 token type.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-contracts/contracts/interfaces/ERC1155TokenReceiver.sol\":\"ERC1155TokenReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/interfaces/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n// Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface ERC1155TokenReceiver {\\n    /**\\n     * @notice Handle the receipt of a single ERC1155 token type.\\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\\n     *      This function MUST return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\\n     *      This function MUST revert if it rejects the transfer.\\n     *      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n     * @param _operator  The address which initiated the transfer (i.e. msg.sender).\\n     * @param _from      The address which previously owned the token.\\n     * @param _id        The ID of the token being transferred.\\n     * @param _value     The amount of tokens being transferred.\\n     * @param _data      Additional data with no specified format.\\n     * @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`.\\n     */\\n    function onERC1155Received(\\n        address _operator,\\n        address _from,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Handle the receipt of multiple ERC1155 token types.\\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\\n     *      This function MUST return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\\n     *      This function MUST revert if it rejects the transfer(s).\\n     *      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n     * @param _operator  The address which initiated the batch transfer (i.e. msg.sender).\\n     * @param _from      The address which previously owned the token.\\n     * @param _ids       An array containing ids of each token being transferred (order and length must match _values array).\\n     * @param _values    An array containing amounts of each token being transferred (order and length must match _ids array).\\n     * @param _data      Additional data with no specified format.\\n     * @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`.\\n     */\\n    function onERC1155BatchReceived(\\n        address _operator,\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x87e62665c041cade64e753ecdccf931cb100ab6e4bcc98769c1e6474be9db493\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Handle the receipt of multiple ERC1155 token types."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Handle the receipt of a single ERC1155 token type."}},"version":1}}},"@safe-global/safe-contracts/contracts/interfaces/ERC721TokenReceiver.sol":{"ERC721TokenReceiver":{"abi":[{"inputs":[{"internalType":"address","name":"_operator","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Note: the ERC-165 identifier for this interface is 0x150b7a02.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"The ERC721 smart contract calls this function on the recipient  after a `transfer`. This function MAY throw to revert and reject the  transfer. Return of other than the magic value MUST result in the  transaction being reverted.  Note: the contract address is always the message sender.","params":{"_data":"Additional data with no specified format.","_from":"The address which previously owned the token.","_operator":"The address which called `safeTransferFrom` function.","_tokenId":"The NFT identifier which is being transferred."},"returns":{"_0":"`bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.  unless throwing"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Note: the ERC-165 identifier for this interface is 0x150b7a02.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"The ERC721 smart contract calls this function on the recipient  after a `transfer`. This function MAY throw to revert and reject the  transfer. Return of other than the magic value MUST result in the  transaction being reverted.  Note: the contract address is always the message sender.\",\"params\":{\"_data\":\"Additional data with no specified format.\",\"_from\":\"The address which previously owned the token.\",\"_operator\":\"The address which called `safeTransferFrom` function.\",\"_tokenId\":\"The NFT identifier which is being transferred.\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.  unless throwing\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Handle the receipt of an NFT\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-contracts/contracts/interfaces/ERC721TokenReceiver.sol\":\"ERC721TokenReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/interfaces/ERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\\ninterface ERC721TokenReceiver {\\n    /**\\n     * @notice Handle the receipt of an NFT\\n     * @dev The ERC721 smart contract calls this function on the recipient\\n     *  after a `transfer`. This function MAY throw to revert and reject the\\n     *  transfer. Return of other than the magic value MUST result in the\\n     *  transaction being reverted.\\n     *  Note: the contract address is always the message sender.\\n     * @param _operator The address which called `safeTransferFrom` function.\\n     * @param _from The address which previously owned the token.\\n     * @param _tokenId The NFT identifier which is being transferred.\\n     * @param _data Additional data with no specified format.\\n     * @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n     *  unless throwing\\n     */\\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96c4c5457fede2d4c6012011dfda36f8e8ffdb7388468f2dddb35661538bf479\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"onERC721Received(address,address,uint256,bytes)":{"notice":"Handle the receipt of an NFT"}},"version":1}}},"@safe-global/safe-contracts/contracts/interfaces/ERC777TokensRecipient.sol":{"ERC777TokensRecipient":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"operatorData","type":"bytes"}],"name":"tokensReceived","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for contracts that will be called with the ERC777 token's `tokensReceived` method. The contract receiving the tokens must implement this interface in order to receive the tokens.","kind":"dev","methods":{"tokensReceived(address,address,address,uint256,bytes,bytes)":{"details":"Called by the ERC777 token contract after a successful transfer or a minting operation.","params":{"amount":"The amount of tokens that were transferred or minted.","data":"Additional data that was passed during the transfer or minting operation.","from":"The address of the sender.","operator":"The address of the operator performing the transfer or minting operation.","operatorData":"Additional data that was passed by the operator during the transfer or minting operation.","to":"The address of the recipient."}}},"title":"ERC777TokensRecipient","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"tokensReceived(address,address,address,uint256,bytes,bytes)":"0023de29"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for contracts that will be called with the ERC777 token's `tokensReceived` method. The contract receiving the tokens must implement this interface in order to receive the tokens.\",\"kind\":\"dev\",\"methods\":{\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"details\":\"Called by the ERC777 token contract after a successful transfer or a minting operation.\",\"params\":{\"amount\":\"The amount of tokens that were transferred or minted.\",\"data\":\"Additional data that was passed during the transfer or minting operation.\",\"from\":\"The address of the sender.\",\"operator\":\"The address of the operator performing the transfer or minting operation.\",\"operatorData\":\"Additional data that was passed by the operator during the transfer or minting operation.\",\"to\":\"The address of the recipient.\"}}},\"title\":\"ERC777TokensRecipient\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-contracts/contracts/interfaces/ERC777TokensRecipient.sol\":\"ERC777TokensRecipient\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/interfaces/ERC777TokensRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title ERC777TokensRecipient\\n * @dev Interface for contracts that will be called with the ERC777 token's `tokensReceived` method.\\n * The contract receiving the tokens must implement this interface in order to receive the tokens.\\n */\\ninterface ERC777TokensRecipient {\\n    /**\\n     * @dev Called by the ERC777 token contract after a successful transfer or a minting operation.\\n     * @param operator The address of the operator performing the transfer or minting operation.\\n     * @param from The address of the sender.\\n     * @param to The address of the recipient.\\n     * @param amount The amount of tokens that were transferred or minted.\\n     * @param data Additional data that was passed during the transfer or minting operation.\\n     * @param operatorData Additional data that was passed by the operator during the transfer or minting operation.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x32ca7f1610659f35e52f5a989e1d844b7847ad57fab06e0cae5bc027248536ac\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@safe-global/safe-contracts/contracts/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding EIP section https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-contracts/contracts/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n     * See the corresponding EIP section\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol","version":1}}},"@safe-global/safe-contracts/contracts/interfaces/ISignatureValidator.sol":{"ISignatureValidator":{"abi":[{"inputs":[{"internalType":"bytes","name":"_data","type":"bytes"},{"internalType":"bytes","name":"_signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"isValidSignature(bytes,bytes)":{"params":{"_data":"Arbitrary length data signed on the behalf of address(this).","_signature":"Signature byte array associated with _data. MUST return the bytes4 magic value 0x20c13b0b when function passes. MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5) MUST allow external calls"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isValidSignature(bytes,bytes)":"20c13b0b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isValidSignature(bytes,bytes)\":{\"params\":{\"_data\":\"Arbitrary length data signed on the behalf of address(this).\",\"_signature\":\"Signature byte array associated with _data. MUST return the bytes4 magic value 0x20c13b0b when function passes. MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5) MUST allow external calls\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isValidSignature(bytes,bytes)\":{\"notice\":\"Legacy EIP1271 method to validate a signature.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-contracts/contracts/interfaces/ISignatureValidator.sol\":\"ISignatureValidator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/interfaces/ISignatureValidator.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract ISignatureValidatorConstants {\\n    // bytes4(keccak256(\\\"isValidSignature(bytes,bytes)\\\")\\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x20c13b0b;\\n}\\n\\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\\n    /**\\n     * @notice Legacy EIP1271 method to validate a signature.\\n     * @param _data Arbitrary length data signed on the behalf of address(this).\\n     * @param _signature Signature byte array associated with _data.\\n     *\\n     * MUST return the bytes4 magic value 0x20c13b0b when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(bytes memory _data, bytes memory _signature) public view virtual returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2459cb3ed73ecb80e1e7a6508d09a58cc59570b049f77042f669dedfcc5f6457\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isValidSignature(bytes,bytes)":{"notice":"Legacy EIP1271 method to validate a signature."}},"version":1}},"ISignatureValidatorConstants":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220de02f2bf9860d814b81400198fa46b393791f0c6fba0610cb9a07b680b1ea9d064736f6c63430008170033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDE MUL CALLCODE 0xBF SWAP9 PUSH1 0xD8 EQ 0xB8 EQ STOP NOT DUP16 LOG4 PUSH12 0x393791F0C6FBA0610CB9A07B PUSH9 0xB1EA9D064736F6C63 NUMBER STOP ADDMOD OR STOP CALLER ","sourceMap":"75:161:29:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea2646970667358221220de02f2bf9860d814b81400198fa46b393791f0c6fba0610cb9a07b680b1ea9d064736f6c63430008170033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDE MUL CALLCODE 0xBF SWAP9 PUSH1 0xD8 EQ 0xB8 EQ STOP NOT DUP16 LOG4 PUSH12 0x393791F0C6FBA0610CB9A07B PUSH9 0xB1EA9D064736F6C63 NUMBER STOP ADDMOD OR STOP CALLER ","sourceMap":"75:161:29:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"12600","executionCost":"66","totalCost":"12666"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@safe-global/safe-contracts/contracts/interfaces/ISignatureValidator.sol\":\"ISignatureValidatorConstants\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/interfaces/ISignatureValidator.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract ISignatureValidatorConstants {\\n    // bytes4(keccak256(\\\"isValidSignature(bytes,bytes)\\\")\\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x20c13b0b;\\n}\\n\\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\\n    /**\\n     * @notice Legacy EIP1271 method to validate a signature.\\n     * @param _data Arbitrary length data signed on the behalf of address(this).\\n     * @param _signature Signature byte array associated with _data.\\n     *\\n     * MUST return the bytes4 magic value 0x20c13b0b when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(bytes memory _data, bytes memory _signature) public view virtual returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2459cb3ed73ecb80e1e7a6508d09a58cc59570b049f77042f669dedfcc5f6457\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Lock.sol":{"Lock":{"abi":[{"inputs":[{"internalType":"uint256","name":"_unlockTime","type":"uint256"}],"stateMutability":"payable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"when","type":"uint256"}],"name":"Withdrawal","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unlockTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_3834":{"entryPoint":null,"id":3834,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":155,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f6fa9918d4578fba07be58c41841a4c6937c19725f7f4601884cd186799a8413__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:604:40","nodeType":"YulBlock","src":"0:604:40","statements":[{"nativeSrc":"6:3:40","nodeType":"YulBlock","src":"6:3:40","statements":[]},{"body":{"nativeSrc":"95:103:40","nodeType":"YulBlock","src":"95:103:40","statements":[{"body":{"nativeSrc":"141:16:40","nodeType":"YulBlock","src":"141:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"150:1:40","nodeType":"YulLiteral","src":"150:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"153:1:40","nodeType":"YulLiteral","src":"153:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"143:6:40","nodeType":"YulIdentifier","src":"143:6:40"},"nativeSrc":"143:12:40","nodeType":"YulFunctionCall","src":"143:12:40"},"nativeSrc":"143:12:40","nodeType":"YulExpressionStatement","src":"143:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"116:7:40","nodeType":"YulIdentifier","src":"116:7:40"},{"name":"headStart","nativeSrc":"125:9:40","nodeType":"YulIdentifier","src":"125:9:40"}],"functionName":{"name":"sub","nativeSrc":"112:3:40","nodeType":"YulIdentifier","src":"112:3:40"},"nativeSrc":"112:23:40","nodeType":"YulFunctionCall","src":"112:23:40"},{"kind":"number","nativeSrc":"137:2:40","nodeType":"YulLiteral","src":"137:2:40","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"108:3:40","nodeType":"YulIdentifier","src":"108:3:40"},"nativeSrc":"108:32:40","nodeType":"YulFunctionCall","src":"108:32:40"},"nativeSrc":"105:52:40","nodeType":"YulIf","src":"105:52:40"},{"nativeSrc":"166:26:40","nodeType":"YulAssignment","src":"166:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"182:9:40","nodeType":"YulIdentifier","src":"182:9:40"}],"functionName":{"name":"mload","nativeSrc":"176:5:40","nodeType":"YulIdentifier","src":"176:5:40"},"nativeSrc":"176:16:40","nodeType":"YulFunctionCall","src":"176:16:40"},"variableNames":[{"name":"value0","nativeSrc":"166:6:40","nodeType":"YulIdentifier","src":"166:6:40"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nativeSrc":"14:184:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"61:9:40","nodeType":"YulTypedName","src":"61:9:40","type":""},{"name":"dataEnd","nativeSrc":"72:7:40","nodeType":"YulTypedName","src":"72:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"84:6:40","nodeType":"YulTypedName","src":"84:6:40","type":""}],"src":"14:184:40"},{"body":{"nativeSrc":"377:225:40","nodeType":"YulBlock","src":"377:225:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"394:9:40","nodeType":"YulIdentifier","src":"394:9:40"},{"kind":"number","nativeSrc":"405:2:40","nodeType":"YulLiteral","src":"405:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"387:6:40","nodeType":"YulIdentifier","src":"387:6:40"},"nativeSrc":"387:21:40","nodeType":"YulFunctionCall","src":"387:21:40"},"nativeSrc":"387:21:40","nodeType":"YulExpressionStatement","src":"387:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"428:9:40","nodeType":"YulIdentifier","src":"428:9:40"},{"kind":"number","nativeSrc":"439:2:40","nodeType":"YulLiteral","src":"439:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"424:3:40","nodeType":"YulIdentifier","src":"424:3:40"},"nativeSrc":"424:18:40","nodeType":"YulFunctionCall","src":"424:18:40"},{"kind":"number","nativeSrc":"444:2:40","nodeType":"YulLiteral","src":"444:2:40","type":"","value":"35"}],"functionName":{"name":"mstore","nativeSrc":"417:6:40","nodeType":"YulIdentifier","src":"417:6:40"},"nativeSrc":"417:30:40","nodeType":"YulFunctionCall","src":"417:30:40"},"nativeSrc":"417:30:40","nodeType":"YulExpressionStatement","src":"417:30:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"467:9:40","nodeType":"YulIdentifier","src":"467:9:40"},{"kind":"number","nativeSrc":"478:2:40","nodeType":"YulLiteral","src":"478:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"463:3:40","nodeType":"YulIdentifier","src":"463:3:40"},"nativeSrc":"463:18:40","nodeType":"YulFunctionCall","src":"463:18:40"},{"hexValue":"556e6c6f636b2074696d652073686f756c6420626520696e2074686520667574","kind":"string","nativeSrc":"483:34:40","nodeType":"YulLiteral","src":"483:34:40","type":"","value":"Unlock time should be in the fut"}],"functionName":{"name":"mstore","nativeSrc":"456:6:40","nodeType":"YulIdentifier","src":"456:6:40"},"nativeSrc":"456:62:40","nodeType":"YulFunctionCall","src":"456:62:40"},"nativeSrc":"456:62:40","nodeType":"YulExpressionStatement","src":"456:62:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"538:9:40","nodeType":"YulIdentifier","src":"538:9:40"},{"kind":"number","nativeSrc":"549:2:40","nodeType":"YulLiteral","src":"549:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"534:3:40","nodeType":"YulIdentifier","src":"534:3:40"},"nativeSrc":"534:18:40","nodeType":"YulFunctionCall","src":"534:18:40"},{"hexValue":"757265","kind":"string","nativeSrc":"554:5:40","nodeType":"YulLiteral","src":"554:5:40","type":"","value":"ure"}],"functionName":{"name":"mstore","nativeSrc":"527:6:40","nodeType":"YulIdentifier","src":"527:6:40"},"nativeSrc":"527:33:40","nodeType":"YulFunctionCall","src":"527:33:40"},"nativeSrc":"527:33:40","nodeType":"YulExpressionStatement","src":"527:33:40"},{"nativeSrc":"569:27:40","nodeType":"YulAssignment","src":"569:27:40","value":{"arguments":[{"name":"headStart","nativeSrc":"581:9:40","nodeType":"YulIdentifier","src":"581:9:40"},{"kind":"number","nativeSrc":"592:3:40","nodeType":"YulLiteral","src":"592:3:40","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"577:3:40","nodeType":"YulIdentifier","src":"577:3:40"},"nativeSrc":"577:19:40","nodeType":"YulFunctionCall","src":"577:19:40"},"variableNames":[{"name":"tail","nativeSrc":"569:4:40","nodeType":"YulIdentifier","src":"569:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_f6fa9918d4578fba07be58c41841a4c6937c19725f7f4601884cd186799a8413__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"203:399:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"354:9:40","nodeType":"YulTypedName","src":"354:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"368:4:40","nodeType":"YulTypedName","src":"368:4:40","type":""}],"src":"203:399:40"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_f6fa9918d4578fba07be58c41841a4c6937c19725f7f4601884cd186799a8413__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"Unlock time should be in the fut\")\n        mstore(add(headStart, 96), \"ure\")\n        tail := add(headStart, 128)\n    }\n}","id":40,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040526040516102a53803806102a58339810160408190526100229161009b565b8042106100815760405162461bcd60e51b815260206004820152602360248201527f556e6c6f636b2074696d652073686f756c6420626520696e207468652066757460448201526275726560e81b606482015260840160405180910390fd5b600055600180546001600160a01b031916331790556100b4565b6000602082840312156100ad57600080fd5b5051919050565b6101e2806100c36000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063251c1aa3146100465780633ccfd60b146100625780638da5cb5b1461006c575b600080fd5b61004f60005481565b6040519081526020015b60405180910390f35b61006a610097565b005b60015461007f906001600160a01b031681565b6040516001600160a01b039091168152602001610059565b6000544210156100e75760405162461bcd60e51b8152602060048201526016602482015275165bdd4818d85b89dd081dda5d1a191c985dc81e595d60521b60448201526064015b60405180910390fd5b6001546001600160a01b031633146101385760405162461bcd60e51b81526020600482015260146024820152732cb7ba9030b932b713ba103a34329037bbb732b960611b60448201526064016100de565b604080514781524260208201527fbf2ed60bd5b5965d685680c01195c9514e4382e28e3a5a2d2d5244bf59411b93910160405180910390a16001546040516001600160a01b03909116904780156108fc02916000818181858888f193505050501580156101a9573d6000803e3d6000fd5b5056fea2646970667358221220f87b373b9b616b506fbc5180a7f668d70bf41d11a0756137e2bcc58c7008c32164736f6c63430008170033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x2A5 CODESIZE SUB DUP1 PUSH2 0x2A5 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x22 SWAP2 PUSH2 0x9B JUMP JUMPDEST DUP1 TIMESTAMP LT PUSH2 0x81 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E6C6F636B2074696D652073686F756C6420626520696E2074686520667574 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x757265 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SSTORE PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0xB4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E2 DUP1 PUSH2 0xC3 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x251C1AA3 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x62 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x6C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4F PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x6A PUSH2 0x97 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x7F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x59 JUMP JUMPDEST PUSH1 0x0 SLOAD TIMESTAMP LT ISZERO PUSH2 0xE7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x165BDD4818D85B89DD081DDA5D1A191C985DC81E595D PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x138 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2CB7BA9030B932B713BA103A34329037BBB732B9 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xDE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SELFBALANCE DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xBF2ED60BD5B5965D685680C01195C9514E4382E28E3A5A2D2D5244BF59411B93 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1A9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF8 PUSH28 0x373B9B616B506FBC5180A7F668D70BF41D11A0756137E2BCC58C7008 0xC3 0x21 PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ","sourceMap":"256:866:30:-:0;;;386:238;;;;;;;;;;;;;;;;;;:::i;:::-;473:11;455:15;:29;434:111;;;;-1:-1:-1;;;434:111:30;;405:2:40;434:111:30;;;387:21:40;444:2;424:18;;;417:30;483:34;463:18;;;456:62;-1:-1:-1;;;534:18:40;;;527:33;577:19;;434:111:30;;;;;;;;556:10;:24;590:5;:27;;-1:-1:-1;;;;;;590:27:30;606:10;590:27;;;256:866;;14:184:40;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;-1:-1:-1;176:16:40;;14:184;-1:-1:-1;14:184:40:o;203:399::-;256:866:30;;;;;;"},"deployedBytecode":{"functionDebugData":{"@owner_3802":{"entryPoint":null,"id":3802,"parameterSlots":0,"returnSlots":0},"@unlockTime_3800":{"entryPoint":null,"id":3800,"parameterSlots":0,"returnSlots":0},"@withdraw_3874":{"entryPoint":151,"id":3874,"parameterSlots":0,"returnSlots":0},"abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_09be2a1d7c98765b8c1bd9ab3700b54ab19d501eebe572af39b71382f17d12e8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_345d93c1110e55177ee5f687f392a2e775da2aa3d491c8308e925f0505e3530a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:1370:40","nodeType":"YulBlock","src":"0:1370:40","statements":[{"nativeSrc":"6:3:40","nodeType":"YulBlock","src":"6:3:40","statements":[]},{"body":{"nativeSrc":"115:76:40","nodeType":"YulBlock","src":"115:76:40","statements":[{"nativeSrc":"125:26:40","nodeType":"YulAssignment","src":"125:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"137:9:40","nodeType":"YulIdentifier","src":"137:9:40"},{"kind":"number","nativeSrc":"148:2:40","nodeType":"YulLiteral","src":"148:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"133:3:40","nodeType":"YulIdentifier","src":"133:3:40"},"nativeSrc":"133:18:40","nodeType":"YulFunctionCall","src":"133:18:40"},"variableNames":[{"name":"tail","nativeSrc":"125:4:40","nodeType":"YulIdentifier","src":"125:4:40"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"167:9:40","nodeType":"YulIdentifier","src":"167:9:40"},{"name":"value0","nativeSrc":"178:6:40","nodeType":"YulIdentifier","src":"178:6:40"}],"functionName":{"name":"mstore","nativeSrc":"160:6:40","nodeType":"YulIdentifier","src":"160:6:40"},"nativeSrc":"160:25:40","nodeType":"YulFunctionCall","src":"160:25:40"},"nativeSrc":"160:25:40","nodeType":"YulExpressionStatement","src":"160:25:40"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"14:177:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"84:9:40","nodeType":"YulTypedName","src":"84:9:40","type":""},{"name":"value0","nativeSrc":"95:6:40","nodeType":"YulTypedName","src":"95:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"106:4:40","nodeType":"YulTypedName","src":"106:4:40","type":""}],"src":"14:177:40"},{"body":{"nativeSrc":"313:102:40","nodeType":"YulBlock","src":"313:102:40","statements":[{"nativeSrc":"323:26:40","nodeType":"YulAssignment","src":"323:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"335:9:40","nodeType":"YulIdentifier","src":"335:9:40"},{"kind":"number","nativeSrc":"346:2:40","nodeType":"YulLiteral","src":"346:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"331:3:40","nodeType":"YulIdentifier","src":"331:3:40"},"nativeSrc":"331:18:40","nodeType":"YulFunctionCall","src":"331:18:40"},"variableNames":[{"name":"tail","nativeSrc":"323:4:40","nodeType":"YulIdentifier","src":"323:4:40"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"365:9:40","nodeType":"YulIdentifier","src":"365:9:40"},{"arguments":[{"name":"value0","nativeSrc":"380:6:40","nodeType":"YulIdentifier","src":"380:6:40"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"396:3:40","nodeType":"YulLiteral","src":"396:3:40","type":"","value":"160"},{"kind":"number","nativeSrc":"401:1:40","nodeType":"YulLiteral","src":"401:1:40","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"392:3:40","nodeType":"YulIdentifier","src":"392:3:40"},"nativeSrc":"392:11:40","nodeType":"YulFunctionCall","src":"392:11:40"},{"kind":"number","nativeSrc":"405:1:40","nodeType":"YulLiteral","src":"405:1:40","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"388:3:40","nodeType":"YulIdentifier","src":"388:3:40"},"nativeSrc":"388:19:40","nodeType":"YulFunctionCall","src":"388:19:40"}],"functionName":{"name":"and","nativeSrc":"376:3:40","nodeType":"YulIdentifier","src":"376:3:40"},"nativeSrc":"376:32:40","nodeType":"YulFunctionCall","src":"376:32:40"}],"functionName":{"name":"mstore","nativeSrc":"358:6:40","nodeType":"YulIdentifier","src":"358:6:40"},"nativeSrc":"358:51:40","nodeType":"YulFunctionCall","src":"358:51:40"},"nativeSrc":"358:51:40","nodeType":"YulExpressionStatement","src":"358:51:40"}]},"name":"abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed","nativeSrc":"196:219:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"282:9:40","nodeType":"YulTypedName","src":"282:9:40","type":""},{"name":"value0","nativeSrc":"293:6:40","nodeType":"YulTypedName","src":"293:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"304:4:40","nodeType":"YulTypedName","src":"304:4:40","type":""}],"src":"196:219:40"},{"body":{"nativeSrc":"594:172:40","nodeType":"YulBlock","src":"594:172:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"611:9:40","nodeType":"YulIdentifier","src":"611:9:40"},{"kind":"number","nativeSrc":"622:2:40","nodeType":"YulLiteral","src":"622:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"604:6:40","nodeType":"YulIdentifier","src":"604:6:40"},"nativeSrc":"604:21:40","nodeType":"YulFunctionCall","src":"604:21:40"},"nativeSrc":"604:21:40","nodeType":"YulExpressionStatement","src":"604:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"645:9:40","nodeType":"YulIdentifier","src":"645:9:40"},{"kind":"number","nativeSrc":"656:2:40","nodeType":"YulLiteral","src":"656:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"641:3:40","nodeType":"YulIdentifier","src":"641:3:40"},"nativeSrc":"641:18:40","nodeType":"YulFunctionCall","src":"641:18:40"},{"kind":"number","nativeSrc":"661:2:40","nodeType":"YulLiteral","src":"661:2:40","type":"","value":"22"}],"functionName":{"name":"mstore","nativeSrc":"634:6:40","nodeType":"YulIdentifier","src":"634:6:40"},"nativeSrc":"634:30:40","nodeType":"YulFunctionCall","src":"634:30:40"},"nativeSrc":"634:30:40","nodeType":"YulExpressionStatement","src":"634:30:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"684:9:40","nodeType":"YulIdentifier","src":"684:9:40"},{"kind":"number","nativeSrc":"695:2:40","nodeType":"YulLiteral","src":"695:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"680:3:40","nodeType":"YulIdentifier","src":"680:3:40"},"nativeSrc":"680:18:40","nodeType":"YulFunctionCall","src":"680:18:40"},{"hexValue":"596f752063616e277420776974686472617720796574","kind":"string","nativeSrc":"700:24:40","nodeType":"YulLiteral","src":"700:24:40","type":"","value":"You can't withdraw yet"}],"functionName":{"name":"mstore","nativeSrc":"673:6:40","nodeType":"YulIdentifier","src":"673:6:40"},"nativeSrc":"673:52:40","nodeType":"YulFunctionCall","src":"673:52:40"},"nativeSrc":"673:52:40","nodeType":"YulExpressionStatement","src":"673:52:40"},{"nativeSrc":"734:26:40","nodeType":"YulAssignment","src":"734:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"746:9:40","nodeType":"YulIdentifier","src":"746:9:40"},{"kind":"number","nativeSrc":"757:2:40","nodeType":"YulLiteral","src":"757:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"742:3:40","nodeType":"YulIdentifier","src":"742:3:40"},"nativeSrc":"742:18:40","nodeType":"YulFunctionCall","src":"742:18:40"},"variableNames":[{"name":"tail","nativeSrc":"734:4:40","nodeType":"YulIdentifier","src":"734:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_09be2a1d7c98765b8c1bd9ab3700b54ab19d501eebe572af39b71382f17d12e8__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"420:346:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"571:9:40","nodeType":"YulTypedName","src":"571:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"585:4:40","nodeType":"YulTypedName","src":"585:4:40","type":""}],"src":"420:346:40"},{"body":{"nativeSrc":"945:170:40","nodeType":"YulBlock","src":"945:170:40","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"962:9:40","nodeType":"YulIdentifier","src":"962:9:40"},{"kind":"number","nativeSrc":"973:2:40","nodeType":"YulLiteral","src":"973:2:40","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"955:6:40","nodeType":"YulIdentifier","src":"955:6:40"},"nativeSrc":"955:21:40","nodeType":"YulFunctionCall","src":"955:21:40"},"nativeSrc":"955:21:40","nodeType":"YulExpressionStatement","src":"955:21:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"996:9:40","nodeType":"YulIdentifier","src":"996:9:40"},{"kind":"number","nativeSrc":"1007:2:40","nodeType":"YulLiteral","src":"1007:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"992:3:40","nodeType":"YulIdentifier","src":"992:3:40"},"nativeSrc":"992:18:40","nodeType":"YulFunctionCall","src":"992:18:40"},{"kind":"number","nativeSrc":"1012:2:40","nodeType":"YulLiteral","src":"1012:2:40","type":"","value":"20"}],"functionName":{"name":"mstore","nativeSrc":"985:6:40","nodeType":"YulIdentifier","src":"985:6:40"},"nativeSrc":"985:30:40","nodeType":"YulFunctionCall","src":"985:30:40"},"nativeSrc":"985:30:40","nodeType":"YulExpressionStatement","src":"985:30:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1035:9:40","nodeType":"YulIdentifier","src":"1035:9:40"},{"kind":"number","nativeSrc":"1046:2:40","nodeType":"YulLiteral","src":"1046:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1031:3:40","nodeType":"YulIdentifier","src":"1031:3:40"},"nativeSrc":"1031:18:40","nodeType":"YulFunctionCall","src":"1031:18:40"},{"hexValue":"596f75206172656e277420746865206f776e6572","kind":"string","nativeSrc":"1051:22:40","nodeType":"YulLiteral","src":"1051:22:40","type":"","value":"You aren't the owner"}],"functionName":{"name":"mstore","nativeSrc":"1024:6:40","nodeType":"YulIdentifier","src":"1024:6:40"},"nativeSrc":"1024:50:40","nodeType":"YulFunctionCall","src":"1024:50:40"},"nativeSrc":"1024:50:40","nodeType":"YulExpressionStatement","src":"1024:50:40"},{"nativeSrc":"1083:26:40","nodeType":"YulAssignment","src":"1083:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"1095:9:40","nodeType":"YulIdentifier","src":"1095:9:40"},{"kind":"number","nativeSrc":"1106:2:40","nodeType":"YulLiteral","src":"1106:2:40","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"1091:3:40","nodeType":"YulIdentifier","src":"1091:3:40"},"nativeSrc":"1091:18:40","nodeType":"YulFunctionCall","src":"1091:18:40"},"variableNames":[{"name":"tail","nativeSrc":"1083:4:40","nodeType":"YulIdentifier","src":"1083:4:40"}]}]},"name":"abi_encode_tuple_t_stringliteral_345d93c1110e55177ee5f687f392a2e775da2aa3d491c8308e925f0505e3530a__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"771:344:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"922:9:40","nodeType":"YulTypedName","src":"922:9:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"936:4:40","nodeType":"YulTypedName","src":"936:4:40","type":""}],"src":"771:344:40"},{"body":{"nativeSrc":"1249:119:40","nodeType":"YulBlock","src":"1249:119:40","statements":[{"nativeSrc":"1259:26:40","nodeType":"YulAssignment","src":"1259:26:40","value":{"arguments":[{"name":"headStart","nativeSrc":"1271:9:40","nodeType":"YulIdentifier","src":"1271:9:40"},{"kind":"number","nativeSrc":"1282:2:40","nodeType":"YulLiteral","src":"1282:2:40","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1267:3:40","nodeType":"YulIdentifier","src":"1267:3:40"},"nativeSrc":"1267:18:40","nodeType":"YulFunctionCall","src":"1267:18:40"},"variableNames":[{"name":"tail","nativeSrc":"1259:4:40","nodeType":"YulIdentifier","src":"1259:4:40"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1301:9:40","nodeType":"YulIdentifier","src":"1301:9:40"},{"name":"value0","nativeSrc":"1312:6:40","nodeType":"YulIdentifier","src":"1312:6:40"}],"functionName":{"name":"mstore","nativeSrc":"1294:6:40","nodeType":"YulIdentifier","src":"1294:6:40"},"nativeSrc":"1294:25:40","nodeType":"YulFunctionCall","src":"1294:25:40"},"nativeSrc":"1294:25:40","nodeType":"YulExpressionStatement","src":"1294:25:40"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1339:9:40","nodeType":"YulIdentifier","src":"1339:9:40"},{"kind":"number","nativeSrc":"1350:2:40","nodeType":"YulLiteral","src":"1350:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1335:3:40","nodeType":"YulIdentifier","src":"1335:3:40"},"nativeSrc":"1335:18:40","nodeType":"YulFunctionCall","src":"1335:18:40"},{"name":"value1","nativeSrc":"1355:6:40","nodeType":"YulIdentifier","src":"1355:6:40"}],"functionName":{"name":"mstore","nativeSrc":"1328:6:40","nodeType":"YulIdentifier","src":"1328:6:40"},"nativeSrc":"1328:34:40","nodeType":"YulFunctionCall","src":"1328:34:40"},"nativeSrc":"1328:34:40","nodeType":"YulExpressionStatement","src":"1328:34:40"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"1120:248:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1210:9:40","nodeType":"YulTypedName","src":"1210:9:40","type":""},{"name":"value1","nativeSrc":"1221:6:40","nodeType":"YulTypedName","src":"1221:6:40","type":""},{"name":"value0","nativeSrc":"1229:6:40","nodeType":"YulTypedName","src":"1229:6:40","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1240:4:40","nodeType":"YulTypedName","src":"1240:4:40","type":""}],"src":"1120:248:40"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_09be2a1d7c98765b8c1bd9ab3700b54ab19d501eebe572af39b71382f17d12e8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"You can't withdraw yet\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_345d93c1110e55177ee5f687f392a2e775da2aa3d491c8308e925f0505e3530a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"You aren't the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n}","id":40,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c8063251c1aa3146100465780633ccfd60b146100625780638da5cb5b1461006c575b600080fd5b61004f60005481565b6040519081526020015b60405180910390f35b61006a610097565b005b60015461007f906001600160a01b031681565b6040516001600160a01b039091168152602001610059565b6000544210156100e75760405162461bcd60e51b8152602060048201526016602482015275165bdd4818d85b89dd081dda5d1a191c985dc81e595d60521b60448201526064015b60405180910390fd5b6001546001600160a01b031633146101385760405162461bcd60e51b81526020600482015260146024820152732cb7ba9030b932b713ba103a34329037bbb732b960611b60448201526064016100de565b604080514781524260208201527fbf2ed60bd5b5965d685680c01195c9514e4382e28e3a5a2d2d5244bf59411b93910160405180910390a16001546040516001600160a01b03909116904780156108fc02916000818181858888f193505050501580156101a9573d6000803e3d6000fd5b5056fea2646970667358221220f87b373b9b616b506fbc5180a7f668d70bf41d11a0756137e2bcc58c7008c32164736f6c63430008170033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x251C1AA3 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x62 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x6C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4F PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x6A PUSH2 0x97 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x7F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x59 JUMP JUMPDEST PUSH1 0x0 SLOAD TIMESTAMP LT ISZERO PUSH2 0xE7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x165BDD4818D85B89DD081DDA5D1A191C985DC81E595D PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x138 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2CB7BA9030B932B713BA103A34329037BBB732B9 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xDE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SELFBALANCE DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xBF2ED60BD5B5965D685680C01195C9514E4382E28E3A5A2D2D5244BF59411B93 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1A9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF8 PUSH28 0x373B9B616B506FBC5180A7F668D70BF41D11A0756137E2BCC58C7008 0xC3 0x21 PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ","sourceMap":"256:866:30:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;276:22;;;;;;;;;160:25:40;;;148:2;133:18;276:22:30;;;;;;;;630:490;;;:::i;:::-;;304:28;;;;;-1:-1:-1;;;;;304:28:30;;;;;;-1:-1:-1;;;;;376:32:40;;;358:51;;346:2;331:18;304:28:30;196:219:40;630:490:30;900:10;;881:15;:29;;873:64;;;;-1:-1:-1;;;873:64:30;;622:2:40;873:64:30;;;604:21:40;661:2;641:18;;;634:30;-1:-1:-1;;;680:18:40;;;673:52;742:18;;873:64:30;;;;;;;;;969:5;;-1:-1:-1;;;;;969:5:30;955:10;:19;947:52;;;;-1:-1:-1;;;947:52:30;;973:2:40;947:52:30;;;955:21:40;1012:2;992:18;;;985:30;-1:-1:-1;;;1031:18:40;;;1024:50;1091:18;;947:52:30;771:344:40;947:52:30;1015:50;;;1026:21;1294:25:40;;1049:15:30;1350:2:40;1335:18;;1328:34;1015:50:30;;1267:18:40;1015:50:30;;;;;;;1076:5;;:37;;-1:-1:-1;;;;;1076:5:30;;;;1091:21;1076:37;;;;;:5;:37;:5;:37;1091:21;1076:5;:37;;;;;;;;;;;;;;;;;;;;;630:490::o"},"gasEstimates":{"creation":{"codeDepositCost":"96400","executionCost":"infinite","totalCost":"infinite"},"external":{"owner()":"2359","unlockTime()":"2262","withdraw()":"infinite"}},"methodIdentifiers":{"owner()":"8da5cb5b","unlockTime()":"251c1aa3","withdraw()":"3ccfd60b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lock.sol\":\"Lock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@across-protocol/contracts-v2/contracts/interfaces/V3SpokePoolInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n// Contains structs and functions used by SpokePool contracts to facilitate universal settlement.\\ninterface V3SpokePoolInterface {\\n    /**************************************\\n     *              ENUMS                 *\\n     **************************************/\\n\\n    // Fill status tracks on-chain state of deposit, uniquely identified by relayHash.\\n    enum FillStatus {\\n        Unfilled,\\n        RequestedSlowFill,\\n        Filled\\n    }\\n    // Fill type is emitted in the FilledRelay event to assist Dataworker with determining which types of\\n    // fills to refund (e.g. only fast fills) and whether a fast fill created a sow fill excess.\\n    enum FillType {\\n        FastFill,\\n        // Fast fills are normal fills that do not replace a slow fill request.\\n        ReplacedSlowFill,\\n        // Replaced slow fills are fast fills that replace a slow fill request. This type is used by the Dataworker\\n        // to know when to send excess funds from the SpokePool to the HubPool because they can no longer be used\\n        // for a slow fill execution.\\n        SlowFill\\n        // Slow fills are requested via requestSlowFill and executed by executeSlowRelayLeaf after a bundle containing\\n        // the slow fill is validated.\\n    }\\n\\n    /**************************************\\n     *              STRUCTS               *\\n     **************************************/\\n\\n    // This struct represents the data to fully specify a **unique** relay submitted on this chain.\\n    // This data is hashed with the chainId() and saved by the SpokePool to prevent collisions and protect against\\n    // replay attacks on other chains. If any portion of this data differs, the relay is considered to be\\n    // completely distinct.\\n    struct V3RelayData {\\n        // The address that made the deposit on the origin chain.\\n        address depositor;\\n        // The recipient address on the destination chain.\\n        address recipient;\\n        // This is the exclusive relayer who can fill the deposit before the exclusivity deadline.\\n        address exclusiveRelayer;\\n        // Token that is deposited on origin chain by depositor.\\n        address inputToken;\\n        // Token that is received on destination chain by recipient.\\n        address outputToken;\\n        // The amount of input token deposited by depositor.\\n        uint256 inputAmount;\\n        // The amount of output token to be received by recipient.\\n        uint256 outputAmount;\\n        // Origin chain id.\\n        uint256 originChainId;\\n        // The id uniquely identifying this deposit on the origin chain.\\n        uint32 depositId;\\n        // The timestamp on the destination chain after which this deposit can no longer be filled.\\n        uint32 fillDeadline;\\n        // The timestamp on the destination chain after which any relayer can fill the deposit.\\n        uint32 exclusivityDeadline;\\n        // Data that is forwarded to the recipient.\\n        bytes message;\\n    }\\n\\n    // Contains parameters passed in by someone who wants to execute a slow relay leaf.\\n    struct V3SlowFill {\\n        V3RelayData relayData;\\n        uint256 chainId;\\n        uint256 updatedOutputAmount;\\n    }\\n\\n    // Contains information about a relay to be sent along with additional information that is not unique to the\\n    // relay itself but is required to know how to process the relay. For example, \\\"updatedX\\\" fields can be used\\n    // by the relayer to modify fields of the relay with the depositor's permission, and \\\"repaymentChainId\\\" is specified\\n    // by the relayer to determine where to take a relayer refund, but doesn't affect the uniqueness of the relay.\\n    struct V3RelayExecutionParams {\\n        V3RelayData relay;\\n        bytes32 relayHash;\\n        uint256 updatedOutputAmount;\\n        address updatedRecipient;\\n        bytes updatedMessage;\\n        uint256 repaymentChainId;\\n    }\\n\\n    // Packs together parameters emitted in FilledV3Relay because there are too many emitted otherwise.\\n    // Similar to V3RelayExecutionParams, these parameters are not used to uniquely identify the deposit being\\n    // filled so they don't have to be unpacked by all clients.\\n    struct V3RelayExecutionEventInfo {\\n        address updatedRecipient;\\n        bytes updatedMessage;\\n        uint256 updatedOutputAmount;\\n        FillType fillType;\\n    }\\n\\n    /**************************************\\n     *              EVENTS                *\\n     **************************************/\\n\\n    event V3FundsDeposited(\\n        address inputToken,\\n        address outputToken,\\n        uint256 inputAmount,\\n        uint256 outputAmount,\\n        uint256 indexed destinationChainId,\\n        uint32 indexed depositId,\\n        uint32 quoteTimestamp,\\n        uint32 fillDeadline,\\n        uint32 exclusivityDeadline,\\n        address indexed depositor,\\n        address recipient,\\n        address exclusiveRelayer,\\n        bytes message\\n    );\\n\\n    event RequestedSpeedUpV3Deposit(\\n        uint256 updatedOutputAmount,\\n        uint32 indexed depositId,\\n        address indexed depositor,\\n        address updatedRecipient,\\n        bytes updatedMessage,\\n        bytes depositorSignature\\n    );\\n\\n    event FilledV3Relay(\\n        address inputToken,\\n        address outputToken,\\n        uint256 inputAmount,\\n        uint256 outputAmount,\\n        uint256 repaymentChainId,\\n        uint256 indexed originChainId,\\n        uint32 indexed depositId,\\n        uint32 fillDeadline,\\n        uint32 exclusivityDeadline,\\n        address exclusiveRelayer,\\n        address indexed relayer,\\n        address depositor,\\n        address recipient,\\n        bytes message,\\n        V3RelayExecutionEventInfo relayExecutionInfo\\n    );\\n\\n    event RequestedV3SlowFill(\\n        address inputToken,\\n        address outputToken,\\n        uint256 inputAmount,\\n        uint256 outputAmount,\\n        uint256 indexed originChainId,\\n        uint32 indexed depositId,\\n        uint32 fillDeadline,\\n        uint32 exclusivityDeadline,\\n        address exclusiveRelayer,\\n        address depositor,\\n        address recipient,\\n        bytes message\\n    );\\n\\n    /**************************************\\n     *              FUNCTIONS             *\\n     **************************************/\\n\\n    function depositV3(\\n        address depositor,\\n        address recipient,\\n        address inputToken,\\n        address outputToken,\\n        uint256 inputAmount,\\n        uint256 outputAmount,\\n        uint256 destinationChainId,\\n        address exclusiveRelayer,\\n        uint32 quoteTimestamp,\\n        uint32 fillDeadline,\\n        uint32 exclusivityDeadline,\\n        bytes calldata message\\n    ) external payable;\\n\\n    function speedUpV3Deposit(\\n        address depositor,\\n        uint32 depositId,\\n        uint256 updatedOutputAmount,\\n        address updatedRecipient,\\n        bytes calldata updatedMessage,\\n        bytes calldata depositorSignature\\n    ) external;\\n\\n    function fillV3Relay(V3RelayData calldata relayData, uint256 repaymentChainId) external;\\n\\n    function fillV3RelayWithUpdatedDeposit(\\n        V3RelayData calldata relayData,\\n        uint256 repaymentChainId,\\n        uint256 updatedOutputAmount,\\n        address updatedRecipient,\\n        bytes calldata updatedMessage,\\n        bytes calldata depositorSignature\\n    ) external;\\n\\n    function requestV3SlowFill(V3RelayData calldata relayData) external;\\n\\n    function executeV3SlowRelayLeaf(\\n        V3SlowFill calldata slowFillLeaf,\\n        uint32 rootBundleId,\\n        bytes32[] calldata proof\\n    ) external;\\n\\n    /**************************************\\n     *              ERRORS                *\\n     **************************************/\\n\\n    error DisabledRoute();\\n    error InvalidQuoteTimestamp();\\n    error InvalidFillDeadline();\\n    error InvalidExclusiveRelayer();\\n    error InvalidExclusivityDeadline();\\n    error MsgValueDoesNotMatchInputAmount();\\n    error NotExclusiveRelayer();\\n    error NoSlowFillsInExclusivityWindow();\\n    error RelayFilled();\\n    error InvalidSlowFillRequest();\\n    error ExpiredFillDeadline();\\n    error InvalidMerkleProof();\\n    error InvalidChainId();\\n    error InvalidMerkleLeaf();\\n    error ClaimedMerkleLeaf();\\n    error InvalidPayoutAdjustmentPct();\\n}\\n\",\"keccak256\":\"0xdd33112f0dc8f8462307cda7d7753cb9be49cd209b6520abd69273ac015f7ab6\",\"license\":\"BUSL-1.1\"},\"contracts/Lock.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.23;\\n\\nimport {V3SpokePoolInterface} from \\\"@across-protocol/contracts-v2/contracts/interfaces/V3SpokePoolInterface.sol\\\";\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract Lock {\\n    uint public unlockTime;\\n    address payable public owner;\\n\\n    event Withdrawal(uint amount, uint when);\\n\\n    constructor(uint _unlockTime) payable {\\n        require(\\n            block.timestamp < _unlockTime,\\n            \\\"Unlock time should be in the future\\\"\\n        );\\n\\n        unlockTime = _unlockTime;\\n        owner = payable(msg.sender);\\n    }\\n\\n    function withdraw() public {\\n        // Uncomment this line, and the import of \\\"hardhat/console.sol\\\", to print a log in your terminal\\n        // console.log(\\\"Unlock time is %o and block timestamp is %o\\\", unlockTime, block.timestamp);\\n\\n        require(block.timestamp >= unlockTime, \\\"You can't withdraw yet\\\");\\n        require(msg.sender == owner, \\\"You aren't the owner\\\");\\n\\n        emit Withdrawal(address(this).balance, block.timestamp);\\n\\n        owner.transfer(address(this).balance);\\n    }\\n}\\n\",\"keccak256\":\"0x0471290d85848250cf86ab85df68b8f3a6b22ea4e71084f7a3414dc9f7933306\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3800,"contract":"contracts/Lock.sol:Lock","label":"unlockTime","offset":0,"slot":"0","type":"t_uint256"},{"astId":3802,"contract":"contracts/Lock.sol:Lock","label":"owner","offset":0,"slot":"1","type":"t_address_payable"}],"types":{"t_address_payable":{"encoding":"inplace","label":"address payable","numberOfBytes":"20"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/OmnaccountModule.sol":{"OmnaccountModule":{"abi":[{"inputs":[{"internalType":"address","name":"entrypoint","type":"address"},{"internalType":"address","name":"spokePool","type":"address"}],"stateMutability":"nonpayable","type":"constructor"}],"devdoc":{"author":"KDon.eth","kind":"dev","methods":{},"title":"OmnaccountModule","version":1},"evm":{"bytecode":{"functionDebugData":{"@_3904":{"entryPoint":null,"id":3904,"parameterSlots":2,"returnSlots":0},"abi_decode_address_fromMemory":{"entryPoint":48,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_addresst_address_fromMemory":{"entryPoint":75,"id":null,"parameterSlots":2,"returnSlots":2}},"generatedSources":[{"ast":{"nativeSrc":"0:491:40","nodeType":"YulBlock","src":"0:491:40","statements":[{"nativeSrc":"6:3:40","nodeType":"YulBlock","src":"6:3:40","statements":[]},{"body":{"nativeSrc":"74:117:40","nodeType":"YulBlock","src":"74:117:40","statements":[{"nativeSrc":"84:22:40","nodeType":"YulAssignment","src":"84:22:40","value":{"arguments":[{"name":"offset","nativeSrc":"99:6:40","nodeType":"YulIdentifier","src":"99:6:40"}],"functionName":{"name":"mload","nativeSrc":"93:5:40","nodeType":"YulIdentifier","src":"93:5:40"},"nativeSrc":"93:13:40","nodeType":"YulFunctionCall","src":"93:13:40"},"variableNames":[{"name":"value","nativeSrc":"84:5:40","nodeType":"YulIdentifier","src":"84:5:40"}]},{"body":{"nativeSrc":"169:16:40","nodeType":"YulBlock","src":"169:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"178:1:40","nodeType":"YulLiteral","src":"178:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"181:1:40","nodeType":"YulLiteral","src":"181:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"171:6:40","nodeType":"YulIdentifier","src":"171:6:40"},"nativeSrc":"171:12:40","nodeType":"YulFunctionCall","src":"171:12:40"},"nativeSrc":"171:12:40","nodeType":"YulExpressionStatement","src":"171:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"128:5:40","nodeType":"YulIdentifier","src":"128:5:40"},{"arguments":[{"name":"value","nativeSrc":"139:5:40","nodeType":"YulIdentifier","src":"139:5:40"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"154:3:40","nodeType":"YulLiteral","src":"154:3:40","type":"","value":"160"},{"kind":"number","nativeSrc":"159:1:40","nodeType":"YulLiteral","src":"159:1:40","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"150:3:40","nodeType":"YulIdentifier","src":"150:3:40"},"nativeSrc":"150:11:40","nodeType":"YulFunctionCall","src":"150:11:40"},{"kind":"number","nativeSrc":"163:1:40","nodeType":"YulLiteral","src":"163:1:40","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"146:3:40","nodeType":"YulIdentifier","src":"146:3:40"},"nativeSrc":"146:19:40","nodeType":"YulFunctionCall","src":"146:19:40"}],"functionName":{"name":"and","nativeSrc":"135:3:40","nodeType":"YulIdentifier","src":"135:3:40"},"nativeSrc":"135:31:40","nodeType":"YulFunctionCall","src":"135:31:40"}],"functionName":{"name":"eq","nativeSrc":"125:2:40","nodeType":"YulIdentifier","src":"125:2:40"},"nativeSrc":"125:42:40","nodeType":"YulFunctionCall","src":"125:42:40"}],"functionName":{"name":"iszero","nativeSrc":"118:6:40","nodeType":"YulIdentifier","src":"118:6:40"},"nativeSrc":"118:50:40","nodeType":"YulFunctionCall","src":"118:50:40"},"nativeSrc":"115:70:40","nodeType":"YulIf","src":"115:70:40"}]},"name":"abi_decode_address_fromMemory","nativeSrc":"14:177:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"53:6:40","nodeType":"YulTypedName","src":"53:6:40","type":""}],"returnVariables":[{"name":"value","nativeSrc":"64:5:40","nodeType":"YulTypedName","src":"64:5:40","type":""}],"src":"14:177:40"},{"body":{"nativeSrc":"294:195:40","nodeType":"YulBlock","src":"294:195:40","statements":[{"body":{"nativeSrc":"340:16:40","nodeType":"YulBlock","src":"340:16:40","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"349:1:40","nodeType":"YulLiteral","src":"349:1:40","type":"","value":"0"},{"kind":"number","nativeSrc":"352:1:40","nodeType":"YulLiteral","src":"352:1:40","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"342:6:40","nodeType":"YulIdentifier","src":"342:6:40"},"nativeSrc":"342:12:40","nodeType":"YulFunctionCall","src":"342:12:40"},"nativeSrc":"342:12:40","nodeType":"YulExpressionStatement","src":"342:12:40"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"315:7:40","nodeType":"YulIdentifier","src":"315:7:40"},{"name":"headStart","nativeSrc":"324:9:40","nodeType":"YulIdentifier","src":"324:9:40"}],"functionName":{"name":"sub","nativeSrc":"311:3:40","nodeType":"YulIdentifier","src":"311:3:40"},"nativeSrc":"311:23:40","nodeType":"YulFunctionCall","src":"311:23:40"},{"kind":"number","nativeSrc":"336:2:40","nodeType":"YulLiteral","src":"336:2:40","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"307:3:40","nodeType":"YulIdentifier","src":"307:3:40"},"nativeSrc":"307:32:40","nodeType":"YulFunctionCall","src":"307:32:40"},"nativeSrc":"304:52:40","nodeType":"YulIf","src":"304:52:40"},{"nativeSrc":"365:50:40","nodeType":"YulAssignment","src":"365:50:40","value":{"arguments":[{"name":"headStart","nativeSrc":"405:9:40","nodeType":"YulIdentifier","src":"405:9:40"}],"functionName":{"name":"abi_decode_address_fromMemory","nativeSrc":"375:29:40","nodeType":"YulIdentifier","src":"375:29:40"},"nativeSrc":"375:40:40","nodeType":"YulFunctionCall","src":"375:40:40"},"variableNames":[{"name":"value0","nativeSrc":"365:6:40","nodeType":"YulIdentifier","src":"365:6:40"}]},{"nativeSrc":"424:59:40","nodeType":"YulAssignment","src":"424:59:40","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"468:9:40","nodeType":"YulIdentifier","src":"468:9:40"},{"kind":"number","nativeSrc":"479:2:40","nodeType":"YulLiteral","src":"479:2:40","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:40","nodeType":"YulIdentifier","src":"464:3:40"},"nativeSrc":"464:18:40","nodeType":"YulFunctionCall","src":"464:18:40"}],"functionName":{"name":"abi_decode_address_fromMemory","nativeSrc":"434:29:40","nodeType":"YulIdentifier","src":"434:29:40"},"nativeSrc":"434:49:40","nodeType":"YulFunctionCall","src":"434:49:40"},"variableNames":[{"name":"value1","nativeSrc":"424:6:40","nodeType":"YulIdentifier","src":"424:6:40"}]}]},"name":"abi_decode_tuple_t_addresst_address_fromMemory","nativeSrc":"196:293:40","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"252:9:40","nodeType":"YulTypedName","src":"252:9:40","type":""},{"name":"dataEnd","nativeSrc":"263:7:40","nodeType":"YulTypedName","src":"263:7:40","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"275:6:40","nodeType":"YulTypedName","src":"275:6:40","type":""},{"name":"value1","nativeSrc":"283:6:40","nodeType":"YulTypedName","src":"283:6:40","type":""}],"src":"196:293:40"}]},"contents":"{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n    }\n}","id":40,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6080604052348015600f57600080fd5b5060405160c538038060c5833981016040819052602a91604b565b50506079565b80516001600160a01b0381168114604657600080fd5b919050565b60008060408385031215605d57600080fd5b6064836030565b91506070602084016030565b90509250929050565b603f8060866000396000f3fe6080604052600080fdfea26469706673582212202719bc8711b72df3365b5668146d3b6717cc73837e1661c333557c3fa710ad2e64736f6c63430008170033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0xC5 CODESIZE SUB DUP1 PUSH1 0xC5 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH1 0x2A SWAP2 PUSH1 0x4B JUMP JUMPDEST POP POP PUSH1 0x79 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH1 0x46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH1 0x5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x64 DUP4 PUSH1 0x30 JUMP JUMPDEST SWAP2 POP PUSH1 0x70 PUSH1 0x20 DUP5 ADD PUSH1 0x30 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x3F DUP1 PUSH1 0x86 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x27 NOT 0xBC DUP8 GT 0xB7 0x2D RETURN CALLDATASIZE JUMPDEST JUMP PUSH9 0x146D3B6717CC73837E AND PUSH2 0xC333 SSTORE PUSH29 0x3FA710AD2E64736F6C6343000817003300000000000000000000000000 ","sourceMap":"969:346:31:-:0;;;1150:163;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;969:346;;14:177:40;93:13;;-1:-1:-1;;;;;135:31:40;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:293::-;275:6;283;336:2;324:9;315:7;311:23;307:32;304:52;;;352:1;349;342:12;304:52;375:40;405:9;375:40;:::i;:::-;365:50;;434:49;479:2;468:9;464:18;434:49;:::i;:::-;424:59;;196:293;;;;;:::o;:::-;969:346:31;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea26469706673582212202719bc8711b72df3365b5668146d3b6717cc73837e1661c333557c3fa710ad2e64736f6c63430008170033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x27 NOT 0xBC DUP8 GT 0xB7 0x2D RETURN CALLDATASIZE JUMPDEST JUMP PUSH9 0x146D3B6717CC73837E AND PUSH2 0xC333 SSTORE PUSH29 0x3FA710AD2E64736F6C6343000817003300000000000000000000000000 ","sourceMap":"969:346:31:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"12600","executionCost":"infinite","totalCost":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"entrypoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spokePool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"author\":\"KDon.eth\",\"kind\":\"dev\",\"methods\":{},\"title\":\"OmnaccountModule\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"ERC-4337 abstract account module enabling cross-chain userOp execution powered by Across V3 Bridge and Safe\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OmnaccountModule.sol\":\"OmnaccountModule\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@account-abstraction/contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\\n\",\"keccak256\":\"0x591c87519f7155d1909210276b77925ab2722a99b7b5d5649aecc36ebbdb045a\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\ninterface IAccount {\\n\\n    /**\\n     * Validate user's signature and nonce\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\\n     * This allows making a \\\"simulation call\\\" without a valid signature\\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\\n     *\\n     * @dev Must validate caller is the entryPoint.\\n     *      Must validate the signature and nonce\\n     * @param userOp the operation that is about to be executed.\\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\n    external returns (uint256 validationData);\\n}\\n\",\"keccak256\":\"0x556a0e5980de18e90b115553ed502408155ba35f58642823010d9288047bc418\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n/**\\n * User Operation struct\\n * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x61374003361059087fdcf17967a7bba052badeaf5c7f0ae689166f8aafd3a45c\",\"license\":\"GPL-3.0\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAny2EVMMessageReceiver} from \\\"../interfaces/IAny2EVMMessageReceiver.sol\\\";\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\nimport {IERC165} from \\\"../../vendor/openzeppelin-solidity/v4.8.0/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\\n  address internal immutable i_router;\\n\\n  constructor(address router) {\\n    if (router == address(0)) revert InvalidRouter(address(0));\\n    i_router = router;\\n  }\\n\\n  /// @notice IERC165 supports an interfaceId\\n  /// @param interfaceId The interfaceId to check\\n  /// @return true if the interfaceId is supported\\n  /// @dev Should indicate whether the contract implements IAny2EVMMessageReceiver\\n  /// e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId\\n  /// This allows CCIP to check if ccipReceive is available before calling it.\\n  /// If this returns false or reverts, only tokens are transferred to the receiver.\\n  /// If this returns true, tokens are transferred and ccipReceive is called atomically.\\n  /// Additionally, if the receiver address does not have code associated with\\n  /// it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\\n  function supportsInterface(bytes4 interfaceId) public pure virtual override returns (bool) {\\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  /// @inheritdoc IAny2EVMMessageReceiver\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\\n    _ccipReceive(message);\\n  }\\n\\n  /// @notice Override this function in your implementation.\\n  /// @param message Any2EVMMessage\\n  function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  // Plumbing\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Return the current router\\n  /// @return i_router address\\n  function getRouter() public view returns (address) {\\n    return address(i_router);\\n  }\\n\\n  error InvalidRouter(address router);\\n\\n  /// @dev only calls from the set router are accepted.\\n  modifier onlyRouter() {\\n    if (msg.sender != address(i_router)) revert InvalidRouter(msg.sender);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xd59dbf083bfad8fe95248cac59822ade0bc7d70e50ab05e366cb35a2b2ea99f6\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from\\n/// the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message.\\n  /// If this reverts, any token transfers also revert. The message\\n  /// will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\\n}\\n\",\"keccak256\":\"0xd2a05a4f58a453cbf8cfa6aa78f58cb8e42091b3a025f711a0aa51f584e16b48\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x8af3ac1085c87342373772fb1a0107c7b90258e6bfed318ab2a601a14477e679\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\",\"keccak256\":\"0xa36a31b4bb17fad88d023474893b3b895fa421650543b1ce5aefc78efbd43244\",\"license\":\"MIT\"},\"@safe-global/safe-contracts/contracts/Safe.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./base/ModuleManager.sol\\\";\\nimport \\\"./base/OwnerManager.sol\\\";\\nimport \\\"./base/FallbackManager.sol\\\";\\nimport \\\"./base/GuardManager.sol\\\";\\nimport \\\"./common/NativeCurrencyPaymentFallback.sol\\\";\\nimport \\\"./common/Singleton.sol\\\";\\nimport \\\"./common/SignatureDecoder.sol\\\";\\nimport \\\"./common/SecuredTokenTransfer.sol\\\";\\nimport \\\"./common/StorageAccessible.sol\\\";\\nimport \\\"./interfaces/ISignatureValidator.sol\\\";\\nimport \\\"./external/SafeMath.sol\\\";\\n\\n/**\\n * @title Safe - A multisignature wallet with support for confirmations using signed messages based on EIP-712.\\n * @dev Most important concepts:\\n *      - Threshold: Number of required confirmations for a Safe transaction.\\n *      - Owners: List of addresses that control the Safe. They are the only ones that can add/remove owners, change the threshold and\\n *        approve transactions. Managed in `OwnerManager`.\\n *      - Transaction Hash: Hash of a transaction is calculated using the EIP-712 typed structured data hashing scheme.\\n *      - Nonce: Each transaction should have a different nonce to prevent replay attacks.\\n *      - Signature: A valid signature of an owner of the Safe for a transaction hash.\\n *      - Guard: Guard is a contract that can execute pre- and post- transaction checks. Managed in `GuardManager`.\\n *      - Modules: Modules are contracts that can be used to extend the write functionality of a Safe. Managed in `ModuleManager`.\\n *      - Fallback: Fallback handler is a contract that can provide additional read-only functional for Safe. Managed in `FallbackManager`.\\n *      Note: This version of the implementation contract doesn't emit events for the sake of gas efficiency and therefore requires a tracing node for indexing/\\n *      For the events-based implementation see `SafeL2.sol`.\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract Safe is\\n    Singleton,\\n    NativeCurrencyPaymentFallback,\\n    ModuleManager,\\n    OwnerManager,\\n    SignatureDecoder,\\n    SecuredTokenTransfer,\\n    ISignatureValidatorConstants,\\n    FallbackManager,\\n    StorageAccessible,\\n    GuardManager\\n{\\n    using SafeMath for uint256;\\n\\n    string public constant VERSION = \\\"1.4.1\\\";\\n\\n    // keccak256(\\n    //     \\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\"\\n    // );\\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH = 0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\\n\\n    // keccak256(\\n    //     \\\"SafeTx(address to,uint256 value,bytes data,uint8 operation,uint256 safeTxGas,uint256 baseGas,uint256 gasPrice,address gasToken,address refundReceiver,uint256 nonce)\\\"\\n    // );\\n    bytes32 private constant SAFE_TX_TYPEHASH = 0xbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d8;\\n\\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\\n    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\\n    event SignMsg(bytes32 indexed msgHash);\\n    event ExecutionFailure(bytes32 indexed txHash, uint256 payment);\\n    event ExecutionSuccess(bytes32 indexed txHash, uint256 payment);\\n\\n    uint256 public nonce;\\n    bytes32 private _deprecatedDomainSeparator;\\n    // Mapping to keep track of all message hashes that have been approved by ALL REQUIRED owners\\n    mapping(bytes32 => uint256) public signedMessages;\\n    // Mapping to keep track of all hashes (message or transaction) that have been approved by ANY owners\\n    mapping(address => mapping(bytes32 => uint256)) public approvedHashes;\\n\\n    // This constructor ensures that this contract can only be used as a singleton for Proxy contracts\\n    constructor() {\\n        /**\\n         * By setting the threshold it is not possible to call setup anymore,\\n         * so we create a Safe with 0 owners and threshold 1.\\n         * This is an unusable Safe, perfect for the singleton\\n         */\\n        threshold = 1;\\n    }\\n\\n    /**\\n     * @notice Sets an initial storage of the Safe contract.\\n     * @dev This method can only be called once.\\n     *      If a proxy was created without setting up, anyone can call setup and claim the proxy.\\n     * @param _owners List of Safe owners.\\n     * @param _threshold Number of required confirmations for a Safe transaction.\\n     * @param to Contract address for optional delegate call.\\n     * @param data Data payload for optional delegate call.\\n     * @param fallbackHandler Handler for fallback calls to this contract\\n     * @param paymentToken Token that should be used for the payment (0 is ETH)\\n     * @param payment Value that should be paid\\n     * @param paymentReceiver Address that should receive the payment (or 0 if tx.origin)\\n     */\\n    function setup(\\n        address[] calldata _owners,\\n        uint256 _threshold,\\n        address to,\\n        bytes calldata data,\\n        address fallbackHandler,\\n        address paymentToken,\\n        uint256 payment,\\n        address payable paymentReceiver\\n    ) external {\\n        // setupOwners checks if the Threshold is already set, therefore preventing that this method is called twice\\n        setupOwners(_owners, _threshold);\\n        if (fallbackHandler != address(0)) internalSetFallbackHandler(fallbackHandler);\\n        // As setupOwners can only be called if the contract has not been initialized we don't need a check for setupModules\\n        setupModules(to, data);\\n\\n        if (payment > 0) {\\n            // To avoid running into issues with EIP-170 we reuse the handlePayment function (to avoid adjusting code of that has been verified we do not adjust the method itself)\\n            // baseGas = 0, gasPrice = 1 and gas = payment => amount = (payment + 0) * 1 = payment\\n            handlePayment(payment, 0, 1, paymentToken, paymentReceiver);\\n        }\\n        emit SafeSetup(msg.sender, _owners, _threshold, to, fallbackHandler);\\n    }\\n\\n    /** @notice Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)\\n     *          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`.\\n     * @dev The fees are always transferred, even if the user transaction fails.\\n     *      This method doesn't perform any sanity check of the transaction, such as:\\n     *      - if the contract at `to` address has code or not\\n     *      - if the `gasToken` is a contract or not\\n     *      It is the responsibility of the caller to perform such checks.\\n     * @param to Destination address of Safe transaction.\\n     * @param value Ether value of Safe transaction.\\n     * @param data Data payload of Safe transaction.\\n     * @param operation Operation type of Safe transaction.\\n     * @param safeTxGas Gas that should be used for the Safe transaction.\\n     * @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n     * @param gasPrice Gas price that should be used for the payment calculation.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @return success Boolean indicating transaction's success.\\n     */\\n    function execTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures\\n    ) public payable virtual returns (bool success) {\\n        bytes32 txHash;\\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\\n        {\\n            bytes memory txHashData = encodeTransactionData(\\n                // Transaction info\\n                to,\\n                value,\\n                data,\\n                operation,\\n                safeTxGas,\\n                // Payment info\\n                baseGas,\\n                gasPrice,\\n                gasToken,\\n                refundReceiver,\\n                // Signature info\\n                nonce\\n            );\\n            // Increase nonce and execute transaction.\\n            nonce++;\\n            txHash = keccak256(txHashData);\\n            checkSignatures(txHash, txHashData, signatures);\\n        }\\n        address guard = getGuard();\\n        {\\n            if (guard != address(0)) {\\n                Guard(guard).checkTransaction(\\n                    // Transaction info\\n                    to,\\n                    value,\\n                    data,\\n                    operation,\\n                    safeTxGas,\\n                    // Payment info\\n                    baseGas,\\n                    gasPrice,\\n                    gasToken,\\n                    refundReceiver,\\n                    // Signature info\\n                    signatures,\\n                    msg.sender\\n                );\\n            }\\n        }\\n        // We require some gas to emit the events (at least 2500) after the execution and some to perform code until the execution (500)\\n        // We also include the 1/64 in the check that is not send along with a call to counteract potential shortings because of EIP-150\\n        require(gasleft() >= ((safeTxGas * 64) / 63).max(safeTxGas + 2500) + 500, \\\"GS010\\\");\\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\\n        {\\n            uint256 gasUsed = gasleft();\\n            // If the gasPrice is 0 we assume that nearly all available gas can be used (it is always more than safeTxGas)\\n            // We only substract 2500 (compared to the 3000 before) to ensure that the amount passed is still higher than safeTxGas\\n            success = execute(to, value, data, operation, gasPrice == 0 ? (gasleft() - 2500) : safeTxGas);\\n            gasUsed = gasUsed.sub(gasleft());\\n            // If no safeTxGas and no gasPrice was set (e.g. both are 0), then the internal tx is required to be successful\\n            // This makes it possible to use `estimateGas` without issues, as it searches for the minimum gas where the tx doesn't revert\\n            require(success || safeTxGas != 0 || gasPrice != 0, \\\"GS013\\\");\\n            // We transfer the calculated tx costs to the tx.origin to avoid sending it to intermediate contracts that have made calls\\n            uint256 payment = 0;\\n            if (gasPrice > 0) {\\n                payment = handlePayment(gasUsed, baseGas, gasPrice, gasToken, refundReceiver);\\n            }\\n            if (success) emit ExecutionSuccess(txHash, payment);\\n            else emit ExecutionFailure(txHash, payment);\\n        }\\n        {\\n            if (guard != address(0)) {\\n                Guard(guard).checkAfterExecution(txHash, success);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Handles the payment for a Safe transaction.\\n     * @param gasUsed Gas used by the Safe transaction.\\n     * @param baseGas Gas costs that are independent of the transaction execution (e.g. base transaction fee, signature check, payment of the refund).\\n     * @param gasPrice Gas price that should be used for the payment calculation.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @return payment The amount of payment made in the specified token.\\n     */\\n    function handlePayment(\\n        uint256 gasUsed,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver\\n    ) private returns (uint256 payment) {\\n        // solhint-disable-next-line avoid-tx-origin\\n        address payable receiver = refundReceiver == address(0) ? payable(tx.origin) : refundReceiver;\\n        if (gasToken == address(0)) {\\n            // For ETH we will only adjust the gas price to not be higher than the actual used gas price\\n            payment = gasUsed.add(baseGas).mul(gasPrice < tx.gasprice ? gasPrice : tx.gasprice);\\n            require(receiver.send(payment), \\\"GS011\\\");\\n        } else {\\n            payment = gasUsed.add(baseGas).mul(gasPrice);\\n            require(transferToken(gasToken, receiver, payment), \\\"GS012\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param data That should be signed (this is passed to an external validator contract)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory data, bytes memory signatures) public view {\\n        // Load threshold to avoid multiple storage loads\\n        uint256 _threshold = threshold;\\n        // Check that a threshold is set\\n        require(_threshold > 0, \\\"GS001\\\");\\n        checkNSignatures(dataHash, data, signatures, _threshold);\\n    }\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @dev Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param data That should be signed (this is passed to an external validator contract)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @param requiredSignatures Amount of required valid signatures.\\n     */\\n    function checkNSignatures(bytes32 dataHash, bytes memory data, bytes memory signatures, uint256 requiredSignatures) public view {\\n        // Check that the provided signature data is not too short\\n        require(signatures.length >= requiredSignatures.mul(65), \\\"GS020\\\");\\n        // There cannot be an owner with address 0.\\n        address lastOwner = address(0);\\n        address currentOwner;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        uint256 i;\\n        for (i = 0; i < requiredSignatures; i++) {\\n            (v, r, s) = signatureSplit(signatures, i);\\n            if (v == 0) {\\n                require(keccak256(data) == dataHash, \\\"GS027\\\");\\n                // If v is 0 then it is a contract signature\\n                // When handling contract signatures the address of the contract is encoded into r\\n                currentOwner = address(uint160(uint256(r)));\\n\\n                // Check that signature data pointer (s) is not pointing inside the static part of the signatures bytes\\n                // This check is not completely accurate, since it is possible that more signatures than the threshold are send.\\n                // Here we only check that the pointer is not pointing inside the part that is being processed\\n                require(uint256(s) >= requiredSignatures.mul(65), \\\"GS021\\\");\\n\\n                // Check that signature data pointer (s) is in bounds (points to the length of data -> 32 bytes)\\n                require(uint256(s).add(32) <= signatures.length, \\\"GS022\\\");\\n\\n                // Check if the contract signature is in bounds: start of data is s + 32 and end is start + signature length\\n                uint256 contractSignatureLen;\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    contractSignatureLen := mload(add(add(signatures, s), 0x20))\\n                }\\n                require(uint256(s).add(32).add(contractSignatureLen) <= signatures.length, \\\"GS023\\\");\\n\\n                // Check signature\\n                bytes memory contractSignature;\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    // The signature data for contract signatures is appended to the concatenated signatures and the offset is stored in s\\n                    contractSignature := add(add(signatures, s), 0x20)\\n                }\\n                require(ISignatureValidator(currentOwner).isValidSignature(data, contractSignature) == EIP1271_MAGIC_VALUE, \\\"GS024\\\");\\n            } else if (v == 1) {\\n                // If v is 1 then it is an approved hash\\n                // When handling approved hashes the address of the approver is encoded into r\\n                currentOwner = address(uint160(uint256(r)));\\n                // Hashes are automatically approved by the sender of the message or when they have been pre-approved via a separate transaction\\n                require(msg.sender == currentOwner || approvedHashes[currentOwner][dataHash] != 0, \\\"GS025\\\");\\n            } else if (v > 30) {\\n                // If v > 30 then default va (27,28) has been adjusted for eth_sign flow\\n                // To support eth_sign and similar we adjust v and hash the messageHash with the Ethereum message prefix before applying ecrecover\\n                currentOwner = ecrecover(keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", dataHash)), v - 4, r, s);\\n            } else {\\n                // Default is the ecrecover flow with the provided data hash\\n                // Use ecrecover with the messageHash for EOA signatures\\n                currentOwner = ecrecover(dataHash, v, r, s);\\n            }\\n            require(currentOwner > lastOwner && owners[currentOwner] != address(0) && currentOwner != SENTINEL_OWNERS, \\\"GS026\\\");\\n            lastOwner = currentOwner;\\n        }\\n    }\\n\\n    /**\\n     * @notice Marks hash `hashToApprove` as approved.\\n     * @dev This can be used with a pre-approved hash transaction signature.\\n     *      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures\\n     * @param hashToApprove The hash to mark as approved for signatures that are verified by this contract.\\n     */\\n    function approveHash(bytes32 hashToApprove) external {\\n        require(owners[msg.sender] != address(0), \\\"GS030\\\");\\n        approvedHashes[msg.sender][hashToApprove] = 1;\\n        emit ApproveHash(hashToApprove, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Returns the ID of the chain the contract is currently deployed on.\\n     * @return The ID of the current chain as a uint256.\\n     */\\n    function getChainId() public view returns (uint256) {\\n        uint256 id;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\\n     * @return bytes32 The domain separator hash.\\n     */\\n    function domainSeparator() public view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, getChainId(), this));\\n    }\\n\\n    /**\\n     * @notice Returns the pre-image of the transaction hash (see getTransactionHash).\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @param safeTxGas Gas that should be used for the safe transaction.\\n     * @param baseGas Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n     * @param gasPrice Maximum gas price that should be used for this transaction.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param _nonce Transaction nonce.\\n     * @return Transaction hash bytes.\\n     */\\n    function encodeTransactionData(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) public view returns (bytes memory) {\\n        bytes32 safeTxHash = keccak256(\\n            abi.encode(\\n                SAFE_TX_TYPEHASH,\\n                to,\\n                value,\\n                keccak256(data),\\n                operation,\\n                safeTxGas,\\n                baseGas,\\n                gasPrice,\\n                gasToken,\\n                refundReceiver,\\n                _nonce\\n            )\\n        );\\n        return abi.encodePacked(bytes1(0x19), bytes1(0x01), domainSeparator(), safeTxHash);\\n    }\\n\\n    /**\\n     * @notice Returns transaction hash to be signed by owners.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @param safeTxGas Fas that should be used for the safe transaction.\\n     * @param baseGas Gas costs for data used to trigger the safe transaction.\\n     * @param gasPrice Maximum gas price that should be used for this transaction.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param _nonce Transaction nonce.\\n     * @return Transaction hash.\\n     */\\n    function getTransactionHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) public view returns (bytes32) {\\n        return keccak256(encodeTransactionData(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce));\\n    }\\n}\\n\",\"keccak256\":\"0xbab2f7bec33283e349342e7b23f5191c678c64fe02065bac4f4f44fb3f5d2638\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/base/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/Enum.sol\\\";\\n\\n/**\\n * @title Executor - A contract that can execute transactions\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Executor {\\n    /**\\n     * @notice Executes either a delegatecall or a call with provided parameters.\\n     * @dev This method doesn't perform any sanity check of the transaction, such as:\\n     *      - if the contract at `to` address has code or not\\n     *      It is the responsibility of the caller to perform such checks.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @return success boolean flag indicating if the call succeeded.\\n     */\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 txGas\\n    ) internal returns (bool success) {\\n        if (operation == Enum.Operation.DelegateCall) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\\n            }\\n        } else {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf0be832e7529e92000544170a5529d73666a9b5e836b30c6f2ed6ef7d7d8c94a\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/base/FallbackManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../common/SelfAuthorized.sol\\\";\\n\\n/**\\n * @title Fallback Manager - A contract managing fallback calls made to this contract\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract FallbackManager is SelfAuthorized {\\n    event ChangedFallbackHandler(address indexed handler);\\n\\n    // keccak256(\\\"fallback_manager.handler.address\\\")\\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\\n\\n    /**\\n     *  @notice Internal function to set the fallback handler.\\n     *  @param handler contract to handle fallback calls.\\n     */\\n    function internalSetFallbackHandler(address handler) internal {\\n        /*\\n            If a fallback handler is set to self, then the following attack vector is opened:\\n            Imagine we have a function like this:\\n            function withdraw() internal authorized {\\n                withdrawalAddress.call.value(address(this).balance)(\\\"\\\");\\n            }\\n\\n            If the fallback method is triggered, the fallback handler appends the msg.sender address to the calldata and calls the fallback handler.\\n            A potential attacker could call a Safe with the 3 bytes signature of a withdraw function. Since 3 bytes do not create a valid signature,\\n            the call would end in a fallback handler. Since it appends the msg.sender address to the calldata, the attacker could craft an address \\n            where the first 3 bytes of the previous calldata + the first byte of the address make up a valid function signature. The subsequent call would result in unsanctioned access to Safe's internal protected methods.\\n            For some reason, solidity matches the first 4 bytes of the calldata to a function signature, regardless if more data follow these 4 bytes.\\n        */\\n        require(handler != address(this), \\\"GS400\\\");\\n\\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, handler)\\n        }\\n    }\\n\\n    /**\\n     * @notice Set Fallback Handler to `handler` for the Safe.\\n     * @dev Only fallback calls without value and with data will be forwarded.\\n     *      This can only be done via a Safe transaction.\\n     *      Cannot be set to the Safe itself.\\n     * @param handler contract to handle fallback calls.\\n     */\\n    function setFallbackHandler(address handler) public authorized {\\n        internalSetFallbackHandler(handler);\\n        emit ChangedFallbackHandler(handler);\\n    }\\n\\n    // @notice Forwards all calls to the fallback handler if set. Returns 0 if no handler is set.\\n    // @dev Appends the non-padded caller address to the calldata to be optionally used in the handler\\n    //      The handler can make us of `HandlerContext.sol` to extract the address.\\n    //      This is done because in the next call frame the `msg.sender` will be FallbackManager's address\\n    //      and having the original caller address may enable additional verification scenarios.\\n    // solhint-disable-next-line payable-fallback,no-complex-fallback\\n    fallback() external {\\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let handler := sload(slot)\\n            if iszero(handler) {\\n                return(0, 0)\\n            }\\n            calldatacopy(0, 0, calldatasize())\\n            // The msg.sender address is shifted to the left by 12 bytes to remove the padding\\n            // Then the address without padding is stored right after the calldata\\n            mstore(calldatasize(), shl(96, caller()))\\n            // Add 20 bytes for the address appended add the end\\n            let success := call(gas(), handler, 0, 0, add(calldatasize(), 20), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            if iszero(success) {\\n                revert(0, returndatasize())\\n            }\\n            return(0, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x646b3088f15af8b4f71ac5eeffaa24ce0c1abed5f494f90368208b09e35d5165\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/base/GuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../common/Enum.sol\\\";\\nimport \\\"../common/SelfAuthorized.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\ninterface Guard is IERC165 {\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    function checkAfterExecution(bytes32 txHash, bool success) external;\\n}\\n\\nabstract contract BaseGuard is Guard {\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(Guard).interfaceId || // 0xe6d7a83a\\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\\n    }\\n}\\n\\n/**\\n * @title Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract GuardManager is SelfAuthorized {\\n    event ChangedGuard(address indexed guard);\\n\\n    // keccak256(\\\"guard_manager.guard.address\\\")\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    /**\\n     * @dev Set a guard that checks transactions before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,\\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\\n     *        audit the guard code and design recovery mechanisms.\\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\\n     */\\n    function setGuard(address guard) external authorized {\\n        if (guard != address(0)) {\\n            require(Guard(guard).supportsInterface(type(Guard).interfaceId), \\\"GS300\\\");\\n        }\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, guard)\\n        }\\n        emit ChangedGuard(guard);\\n    }\\n\\n    /**\\n     * @dev Internal method to retrieve the current guard\\n     *      We do not have a public method because we're short on bytecode size limit,\\n     *      to retrieve the guard address, one can use `getStorageAt` from `StorageAccessible` contract\\n     *      with the slot `GUARD_STORAGE_SLOT`\\n     * @return guard The address of the guard\\n     */\\n    function getGuard() internal view returns (address guard) {\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            guard := sload(slot)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xedfc7c830ab35e52d1208986b253f3422c2f0ca68054c10819fb348fcc6ccf5d\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/base/ModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/Enum.sol\\\";\\nimport \\\"../common/SelfAuthorized.sol\\\";\\nimport \\\"./Executor.sol\\\";\\n\\n/**\\n * @title Module Manager - A contract managing Safe modules\\n * @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\\n           \\u26a0\\ufe0f WARNING: Modules are a security risk since they can execute arbitrary transactions, \\n           so only trusted and audited modules should be added to a Safe. A malicious module can\\n           completely takeover a Safe.\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract ModuleManager is SelfAuthorized, Executor {\\n    event EnabledModule(address indexed module);\\n    event DisabledModule(address indexed module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    address internal constant SENTINEL_MODULES = address(0x1);\\n\\n    mapping(address => address) internal modules;\\n\\n    /**\\n     * @notice Setup function sets the initial storage of the contract.\\n     *         Optionally executes a delegate call to another contract to setup the modules.\\n     * @param to Optional destination address of call to execute.\\n     * @param data Optional data of call to execute.\\n     */\\n    function setupModules(address to, bytes memory data) internal {\\n        require(modules[SENTINEL_MODULES] == address(0), \\\"GS100\\\");\\n        modules[SENTINEL_MODULES] = SENTINEL_MODULES;\\n        if (to != address(0)) {\\n            require(isContract(to), \\\"GS002\\\");\\n            // Setup has to complete successfully or transaction fails.\\n            require(execute(to, 0, data, Enum.Operation.DelegateCall, type(uint256).max), \\\"GS000\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Enables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param module Module to be whitelisted.\\n     */\\n    function enableModule(address module) public authorized {\\n        // Module address cannot be null or sentinel.\\n        require(module != address(0) && module != SENTINEL_MODULES, \\\"GS101\\\");\\n        // Module cannot be added twice.\\n        require(modules[module] == address(0), \\\"GS102\\\");\\n        modules[module] = modules[SENTINEL_MODULES];\\n        modules[SENTINEL_MODULES] = module;\\n        emit EnabledModule(module);\\n    }\\n\\n    /**\\n     * @notice Disables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevModule Previous module in the modules linked list.\\n     * @param module Module to be removed.\\n     */\\n    function disableModule(address prevModule, address module) public authorized {\\n        // Validate module address and check that it corresponds to module index.\\n        require(module != address(0) && module != SENTINEL_MODULES, \\\"GS101\\\");\\n        require(modules[prevModule] == module, \\\"GS103\\\");\\n        modules[prevModule] = modules[module];\\n        modules[module] = address(0);\\n        emit DisabledModule(module);\\n    }\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\\n     * @dev Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     */\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public virtual returns (bool success) {\\n        // Only whitelisted modules are allowed.\\n        require(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0), \\\"GS104\\\");\\n        // Execute transaction without further confirmations.\\n        success = execute(to, value, data, operation, type(uint256).max);\\n        if (success) emit ExecutionFromModuleSuccess(msg.sender);\\n        else emit ExecutionFromModuleFailure(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     * @return returnData Data returned by the call.\\n     */\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public returns (bool success, bytes memory returnData) {\\n        success = execTransactionFromModule(to, value, data, operation);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Load free memory location\\n            let ptr := mload(0x40)\\n            // We allocate memory for the return data by setting the free memory location to\\n            // current free memory location + data size + 32 bytes for data size value\\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\\n            // Store the size\\n            mstore(ptr, returndatasize())\\n            // Store the data\\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\\n            // Point the return data to the correct memory location\\n            returnData := ptr\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns if an module is enabled\\n     * @return True if the module is enabled\\n     */\\n    function isModuleEnabled(address module) public view returns (bool) {\\n        return SENTINEL_MODULES != module && modules[module] != address(0);\\n    }\\n\\n    /**\\n     * @notice Returns an array of modules.\\n     *         If all entries fit into a single page, the next pointer will be 0x1.\\n     *         If another page is present, next will be the last element of the returned array.\\n     * @param start Start of the page. Has to be a module or start pointer (0x1 address)\\n     * @param pageSize Maximum number of modules that should be returned. Has to be > 0\\n     * @return array Array of modules.\\n     * @return next Start of the next page.\\n     */\\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next) {\\n        require(start == SENTINEL_MODULES || isModuleEnabled(start), \\\"GS105\\\");\\n        require(pageSize > 0, \\\"GS106\\\");\\n        // Init array with max page size\\n        array = new address[](pageSize);\\n\\n        // Populate return array\\n        uint256 moduleCount = 0;\\n        next = modules[start];\\n        while (next != address(0) && next != SENTINEL_MODULES && moduleCount < pageSize) {\\n            array[moduleCount] = next;\\n            next = modules[next];\\n            moduleCount++;\\n        }\\n\\n        /**\\n          Because of the argument validation, we can assume that the loop will always iterate over the valid module list values\\n          and the `next` variable will either be an enabled module or a sentinel address (signalling the end). \\n          \\n          If we haven't reached the end inside the loop, we need to set the next pointer to the last element of the modules array\\n          because the `next` variable (which is a module by itself) acting as a pointer to the start of the next page is neither \\n          included to the current page, nor will it be included in the next one if you pass it as a start.\\n        */\\n        if (next != SENTINEL_MODULES) {\\n            next = array[moduleCount - 1];\\n        }\\n        // Set correct size of returned array\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(array, moduleCount)\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns true if `account` is a contract.\\n     * @dev This function will return false if invoked during the constructor of a contract,\\n     *      as the code is not actually created until after the constructor finishes.\\n     * @param account The address being queried\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xd71b0d56dce386fa6f67c51061face071b2c7b03ec535d68717e2538ec47113a\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/base/OwnerManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/SelfAuthorized.sol\\\";\\n\\n/**\\n * @title OwnerManager - Manages Safe owners and a threshold to authorize transactions.\\n * @dev Uses a linked list to store the owners because the code generate by the solidity compiler\\n *      is more efficient than using a dynamic array.\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract OwnerManager is SelfAuthorized {\\n    event AddedOwner(address indexed owner);\\n    event RemovedOwner(address indexed owner);\\n    event ChangedThreshold(uint256 threshold);\\n\\n    address internal constant SENTINEL_OWNERS = address(0x1);\\n\\n    mapping(address => address) internal owners;\\n    uint256 internal ownerCount;\\n    uint256 internal threshold;\\n\\n    /**\\n     * @notice Sets the initial storage of the contract.\\n     * @param _owners List of Safe owners.\\n     * @param _threshold Number of required confirmations for a Safe transaction.\\n     */\\n    function setupOwners(address[] memory _owners, uint256 _threshold) internal {\\n        // Threshold can only be 0 at initialization.\\n        // Check ensures that setup function can only be called once.\\n        require(threshold == 0, \\\"GS200\\\");\\n        // Validate that threshold is smaller than number of added owners.\\n        require(_threshold <= _owners.length, \\\"GS201\\\");\\n        // There has to be at least one Safe owner.\\n        require(_threshold >= 1, \\\"GS202\\\");\\n        // Initializing Safe owners.\\n        address currentOwner = SENTINEL_OWNERS;\\n        for (uint256 i = 0; i < _owners.length; i++) {\\n            // Owner address cannot be null.\\n            address owner = _owners[i];\\n            require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this) && currentOwner != owner, \\\"GS203\\\");\\n            // No duplicate owners allowed.\\n            require(owners[owner] == address(0), \\\"GS204\\\");\\n            owners[currentOwner] = owner;\\n            currentOwner = owner;\\n        }\\n        owners[currentOwner] = SENTINEL_OWNERS;\\n        ownerCount = _owners.length;\\n        threshold = _threshold;\\n    }\\n\\n    /**\\n     * @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param owner New owner address.\\n     * @param _threshold New threshold.\\n     */\\n    function addOwnerWithThreshold(address owner, uint256 _threshold) public authorized {\\n        // Owner address cannot be null, the sentinel or the Safe itself.\\n        require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this), \\\"GS203\\\");\\n        // No duplicate owners allowed.\\n        require(owners[owner] == address(0), \\\"GS204\\\");\\n        owners[owner] = owners[SENTINEL_OWNERS];\\n        owners[SENTINEL_OWNERS] = owner;\\n        ownerCount++;\\n        emit AddedOwner(owner);\\n        // Change threshold if threshold was changed.\\n        if (threshold != _threshold) changeThreshold(_threshold);\\n    }\\n\\n    /**\\n     * @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be removed in the linked list\\n     * @param owner Owner address to be removed.\\n     * @param _threshold New threshold.\\n     */\\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) public authorized {\\n        // Only allow to remove an owner, if threshold can still be reached.\\n        require(ownerCount - 1 >= _threshold, \\\"GS201\\\");\\n        // Validate owner address and check that it corresponds to owner index.\\n        require(owner != address(0) && owner != SENTINEL_OWNERS, \\\"GS203\\\");\\n        require(owners[prevOwner] == owner, \\\"GS205\\\");\\n        owners[prevOwner] = owners[owner];\\n        owners[owner] = address(0);\\n        ownerCount--;\\n        emit RemovedOwner(owner);\\n        // Change threshold if threshold was changed.\\n        if (threshold != _threshold) changeThreshold(_threshold);\\n    }\\n\\n    /**\\n     * @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list\\n     * @param oldOwner Owner address to be replaced.\\n     * @param newOwner New owner address.\\n     */\\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) public authorized {\\n        // Owner address cannot be null, the sentinel or the Safe itself.\\n        require(newOwner != address(0) && newOwner != SENTINEL_OWNERS && newOwner != address(this), \\\"GS203\\\");\\n        // No duplicate owners allowed.\\n        require(owners[newOwner] == address(0), \\\"GS204\\\");\\n        // Validate oldOwner address and check that it corresponds to owner index.\\n        require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, \\\"GS203\\\");\\n        require(owners[prevOwner] == oldOwner, \\\"GS205\\\");\\n        owners[newOwner] = owners[oldOwner];\\n        owners[prevOwner] = newOwner;\\n        owners[oldOwner] = address(0);\\n        emit RemovedOwner(oldOwner);\\n        emit AddedOwner(newOwner);\\n    }\\n\\n    /**\\n     * @notice Changes the threshold of the Safe to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param _threshold New threshold.\\n     */\\n    function changeThreshold(uint256 _threshold) public authorized {\\n        // Validate that threshold is smaller than number of owners.\\n        require(_threshold <= ownerCount, \\\"GS201\\\");\\n        // There has to be at least one Safe owner.\\n        require(_threshold >= 1, \\\"GS202\\\");\\n        threshold = _threshold;\\n        emit ChangedThreshold(threshold);\\n    }\\n\\n    /**\\n     * @notice Returns the number of required confirmations for a Safe transaction aka the threshold.\\n     * @return Threshold number.\\n     */\\n    function getThreshold() public view returns (uint256) {\\n        return threshold;\\n    }\\n\\n    /**\\n     * @notice Returns if `owner` is an owner of the Safe.\\n     * @return Boolean if owner is an owner of the Safe.\\n     */\\n    function isOwner(address owner) public view returns (bool) {\\n        return owner != SENTINEL_OWNERS && owners[owner] != address(0);\\n    }\\n\\n    /**\\n     * @notice Returns a list of Safe owners.\\n     * @return Array of Safe owners.\\n     */\\n    function getOwners() public view returns (address[] memory) {\\n        address[] memory array = new address[](ownerCount);\\n\\n        // populate return array\\n        uint256 index = 0;\\n        address currentOwner = owners[SENTINEL_OWNERS];\\n        while (currentOwner != SENTINEL_OWNERS) {\\n            array[index] = currentOwner;\\n            currentOwner = owners[currentOwner];\\n            index++;\\n        }\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xec9799093eb7a73461cd5e563198751ee222f956f754ea622a03fe953e515b2c\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe contracts.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x4ff3008926a118e9f36e6747facc39dd13168e0d00f516888ae966ec20766453\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/NativeCurrencyPaymentFallback.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title NativeCurrencyPaymentFallback - A contract that has a fallback to accept native currency payments.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract NativeCurrencyPaymentFallback {\\n    event SafeReceived(address indexed sender, uint256 value);\\n\\n    /**\\n     * @notice Receive function accepts native currency transactions.\\n     * @dev Emits an event with sender and received value.\\n     */\\n    receive() external payable {\\n        emit SafeReceived(msg.sender, msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0x3ddcd4130c67326033dcf773d2d87d7147e3a8386993ea3ab3f1c38da406adba\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/SecuredTokenTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SecuredTokenTransfer - Secure token transfer.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SecuredTokenTransfer {\\n    /**\\n     * @notice Transfers a token and returns a boolean if it was a success\\n     * @dev It checks the return data of the transfer call and returns true if the transfer was successful.\\n     *      It doesn't check if the `token` address is a contract or not.\\n     * @param token Token that should be transferred\\n     * @param receiver Receiver to whom the token should be transferred\\n     * @param amount The amount of tokens that should be transferred\\n     * @return transferred Returns true if the transfer was successful\\n     */\\n    function transferToken(address token, address receiver, uint256 amount) internal returns (bool transferred) {\\n        // 0xa9059cbb - keccack(\\\"transfer(address,uint256)\\\")\\n        bytes memory data = abi.encodeWithSelector(0xa9059cbb, receiver, amount);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // We write the return value to scratch space.\\n            // See https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory\\n            let success := call(sub(gas(), 10000), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            switch returndatasize()\\n            case 0 {\\n                transferred := success\\n            }\\n            case 0x20 {\\n                transferred := iszero(or(iszero(success), iszero(mload(0))))\\n            }\\n            default {\\n                transferred := 0\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1eb8c3601538b73dd6a823ac4fca49bb8adc97d1302a936622156636c971eb05\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/SelfAuthorized.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SelfAuthorized {\\n    function requireSelfCall() private view {\\n        require(msg.sender == address(this), \\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfb0e176bb208e047a234fe757e2acd13787e27879570b8544547ac787feb5f13\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/SignatureDecoder.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SignatureDecoder - Decodes signatures encoded as bytes\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SignatureDecoder {\\n    /**\\n     * @notice Splits signature bytes into `uint8 v, bytes32 r, bytes32 s`.\\n     * @dev Make sure to perform a bounds check for @param pos, to avoid out of bounds access on @param signatures\\n     *      The signature format is a compact form of {bytes32 r}{bytes32 s}{uint8 v}\\n     *      Compact means uint8 is not padded to 32 bytes.\\n     * @param pos Which signature to read.\\n     *            A prior bounds check of this parameter should be performed, to avoid out of bounds access.\\n     * @param signatures Concatenated {r, s, v} signatures.\\n     * @return v Recovery ID or Safe signature type.\\n     * @return r Output value r of the signature.\\n     * @return s Output value s of the signature.\\n     */\\n    function signatureSplit(bytes memory signatures, uint256 pos) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let signaturePos := mul(0x41, pos)\\n            r := mload(add(signatures, add(signaturePos, 0x20)))\\n            s := mload(add(signatures, add(signaturePos, 0x40)))\\n            /**\\n             * Here we are loading the last 32 bytes, including 31 bytes\\n             * of 's'. There is no 'mload8' to do this.\\n             * 'byte' is not working due to the Solidity parser, so lets\\n             * use the second best option, 'and'\\n             */\\n            v := and(mload(add(signatures, add(signaturePos, 0x41))), 0xff)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a3baf0efa1585ddf2276505c6d34fa16f01cafff1288e40110d5e67fb459c7c\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/Singleton.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Singleton - Base for singleton contracts (should always be the first super contract)\\n *        This contract is tightly coupled to our proxy contract (see `proxies/SafeProxy.sol`)\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Singleton {\\n    // singleton always has to be the first declared variable to ensure the same location as in the Proxy contract.\\n    // It should also always be ensured the address is stored alone (uses a full word)\\n    address private singleton;\\n}\\n\",\"keccak256\":\"0xcab7c6e5fb6d7295a9343f72fec26a2f632ddfe220a6f267b5c5a1eb2f9bce50\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/common/StorageAccessible.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title StorageAccessible - A generic base contract that allows callers to access all internal storage.\\n * @notice See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\\n *         It removes a method from the original contract not needed for the Safe contracts.\\n * @author Gnosis Developers\\n */\\nabstract contract StorageAccessible {\\n    /**\\n     * @notice Reads `length` bytes of storage in the currents contract\\n     * @param offset - the offset in the current contract's storage in words to start reading from\\n     * @param length - the number of words (32 bytes) of data to read\\n     * @return the bytes that were read.\\n     */\\n    function getStorageAt(uint256 offset, uint256 length) public view returns (bytes memory) {\\n        bytes memory result = new bytes(length * 32);\\n        for (uint256 index = 0; index < length; index++) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let word := sload(add(offset, index))\\n                mstore(add(add(result, 0x20), mul(index, 0x20)), word)\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Performs a delegatecall on a targetContract in the context of self.\\n     * Internally reverts execution to avoid side effects (making it static).\\n     *\\n     * This method reverts with data equal to `abi.encode(bool(success), bytes(response))`.\\n     * Specifically, the `returndata` after a call to this method will be:\\n     * `success:bool || response.length:uint256 || response:bytes`.\\n     *\\n     * @param targetContract Address of the contract containing the code to execute.\\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\\n     */\\n    function simulateAndRevert(address targetContract, bytes memory calldataPayload) external {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let success := delegatecall(gas(), targetContract, add(calldataPayload, 0x20), mload(calldataPayload), 0, 0)\\n\\n            mstore(0x00, success)\\n            mstore(0x20, returndatasize())\\n            returndatacopy(0x40, 0, returndatasize())\\n            revert(0, add(returndatasize(), 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2c5412a8f014db332322a6b24ee3cedce15dca17a721ae49fdef368568d4391e\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/external/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SafeMath\\n * @notice Math operations with safety checks that revert on error (overflow/underflow)\\n */\\nlibrary SafeMath {\\n    /**\\n     * @notice Multiplies two numbers, reverts on overflow.\\n     * @param a First number\\n     * @param b Second number\\n     * @return Product of a and b\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n     * @param a First number\\n     * @param b Second number\\n     * @return Difference of a and b\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Adds two numbers, reverts on overflow.\\n     * @param a First number\\n     * @param b Second number\\n     * @return Sum of a and b\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Returns the largest of two numbers.\\n     * @param a First number\\n     * @param b Second number\\n     * @return Largest of a and b\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x5f856674d9be11344c5899deb43364e19baa75bc881cada4c159938270b2bd89\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/handler/CompatibilityFallbackHandler.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./TokenCallbackHandler.sol\\\";\\nimport \\\"../interfaces/ISignatureValidator.sol\\\";\\nimport \\\"../Safe.sol\\\";\\n\\n/**\\n * @title Compatibility Fallback Handler - Provides compatibility between pre 1.3.0 and 1.3.0+ Safe contracts.\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract CompatibilityFallbackHandler is TokenCallbackHandler, ISignatureValidator {\\n    // keccak256(\\\"SafeMessage(bytes message)\\\");\\n    bytes32 private constant SAFE_MSG_TYPEHASH = 0x60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca;\\n\\n    bytes4 internal constant SIMULATE_SELECTOR = bytes4(keccak256(\\\"simulate(address,bytes)\\\"));\\n\\n    address internal constant SENTINEL_MODULES = address(0x1);\\n    bytes4 internal constant UPDATED_MAGIC_VALUE = 0x1626ba7e;\\n\\n    /**\\n     * @notice Legacy EIP-1271 signature validation method.\\n     * @dev Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)\\n     * @param _data Arbitrary length data signed on the behalf of address(msg.sender).\\n     * @param _signature Signature byte array associated with _data.\\n     * @return The EIP-1271 magic value.\\n     */\\n    function isValidSignature(bytes memory _data, bytes memory _signature) public view override returns (bytes4) {\\n        // Caller should be a Safe\\n        Safe safe = Safe(payable(msg.sender));\\n        bytes memory messageData = encodeMessageDataForSafe(safe, _data);\\n        bytes32 messageHash = keccak256(messageData);\\n        if (_signature.length == 0) {\\n            require(safe.signedMessages(messageHash) != 0, \\\"Hash not approved\\\");\\n        } else {\\n            safe.checkSignatures(messageHash, messageData, _signature);\\n        }\\n        return EIP1271_MAGIC_VALUE;\\n    }\\n\\n    /**\\n     * @dev Returns the hash of a message to be signed by owners.\\n     * @param message Raw message bytes.\\n     * @return Message hash.\\n     */\\n    function getMessageHash(bytes memory message) public view returns (bytes32) {\\n        return getMessageHashForSafe(Safe(payable(msg.sender)), message);\\n    }\\n\\n    /**\\n     * @dev Returns the pre-image of the message hash (see getMessageHashForSafe).\\n     * @param safe Safe to which the message is targeted.\\n     * @param message Message that should be encoded.\\n     * @return Encoded message.\\n     */\\n    function encodeMessageDataForSafe(Safe safe, bytes memory message) public view returns (bytes memory) {\\n        bytes32 safeMessageHash = keccak256(abi.encode(SAFE_MSG_TYPEHASH, keccak256(message)));\\n        return abi.encodePacked(bytes1(0x19), bytes1(0x01), safe.domainSeparator(), safeMessageHash);\\n    }\\n\\n    /**\\n     * @dev Returns hash of a message that can be signed by owners.\\n     * @param safe Safe to which the message is targeted.\\n     * @param message Message that should be hashed.\\n     * @return Message hash.\\n     */\\n    function getMessageHashForSafe(Safe safe, bytes memory message) public view returns (bytes32) {\\n        return keccak256(encodeMessageDataForSafe(safe, message));\\n    }\\n\\n    /**\\n     * @notice Implementation of updated EIP-1271 signature validation method.\\n     * @param _dataHash Hash of the data signed on the behalf of address(msg.sender)\\n     * @param _signature Signature byte array associated with _dataHash\\n     * @return Updated EIP1271 magic value if signature is valid, otherwise 0x0\\n     */\\n    function isValidSignature(bytes32 _dataHash, bytes calldata _signature) external view returns (bytes4) {\\n        ISignatureValidator validator = ISignatureValidator(msg.sender);\\n        bytes4 value = validator.isValidSignature(abi.encode(_dataHash), _signature);\\n        return (value == EIP1271_MAGIC_VALUE) ? UPDATED_MAGIC_VALUE : bytes4(0);\\n    }\\n\\n    /**\\n     * @dev Returns array of first 10 modules.\\n     * @return Array of modules.\\n     */\\n    function getModules() external view returns (address[] memory) {\\n        // Caller should be a Safe\\n        Safe safe = Safe(payable(msg.sender));\\n        (address[] memory array, ) = safe.getModulesPaginated(SENTINEL_MODULES, 10);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Performs a delegatecall on a targetContract in the context of self.\\n     * Internally reverts execution to avoid side effects (making it static). Catches revert and returns encoded result as bytes.\\n     * @dev Inspired by https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\\n     * @param targetContract Address of the contract containing the code to execute.\\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\\n     */\\n    function simulate(address targetContract, bytes calldata calldataPayload) external returns (bytes memory response) {\\n        /**\\n         * Suppress compiler warnings about not using parameters, while allowing\\n         * parameters to keep names for documentation purposes. This does not\\n         * generate code.\\n         */\\n        targetContract;\\n        calldataPayload;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let internalCalldata := mload(0x40)\\n            /**\\n             * Store `simulateAndRevert.selector`.\\n             * String representation is used to force right padding\\n             */\\n            mstore(internalCalldata, \\\"\\\\xb4\\\\xfa\\\\xba\\\\x09\\\")\\n            /**\\n             * Abuse the fact that both this and the internal methods have the\\n             * same signature, and differ only in symbol name (and therefore,\\n             * selector) and copy calldata directly. This saves us approximately\\n             * 250 bytes of code and 300 gas at runtime over the\\n             * `abi.encodeWithSelector` builtin.\\n             */\\n            calldatacopy(add(internalCalldata, 0x04), 0x04, sub(calldatasize(), 0x04))\\n\\n            /**\\n             * `pop` is required here by the compiler, as top level expressions\\n             * can't have return values in inline assembly. `call` typically\\n             * returns a 0 or 1 value indicated whether or not it reverted, but\\n             * since we know it will always revert, we can safely ignore it.\\n             */\\n            pop(\\n                call(\\n                    gas(),\\n                    // address() has been changed to caller() to use the implementation of the Safe\\n                    caller(),\\n                    0,\\n                    internalCalldata,\\n                    calldatasize(),\\n                    /**\\n                     * The `simulateAndRevert` call always reverts, and\\n                     * instead encodes whether or not it was successful in the return\\n                     * data. The first 32-byte word of the return data contains the\\n                     * `success` value, so write it to memory address 0x00 (which is\\n                     * reserved Solidity scratch space and OK to use).\\n                     */\\n                    0x00,\\n                    0x20\\n                )\\n            )\\n\\n            /**\\n             * Allocate and copy the response bytes, making sure to increment\\n             * the free memory pointer accordingly (in case this method is\\n             * called as an internal function). The remaining `returndata[0x20:]`\\n             * contains the ABI encoded response bytes, so we can just write it\\n             * as is to memory.\\n             */\\n            let responseSize := sub(returndatasize(), 0x20)\\n            response := mload(0x40)\\n            mstore(0x40, add(response, responseSize))\\n            returndatacopy(response, 0x20, responseSize)\\n\\n            if iszero(mload(0x00)) {\\n                revert(add(response, 0x20), mload(response))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3eee5c142041e92895d45f8e9acb9ac2203b0ac39418e8d2971e78bf0775bcf7\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/handler/HandlerContext.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Handler Context - Allows the fallback handler to extract addition context from the calldata\\n * @dev The fallback manager appends the following context to the calldata:\\n *      1. Fallback manager caller address (non-padded)\\n * based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/f8cc8b844a9f92f63dc55aa581f7d643a1bc5ac1/contracts/metatx/ERC2771Context.sol\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract HandlerContext {\\n    /**\\n     * @notice Allows fetching the original caller address.\\n     * @dev This is only reliable in combination with a FallbackManager that supports this (e.g. Safe contract >=1.3.0).\\n     *      When using this functionality make sure that the linked _manager (aka msg.sender) supports this.\\n     *      This function does not rely on a trusted forwarder. Use the returned value only to\\n     *      check information against the calling manager.\\n     * @return sender Original caller address.\\n     */\\n    function _msgSender() internal pure returns (address sender) {\\n        // The assembly code is more direct than the Solidity version using `abi.decode`.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the FallbackManager address\\n     * @return Fallback manager address\\n     */\\n    function _manager() internal view returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\",\"keccak256\":\"0xce6da4c47f8691a4fcf07d20266b1a23ea757e49eedbfcf929f535f3f6e8072d\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/handler/TokenCallbackHandler.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../interfaces/ERC1155TokenReceiver.sol\\\";\\nimport \\\"../interfaces/ERC721TokenReceiver.sol\\\";\\nimport \\\"../interfaces/ERC777TokensRecipient.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @title Default Callback Handler - Handles supported tokens' callbacks, allowing Safes receiving these tokens.\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract TokenCallbackHandler is ERC1155TokenReceiver, ERC777TokensRecipient, ERC721TokenReceiver, IERC165 {\\n    /**\\n     * @notice Handles ERC1155 Token callback.\\n     * return Standardized onERC1155Received return value.\\n     */\\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external pure override returns (bytes4) {\\n        return 0xf23a6e61;\\n    }\\n\\n    /**\\n     * @notice Handles ERC1155 Token batch callback.\\n     * return Standardized onERC1155BatchReceived return value.\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return 0xbc197c81;\\n    }\\n\\n    /**\\n     * @notice Handles ERC721 Token callback.\\n     *  return Standardized onERC721Received return value.\\n     */\\n    function onERC721Received(address, address, uint256, bytes calldata) external pure override returns (bytes4) {\\n        return 0x150b7a02;\\n    }\\n\\n    /**\\n     * @notice Handles ERC777 Token callback.\\n     * return nothing (not standardized)\\n     */\\n    function tokensReceived(address, address, address, uint256, bytes calldata, bytes calldata) external pure override {\\n        // We implement this for completeness, doesn't really have any value\\n    }\\n\\n    /**\\n     * @notice Implements ERC165 interface support for ERC1155TokenReceiver, ERC721TokenReceiver and IERC165.\\n     * @param interfaceId Id of the interface.\\n     * @return if the interface is supported.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(ERC1155TokenReceiver).interfaceId ||\\n            interfaceId == type(ERC721TokenReceiver).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xc8fb9e60f5e561c7e4992a396e928344c278c2fbec8af65aebec44281542e7cb\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/interfaces/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n// Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface ERC1155TokenReceiver {\\n    /**\\n     * @notice Handle the receipt of a single ERC1155 token type.\\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\\n     *      This function MUST return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\\n     *      This function MUST revert if it rejects the transfer.\\n     *      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n     * @param _operator  The address which initiated the transfer (i.e. msg.sender).\\n     * @param _from      The address which previously owned the token.\\n     * @param _id        The ID of the token being transferred.\\n     * @param _value     The amount of tokens being transferred.\\n     * @param _data      Additional data with no specified format.\\n     * @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`.\\n     */\\n    function onERC1155Received(\\n        address _operator,\\n        address _from,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Handle the receipt of multiple ERC1155 token types.\\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\\n     *      This function MUST return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\\n     *      This function MUST revert if it rejects the transfer(s).\\n     *      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n     * @param _operator  The address which initiated the batch transfer (i.e. msg.sender).\\n     * @param _from      The address which previously owned the token.\\n     * @param _ids       An array containing ids of each token being transferred (order and length must match _values array).\\n     * @param _values    An array containing amounts of each token being transferred (order and length must match _ids array).\\n     * @param _data      Additional data with no specified format.\\n     * @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`.\\n     */\\n    function onERC1155BatchReceived(\\n        address _operator,\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x87e62665c041cade64e753ecdccf931cb100ab6e4bcc98769c1e6474be9db493\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/interfaces/ERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\\ninterface ERC721TokenReceiver {\\n    /**\\n     * @notice Handle the receipt of an NFT\\n     * @dev The ERC721 smart contract calls this function on the recipient\\n     *  after a `transfer`. This function MAY throw to revert and reject the\\n     *  transfer. Return of other than the magic value MUST result in the\\n     *  transaction being reverted.\\n     *  Note: the contract address is always the message sender.\\n     * @param _operator The address which called `safeTransferFrom` function.\\n     * @param _from The address which previously owned the token.\\n     * @param _tokenId The NFT identifier which is being transferred.\\n     * @param _data Additional data with no specified format.\\n     * @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n     *  unless throwing\\n     */\\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96c4c5457fede2d4c6012011dfda36f8e8ffdb7388468f2dddb35661538bf479\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/interfaces/ERC777TokensRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title ERC777TokensRecipient\\n * @dev Interface for contracts that will be called with the ERC777 token's `tokensReceived` method.\\n * The contract receiving the tokens must implement this interface in order to receive the tokens.\\n */\\ninterface ERC777TokensRecipient {\\n    /**\\n     * @dev Called by the ERC777 token contract after a successful transfer or a minting operation.\\n     * @param operator The address of the operator performing the transfer or minting operation.\\n     * @param from The address of the sender.\\n     * @param to The address of the recipient.\\n     * @param amount The amount of tokens that were transferred or minted.\\n     * @param data Additional data that was passed during the transfer or minting operation.\\n     * @param operatorData Additional data that was passed by the operator during the transfer or minting operation.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x32ca7f1610659f35e52f5a989e1d844b7847ad57fab06e0cae5bc027248536ac\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n     * See the corresponding EIP section\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-contracts/contracts/interfaces/ISignatureValidator.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract ISignatureValidatorConstants {\\n    // bytes4(keccak256(\\\"isValidSignature(bytes,bytes)\\\")\\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x20c13b0b;\\n}\\n\\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\\n    /**\\n     * @notice Legacy EIP1271 method to validate a signature.\\n     * @param _data Arbitrary length data signed on the behalf of address(this).\\n     * @param _signature Signature byte array associated with _data.\\n     *\\n     * MUST return the bytes4 magic value 0x20c13b0b when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(bytes memory _data, bytes memory _signature) public view virtual returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2459cb3ed73ecb80e1e7a6508d09a58cc59570b049f77042f669dedfcc5f6457\",\"license\":\"LGPL-3.0-only\"},\"contracts/OmnaccountModule.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.23;\\n\\nimport {BaseModule} from \\\"./safe/BaseModule.sol\\\";\\nimport {AcrossHookReceiver} from \\\"./bridge/AcrossHookReceiver.sol\\\";\\nimport {CCIPHookReceiver} from \\\"./bridge/CCIPHookReceiver.sol\\\";\\nimport {OmnaccountErrors as Errors} from \\\"./interfaces/Errors.sol\\\";\\nimport {HandlerContext} from \\\"@safe-global/safe-contracts/contracts/handler/HandlerContext.sol\\\";\\nimport {CompatibilityFallbackHandler} from \\\"@safe-global/safe-contracts/contracts/handler/CompatibilityFallbackHandler.sol\\\";\\nimport {IAccount} from \\\"@account-abstraction/contracts/interfaces/IAccount.sol\\\";\\nimport {UserOperation} from \\\"@account-abstraction/contracts/interfaces/UserOperation.sol\\\";\\nimport {_packValidationData} from \\\"@account-abstraction/contracts/core/Helpers.sol\\\";\\n\\n\\n/**\\n * @title OmnaccountModule\\n * @author KDon.eth\\n * @notice ERC-4337 abstract account module enabling cross-chain userOp execution powered by Across V3 Bridge and Safe\\n */\\ncontract OmnaccountModule \\n//is\\n    // BaseModule,\\n    // CompatibilityFallbackHandler,\\n    // Errors,\\n    // AcrossHookReceiver\\n    //, CCIPHookReceiver // TODO: Enable CCIP\\n{\\n    constructor(\\n        address entrypoint,\\n        address spokePool\\n    ) \\n    // BaseModule(entrypoint) AcrossHookReceiver(spokePool) \\n    {\\n        // no-op\\n    }\\n}\\n\",\"keccak256\":\"0x5d5592e2c52bcc66982d2c65cf5a55eea9da9e0578eb84f050a88c19a0926cf7\",\"license\":\"UNLICENSED\"},\"contracts/bridge/AcrossHookReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {BridgeReceiver} from \\\"./BridgeReceiver.sol\\\";\\nimport {IAcrossMessageHandler} from \\\"../interfaces/IAcrossMessageHandler.sol\\\";\\nimport {HandlerContext} from \\\"@safe-global/safe-contracts/contracts/handler/HandlerContext.sol\\\";\\nimport {OmnaccountErrors as Errors} from \\\"../interfaces/Errors.sol\\\";\\n\\n/**\\n * @title AcrossHookReceiver\\n * @author KDon.eth\\n * @notice Parses inbound Across (bridge) transfers and authenticates messages.\\n * @dev This contract is expected to be inherited by any contract that handle executing arbitrary message logic\\n */\\nabstract contract AcrossHookReceiver is BridgeReceiver, IAcrossMessageHandler, HandlerContext {\\n\\n    address public immutable ACROSS_BRIDGE;\\n\\n    constructor(address bridge) {\\n        if (bridge == address(0x0)) revert Errors.InvalidBridge();\\n\\n        ACROSS_BRIDGE = bridge;\\n    }\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Across Message Handling\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    function handleAcrossMessage(\\n        address tokenSent,\\n        uint256 amount,\\n        bool fillCompleted,\\n        address relayer,\\n        bytes memory message\\n    ) external onlyBridge {\\n        _afterTokensBridged(tokenSent, amount, message);\\n    }\\n\\n    function handleV3AcrossMessage(\\n        address tokenSent,\\n        uint256 amount,\\n        address relayer,\\n        bytes memory message\\n    ) external onlyBridge {\\n        _afterTokensBridged(tokenSent, amount, message);\\n    }\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Internal Utilities\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    function _isBridge(address bridge) internal view returns (bool) {\\n        return bridge == ACROSS_BRIDGE;\\n    }\\n\\n    modifier onlyBridge() {\\n        if (!_isBridge(_msgSender())) revert Errors.InvalidBridge();\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x96c5a08a70e47f8ef0cfb205d5a2b0744f633132609681ee89e617cfa6a5e20a\",\"license\":\"UNLICENSED\"},\"contracts/bridge/BridgeReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title BridgeReceiver\\n * @author KDon.eth\\n * @notice General abstract contract for bridge receivers to implement to standardize internal hooks\\n */\\nabstract contract BridgeReceiver {\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Bridge Hook\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /**\\n     * @dev Internal hook called on implementing contracts to execute logic\\n     * @param token Address of tokens received\\n     * @param amount Number of tokens received\\n     * @param message Unauthenticated calldata to parse, validate then execute\\n     */\\n    function _afterTokensBridged(\\n        address token,\\n        uint256 amount,\\n        bytes memory message\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0xce0300d95cac232e61e164a6815a6d7724087633f04d4a6ac34f0dd3a94d09d0\",\"license\":\"UNLICENSED\"},\"contracts/bridge/CCIPHookReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {BridgeReceiver} from \\\"./BridgeReceiver.sol\\\";\\nimport {CCIPReceiver} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\\\";\\nimport {Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\n\\n/**\\n * @title CCIPHookReceiver\\n * @notice Standardized internal hooks for CCIP messages\\n * @dev This is demo of how CCIP could be handled and is not yet implemented\\n */\\nabstract contract CCIPHookReceiver is BridgeReceiver, CCIPReceiver {\\n\\n    constructor(address ccipRouter) CCIPReceiver(ccipRouter) {\\n    }\\n\\n    /*\\n    Client.Any2EVMMessage = {\\n        bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n        uint64 sourceChainSelector; // Source chain selector.\\n        bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n        bytes data; // payload sent in original message.\\n        EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n    }\\n    */\\n    function _ccipReceive(\\n        Client.Any2EVMMessage memory message\\n    ) internal override {\\n        address sender = abi.decode(message.sender, (address));\\n\\n        // QUESTION: How would we standardize bridge hooks when across sends one but CCIP send many tokens?...\\n        for (uint256 i = 0; i < message.destTokenAmounts.length; i++) {\\n            Client.EVMTokenAmount memory tokenAmount = message.destTokenAmounts[i];\\n            _afterTokensBridged(\\n                tokenAmount.token,\\n                tokenAmount.amount,\\n                message.data\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8692044e12ad02cd625b67b3e7cca851ae30c73012b0c004746884ba25e5bac2\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title OmnaccountErrors\\n * @author KDon.eth\\n * @notice Standard interface for Omnaccount error codes\\n */\\ninterface OmnaccountErrors {\\n\\n    /// @notice Reverted if attempting to execute userOp from invalid sender\\n    error InvalidEntryPoint();\\n\\n    /// @notice Reverted if address is not bridge\\n    error InvalidBridge();\\n\\n}\\n\",\"keccak256\":\"0xea67993b77254e03e68796040b455f18ea7d786624e2ba7a56d82afb447613fd\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IAcrossMessageHandler.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n\\n// This interface is expected to be implemented by any contract that expects to receive messages from the SpokePool.\\ninterface IAcrossMessageHandler {\\n    /// @custom:audit FOLLOWING FUNCTION TO BE DEPRECATED\\n    function handleAcrossMessage(\\n        address tokenSent,\\n        uint256 amount,\\n        bool fillCompleted,\\n        address relayer,\\n        bytes memory message\\n    ) external;\\n\\n    // New function interface to be used with V3 functions since fillCompleted no longer has any\\n    // meaning now that partial fills are impossible.\\n    function handleV3AcrossMessage(\\n        address tokenSent,\\n        uint256 amount,\\n        address relayer,\\n        bytes memory message\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb8e0bae72ad8a10dbd4f6e19f0d9562866322625844f145a5e764e0f83136983\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISafe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\ninterface ISafe {\\n    /**\\n     * @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     */\\n    function execTransactionFromModule(address to, uint256 value, bytes memory data, uint8 operation) external returns (bool success);\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     * @return returnData Data returned by the call.\\n     */\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        uint8 operation\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    /**\\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param data That should be signed (this is passed to an external validator contract)\\n     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory data, bytes memory signatures) external view;\\n\\n    /**\\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\\n     * @return bytes32 The domain separator hash.\\n     */\\n    function domainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns array of modules.\\n     * @param start Start of the page.\\n     * @param pageSize Maximum number of modules that should be returned.\\n     * @return array Array of modules.\\n     * @return next Start of the next page.\\n     */\\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next);\\n\\n    /**\\n     * @notice Enables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param module Module to be enabled.\\n     */\\n    function enableModule(address module) external;\\n}\",\"keccak256\":\"0x73f7021ec20a1c2c117b493ab14a5a81da0bf90de1c4a82e8647d7ce2889f273\",\"license\":\"UNLICENSED\"},\"contracts/safe/AccountEntry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {HandlerContext} from \\\"@safe-global/safe-contracts/contracts/handler/HandlerContext.sol\\\";\\nimport {OmnaccountErrors as Errors} from \\\"../interfaces/Errors.sol\\\";\\n\\nabstract contract AccountEntry is HandlerContext {\\n    /**\\n     * @notice The address of the EntryPoint contract supported by this module.\\n     */\\n    address public immutable SUPPORTED_ENTRYPOINT;\\n\\n    constructor(address entryPoint) {\\n        if (entryPoint == address(0x0)) revert Errors.InvalidEntryPoint();\\n\\n        SUPPORTED_ENTRYPOINT = entryPoint;\\n    }\\n\\n    /// @notice Checks if a given address is a valid entry point for the abstract account.\\n    function _isSupportedEntryPoint(address entryPoint) internal virtual view returns (bool) {\\n        return entryPoint == SUPPORTED_ENTRYPOINT;\\n    }\\n\\n    /**\\n     * @notice Validates the call is initiated by a valid entry point.\\n     */\\n    modifier onlySupportedEntryPoint() {\\n        if (!_isSupportedEntryPoint(_msgSender())) revert Errors.InvalidEntryPoint();\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xbec48468f165e08a3fa5d787e9b8f60f9b3f094eb760cc33f7b2feb47235bd39\",\"license\":\"UNLICENSED\"},\"contracts/safe/BaseModule.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {IAccount} from \\\"@account-abstraction/contracts/interfaces/IAccount.sol\\\";\\nimport {BridgeReceiver} from \\\"../bridge/BridgeReceiver.sol\\\";\\nimport {OmnaccountErrors as Errors} from \\\"../interfaces/Errors.sol\\\";\\nimport {AccountEntry} from \\\"./AccountEntry.sol\\\";\\nimport {ISafe} from \\\"../interfaces/ISafe.sol\\\";\\nimport {UserOperation} from \\\"@account-abstraction/contracts/interfaces/UserOperation.sol\\\";\\nimport {_packValidationData} from \\\"@account-abstraction/contracts/core/Helpers.sol\\\";\\n\\n\\nabstract contract BaseModule is IAccount, BridgeReceiver, AccountEntry {\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Structs\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    struct BridgeFallback {\\n        address target;\\n        bytes4 selector;\\n        bytes data;\\n        uint96 addressIndex;\\n        uint96 amountIndex;\\n    }\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Events\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    event TokensBridged(address indexed token, uint256 amount);\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Fields\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /// @notice Maps token address to default fallback behavior\\n    mapping(address token => BridgeFallback fallbackData) public bridgeFallbacks;\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Constructor\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    constructor(address entryPoint) AccountEntry(entryPoint) {\\n        // no-op\\n    }\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Bridge Receiver Implementation\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    function _afterTokensBridged(\\n        address token,\\n        uint256 amount,\\n        bytes memory message\\n    ) internal override virtual {\\n        // 1. Validate the message\\n\\n        // 2. Execute the message's calldata\\n\\n        emit TokensBridged(token, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x7297f5cf160e4682ea9e1f3691d20a2600b2be5ccd7c940751dd95e00c63956c\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"ERC-4337 abstract account module enabling cross-chain userOp execution powered by Across V3 Bridge and Safe","version":1}}},"contracts/bridge/AcrossHookReceiver.sol":{"AcrossHookReceiver":{"abi":[{"inputs":[],"name":"InvalidBridge","type":"error"},{"inputs":[],"name":"ACROSS_BRIDGE","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenSent","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"fillCompleted","type":"bool"},{"internalType":"address","name":"relayer","type":"address"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"handleAcrossMessage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenSent","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"relayer","type":"address"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"handleV3AcrossMessage","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"KDon.eth","details":"This contract is expected to be inherited by any contract that handle executing arbitrary message logic","kind":"dev","methods":{},"title":"AcrossHookReceiver","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"ACROSS_BRIDGE()":"2f3ab804","handleAcrossMessage(address,uint256,bool,address,bytes)":"0ea1f938","handleV3AcrossMessage(address,uint256,address,bytes)":"3a5be8cb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidBridge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACROSS_BRIDGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fillCompleted\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"handleAcrossMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"handleV3AcrossMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"KDon.eth\",\"details\":\"This contract is expected to be inherited by any contract that handle executing arbitrary message logic\",\"kind\":\"dev\",\"methods\":{},\"title\":\"AcrossHookReceiver\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidBridge()\":[{\"notice\":\"Reverted if address is not bridge\"}]},\"kind\":\"user\",\"methods\":{},\"notice\":\"Parses inbound Across (bridge) transfers and authenticates messages.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/AcrossHookReceiver.sol\":\"AcrossHookReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/handler/HandlerContext.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Handler Context - Allows the fallback handler to extract addition context from the calldata\\n * @dev The fallback manager appends the following context to the calldata:\\n *      1. Fallback manager caller address (non-padded)\\n * based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/f8cc8b844a9f92f63dc55aa581f7d643a1bc5ac1/contracts/metatx/ERC2771Context.sol\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract HandlerContext {\\n    /**\\n     * @notice Allows fetching the original caller address.\\n     * @dev This is only reliable in combination with a FallbackManager that supports this (e.g. Safe contract >=1.3.0).\\n     *      When using this functionality make sure that the linked _manager (aka msg.sender) supports this.\\n     *      This function does not rely on a trusted forwarder. Use the returned value only to\\n     *      check information against the calling manager.\\n     * @return sender Original caller address.\\n     */\\n    function _msgSender() internal pure returns (address sender) {\\n        // The assembly code is more direct than the Solidity version using `abi.decode`.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the FallbackManager address\\n     * @return Fallback manager address\\n     */\\n    function _manager() internal view returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\",\"keccak256\":\"0xce6da4c47f8691a4fcf07d20266b1a23ea757e49eedbfcf929f535f3f6e8072d\",\"license\":\"LGPL-3.0-only\"},\"contracts/bridge/AcrossHookReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {BridgeReceiver} from \\\"./BridgeReceiver.sol\\\";\\nimport {IAcrossMessageHandler} from \\\"../interfaces/IAcrossMessageHandler.sol\\\";\\nimport {HandlerContext} from \\\"@safe-global/safe-contracts/contracts/handler/HandlerContext.sol\\\";\\nimport {OmnaccountErrors as Errors} from \\\"../interfaces/Errors.sol\\\";\\n\\n/**\\n * @title AcrossHookReceiver\\n * @author KDon.eth\\n * @notice Parses inbound Across (bridge) transfers and authenticates messages.\\n * @dev This contract is expected to be inherited by any contract that handle executing arbitrary message logic\\n */\\nabstract contract AcrossHookReceiver is BridgeReceiver, IAcrossMessageHandler, HandlerContext {\\n\\n    address public immutable ACROSS_BRIDGE;\\n\\n    constructor(address bridge) {\\n        if (bridge == address(0x0)) revert Errors.InvalidBridge();\\n\\n        ACROSS_BRIDGE = bridge;\\n    }\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Across Message Handling\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    function handleAcrossMessage(\\n        address tokenSent,\\n        uint256 amount,\\n        bool fillCompleted,\\n        address relayer,\\n        bytes memory message\\n    ) external onlyBridge {\\n        _afterTokensBridged(tokenSent, amount, message);\\n    }\\n\\n    function handleV3AcrossMessage(\\n        address tokenSent,\\n        uint256 amount,\\n        address relayer,\\n        bytes memory message\\n    ) external onlyBridge {\\n        _afterTokensBridged(tokenSent, amount, message);\\n    }\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Internal Utilities\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    function _isBridge(address bridge) internal view returns (bool) {\\n        return bridge == ACROSS_BRIDGE;\\n    }\\n\\n    modifier onlyBridge() {\\n        if (!_isBridge(_msgSender())) revert Errors.InvalidBridge();\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x96c5a08a70e47f8ef0cfb205d5a2b0744f633132609681ee89e617cfa6a5e20a\",\"license\":\"UNLICENSED\"},\"contracts/bridge/BridgeReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title BridgeReceiver\\n * @author KDon.eth\\n * @notice General abstract contract for bridge receivers to implement to standardize internal hooks\\n */\\nabstract contract BridgeReceiver {\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Bridge Hook\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /**\\n     * @dev Internal hook called on implementing contracts to execute logic\\n     * @param token Address of tokens received\\n     * @param amount Number of tokens received\\n     * @param message Unauthenticated calldata to parse, validate then execute\\n     */\\n    function _afterTokensBridged(\\n        address token,\\n        uint256 amount,\\n        bytes memory message\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0xce0300d95cac232e61e164a6815a6d7724087633f04d4a6ac34f0dd3a94d09d0\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title OmnaccountErrors\\n * @author KDon.eth\\n * @notice Standard interface for Omnaccount error codes\\n */\\ninterface OmnaccountErrors {\\n\\n    /// @notice Reverted if attempting to execute userOp from invalid sender\\n    error InvalidEntryPoint();\\n\\n    /// @notice Reverted if address is not bridge\\n    error InvalidBridge();\\n\\n}\\n\",\"keccak256\":\"0xea67993b77254e03e68796040b455f18ea7d786624e2ba7a56d82afb447613fd\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IAcrossMessageHandler.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n\\n// This interface is expected to be implemented by any contract that expects to receive messages from the SpokePool.\\ninterface IAcrossMessageHandler {\\n    /// @custom:audit FOLLOWING FUNCTION TO BE DEPRECATED\\n    function handleAcrossMessage(\\n        address tokenSent,\\n        uint256 amount,\\n        bool fillCompleted,\\n        address relayer,\\n        bytes memory message\\n    ) external;\\n\\n    // New function interface to be used with V3 functions since fillCompleted no longer has any\\n    // meaning now that partial fills are impossible.\\n    function handleV3AcrossMessage(\\n        address tokenSent,\\n        uint256 amount,\\n        address relayer,\\n        bytes memory message\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb8e0bae72ad8a10dbd4f6e19f0d9562866322625844f145a5e764e0f83136983\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"InvalidBridge()":[{"notice":"Reverted if address is not bridge"}]},"kind":"user","methods":{},"notice":"Parses inbound Across (bridge) transfers and authenticates messages.","version":1}}},"contracts/bridge/BridgeReceiver.sol":{"BridgeReceiver":{"abi":[],"devdoc":{"author":"KDon.eth","kind":"dev","methods":{},"title":"BridgeReceiver","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"KDon.eth\",\"kind\":\"dev\",\"methods\":{},\"title\":\"BridgeReceiver\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"General abstract contract for bridge receivers to implement to standardize internal hooks\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/BridgeReceiver.sol\":\"BridgeReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/bridge/BridgeReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title BridgeReceiver\\n * @author KDon.eth\\n * @notice General abstract contract for bridge receivers to implement to standardize internal hooks\\n */\\nabstract contract BridgeReceiver {\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Bridge Hook\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /**\\n     * @dev Internal hook called on implementing contracts to execute logic\\n     * @param token Address of tokens received\\n     * @param amount Number of tokens received\\n     * @param message Unauthenticated calldata to parse, validate then execute\\n     */\\n    function _afterTokensBridged(\\n        address token,\\n        uint256 amount,\\n        bytes memory message\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0xce0300d95cac232e61e164a6815a6d7724087633f04d4a6ac34f0dd3a94d09d0\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"General abstract contract for bridge receivers to implement to standardize internal hooks","version":1}}},"contracts/bridge/CCIPHookReceiver.sol":{"CCIPHookReceiver":{"abi":[{"inputs":[{"internalType":"address","name":"router","type":"address"}],"name":"InvalidRouter","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"messageId","type":"bytes32"},{"internalType":"uint64","name":"sourceChainSelector","type":"uint64"},{"internalType":"bytes","name":"sender","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct Client.EVMTokenAmount[]","name":"destTokenAmounts","type":"tuple[]"}],"internalType":"struct Client.Any2EVMMessage","name":"message","type":"tuple"}],"name":"ccipReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRouter","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"}],"devdoc":{"details":"This is demo of how CCIP could be handled and is not yet implemented","kind":"dev","methods":{"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))":{"details":"Note ensure you check the msg.sender is the OffRampRouter","params":{"message":"CCIP Message"}},"getRouter()":{"returns":{"_0":"i_router address"}},"supportsInterface(bytes4)":{"details":"Should indicate whether the contract implements IAny2EVMMessageReceiver e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId This allows CCIP to check if ccipReceive is available before calling it. If this returns false or reverts, only tokens are transferred to the receiver. If this returns true, tokens are transferred and ccipReceive is called atomically. Additionally, if the receiver address does not have code associated with it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.","params":{"interfaceId":"The interfaceId to check"},"returns":{"_0":"true if the interfaceId is supported"}}},"title":"CCIPHookReceiver","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))":"85572ffb","getRouter()":"b0f479a1","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"InvalidRouter\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Client.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"ccipReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is demo of how CCIP could be handled and is not yet implemented\",\"kind\":\"dev\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"details\":\"Note ensure you check the msg.sender is the OffRampRouter\",\"params\":{\"message\":\"CCIP Message\"}},\"getRouter()\":{\"returns\":{\"_0\":\"i_router address\"}},\"supportsInterface(bytes4)\":{\"details\":\"Should indicate whether the contract implements IAny2EVMMessageReceiver e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId This allows CCIP to check if ccipReceive is available before calling it. If this returns false or reverts, only tokens are transferred to the receiver. If this returns true, tokens are transferred and ccipReceive is called atomically. Additionally, if the receiver address does not have code associated with it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\",\"params\":{\"interfaceId\":\"The interfaceId to check\"},\"returns\":{\"_0\":\"true if the interfaceId is supported\"}}},\"title\":\"CCIPHookReceiver\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"notice\":\"Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution.\"},\"getRouter()\":{\"notice\":\"Return the current router\"},\"supportsInterface(bytes4)\":{\"notice\":\"IERC165 supports an interfaceId\"}},\"notice\":\"Standardized internal hooks for CCIP messages\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/CCIPHookReceiver.sol\":\"CCIPHookReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAny2EVMMessageReceiver} from \\\"../interfaces/IAny2EVMMessageReceiver.sol\\\";\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\nimport {IERC165} from \\\"../../vendor/openzeppelin-solidity/v4.8.0/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\\n  address internal immutable i_router;\\n\\n  constructor(address router) {\\n    if (router == address(0)) revert InvalidRouter(address(0));\\n    i_router = router;\\n  }\\n\\n  /// @notice IERC165 supports an interfaceId\\n  /// @param interfaceId The interfaceId to check\\n  /// @return true if the interfaceId is supported\\n  /// @dev Should indicate whether the contract implements IAny2EVMMessageReceiver\\n  /// e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId\\n  /// This allows CCIP to check if ccipReceive is available before calling it.\\n  /// If this returns false or reverts, only tokens are transferred to the receiver.\\n  /// If this returns true, tokens are transferred and ccipReceive is called atomically.\\n  /// Additionally, if the receiver address does not have code associated with\\n  /// it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\\n  function supportsInterface(bytes4 interfaceId) public pure virtual override returns (bool) {\\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  /// @inheritdoc IAny2EVMMessageReceiver\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\\n    _ccipReceive(message);\\n  }\\n\\n  /// @notice Override this function in your implementation.\\n  /// @param message Any2EVMMessage\\n  function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  // Plumbing\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Return the current router\\n  /// @return i_router address\\n  function getRouter() public view returns (address) {\\n    return address(i_router);\\n  }\\n\\n  error InvalidRouter(address router);\\n\\n  /// @dev only calls from the set router are accepted.\\n  modifier onlyRouter() {\\n    if (msg.sender != address(i_router)) revert InvalidRouter(msg.sender);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xd59dbf083bfad8fe95248cac59822ade0bc7d70e50ab05e366cb35a2b2ea99f6\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from\\n/// the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message.\\n  /// If this reverts, any token transfers also revert. The message\\n  /// will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\\n}\\n\",\"keccak256\":\"0xd2a05a4f58a453cbf8cfa6aa78f58cb8e42091b3a025f711a0aa51f584e16b48\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x8af3ac1085c87342373772fb1a0107c7b90258e6bfed318ab2a601a14477e679\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\",\"keccak256\":\"0xa36a31b4bb17fad88d023474893b3b895fa421650543b1ce5aefc78efbd43244\",\"license\":\"MIT\"},\"contracts/bridge/BridgeReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title BridgeReceiver\\n * @author KDon.eth\\n * @notice General abstract contract for bridge receivers to implement to standardize internal hooks\\n */\\nabstract contract BridgeReceiver {\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Bridge Hook\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /**\\n     * @dev Internal hook called on implementing contracts to execute logic\\n     * @param token Address of tokens received\\n     * @param amount Number of tokens received\\n     * @param message Unauthenticated calldata to parse, validate then execute\\n     */\\n    function _afterTokensBridged(\\n        address token,\\n        uint256 amount,\\n        bytes memory message\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0xce0300d95cac232e61e164a6815a6d7724087633f04d4a6ac34f0dd3a94d09d0\",\"license\":\"UNLICENSED\"},\"contracts/bridge/CCIPHookReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {BridgeReceiver} from \\\"./BridgeReceiver.sol\\\";\\nimport {CCIPReceiver} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\\\";\\nimport {Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\n\\n/**\\n * @title CCIPHookReceiver\\n * @notice Standardized internal hooks for CCIP messages\\n * @dev This is demo of how CCIP could be handled and is not yet implemented\\n */\\nabstract contract CCIPHookReceiver is BridgeReceiver, CCIPReceiver {\\n\\n    constructor(address ccipRouter) CCIPReceiver(ccipRouter) {\\n    }\\n\\n    /*\\n    Client.Any2EVMMessage = {\\n        bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n        uint64 sourceChainSelector; // Source chain selector.\\n        bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n        bytes data; // payload sent in original message.\\n        EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n    }\\n    */\\n    function _ccipReceive(\\n        Client.Any2EVMMessage memory message\\n    ) internal override {\\n        address sender = abi.decode(message.sender, (address));\\n\\n        // QUESTION: How would we standardize bridge hooks when across sends one but CCIP send many tokens?...\\n        for (uint256 i = 0; i < message.destTokenAmounts.length; i++) {\\n            Client.EVMTokenAmount memory tokenAmount = message.destTokenAmounts[i];\\n            _afterTokensBridged(\\n                tokenAmount.token,\\n                tokenAmount.amount,\\n                message.data\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8692044e12ad02cd625b67b3e7cca851ae30c73012b0c004746884ba25e5bac2\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))":{"notice":"Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution."},"getRouter()":{"notice":"Return the current router"},"supportsInterface(bytes4)":{"notice":"IERC165 supports an interfaceId"}},"notice":"Standardized internal hooks for CCIP messages","version":1}}},"contracts/interfaces/Errors.sol":{"OmnaccountErrors":{"abi":[{"inputs":[],"name":"InvalidBridge","type":"error"},{"inputs":[],"name":"InvalidEntryPoint","type":"error"}],"devdoc":{"author":"KDon.eth","kind":"dev","methods":{},"title":"OmnaccountErrors","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidBridge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEntryPoint\",\"type\":\"error\"}],\"devdoc\":{\"author\":\"KDon.eth\",\"kind\":\"dev\",\"methods\":{},\"title\":\"OmnaccountErrors\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidBridge()\":[{\"notice\":\"Reverted if address is not bridge\"}],\"InvalidEntryPoint()\":[{\"notice\":\"Reverted if attempting to execute userOp from invalid sender\"}]},\"kind\":\"user\",\"methods\":{},\"notice\":\"Standard interface for Omnaccount error codes\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/Errors.sol\":\"OmnaccountErrors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title OmnaccountErrors\\n * @author KDon.eth\\n * @notice Standard interface for Omnaccount error codes\\n */\\ninterface OmnaccountErrors {\\n\\n    /// @notice Reverted if attempting to execute userOp from invalid sender\\n    error InvalidEntryPoint();\\n\\n    /// @notice Reverted if address is not bridge\\n    error InvalidBridge();\\n\\n}\\n\",\"keccak256\":\"0xea67993b77254e03e68796040b455f18ea7d786624e2ba7a56d82afb447613fd\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"InvalidBridge()":[{"notice":"Reverted if address is not bridge"}],"InvalidEntryPoint()":[{"notice":"Reverted if attempting to execute userOp from invalid sender"}]},"kind":"user","methods":{},"notice":"Standard interface for Omnaccount error codes","version":1}}},"contracts/interfaces/IAcrossMessageHandler.sol":{"IAcrossMessageHandler":{"abi":[{"inputs":[{"internalType":"address","name":"tokenSent","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"fillCompleted","type":"bool"},{"internalType":"address","name":"relayer","type":"address"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"handleAcrossMessage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenSent","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"relayer","type":"address"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"handleV3AcrossMessage","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"handleAcrossMessage(address,uint256,bool,address,bytes)":{"custom:audit":"FOLLOWING FUNCTION TO BE DEPRECATED"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"handleAcrossMessage(address,uint256,bool,address,bytes)":"0ea1f938","handleV3AcrossMessage(address,uint256,address,bytes)":"3a5be8cb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fillCompleted\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"handleAcrossMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"handleV3AcrossMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"handleAcrossMessage(address,uint256,bool,address,bytes)\":{\"custom:audit\":\"FOLLOWING FUNCTION TO BE DEPRECATED\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IAcrossMessageHandler.sol\":\"IAcrossMessageHandler\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IAcrossMessageHandler.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n\\n// This interface is expected to be implemented by any contract that expects to receive messages from the SpokePool.\\ninterface IAcrossMessageHandler {\\n    /// @custom:audit FOLLOWING FUNCTION TO BE DEPRECATED\\n    function handleAcrossMessage(\\n        address tokenSent,\\n        uint256 amount,\\n        bool fillCompleted,\\n        address relayer,\\n        bytes memory message\\n    ) external;\\n\\n    // New function interface to be used with V3 functions since fillCompleted no longer has any\\n    // meaning now that partial fills are impossible.\\n    function handleV3AcrossMessage(\\n        address tokenSent,\\n        uint256 amount,\\n        address relayer,\\n        bytes memory message\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb8e0bae72ad8a10dbd4f6e19f0d9562866322625844f145a5e764e0f83136983\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/ISafe.sol":{"ISafe":{"abi":[{"inputs":[{"internalType":"bytes32","name":"dataHash","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signatures","type":"bytes"}],"name":"checkSignatures","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[],"name":"domainSeparator","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"module","type":"address"}],"name":"enableModule","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint8","name":"operation","type":"uint8"}],"name":"execTransactionFromModule","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint8","name":"operation","type":"uint8"}],"name":"execTransactionFromModuleReturnData","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"start","type":"address"},{"internalType":"uint256","name":"pageSize","type":"uint256"}],"name":"getModulesPaginated","outputs":[{"internalType":"address[]","name":"array","type":"address[]"},{"internalType":"address","name":"next","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"checkSignatures(bytes32,bytes,bytes)":{"details":"Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.","params":{"data":"That should be signed (this is passed to an external validator contract)","dataHash":"Hash of the data (could be either a message hash or transaction hash)","signatures":"Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash."}},"domainSeparator()":{"details":"Returns the domain separator for this contract, as defined in the EIP-712 standard.","returns":{"_0":"bytes32 The domain separator hash."}},"enableModule(address)":{"details":"This can only be done via a Safe transaction.","params":{"module":"Module to be enabled."}},"execTransactionFromModule(address,uint256,bytes,uint8)":{"details":"Allows a Module to execute a Safe transaction without any further confirmations.","params":{"data":"Data payload of module transaction.","operation":"Operation type of module transaction.","to":"Destination address of module transaction.","value":"Ether value of module transaction."}},"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":{"params":{"data":"Data payload of module transaction.","operation":"Operation type of module transaction.","to":"Destination address of module transaction.","value":"Ether value of module transaction."},"returns":{"returnData":"Data returned by the call.","success":"Boolean flag indicating if the call succeeded."}},"getModulesPaginated(address,uint256)":{"details":"Returns array of modules.","params":{"pageSize":"Maximum number of modules that should be returned.","start":"Start of the page."},"returns":{"array":"Array of modules.","next":"Start of the next page."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"checkSignatures(bytes32,bytes,bytes)":"934f3a11","domainSeparator()":"f698da25","enableModule(address)":"610b5925","execTransactionFromModule(address,uint256,bytes,uint8)":"468721a7","execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":"5229073f","getModulesPaginated(address,uint256)":"cc2f8452"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"checkSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"enableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromModuleReturnData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"start\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"getModulesPaginated\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"array\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkSignatures(bytes32,bytes,bytes)\":{\"details\":\"Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\",\"params\":{\"data\":\"That should be signed (this is passed to an external validator contract)\",\"dataHash\":\"Hash of the data (could be either a message hash or transaction hash)\",\"signatures\":\"Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\"}},\"domainSeparator()\":{\"details\":\"Returns the domain separator for this contract, as defined in the EIP-712 standard.\",\"returns\":{\"_0\":\"bytes32 The domain separator hash.\"}},\"enableModule(address)\":{\"details\":\"This can only be done via a Safe transaction.\",\"params\":{\"module\":\"Module to be enabled.\"}},\"execTransactionFromModule(address,uint256,bytes,uint8)\":{\"details\":\"Allows a Module to execute a Safe transaction without any further confirmations.\",\"params\":{\"data\":\"Data payload of module transaction.\",\"operation\":\"Operation type of module transaction.\",\"to\":\"Destination address of module transaction.\",\"value\":\"Ether value of module transaction.\"}},\"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)\":{\"params\":{\"data\":\"Data payload of module transaction.\",\"operation\":\"Operation type of module transaction.\",\"to\":\"Destination address of module transaction.\",\"value\":\"Ether value of module transaction.\"},\"returns\":{\"returnData\":\"Data returned by the call.\",\"success\":\"Boolean flag indicating if the call succeeded.\"}},\"getModulesPaginated(address,uint256)\":{\"details\":\"Returns array of modules.\",\"params\":{\"pageSize\":\"Maximum number of modules that should be returned.\",\"start\":\"Start of the page.\"},\"returns\":{\"array\":\"Array of modules.\",\"next\":\"Start of the next page.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"enableModule(address)\":{\"notice\":\"Enables the module `module` for the Safe.\"},\"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)\":{\"notice\":\"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ISafe.sol\":\"ISafe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ISafe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\ninterface ISafe {\\n    /**\\n     * @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     */\\n    function execTransactionFromModule(address to, uint256 value, bytes memory data, uint8 operation) external returns (bool success);\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     * @return returnData Data returned by the call.\\n     */\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        uint8 operation\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    /**\\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param data That should be signed (this is passed to an external validator contract)\\n     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory data, bytes memory signatures) external view;\\n\\n    /**\\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\\n     * @return bytes32 The domain separator hash.\\n     */\\n    function domainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns array of modules.\\n     * @param start Start of the page.\\n     * @param pageSize Maximum number of modules that should be returned.\\n     * @return array Array of modules.\\n     * @return next Start of the next page.\\n     */\\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next);\\n\\n    /**\\n     * @notice Enables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param module Module to be enabled.\\n     */\\n    function enableModule(address module) external;\\n}\",\"keccak256\":\"0x73f7021ec20a1c2c117b493ab14a5a81da0bf90de1c4a82e8647d7ce2889f273\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"enableModule(address)":{"notice":"Enables the module `module` for the Safe."},"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)":{"notice":"Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data"}},"version":1}}},"contracts/safe/AccountEntry.sol":{"AccountEntry":{"abi":[{"inputs":[],"name":"InvalidEntryPoint","type":"error"},{"inputs":[],"name":"SUPPORTED_ENTRYPOINT","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"SUPPORTED_ENTRYPOINT()":"137e051e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidEntryPoint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPPORTED_ENTRYPOINT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidEntryPoint()\":[{\"notice\":\"Reverted if attempting to execute userOp from invalid sender\"}]},\"kind\":\"user\",\"methods\":{\"SUPPORTED_ENTRYPOINT()\":{\"notice\":\"The address of the EntryPoint contract supported by this module.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/safe/AccountEntry.sol\":\"AccountEntry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/handler/HandlerContext.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Handler Context - Allows the fallback handler to extract addition context from the calldata\\n * @dev The fallback manager appends the following context to the calldata:\\n *      1. Fallback manager caller address (non-padded)\\n * based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/f8cc8b844a9f92f63dc55aa581f7d643a1bc5ac1/contracts/metatx/ERC2771Context.sol\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract HandlerContext {\\n    /**\\n     * @notice Allows fetching the original caller address.\\n     * @dev This is only reliable in combination with a FallbackManager that supports this (e.g. Safe contract >=1.3.0).\\n     *      When using this functionality make sure that the linked _manager (aka msg.sender) supports this.\\n     *      This function does not rely on a trusted forwarder. Use the returned value only to\\n     *      check information against the calling manager.\\n     * @return sender Original caller address.\\n     */\\n    function _msgSender() internal pure returns (address sender) {\\n        // The assembly code is more direct than the Solidity version using `abi.decode`.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the FallbackManager address\\n     * @return Fallback manager address\\n     */\\n    function _manager() internal view returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\",\"keccak256\":\"0xce6da4c47f8691a4fcf07d20266b1a23ea757e49eedbfcf929f535f3f6e8072d\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title OmnaccountErrors\\n * @author KDon.eth\\n * @notice Standard interface for Omnaccount error codes\\n */\\ninterface OmnaccountErrors {\\n\\n    /// @notice Reverted if attempting to execute userOp from invalid sender\\n    error InvalidEntryPoint();\\n\\n    /// @notice Reverted if address is not bridge\\n    error InvalidBridge();\\n\\n}\\n\",\"keccak256\":\"0xea67993b77254e03e68796040b455f18ea7d786624e2ba7a56d82afb447613fd\",\"license\":\"UNLICENSED\"},\"contracts/safe/AccountEntry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {HandlerContext} from \\\"@safe-global/safe-contracts/contracts/handler/HandlerContext.sol\\\";\\nimport {OmnaccountErrors as Errors} from \\\"../interfaces/Errors.sol\\\";\\n\\nabstract contract AccountEntry is HandlerContext {\\n    /**\\n     * @notice The address of the EntryPoint contract supported by this module.\\n     */\\n    address public immutable SUPPORTED_ENTRYPOINT;\\n\\n    constructor(address entryPoint) {\\n        if (entryPoint == address(0x0)) revert Errors.InvalidEntryPoint();\\n\\n        SUPPORTED_ENTRYPOINT = entryPoint;\\n    }\\n\\n    /// @notice Checks if a given address is a valid entry point for the abstract account.\\n    function _isSupportedEntryPoint(address entryPoint) internal virtual view returns (bool) {\\n        return entryPoint == SUPPORTED_ENTRYPOINT;\\n    }\\n\\n    /**\\n     * @notice Validates the call is initiated by a valid entry point.\\n     */\\n    modifier onlySupportedEntryPoint() {\\n        if (!_isSupportedEntryPoint(_msgSender())) revert Errors.InvalidEntryPoint();\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xbec48468f165e08a3fa5d787e9b8f60f9b3f094eb760cc33f7b2feb47235bd39\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"InvalidEntryPoint()":[{"notice":"Reverted if attempting to execute userOp from invalid sender"}]},"kind":"user","methods":{"SUPPORTED_ENTRYPOINT()":{"notice":"The address of the EntryPoint contract supported by this module."}},"version":1}}},"contracts/safe/BaseModule.sol":{"BaseModule":{"abi":[{"inputs":[],"name":"InvalidEntryPoint","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TokensBridged","type":"event"},{"inputs":[],"name":"SUPPORTED_ENTRYPOINT","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"bridgeFallbacks","outputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes4","name":"selector","type":"bytes4"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint96","name":"addressIndex","type":"uint96"},{"internalType":"uint96","name":"amountIndex","type":"uint96"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation","name":"userOp","type":"tuple"},{"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"internalType":"uint256","name":"missingAccountFunds","type":"uint256"}],"name":"validateUserOp","outputs":[{"internalType":"uint256","name":"validationData","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":{"details":"Must validate caller is the entryPoint.      Must validate the signature and nonce","params":{"missingAccountFunds":"missing funds on the account's deposit in the entrypoint.      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.      The excess is left as a deposit in the entrypoint, for future calls.      can be withdrawn anytime using \"entryPoint.withdrawTo()\"      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.","userOp":"the operation that is about to be executed.","userOpHash":"hash of the user's request data. can be used as the basis for signature."},"returns":{"validationData":"packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,         otherwise, an address of an \"authorizer\" contract.      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"      <6-byte> validAfter - first timestamp this operation is valid      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.      Note that the validation code cannot use block.timestamp (or block.number) directly."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"SUPPORTED_ENTRYPOINT()":"137e051e","bridgeFallbacks(address)":"fea0f489","validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":"3a871cdd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidEntryPoint\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensBridged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SUPPORTED_ENTRYPOINT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"bridgeFallbacks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint96\",\"name\":\"addressIndex\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"amountIndex\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"missingAccountFunds\",\"type\":\"uint256\"}],\"name\":\"validateUserOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"details\":\"Must validate caller is the entryPoint.      Must validate the signature and nonce\",\"params\":{\"missingAccountFunds\":\"missing funds on the account's deposit in the entrypoint.      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.      The excess is left as a deposit in the entrypoint, for future calls.      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\",\"userOp\":\"the operation that is about to be executed.\",\"userOpHash\":\"hash of the user's request data. can be used as the basis for signature.\"},\"returns\":{\"validationData\":\"packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,         otherwise, an address of an \\\"authorizer\\\" contract.      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"      <6-byte> validAfter - first timestamp this operation is valid      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.      Note that the validation code cannot use block.timestamp (or block.number) directly.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidEntryPoint()\":[{\"notice\":\"Reverted if attempting to execute userOp from invalid sender\"}]},\"kind\":\"user\",\"methods\":{\"SUPPORTED_ENTRYPOINT()\":{\"notice\":\"The address of the EntryPoint contract supported by this module.\"},\"bridgeFallbacks(address)\":{\"notice\":\"Maps token address to default fallback behavior\"},\"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"notice\":\"Validate user's signature and nonce the entryPoint will make the call to the recipient only if this validation call returns successfully. signature failure should be reported by returning SIG_VALIDATION_FAILED (1). This allows making a \\\"simulation call\\\" without a valid signature Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/safe/BaseModule.sol\":\"BaseModule\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@account-abstraction/contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\\n\",\"keccak256\":\"0x591c87519f7155d1909210276b77925ab2722a99b7b5d5649aecc36ebbdb045a\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\ninterface IAccount {\\n\\n    /**\\n     * Validate user's signature and nonce\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\\n     * This allows making a \\\"simulation call\\\" without a valid signature\\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\\n     *\\n     * @dev Must validate caller is the entryPoint.\\n     *      Must validate the signature and nonce\\n     * @param userOp the operation that is about to be executed.\\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\n    external returns (uint256 validationData);\\n}\\n\",\"keccak256\":\"0x556a0e5980de18e90b115553ed502408155ba35f58642823010d9288047bc418\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n/**\\n * User Operation struct\\n * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x61374003361059087fdcf17967a7bba052badeaf5c7f0ae689166f8aafd3a45c\",\"license\":\"GPL-3.0\"},\"@safe-global/safe-contracts/contracts/handler/HandlerContext.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Handler Context - Allows the fallback handler to extract addition context from the calldata\\n * @dev The fallback manager appends the following context to the calldata:\\n *      1. Fallback manager caller address (non-padded)\\n * based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/f8cc8b844a9f92f63dc55aa581f7d643a1bc5ac1/contracts/metatx/ERC2771Context.sol\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract HandlerContext {\\n    /**\\n     * @notice Allows fetching the original caller address.\\n     * @dev This is only reliable in combination with a FallbackManager that supports this (e.g. Safe contract >=1.3.0).\\n     *      When using this functionality make sure that the linked _manager (aka msg.sender) supports this.\\n     *      This function does not rely on a trusted forwarder. Use the returned value only to\\n     *      check information against the calling manager.\\n     * @return sender Original caller address.\\n     */\\n    function _msgSender() internal pure returns (address sender) {\\n        // The assembly code is more direct than the Solidity version using `abi.decode`.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the FallbackManager address\\n     * @return Fallback manager address\\n     */\\n    function _manager() internal view returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\",\"keccak256\":\"0xce6da4c47f8691a4fcf07d20266b1a23ea757e49eedbfcf929f535f3f6e8072d\",\"license\":\"LGPL-3.0-only\"},\"contracts/bridge/BridgeReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title BridgeReceiver\\n * @author KDon.eth\\n * @notice General abstract contract for bridge receivers to implement to standardize internal hooks\\n */\\nabstract contract BridgeReceiver {\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Bridge Hook\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /**\\n     * @dev Internal hook called on implementing contracts to execute logic\\n     * @param token Address of tokens received\\n     * @param amount Number of tokens received\\n     * @param message Unauthenticated calldata to parse, validate then execute\\n     */\\n    function _afterTokensBridged(\\n        address token,\\n        uint256 amount,\\n        bytes memory message\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0xce0300d95cac232e61e164a6815a6d7724087633f04d4a6ac34f0dd3a94d09d0\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title OmnaccountErrors\\n * @author KDon.eth\\n * @notice Standard interface for Omnaccount error codes\\n */\\ninterface OmnaccountErrors {\\n\\n    /// @notice Reverted if attempting to execute userOp from invalid sender\\n    error InvalidEntryPoint();\\n\\n    /// @notice Reverted if address is not bridge\\n    error InvalidBridge();\\n\\n}\\n\",\"keccak256\":\"0xea67993b77254e03e68796040b455f18ea7d786624e2ba7a56d82afb447613fd\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISafe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\ninterface ISafe {\\n    /**\\n     * @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     */\\n    function execTransactionFromModule(address to, uint256 value, bytes memory data, uint8 operation) external returns (bool success);\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     * @return returnData Data returned by the call.\\n     */\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        uint8 operation\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    /**\\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param data That should be signed (this is passed to an external validator contract)\\n     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory data, bytes memory signatures) external view;\\n\\n    /**\\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\\n     * @return bytes32 The domain separator hash.\\n     */\\n    function domainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns array of modules.\\n     * @param start Start of the page.\\n     * @param pageSize Maximum number of modules that should be returned.\\n     * @return array Array of modules.\\n     * @return next Start of the next page.\\n     */\\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next);\\n\\n    /**\\n     * @notice Enables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param module Module to be enabled.\\n     */\\n    function enableModule(address module) external;\\n}\",\"keccak256\":\"0x73f7021ec20a1c2c117b493ab14a5a81da0bf90de1c4a82e8647d7ce2889f273\",\"license\":\"UNLICENSED\"},\"contracts/safe/AccountEntry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {HandlerContext} from \\\"@safe-global/safe-contracts/contracts/handler/HandlerContext.sol\\\";\\nimport {OmnaccountErrors as Errors} from \\\"../interfaces/Errors.sol\\\";\\n\\nabstract contract AccountEntry is HandlerContext {\\n    /**\\n     * @notice The address of the EntryPoint contract supported by this module.\\n     */\\n    address public immutable SUPPORTED_ENTRYPOINT;\\n\\n    constructor(address entryPoint) {\\n        if (entryPoint == address(0x0)) revert Errors.InvalidEntryPoint();\\n\\n        SUPPORTED_ENTRYPOINT = entryPoint;\\n    }\\n\\n    /// @notice Checks if a given address is a valid entry point for the abstract account.\\n    function _isSupportedEntryPoint(address entryPoint) internal virtual view returns (bool) {\\n        return entryPoint == SUPPORTED_ENTRYPOINT;\\n    }\\n\\n    /**\\n     * @notice Validates the call is initiated by a valid entry point.\\n     */\\n    modifier onlySupportedEntryPoint() {\\n        if (!_isSupportedEntryPoint(_msgSender())) revert Errors.InvalidEntryPoint();\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xbec48468f165e08a3fa5d787e9b8f60f9b3f094eb760cc33f7b2feb47235bd39\",\"license\":\"UNLICENSED\"},\"contracts/safe/BaseModule.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {IAccount} from \\\"@account-abstraction/contracts/interfaces/IAccount.sol\\\";\\nimport {BridgeReceiver} from \\\"../bridge/BridgeReceiver.sol\\\";\\nimport {OmnaccountErrors as Errors} from \\\"../interfaces/Errors.sol\\\";\\nimport {AccountEntry} from \\\"./AccountEntry.sol\\\";\\nimport {ISafe} from \\\"../interfaces/ISafe.sol\\\";\\nimport {UserOperation} from \\\"@account-abstraction/contracts/interfaces/UserOperation.sol\\\";\\nimport {_packValidationData} from \\\"@account-abstraction/contracts/core/Helpers.sol\\\";\\n\\n\\nabstract contract BaseModule is IAccount, BridgeReceiver, AccountEntry {\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Structs\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    struct BridgeFallback {\\n        address target;\\n        bytes4 selector;\\n        bytes data;\\n        uint96 addressIndex;\\n        uint96 amountIndex;\\n    }\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Events\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    event TokensBridged(address indexed token, uint256 amount);\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Fields\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /// @notice Maps token address to default fallback behavior\\n    mapping(address token => BridgeFallback fallbackData) public bridgeFallbacks;\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Constructor\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    constructor(address entryPoint) AccountEntry(entryPoint) {\\n        // no-op\\n    }\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Bridge Receiver Implementation\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    function _afterTokensBridged(\\n        address token,\\n        uint256 amount,\\n        bytes memory message\\n    ) internal override virtual {\\n        // 1. Validate the message\\n\\n        // 2. Execute the message's calldata\\n\\n        emit TokensBridged(token, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x7297f5cf160e4682ea9e1f3691d20a2600b2be5ccd7c940751dd95e00c63956c\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4319,"contract":"contracts/safe/BaseModule.sol:BaseModule","label":"bridgeFallbacks","offset":0,"slot":"0","type":"t_mapping(t_address,t_struct(BridgeFallback)4307_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes4":{"encoding":"inplace","label":"bytes4","numberOfBytes":"4"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_address,t_struct(BridgeFallback)4307_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct BaseModule.BridgeFallback)","numberOfBytes":"32","value":"t_struct(BridgeFallback)4307_storage"},"t_struct(BridgeFallback)4307_storage":{"encoding":"inplace","label":"struct BaseModule.BridgeFallback","members":[{"astId":4298,"contract":"contracts/safe/BaseModule.sol:BaseModule","label":"target","offset":0,"slot":"0","type":"t_address"},{"astId":4300,"contract":"contracts/safe/BaseModule.sol:BaseModule","label":"selector","offset":20,"slot":"0","type":"t_bytes4"},{"astId":4302,"contract":"contracts/safe/BaseModule.sol:BaseModule","label":"data","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":4304,"contract":"contracts/safe/BaseModule.sol:BaseModule","label":"addressIndex","offset":0,"slot":"2","type":"t_uint96"},{"astId":4306,"contract":"contracts/safe/BaseModule.sol:BaseModule","label":"amountIndex","offset":12,"slot":"2","type":"t_uint96"}],"numberOfBytes":"96"},"t_uint96":{"encoding":"inplace","label":"uint96","numberOfBytes":"12"}}},"userdoc":{"errors":{"InvalidEntryPoint()":[{"notice":"Reverted if attempting to execute userOp from invalid sender"}]},"kind":"user","methods":{"SUPPORTED_ENTRYPOINT()":{"notice":"The address of the EntryPoint contract supported by this module."},"bridgeFallbacks(address)":{"notice":"Maps token address to default fallback behavior"},"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":{"notice":"Validate user's signature and nonce the entryPoint will make the call to the recipient only if this validation call returns successfully. signature failure should be reported by returning SIG_VALIDATION_FAILED (1). This allows making a \"simulation call\" without a valid signature Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure."}},"version":1}}}}}}