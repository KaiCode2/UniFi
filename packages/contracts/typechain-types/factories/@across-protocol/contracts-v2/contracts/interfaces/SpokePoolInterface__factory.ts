/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  SpokePoolInterface,
  SpokePoolInterfaceInterface,
} from "../../../../../@across-protocol/contracts-v2/contracts/interfaces/SpokePoolInterface";

const _abi = [
  {
    inputs: [],
    name: "NotEOA",
    type: "error",
  },
  {
    inputs: [],
    name: "chainId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "address",
        name: "originToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "destinationChainId",
        type: "uint256",
      },
      {
        internalType: "int64",
        name: "relayerFeePct",
        type: "int64",
      },
      {
        internalType: "uint32",
        name: "quoteTimestamp",
        type: "uint32",
      },
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "maxCount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "depositor",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "address",
        name: "originToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "destinationChainId",
        type: "uint256",
      },
      {
        internalType: "int64",
        name: "relayerFeePct",
        type: "int64",
      },
      {
        internalType: "uint32",
        name: "quoteTimestamp",
        type: "uint32",
      },
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "maxCount",
        type: "uint256",
      },
    ],
    name: "depositFor",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "address",
        name: "originToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "destinationChainId",
        type: "uint256",
      },
      {
        internalType: "int64",
        name: "relayerFeePct",
        type: "int64",
      },
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "maxCount",
        type: "uint256",
      },
    ],
    name: "depositNow",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rootBundleId",
        type: "uint256",
      },
    ],
    name: "emergencyDeleteRootBundle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "rootBundleId",
        type: "uint32",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "amountToReturn",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "chainId",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "refundAmounts",
            type: "uint256[]",
          },
          {
            internalType: "uint32",
            name: "leafId",
            type: "uint32",
          },
          {
            internalType: "address",
            name: "l2TokenAddress",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "refundAddresses",
            type: "address[]",
          },
        ],
        internalType: "struct SpokePoolInterface.RelayerRefundLeaf",
        name: "relayerRefundLeaf",
        type: "tuple",
      },
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
    ],
    name: "executeRelayerRefundLeaf",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "depositor",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "address",
        name: "destinationToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "originChainId",
        type: "uint256",
      },
      {
        internalType: "int64",
        name: "realizedLpFeePct",
        type: "int64",
      },
      {
        internalType: "int64",
        name: "relayerFeePct",
        type: "int64",
      },
      {
        internalType: "uint32",
        name: "depositId",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "rootBundleId",
        type: "uint32",
      },
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
      {
        internalType: "int256",
        name: "payoutAdjustment",
        type: "int256",
      },
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
    ],
    name: "executeSlowRelayLeaf",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "depositor",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "address",
        name: "destinationToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxTokensToSend",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "repaymentChainId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "originChainId",
        type: "uint256",
      },
      {
        internalType: "int64",
        name: "realizedLpFeePct",
        type: "int64",
      },
      {
        internalType: "int64",
        name: "relayerFeePct",
        type: "int64",
      },
      {
        internalType: "uint32",
        name: "depositId",
        type: "uint32",
      },
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "maxCount",
        type: "uint256",
      },
    ],
    name: "fillRelay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "depositor",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "address",
        name: "updatedRecipient",
        type: "address",
      },
      {
        internalType: "address",
        name: "destinationToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxTokensToSend",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "repaymentChainId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "originChainId",
        type: "uint256",
      },
      {
        internalType: "int64",
        name: "realizedLpFeePct",
        type: "int64",
      },
      {
        internalType: "int64",
        name: "relayerFeePct",
        type: "int64",
      },
      {
        internalType: "int64",
        name: "updatedRelayerFeePct",
        type: "int64",
      },
      {
        internalType: "uint32",
        name: "depositId",
        type: "uint32",
      },
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "updatedMessage",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "depositorSignature",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "maxCount",
        type: "uint256",
      },
    ],
    name: "fillRelayWithUpdatedDeposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "pause",
        type: "bool",
      },
    ],
    name: "pauseDeposits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "pause",
        type: "bool",
      },
    ],
    name: "pauseFills",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "relayerRefundRoot",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "slowRelayRoot",
        type: "bytes32",
      },
    ],
    name: "relayRootBundle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newCrossDomainAdmin",
        type: "address",
      },
    ],
    name: "setCrossDomainAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "originToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "destinationChainId",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "enable",
        type: "bool",
      },
    ],
    name: "setEnableRoute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newHubPool",
        type: "address",
      },
    ],
    name: "setHubPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "depositor",
        type: "address",
      },
      {
        internalType: "int64",
        name: "updatedRelayerFeePct",
        type: "int64",
      },
      {
        internalType: "uint32",
        name: "depositId",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "updatedRecipient",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "updatedMessage",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "depositorSignature",
        type: "bytes",
      },
    ],
    name: "speedUpDeposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class SpokePoolInterface__factory {
  static readonly abi = _abi;
  static createInterface(): SpokePoolInterfaceInterface {
    return new Interface(_abi) as SpokePoolInterfaceInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SpokePoolInterface {
    return new Contract(address, _abi, runner) as unknown as SpokePoolInterface;
  }
}
