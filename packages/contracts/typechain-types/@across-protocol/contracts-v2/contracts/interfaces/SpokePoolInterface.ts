/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace SpokePoolInterface {
  export type RelayerRefundLeafStruct = {
    amountToReturn: BigNumberish;
    chainId: BigNumberish;
    refundAmounts: BigNumberish[];
    leafId: BigNumberish;
    l2TokenAddress: AddressLike;
    refundAddresses: AddressLike[];
  };

  export type RelayerRefundLeafStructOutput = [
    amountToReturn: bigint,
    chainId: bigint,
    refundAmounts: bigint[],
    leafId: bigint,
    l2TokenAddress: string,
    refundAddresses: string[]
  ] & {
    amountToReturn: bigint;
    chainId: bigint;
    refundAmounts: bigint[];
    leafId: bigint;
    l2TokenAddress: string;
    refundAddresses: string[];
  };
}

export interface SpokePoolInterfaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "chainId"
      | "deposit"
      | "depositFor"
      | "depositNow"
      | "emergencyDeleteRootBundle"
      | "executeRelayerRefundLeaf"
      | "executeSlowRelayLeaf"
      | "fillRelay"
      | "fillRelayWithUpdatedDeposit"
      | "pauseDeposits"
      | "pauseFills"
      | "relayRootBundle"
      | "setCrossDomainAdmin"
      | "setEnableRoute"
      | "setHubPool"
      | "speedUpDeposit"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNow",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyDeleteRootBundle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRelayerRefundLeaf",
    values: [
      BigNumberish,
      SpokePoolInterface.RelayerRefundLeafStruct,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSlowRelayLeaf",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillRelay",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillRelayWithUpdatedDeposit",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseDeposits",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "pauseFills", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "relayRootBundle",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCrossDomainAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnableRoute",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setHubPool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "speedUpDeposit",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositNow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyDeleteRootBundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRelayerRefundLeaf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSlowRelayLeaf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fillRelay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fillRelayWithUpdatedDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pauseFills", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "relayRootBundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCrossDomainAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnableRoute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHubPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "speedUpDeposit",
    data: BytesLike
  ): Result;
}

export interface SpokePoolInterface extends BaseContract {
  connect(runner?: ContractRunner | null): SpokePoolInterface;
  waitForDeployment(): Promise<this>;

  interface: SpokePoolInterfaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  chainId: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<
    [
      recipient: AddressLike,
      originToken: AddressLike,
      amount: BigNumberish,
      destinationChainId: BigNumberish,
      relayerFeePct: BigNumberish,
      quoteTimestamp: BigNumberish,
      message: BytesLike,
      maxCount: BigNumberish
    ],
    [void],
    "payable"
  >;

  depositFor: TypedContractMethod<
    [
      depositor: AddressLike,
      recipient: AddressLike,
      originToken: AddressLike,
      amount: BigNumberish,
      destinationChainId: BigNumberish,
      relayerFeePct: BigNumberish,
      quoteTimestamp: BigNumberish,
      message: BytesLike,
      maxCount: BigNumberish
    ],
    [void],
    "payable"
  >;

  depositNow: TypedContractMethod<
    [
      recipient: AddressLike,
      originToken: AddressLike,
      amount: BigNumberish,
      destinationChainId: BigNumberish,
      relayerFeePct: BigNumberish,
      message: BytesLike,
      maxCount: BigNumberish
    ],
    [void],
    "payable"
  >;

  emergencyDeleteRootBundle: TypedContractMethod<
    [rootBundleId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeRelayerRefundLeaf: TypedContractMethod<
    [
      rootBundleId: BigNumberish,
      relayerRefundLeaf: SpokePoolInterface.RelayerRefundLeafStruct,
      proof: BytesLike[]
    ],
    [void],
    "payable"
  >;

  executeSlowRelayLeaf: TypedContractMethod<
    [
      depositor: AddressLike,
      recipient: AddressLike,
      destinationToken: AddressLike,
      amount: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      rootBundleId: BigNumberish,
      message: BytesLike,
      payoutAdjustment: BigNumberish,
      proof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  fillRelay: TypedContractMethod<
    [
      depositor: AddressLike,
      recipient: AddressLike,
      destinationToken: AddressLike,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      message: BytesLike,
      maxCount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  fillRelayWithUpdatedDeposit: TypedContractMethod<
    [
      depositor: AddressLike,
      recipient: AddressLike,
      updatedRecipient: AddressLike,
      destinationToken: AddressLike,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      updatedRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      message: BytesLike,
      updatedMessage: BytesLike,
      depositorSignature: BytesLike,
      maxCount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  pauseDeposits: TypedContractMethod<[pause: boolean], [void], "nonpayable">;

  pauseFills: TypedContractMethod<[pause: boolean], [void], "nonpayable">;

  relayRootBundle: TypedContractMethod<
    [relayerRefundRoot: BytesLike, slowRelayRoot: BytesLike],
    [void],
    "nonpayable"
  >;

  setCrossDomainAdmin: TypedContractMethod<
    [newCrossDomainAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  setEnableRoute: TypedContractMethod<
    [
      originToken: AddressLike,
      destinationChainId: BigNumberish,
      enable: boolean
    ],
    [void],
    "nonpayable"
  >;

  setHubPool: TypedContractMethod<
    [newHubPool: AddressLike],
    [void],
    "nonpayable"
  >;

  speedUpDeposit: TypedContractMethod<
    [
      depositor: AddressLike,
      updatedRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      updatedRecipient: AddressLike,
      updatedMessage: BytesLike,
      depositorSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "chainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      originToken: AddressLike,
      amount: BigNumberish,
      destinationChainId: BigNumberish,
      relayerFeePct: BigNumberish,
      quoteTimestamp: BigNumberish,
      message: BytesLike,
      maxCount: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositFor"
  ): TypedContractMethod<
    [
      depositor: AddressLike,
      recipient: AddressLike,
      originToken: AddressLike,
      amount: BigNumberish,
      destinationChainId: BigNumberish,
      relayerFeePct: BigNumberish,
      quoteTimestamp: BigNumberish,
      message: BytesLike,
      maxCount: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositNow"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      originToken: AddressLike,
      amount: BigNumberish,
      destinationChainId: BigNumberish,
      relayerFeePct: BigNumberish,
      message: BytesLike,
      maxCount: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "emergencyDeleteRootBundle"
  ): TypedContractMethod<[rootBundleId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeRelayerRefundLeaf"
  ): TypedContractMethod<
    [
      rootBundleId: BigNumberish,
      relayerRefundLeaf: SpokePoolInterface.RelayerRefundLeafStruct,
      proof: BytesLike[]
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeSlowRelayLeaf"
  ): TypedContractMethod<
    [
      depositor: AddressLike,
      recipient: AddressLike,
      destinationToken: AddressLike,
      amount: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      rootBundleId: BigNumberish,
      message: BytesLike,
      payoutAdjustment: BigNumberish,
      proof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fillRelay"
  ): TypedContractMethod<
    [
      depositor: AddressLike,
      recipient: AddressLike,
      destinationToken: AddressLike,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      message: BytesLike,
      maxCount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fillRelayWithUpdatedDeposit"
  ): TypedContractMethod<
    [
      depositor: AddressLike,
      recipient: AddressLike,
      updatedRecipient: AddressLike,
      destinationToken: AddressLike,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      updatedRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      message: BytesLike,
      updatedMessage: BytesLike,
      depositorSignature: BytesLike,
      maxCount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pauseDeposits"
  ): TypedContractMethod<[pause: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pauseFills"
  ): TypedContractMethod<[pause: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "relayRootBundle"
  ): TypedContractMethod<
    [relayerRefundRoot: BytesLike, slowRelayRoot: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCrossDomainAdmin"
  ): TypedContractMethod<
    [newCrossDomainAdmin: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEnableRoute"
  ): TypedContractMethod<
    [
      originToken: AddressLike,
      destinationChainId: BigNumberish,
      enable: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setHubPool"
  ): TypedContractMethod<[newHubPool: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "speedUpDeposit"
  ): TypedContractMethod<
    [
      depositor: AddressLike,
      updatedRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      updatedRecipient: AddressLike,
      updatedMessage: BytesLike,
      depositorSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
