/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace V3SpokePoolInterface {
  export type V3RelayExecutionEventInfoStruct = {
    updatedRecipient: AddressLike;
    updatedMessage: BytesLike;
    updatedOutputAmount: BigNumberish;
    fillType: BigNumberish;
  };

  export type V3RelayExecutionEventInfoStructOutput = [
    updatedRecipient: string,
    updatedMessage: string,
    updatedOutputAmount: bigint,
    fillType: bigint
  ] & {
    updatedRecipient: string;
    updatedMessage: string;
    updatedOutputAmount: bigint;
    fillType: bigint;
  };

  export type V3RelayDataStruct = {
    depositor: AddressLike;
    recipient: AddressLike;
    exclusiveRelayer: AddressLike;
    inputToken: AddressLike;
    outputToken: AddressLike;
    inputAmount: BigNumberish;
    outputAmount: BigNumberish;
    originChainId: BigNumberish;
    depositId: BigNumberish;
    fillDeadline: BigNumberish;
    exclusivityDeadline: BigNumberish;
    message: BytesLike;
  };

  export type V3RelayDataStructOutput = [
    depositor: string,
    recipient: string,
    exclusiveRelayer: string,
    inputToken: string,
    outputToken: string,
    inputAmount: bigint,
    outputAmount: bigint,
    originChainId: bigint,
    depositId: bigint,
    fillDeadline: bigint,
    exclusivityDeadline: bigint,
    message: string
  ] & {
    depositor: string;
    recipient: string;
    exclusiveRelayer: string;
    inputToken: string;
    outputToken: string;
    inputAmount: bigint;
    outputAmount: bigint;
    originChainId: bigint;
    depositId: bigint;
    fillDeadline: bigint;
    exclusivityDeadline: bigint;
    message: string;
  };

  export type V3SlowFillStruct = {
    relayData: V3SpokePoolInterface.V3RelayDataStruct;
    chainId: BigNumberish;
    updatedOutputAmount: BigNumberish;
  };

  export type V3SlowFillStructOutput = [
    relayData: V3SpokePoolInterface.V3RelayDataStructOutput,
    chainId: bigint,
    updatedOutputAmount: bigint
  ] & {
    relayData: V3SpokePoolInterface.V3RelayDataStructOutput;
    chainId: bigint;
    updatedOutputAmount: bigint;
  };
}

export interface V3SpokePoolInterfaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "depositV3"
      | "executeV3SlowRelayLeaf"
      | "fillV3Relay"
      | "fillV3RelayWithUpdatedDeposit"
      | "requestV3SlowFill"
      | "speedUpV3Deposit"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FilledV3Relay"
      | "RequestedSpeedUpV3Deposit"
      | "RequestedV3SlowFill"
      | "V3FundsDeposited"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "depositV3",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeV3SlowRelayLeaf",
    values: [V3SpokePoolInterface.V3SlowFillStruct, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fillV3Relay",
    values: [V3SpokePoolInterface.V3RelayDataStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fillV3RelayWithUpdatedDeposit",
    values: [
      V3SpokePoolInterface.V3RelayDataStruct,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requestV3SlowFill",
    values: [V3SpokePoolInterface.V3RelayDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "speedUpV3Deposit",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "depositV3", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeV3SlowRelayLeaf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillV3Relay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillV3RelayWithUpdatedDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestV3SlowFill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "speedUpV3Deposit",
    data: BytesLike
  ): Result;
}

export namespace FilledV3RelayEvent {
  export type InputTuple = [
    inputToken: AddressLike,
    outputToken: AddressLike,
    inputAmount: BigNumberish,
    outputAmount: BigNumberish,
    repaymentChainId: BigNumberish,
    originChainId: BigNumberish,
    depositId: BigNumberish,
    fillDeadline: BigNumberish,
    exclusivityDeadline: BigNumberish,
    exclusiveRelayer: AddressLike,
    relayer: AddressLike,
    depositor: AddressLike,
    recipient: AddressLike,
    message: BytesLike,
    relayExecutionInfo: V3SpokePoolInterface.V3RelayExecutionEventInfoStruct
  ];
  export type OutputTuple = [
    inputToken: string,
    outputToken: string,
    inputAmount: bigint,
    outputAmount: bigint,
    repaymentChainId: bigint,
    originChainId: bigint,
    depositId: bigint,
    fillDeadline: bigint,
    exclusivityDeadline: bigint,
    exclusiveRelayer: string,
    relayer: string,
    depositor: string,
    recipient: string,
    message: string,
    relayExecutionInfo: V3SpokePoolInterface.V3RelayExecutionEventInfoStructOutput
  ];
  export interface OutputObject {
    inputToken: string;
    outputToken: string;
    inputAmount: bigint;
    outputAmount: bigint;
    repaymentChainId: bigint;
    originChainId: bigint;
    depositId: bigint;
    fillDeadline: bigint;
    exclusivityDeadline: bigint;
    exclusiveRelayer: string;
    relayer: string;
    depositor: string;
    recipient: string;
    message: string;
    relayExecutionInfo: V3SpokePoolInterface.V3RelayExecutionEventInfoStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestedSpeedUpV3DepositEvent {
  export type InputTuple = [
    updatedOutputAmount: BigNumberish,
    depositId: BigNumberish,
    depositor: AddressLike,
    updatedRecipient: AddressLike,
    updatedMessage: BytesLike,
    depositorSignature: BytesLike
  ];
  export type OutputTuple = [
    updatedOutputAmount: bigint,
    depositId: bigint,
    depositor: string,
    updatedRecipient: string,
    updatedMessage: string,
    depositorSignature: string
  ];
  export interface OutputObject {
    updatedOutputAmount: bigint;
    depositId: bigint;
    depositor: string;
    updatedRecipient: string;
    updatedMessage: string;
    depositorSignature: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestedV3SlowFillEvent {
  export type InputTuple = [
    inputToken: AddressLike,
    outputToken: AddressLike,
    inputAmount: BigNumberish,
    outputAmount: BigNumberish,
    originChainId: BigNumberish,
    depositId: BigNumberish,
    fillDeadline: BigNumberish,
    exclusivityDeadline: BigNumberish,
    exclusiveRelayer: AddressLike,
    depositor: AddressLike,
    recipient: AddressLike,
    message: BytesLike
  ];
  export type OutputTuple = [
    inputToken: string,
    outputToken: string,
    inputAmount: bigint,
    outputAmount: bigint,
    originChainId: bigint,
    depositId: bigint,
    fillDeadline: bigint,
    exclusivityDeadline: bigint,
    exclusiveRelayer: string,
    depositor: string,
    recipient: string,
    message: string
  ];
  export interface OutputObject {
    inputToken: string;
    outputToken: string;
    inputAmount: bigint;
    outputAmount: bigint;
    originChainId: bigint;
    depositId: bigint;
    fillDeadline: bigint;
    exclusivityDeadline: bigint;
    exclusiveRelayer: string;
    depositor: string;
    recipient: string;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace V3FundsDepositedEvent {
  export type InputTuple = [
    inputToken: AddressLike,
    outputToken: AddressLike,
    inputAmount: BigNumberish,
    outputAmount: BigNumberish,
    destinationChainId: BigNumberish,
    depositId: BigNumberish,
    quoteTimestamp: BigNumberish,
    fillDeadline: BigNumberish,
    exclusivityDeadline: BigNumberish,
    depositor: AddressLike,
    recipient: AddressLike,
    exclusiveRelayer: AddressLike,
    message: BytesLike
  ];
  export type OutputTuple = [
    inputToken: string,
    outputToken: string,
    inputAmount: bigint,
    outputAmount: bigint,
    destinationChainId: bigint,
    depositId: bigint,
    quoteTimestamp: bigint,
    fillDeadline: bigint,
    exclusivityDeadline: bigint,
    depositor: string,
    recipient: string,
    exclusiveRelayer: string,
    message: string
  ];
  export interface OutputObject {
    inputToken: string;
    outputToken: string;
    inputAmount: bigint;
    outputAmount: bigint;
    destinationChainId: bigint;
    depositId: bigint;
    quoteTimestamp: bigint;
    fillDeadline: bigint;
    exclusivityDeadline: bigint;
    depositor: string;
    recipient: string;
    exclusiveRelayer: string;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface V3SpokePoolInterface extends BaseContract {
  connect(runner?: ContractRunner | null): V3SpokePoolInterface;
  waitForDeployment(): Promise<this>;

  interface: V3SpokePoolInterfaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  depositV3: TypedContractMethod<
    [
      depositor: AddressLike,
      recipient: AddressLike,
      inputToken: AddressLike,
      outputToken: AddressLike,
      inputAmount: BigNumberish,
      outputAmount: BigNumberish,
      destinationChainId: BigNumberish,
      exclusiveRelayer: AddressLike,
      quoteTimestamp: BigNumberish,
      fillDeadline: BigNumberish,
      exclusivityDeadline: BigNumberish,
      message: BytesLike
    ],
    [void],
    "payable"
  >;

  executeV3SlowRelayLeaf: TypedContractMethod<
    [
      slowFillLeaf: V3SpokePoolInterface.V3SlowFillStruct,
      rootBundleId: BigNumberish,
      proof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  fillV3Relay: TypedContractMethod<
    [
      relayData: V3SpokePoolInterface.V3RelayDataStruct,
      repaymentChainId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  fillV3RelayWithUpdatedDeposit: TypedContractMethod<
    [
      relayData: V3SpokePoolInterface.V3RelayDataStruct,
      repaymentChainId: BigNumberish,
      updatedOutputAmount: BigNumberish,
      updatedRecipient: AddressLike,
      updatedMessage: BytesLike,
      depositorSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  requestV3SlowFill: TypedContractMethod<
    [relayData: V3SpokePoolInterface.V3RelayDataStruct],
    [void],
    "nonpayable"
  >;

  speedUpV3Deposit: TypedContractMethod<
    [
      depositor: AddressLike,
      depositId: BigNumberish,
      updatedOutputAmount: BigNumberish,
      updatedRecipient: AddressLike,
      updatedMessage: BytesLike,
      depositorSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "depositV3"
  ): TypedContractMethod<
    [
      depositor: AddressLike,
      recipient: AddressLike,
      inputToken: AddressLike,
      outputToken: AddressLike,
      inputAmount: BigNumberish,
      outputAmount: BigNumberish,
      destinationChainId: BigNumberish,
      exclusiveRelayer: AddressLike,
      quoteTimestamp: BigNumberish,
      fillDeadline: BigNumberish,
      exclusivityDeadline: BigNumberish,
      message: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeV3SlowRelayLeaf"
  ): TypedContractMethod<
    [
      slowFillLeaf: V3SpokePoolInterface.V3SlowFillStruct,
      rootBundleId: BigNumberish,
      proof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fillV3Relay"
  ): TypedContractMethod<
    [
      relayData: V3SpokePoolInterface.V3RelayDataStruct,
      repaymentChainId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fillV3RelayWithUpdatedDeposit"
  ): TypedContractMethod<
    [
      relayData: V3SpokePoolInterface.V3RelayDataStruct,
      repaymentChainId: BigNumberish,
      updatedOutputAmount: BigNumberish,
      updatedRecipient: AddressLike,
      updatedMessage: BytesLike,
      depositorSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestV3SlowFill"
  ): TypedContractMethod<
    [relayData: V3SpokePoolInterface.V3RelayDataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "speedUpV3Deposit"
  ): TypedContractMethod<
    [
      depositor: AddressLike,
      depositId: BigNumberish,
      updatedOutputAmount: BigNumberish,
      updatedRecipient: AddressLike,
      updatedMessage: BytesLike,
      depositorSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "FilledV3Relay"
  ): TypedContractEvent<
    FilledV3RelayEvent.InputTuple,
    FilledV3RelayEvent.OutputTuple,
    FilledV3RelayEvent.OutputObject
  >;
  getEvent(
    key: "RequestedSpeedUpV3Deposit"
  ): TypedContractEvent<
    RequestedSpeedUpV3DepositEvent.InputTuple,
    RequestedSpeedUpV3DepositEvent.OutputTuple,
    RequestedSpeedUpV3DepositEvent.OutputObject
  >;
  getEvent(
    key: "RequestedV3SlowFill"
  ): TypedContractEvent<
    RequestedV3SlowFillEvent.InputTuple,
    RequestedV3SlowFillEvent.OutputTuple,
    RequestedV3SlowFillEvent.OutputObject
  >;
  getEvent(
    key: "V3FundsDeposited"
  ): TypedContractEvent<
    V3FundsDepositedEvent.InputTuple,
    V3FundsDepositedEvent.OutputTuple,
    V3FundsDepositedEvent.OutputObject
  >;

  filters: {
    "FilledV3Relay(address,address,uint256,uint256,uint256,uint256,uint32,uint32,uint32,address,address,address,address,bytes,tuple)": TypedContractEvent<
      FilledV3RelayEvent.InputTuple,
      FilledV3RelayEvent.OutputTuple,
      FilledV3RelayEvent.OutputObject
    >;
    FilledV3Relay: TypedContractEvent<
      FilledV3RelayEvent.InputTuple,
      FilledV3RelayEvent.OutputTuple,
      FilledV3RelayEvent.OutputObject
    >;

    "RequestedSpeedUpV3Deposit(uint256,uint32,address,address,bytes,bytes)": TypedContractEvent<
      RequestedSpeedUpV3DepositEvent.InputTuple,
      RequestedSpeedUpV3DepositEvent.OutputTuple,
      RequestedSpeedUpV3DepositEvent.OutputObject
    >;
    RequestedSpeedUpV3Deposit: TypedContractEvent<
      RequestedSpeedUpV3DepositEvent.InputTuple,
      RequestedSpeedUpV3DepositEvent.OutputTuple,
      RequestedSpeedUpV3DepositEvent.OutputObject
    >;

    "RequestedV3SlowFill(address,address,uint256,uint256,uint256,uint32,uint32,uint32,address,address,address,bytes)": TypedContractEvent<
      RequestedV3SlowFillEvent.InputTuple,
      RequestedV3SlowFillEvent.OutputTuple,
      RequestedV3SlowFillEvent.OutputObject
    >;
    RequestedV3SlowFill: TypedContractEvent<
      RequestedV3SlowFillEvent.InputTuple,
      RequestedV3SlowFillEvent.OutputTuple,
      RequestedV3SlowFillEvent.OutputObject
    >;

    "V3FundsDeposited(address,address,uint256,uint256,uint256,uint32,uint32,uint32,uint32,address,address,address,bytes)": TypedContractEvent<
      V3FundsDepositedEvent.InputTuple,
      V3FundsDepositedEvent.OutputTuple,
      V3FundsDepositedEvent.OutputObject
    >;
    V3FundsDeposited: TypedContractEvent<
      V3FundsDepositedEvent.InputTuple,
      V3FundsDepositedEvent.OutputTuple,
      V3FundsDepositedEvent.OutputObject
    >;
  };
}
