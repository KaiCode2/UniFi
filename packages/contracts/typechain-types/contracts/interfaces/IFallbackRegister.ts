/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace TokenFallback {
  export type FallbackDataStruct = {
    target: AddressLike;
    selector: BytesLike;
    tokenAddressIndex: BigNumberish;
    amountIndex: BigNumberish;
    vaultAddressIndex: BigNumberish;
    data: BytesLike;
  };

  export type FallbackDataStructOutput = [
    target: string,
    selector: string,
    tokenAddressIndex: bigint,
    amountIndex: bigint,
    vaultAddressIndex: bigint,
    data: string
  ] & {
    target: string;
    selector: string;
    tokenAddressIndex: bigint;
    amountIndex: bigint;
    vaultAddressIndex: bigint;
    data: string;
  };
}

export interface IFallbackRegisterInterface extends Interface {
  getFunction(
    nameOrSignature: "getFallback" | "removeTokenFallback" | "setTokenFallback"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getFallback",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTokenFallback",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenFallback",
    values: [AddressLike, TokenFallback.FallbackDataStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "getFallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTokenFallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenFallback",
    data: BytesLike
  ): Result;
}

export interface IFallbackRegister extends BaseContract {
  connect(runner?: ContractRunner | null): IFallbackRegister;
  waitForDeployment(): Promise<this>;

  interface: IFallbackRegisterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFallback: TypedContractMethod<
    [safe: AddressLike, token: AddressLike],
    [
      [boolean, TokenFallback.FallbackDataStructOutput] & {
        exists: boolean;
        fallbackData: TokenFallback.FallbackDataStructOutput;
      }
    ],
    "view"
  >;

  removeTokenFallback: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  setTokenFallback: TypedContractMethod<
    [token: AddressLike, fallbackData: TokenFallback.FallbackDataStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getFallback"
  ): TypedContractMethod<
    [safe: AddressLike, token: AddressLike],
    [
      [boolean, TokenFallback.FallbackDataStructOutput] & {
        exists: boolean;
        fallbackData: TokenFallback.FallbackDataStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeTokenFallback"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenFallback"
  ): TypedContractMethod<
    [token: AddressLike, fallbackData: TokenFallback.FallbackDataStruct],
    [void],
    "nonpayable"
  >;

  filters: {};
}
